
ADC_STM32F030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c4  080030c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030c4  080030c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c4  080030c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080030d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080030d8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dee  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b95  00000000  00000000  00028e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed67  00000000  00000000  0002b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b04b  00000000  00000000  0003a6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056fc3  00000000  00000000  00045732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009c6f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c6c  00000000  00000000  0009c748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800305c 	.word	0x0800305c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800305c 	.word	0x0800305c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af02      	add	r7, sp, #8
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800022c:	200f      	movs	r0, #15
 800022e:	183b      	adds	r3, r7, r0
 8000230:	1dfa      	adds	r2, r7, #7
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	210f      	movs	r1, #15
 8000236:	438a      	bics	r2, r1
 8000238:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	011a      	lsls	r2, r3, #4
 8000240:	240e      	movs	r4, #14
 8000242:	193b      	adds	r3, r7, r4
 8000244:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000246:	183b      	adds	r3, r7, r0
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	220c      	movs	r2, #12
 800024c:	4313      	orrs	r3, r2
 800024e:	b2da      	uxtb	r2, r3
 8000250:	2108      	movs	r1, #8
 8000252:	187b      	adds	r3, r7, r1
 8000254:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	183b      	adds	r3, r7, r0
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2208      	movs	r2, #8
 800025c:	4313      	orrs	r3, r2
 800025e:	b2da      	uxtb	r2, r3
 8000260:	187b      	adds	r3, r7, r1
 8000262:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000264:	193b      	adds	r3, r7, r4
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	220c      	movs	r2, #12
 800026a:	4313      	orrs	r3, r2
 800026c:	b2da      	uxtb	r2, r3
 800026e:	187b      	adds	r3, r7, r1
 8000270:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000272:	193b      	adds	r3, r7, r4
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2208      	movs	r2, #8
 8000278:	4313      	orrs	r3, r2
 800027a:	b2da      	uxtb	r2, r3
 800027c:	187b      	adds	r3, r7, r1
 800027e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000280:	187a      	adds	r2, r7, r1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <lcd_send_cmd+0x78>)
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2304      	movs	r3, #4
 800028a:	214e      	movs	r1, #78	; 0x4e
 800028c:	f001 fe88 	bl	8001fa0 <HAL_I2C_Master_Transmit>
}
 8000290:	46c0      	nop			; (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b005      	add	sp, #20
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	2000002c 	.word	0x2000002c

0800029c <lcd_send_data>:

void lcd_send_data (char data)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b087      	sub	sp, #28
 80002a0:	af02      	add	r7, sp, #8
 80002a2:	0002      	movs	r2, r0
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002a8:	200f      	movs	r0, #15
 80002aa:	183b      	adds	r3, r7, r0
 80002ac:	1dfa      	adds	r2, r7, #7
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	210f      	movs	r1, #15
 80002b2:	438a      	bics	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	011a      	lsls	r2, r3, #4
 80002bc:	240e      	movs	r4, #14
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002c2:	183b      	adds	r3, r7, r0
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	220d      	movs	r2, #13
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	2108      	movs	r1, #8
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002d2:	183b      	adds	r3, r7, r0
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2209      	movs	r2, #9
 80002d8:	4313      	orrs	r3, r2
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	220d      	movs	r2, #13
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2209      	movs	r2, #9
 80002f4:	4313      	orrs	r3, r2
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002fc:	187a      	adds	r2, r7, r1
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <lcd_send_data+0x78>)
 8000300:	2364      	movs	r3, #100	; 0x64
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2304      	movs	r3, #4
 8000306:	214e      	movs	r1, #78	; 0x4e
 8000308:	f001 fe4a 	bl	8001fa0 <HAL_I2C_Master_Transmit>
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b005      	add	sp, #20
 8000312:	bd90      	pop	{r4, r7, pc}
 8000314:	2000002c 	.word	0x2000002c

08000318 <lcd_clear>:

void lcd_clear (void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800031e:	2080      	movs	r0, #128	; 0x80
 8000320:	f7ff ff7e 	bl	8000220 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e005      	b.n	8000336 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800032a:	2020      	movs	r0, #32
 800032c:	f7ff ffb6 	bl	800029c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3301      	adds	r3, #1
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b45      	cmp	r3, #69	; 0x45
 800033a:	ddf6      	ble.n	800032a <lcd_clear+0x12>
	}
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}

08000346 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	b082      	sub	sp, #8
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d003      	beq.n	800035e <lcd_put_cur+0x18>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d005      	beq.n	8000368 <lcd_put_cur+0x22>
 800035c:	e009      	b.n	8000372 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	4313      	orrs	r3, r2
 8000364:	603b      	str	r3, [r7, #0]
            break;
 8000366:	e004      	b.n	8000372 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	22c0      	movs	r2, #192	; 0xc0
 800036c:	4313      	orrs	r3, r2
 800036e:	603b      	str	r3, [r7, #0]
            break;
 8000370:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	0018      	movs	r0, r3
 8000378:	f7ff ff52 	bl	8000220 <lcd_send_cmd>
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b002      	add	sp, #8
 8000382:	bd80      	pop	{r7, pc}

08000384 <lcd_init>:


void lcd_init (void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000388:	2032      	movs	r0, #50	; 0x32
 800038a:	f000 fc97 	bl	8000cbc <HAL_Delay>
	lcd_send_cmd (0x30);
 800038e:	2030      	movs	r0, #48	; 0x30
 8000390:	f7ff ff46 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000394:	2005      	movs	r0, #5
 8000396:	f000 fc91 	bl	8000cbc <HAL_Delay>
	lcd_send_cmd (0x30);
 800039a:	2030      	movs	r0, #48	; 0x30
 800039c:	f7ff ff40 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80003a0:	2001      	movs	r0, #1
 80003a2:	f000 fc8b 	bl	8000cbc <HAL_Delay>
	lcd_send_cmd (0x30);
 80003a6:	2030      	movs	r0, #48	; 0x30
 80003a8:	f7ff ff3a 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 80003ac:	200a      	movs	r0, #10
 80003ae:	f000 fc85 	bl	8000cbc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80003b2:	2020      	movs	r0, #32
 80003b4:	f7ff ff34 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 80003b8:	200a      	movs	r0, #10
 80003ba:	f000 fc7f 	bl	8000cbc <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003be:	2028      	movs	r0, #40	; 0x28
 80003c0:	f7ff ff2e 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f000 fc79 	bl	8000cbc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003ca:	2008      	movs	r0, #8
 80003cc:	f7ff ff28 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fc73 	bl	8000cbc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff ff22 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f000 fc6d 	bl	8000cbc <HAL_Delay>
	HAL_Delay(1);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f000 fc6a 	bl	8000cbc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80003e8:	2006      	movs	r0, #6
 80003ea:	f7ff ff19 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003ee:	2001      	movs	r0, #1
 80003f0:	f000 fc64 	bl	8000cbc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80003f4:	200c      	movs	r0, #12
 80003f6:	f7ff ff13 	bl	8000220 <lcd_send_cmd>
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000408:	e006      	b.n	8000418 <lcd_send_string+0x18>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	0018      	movs	r0, r3
 8000414:	f7ff ff42 	bl	800029c <lcd_send_data>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d1f4      	bne.n	800040a <lcd_send_string+0xa>
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000430:	f000 fbe0 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000434:	f000 f940 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000438:	f000 fa64 	bl	8000904 <MX_GPIO_Init>
  MX_DMA_Init();
 800043c:	f000 fa44 	bl	80008c8 <MX_DMA_Init>
  MX_ADC_Init();
 8000440:	f000 f9a6 	bl	8000790 <MX_ADC_Init>
  MX_I2C1_Init();
 8000444:	f000 fa00 	bl	8000848 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //lcd_send_cmd(cmd)
  	HAL_Delay(500);
 8000448:	23fa      	movs	r3, #250	; 0xfa
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fc35 	bl	8000cbc <HAL_Delay>
  	lcd_init();
 8000452:	f7ff ff97 	bl	8000384 <lcd_init>
  	HAL_Delay(500);
 8000456:	23fa      	movs	r3, #250	; 0xfa
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fc2e 	bl	8000cbc <HAL_Delay>
  	lcd_clear();
 8000460:	f7ff ff5a 	bl	8000318 <lcd_clear>
  	HAL_Delay(500);
 8000464:	23fa      	movs	r3, #250	; 0xfa
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	0018      	movs	r0, r3
 800046a:	f000 fc27 	bl	8000cbc <HAL_Delay>
  	lcd_put_cur(0, 0);
 800046e:	2100      	movs	r1, #0
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff ff68 	bl	8000346 <lcd_put_cur>
  	HAL_Delay(500);
 8000476:	23fa      	movs	r3, #250	; 0xfa
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fc1e 	bl	8000cbc <HAL_Delay>
  	lcd_send_string("Setting up");
 8000480:	4b82      	ldr	r3, [pc, #520]	; (800068c <main+0x260>)
 8000482:	0018      	movs	r0, r3
 8000484:	f7ff ffbc 	bl	8000400 <lcd_send_string>
  	HAL_Delay(500);
 8000488:	23fa      	movs	r3, #250	; 0xfa
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fc15 	bl	8000cbc <HAL_Delay>
  	lcd_put_cur(1, 0);
 8000492:	2100      	movs	r1, #0
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff ff56 	bl	8000346 <lcd_put_cur>
  	lcd_send_string("The display");
 800049a:	4b7d      	ldr	r3, [pc, #500]	; (8000690 <main+0x264>)
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff ffaf 	bl	8000400 <lcd_send_string>
  	HAL_Delay(2000);
 80004a2:	23fa      	movs	r3, #250	; 0xfa
 80004a4:	00db      	lsls	r3, r3, #3
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fc08 	bl	8000cbc <HAL_Delay>
  	lcd_clear();
 80004ac:	f7ff ff34 	bl	8000318 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc); // Start the ADC
 80004b0:	4b78      	ldr	r3, [pc, #480]	; (8000694 <main+0x268>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fd66 	bl	8000f84 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 100); //Wait for the conversion to complete
 80004b8:	4b76      	ldr	r3, [pc, #472]	; (8000694 <main+0x268>)
 80004ba:	2164      	movs	r1, #100	; 0x64
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fdf5 	bl	80010ac <HAL_ADC_PollForConversion>
	  adc_val = HAL_ADC_GetValue(&hadc); //Get the value
 80004c2:	4b74      	ldr	r3, [pc, #464]	; (8000694 <main+0x268>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fe83 	bl	80011d0 <HAL_ADC_GetValue>
 80004ca:	0003      	movs	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	4b72      	ldr	r3, [pc, #456]	; (8000698 <main+0x26c>)
 80004d0:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc); //Stop the ADC
 80004d2:	4b70      	ldr	r3, [pc, #448]	; (8000694 <main+0x268>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fda9 	bl	800102c <HAL_ADC_Stop>
	  HAL_Delay(500); //Wait 500mS before starting the ADC again
 80004da:	23fa      	movs	r3, #250	; 0xfa
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fbec 	bl	8000cbc <HAL_Delay>


	  d0 = adc_val & 0xF;
 80004e4:	4b6c      	ldr	r3, [pc, #432]	; (8000698 <main+0x26c>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	220f      	movs	r2, #15
 80004ec:	4013      	ands	r3, r2
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b6a      	ldr	r3, [pc, #424]	; (800069c <main+0x270>)
 80004f2:	701a      	strb	r2, [r3, #0]
	  d1 = (adc_val>>4) & 0xF;
 80004f4:	4b68      	ldr	r3, [pc, #416]	; (8000698 <main+0x26c>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	091b      	lsrs	r3, r3, #4
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	220f      	movs	r2, #15
 8000500:	4013      	ands	r3, r2
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b66      	ldr	r3, [pc, #408]	; (80006a0 <main+0x274>)
 8000506:	701a      	strb	r2, [r3, #0]
	  d2 = (adc_val>>8) & 0xF;
 8000508:	4b63      	ldr	r3, [pc, #396]	; (8000698 <main+0x26c>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	0a1b      	lsrs	r3, r3, #8
 800050e:	b29b      	uxth	r3, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	220f      	movs	r2, #15
 8000514:	4013      	ands	r3, r2
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b62      	ldr	r3, [pc, #392]	; (80006a4 <main+0x278>)
 800051a:	701a      	strb	r2, [r3, #0]
	  d3 = (adc_val>>12) & 0xF;
 800051c:	4b5e      	ldr	r3, [pc, #376]	; (8000698 <main+0x26c>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	0b1b      	lsrs	r3, r3, #12
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	220f      	movs	r2, #15
 8000528:	4013      	ands	r3, r2
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b5e      	ldr	r3, [pc, #376]	; (80006a8 <main+0x27c>)
 800052e:	701a      	strb	r2, [r3, #0]

	  d0 = 6*(d3 + d2 + d1) + d0;
 8000530:	4b5d      	ldr	r3, [pc, #372]	; (80006a8 <main+0x27c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	4b5b      	ldr	r3, [pc, #364]	; (80006a4 <main+0x278>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	18d3      	adds	r3, r2, r3
 800053c:	4a58      	ldr	r2, [pc, #352]	; (80006a0 <main+0x274>)
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	189b      	adds	r3, r3, r2
 8000542:	b2db      	uxtb	r3, r3
 8000544:	1c1a      	adds	r2, r3, #0
 8000546:	1c13      	adds	r3, r2, #0
 8000548:	18db      	adds	r3, r3, r3
 800054a:	189b      	adds	r3, r3, r2
 800054c:	18db      	adds	r3, r3, r3
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b52      	ldr	r3, [pc, #328]	; (800069c <main+0x270>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	18d3      	adds	r3, r2, r3
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b50      	ldr	r3, [pc, #320]	; (800069c <main+0x270>)
 800055a:	701a      	strb	r2, [r3, #0]
	  q = d0 / 10;
 800055c:	4b4f      	ldr	r3, [pc, #316]	; (800069c <main+0x270>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	210a      	movs	r1, #10
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff fdd0 	bl	8000108 <__udivsi3>
 8000568:	0003      	movs	r3, r0
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b4f      	ldr	r3, [pc, #316]	; (80006ac <main+0x280>)
 800056e:	701a      	strb	r2, [r3, #0]
	  d0 = d0 % 10;
 8000570:	4b4a      	ldr	r3, [pc, #296]	; (800069c <main+0x270>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	210a      	movs	r1, #10
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff fe4c 	bl	8000214 <__aeabi_uidivmod>
 800057c:	000b      	movs	r3, r1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b46      	ldr	r3, [pc, #280]	; (800069c <main+0x270>)
 8000582:	701a      	strb	r2, [r3, #0]

	  d1 = q + 9*d3 + 5*d2 + d1;
 8000584:	4b48      	ldr	r3, [pc, #288]	; (80006a8 <main+0x27c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	1c1a      	adds	r2, r3, #0
 800058a:	00d2      	lsls	r2, r2, #3
 800058c:	18d3      	adds	r3, r2, r3
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b44      	ldr	r3, [pc, #272]	; (80006a4 <main+0x278>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	1c19      	adds	r1, r3, #0
 8000596:	0089      	lsls	r1, r1, #2
 8000598:	18cb      	adds	r3, r1, r3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b42      	ldr	r3, [pc, #264]	; (80006ac <main+0x280>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	18d3      	adds	r3, r2, r3
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b3d      	ldr	r3, [pc, #244]	; (80006a0 <main+0x274>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	18d3      	adds	r3, r2, r3
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b3b      	ldr	r3, [pc, #236]	; (80006a0 <main+0x274>)
 80005b2:	701a      	strb	r2, [r3, #0]
	  q = d1 / 10;
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <main+0x274>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	210a      	movs	r1, #10
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fda4 	bl	8000108 <__udivsi3>
 80005c0:	0003      	movs	r3, r0
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b39      	ldr	r3, [pc, #228]	; (80006ac <main+0x280>)
 80005c6:	701a      	strb	r2, [r3, #0]
	  d1 = d1 % 10;
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <main+0x274>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	210a      	movs	r1, #10
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff fe20 	bl	8000214 <__aeabi_uidivmod>
 80005d4:	000b      	movs	r3, r1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <main+0x274>)
 80005da:	701a      	strb	r2, [r3, #0]

	  d2 = q + 2*d2;
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <main+0x278>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	18db      	adds	r3, r3, r3
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b31      	ldr	r3, [pc, #196]	; (80006ac <main+0x280>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <main+0x278>)
 80005ee:	701a      	strb	r2, [r3, #0]
	  q = d2 / 10;
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <main+0x278>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	210a      	movs	r1, #10
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff fd86 	bl	8000108 <__udivsi3>
 80005fc:	0003      	movs	r3, r0
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <main+0x280>)
 8000602:	701a      	strb	r2, [r3, #0]
	  d2 = d2 % 10;
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <main+0x278>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	210a      	movs	r1, #10
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff fe02 	bl	8000214 <__aeabi_uidivmod>
 8000610:	000b      	movs	r3, r1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <main+0x278>)
 8000616:	701a      	strb	r2, [r3, #0]

	  d3 = q + 4*d3;
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <main+0x27c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <main+0x280>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	18d3      	adds	r3, r2, r3
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <main+0x27c>)
 800062a:	701a      	strb	r2, [r3, #0]
	  q = d3 / 10;
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <main+0x27c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	210a      	movs	r1, #10
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff fd68 	bl	8000108 <__udivsi3>
 8000638:	0003      	movs	r3, r0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <main+0x280>)
 800063e:	701a      	strb	r2, [r3, #0]
	  d3 = d3 % 10;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <main+0x27c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	210a      	movs	r1, #10
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff fde4 	bl	8000214 <__aeabi_uidivmod>
 800064c:	000b      	movs	r3, r1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <main+0x27c>)
 8000652:	701a      	strb	r2, [r3, #0]

	  d4 = q;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <main+0x280>)
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <main+0x284>)
 800065a:	701a      	strb	r2, [r3, #0]


	  HAL_Delay(500);
 800065c:	23fa      	movs	r3, #250	; 0xfa
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fb2b 	bl	8000cbc <HAL_Delay>
	  lcd_init();
 8000666:	f7ff fe8d 	bl	8000384 <lcd_init>
	  HAL_Delay(500);
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fb24 	bl	8000cbc <HAL_Delay>
	  lcd_clear();
 8000674:	f7ff fe50 	bl	8000318 <lcd_clear>
	  HAL_Delay(500);
 8000678:	23fa      	movs	r3, #250	; 0xfa
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fb1d 	bl	8000cbc <HAL_Delay>
	  lcd_send_string("Testing");
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <main+0x288>)
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff febb 	bl	8000400 <lcd_send_string>
	  HAL_ADC_Start(&hadc); // Start the ADC
 800068a:	e711      	b.n	80004b0 <main+0x84>
 800068c:	08003074 	.word	0x08003074
 8000690:	08003080 	.word	0x08003080
 8000694:	200000c0 	.word	0x200000c0
 8000698:	20000028 	.word	0x20000028
 800069c:	2000007a 	.word	0x2000007a
 80006a0:	20000078 	.word	0x20000078
 80006a4:	20000079 	.word	0x20000079
 80006a8:	20000101 	.word	0x20000101
 80006ac:	20000100 	.word	0x20000100
 80006b0:	2000007b 	.word	0x2000007b
 80006b4:	0800308c 	.word	0x0800308c

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b095      	sub	sp, #84	; 0x54
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	2420      	movs	r4, #32
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2330      	movs	r3, #48	; 0x30
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f002 fcbf 	bl	800304c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ce:	2310      	movs	r3, #16
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	0018      	movs	r0, r3
 80006d4:	2310      	movs	r3, #16
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f002 fcb7 	bl	800304c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006de:	003b      	movs	r3, r7
 80006e0:	0018      	movs	r0, r3
 80006e2:	2310      	movs	r3, #16
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f002 fcb0 	bl	800304c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80006ec:	0021      	movs	r1, r4
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2213      	movs	r2, #19
 80006f2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2201      	movs	r2, #1
 8000704:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2210      	movs	r2, #16
 800070a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2210      	movs	r2, #16
 8000710:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2202      	movs	r2, #2
 8000716:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0252      	lsls	r2, r2, #9
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	0352      	lsls	r2, r2, #13
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	187b      	adds	r3, r7, r1
 8000730:	0018      	movs	r0, r3
 8000732:	f001 ff4d 	bl	80025d0 <HAL_RCC_OscConfig>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800073a:	f000 f909 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	2110      	movs	r1, #16
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2207      	movs	r2, #7
 8000744:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2202      	movs	r2, #2
 800074a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2101      	movs	r1, #1
 800075c:	0018      	movs	r0, r3
 800075e:	f002 fa51 	bl	8002c04 <HAL_RCC_ClockConfig>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000766:	f000 f8f3 	bl	8000950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800076a:	003b      	movs	r3, r7
 800076c:	2220      	movs	r2, #32
 800076e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000770:	003b      	movs	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000776:	003b      	movs	r3, r7
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fb75 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000782:	f000 f8e5 	bl	8000950 <Error_Handler>
  }
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b015      	add	sp, #84	; 0x54
 800078c:	bd90      	pop	{r4, r7, pc}
	...

08000790 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	0018      	movs	r0, r3
 800079a:	230c      	movs	r3, #12
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f002 fc54 	bl	800304c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_ADC_Init+0xb0>)
 80007a6:	4a27      	ldr	r2, [pc, #156]	; (8000844 <MX_ADC_Init+0xb4>)
 80007a8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <MX_ADC_Init+0xb0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_ADC_Init+0xb0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_ADC_Init+0xb0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_ADC_Init+0xb0>)
 80007be:	2201      	movs	r2, #1
 80007c0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_ADC_Init+0xb0>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ADC_Init+0xb0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_ADC_Init+0xb0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ADC_Init+0xb0>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC_Init+0xb0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_ADC_Init+0xb0>)
 80007e2:	22c2      	movs	r2, #194	; 0xc2
 80007e4:	32ff      	adds	r2, #255	; 0xff
 80007e6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_ADC_Init+0xb0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC_Init+0xb0>)
 80007f0:	2224      	movs	r2, #36	; 0x24
 80007f2:	2100      	movs	r1, #0
 80007f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_ADC_Init+0xb0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_ADC_Init+0xb0>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fa80 	bl	8000d04 <HAL_ADC_Init>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000808:	f000 f8a2 	bl	8000950 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	0152      	lsls	r2, r2, #5
 8000818:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	0552      	lsls	r2, r2, #21
 8000820:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000822:	1d3a      	adds	r2, r7, #4
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_ADC_Init+0xb0>)
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fdad 	bl	8001388 <HAL_ADC_ConfigChannel>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000832:	f000 f88d 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b004      	add	sp, #16
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	200000c0 	.word	0x200000c0
 8000844:	40012400 	.word	0x40012400

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_I2C1_Init+0x74>)
 8000884:	0018      	movs	r0, r3
 8000886:	f001 faf5 	bl	8001e74 <HAL_I2C_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 f85f 	bl	8000950 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_I2C1_Init+0x74>)
 8000894:	2100      	movs	r1, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f001 fe02 	bl	80024a0 <HAL_I2CEx_ConfigAnalogFilter>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 f856 	bl	8000950 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <MX_I2C1_Init+0x74>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fe45 	bl	8002538 <HAL_I2CEx_ConfigDigitalFilter>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 f84d 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000002c 	.word	0x2000002c
 80008c0:	40005400 	.word	0x40005400
 80008c4:	2000090e 	.word	0x2000090e

080008c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_DMA_Init+0x38>)
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_DMA_Init+0x38>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	430a      	orrs	r2, r1
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_DMA_Init+0x38>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	2201      	movs	r2, #1
 80008e0:	4013      	ands	r3, r2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2009      	movs	r0, #9
 80008ec:	f001 f81a 	bl	8001924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f0:	2009      	movs	r0, #9
 80008f2:	f001 f82c 	bl	800194e <HAL_NVIC_EnableIRQ>

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40021000 	.word	0x40021000

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_GPIO_Init+0x48>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0x48>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	03c9      	lsls	r1, r1, #15
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_GPIO_Init+0x48>)
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	03db      	lsls	r3, r3, #15
 8000920:	4013      	ands	r3, r2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_GPIO_Init+0x48>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_GPIO_Init+0x48>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	0289      	lsls	r1, r1, #10
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <MX_GPIO_Init+0x48>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	029b      	lsls	r3, r3, #10
 800093c:	4013      	ands	r3, r2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	699a      	ldr	r2, [r3, #24]
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	2101      	movs	r1, #1
 800096a:	430a      	orrs	r2, r1
 800096c:	619a      	str	r2, [r3, #24]
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	2201      	movs	r2, #1
 8000974:	4013      	ands	r3, r2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	69da      	ldr	r2, [r3, #28]
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0549      	lsls	r1, r1, #21
 8000984:	430a      	orrs	r2, r1
 8000986:	61da      	str	r2, [r3, #28]
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_MspInit+0x44>)
 800098a:	69da      	ldr	r2, [r3, #28]
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	055b      	lsls	r3, r3, #21
 8000990:	4013      	ands	r3, r2
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b08b      	sub	sp, #44	; 0x2c
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	2414      	movs	r4, #20
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	0018      	movs	r0, r3
 80009b2:	2314      	movs	r3, #20
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f002 fb48 	bl	800304c <memset>
  if(hadc->Instance==ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a31      	ldr	r2, [pc, #196]	; (8000a88 <HAL_ADC_MspInit+0xe4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d15b      	bne.n	8000a7e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 80009c8:	699a      	ldr	r2, [r3, #24]
 80009ca:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	0089      	lsls	r1, r1, #2
 80009d0:	430a      	orrs	r2, r1
 80009d2:	619a      	str	r2, [r3, #24]
 80009d4:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 80009d6:	699a      	ldr	r2, [r3, #24]
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 80009e4:	695a      	ldr	r2, [r3, #20]
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	0289      	lsls	r1, r1, #10
 80009ec:	430a      	orrs	r2, r1
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 80009f2:	695a      	ldr	r2, [r3, #20]
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	029b      	lsls	r3, r3, #10
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2202      	movs	r2, #2
 8000a02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2203      	movs	r2, #3
 8000a08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8000a10:	193a      	adds	r2, r7, r4
 8000a12:	2390      	movs	r3, #144	; 0x90
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 f8bb 	bl	8001b94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <HAL_ADC_MspInit+0xf0>)
 8000a22:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	0092      	lsls	r2, r2, #2
 8000a3c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a48:	2220      	movs	r2, #32
 8000a4a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 ff97 	bl	8001988 <HAL_DMA_Init>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000a5e:	f7ff ff77 	bl	8000950 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a66:	631a      	str	r2, [r3, #48]	; 0x30
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	200c      	movs	r0, #12
 8000a74:	f000 ff56 	bl	8001924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000a78:	200c      	movs	r0, #12
 8000a7a:	f000 ff68 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b00b      	add	sp, #44	; 0x2c
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40012400 	.word	0x40012400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	2000007c 	.word	0x2000007c
 8000a94:	40020008 	.word	0x40020008

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b08b      	sub	sp, #44	; 0x2c
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	2414      	movs	r4, #20
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	2314      	movs	r3, #20
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f002 face 	bl	800304c <memset>
  if(hi2c->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <HAL_I2C_MspInit+0x94>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d133      	bne.n	8000b22 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <HAL_I2C_MspInit+0x98>)
 8000abc:	695a      	ldr	r2, [r3, #20]
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_I2C_MspInit+0x98>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0289      	lsls	r1, r1, #10
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_I2C_MspInit+0x98>)
 8000aca:	695a      	ldr	r2, [r3, #20]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	029b      	lsls	r3, r3, #10
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	22c0      	movs	r2, #192	; 0xc0
 8000ada:	00d2      	lsls	r2, r2, #3
 8000adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ade:	0021      	movs	r1, r4
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2212      	movs	r2, #18
 8000ae4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2201      	movs	r2, #1
 8000aea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2203      	movs	r2, #3
 8000af0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2204      	movs	r2, #4
 8000af6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	187a      	adds	r2, r7, r1
 8000afa:	2390      	movs	r3, #144	; 0x90
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 f847 	bl	8001b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_I2C_MspInit+0x98>)
 8000b08:	69da      	ldr	r2, [r3, #28]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_I2C_MspInit+0x98>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	0389      	lsls	r1, r1, #14
 8000b10:	430a      	orrs	r2, r1
 8000b12:	61da      	str	r2, [r3, #28]
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_I2C_MspInit+0x98>)
 8000b16:	69da      	ldr	r2, [r3, #28]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	039b      	lsls	r3, r3, #14
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b00b      	add	sp, #44	; 0x2c
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f894 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <DMA1_Channel1_IRQHandler+0x14>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 ff54 	bl	8001a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	2000007c 	.word	0x2000007c

08000b7c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <ADC1_IRQHandler+0x14>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 fb30 	bl	80011e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	200000c0 	.word	0x200000c0

08000b94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ba2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	; (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bca:	f7ff ffe3 	bl	8000b94 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bce:	f002 fa19 	bl	8003004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff fc2b 	bl	800042c <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   r0, =_estack
 8000bd8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be4:	080030cc 	.word	0x080030cc
  ldr r2, =_sbss
 8000be8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bec:	20000108 	.word	0x20000108

08000bf0 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <DMA1_Channel2_3_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_Init+0x24>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_Init+0x24>)
 8000bfe:	2110      	movs	r1, #16
 8000c00:	430a      	orrs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 f809 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0a:	f7ff fea7 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_InitTick+0x5c>)
 8000c26:	681c      	ldr	r4, [r3, #0]
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_InitTick+0x60>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	23fa      	movs	r3, #250	; 0xfa
 8000c30:	0098      	lsls	r0, r3, #2
 8000c32:	f7ff fa69 	bl	8000108 <__udivsi3>
 8000c36:	0003      	movs	r3, r0
 8000c38:	0019      	movs	r1, r3
 8000c3a:	0020      	movs	r0, r4
 8000c3c:	f7ff fa64 	bl	8000108 <__udivsi3>
 8000c40:	0003      	movs	r3, r0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fe93 	bl	800196e <HAL_SYSTICK_Config>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e00f      	b.n	8000c70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d80b      	bhi.n	8000c6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	425b      	negs	r3, r3
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 fe60 	bl	8001924 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_InitTick+0x64>)
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b003      	add	sp, #12
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	18d2      	adds	r2, r2, r3
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000104 	.word	0x20000104

08000ca8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	20000104 	.word	0x20000104

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff fff0 	bl	8000ca8 <HAL_GetTick>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	001a      	movs	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	189b      	adds	r3, r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	f7ff ffe0 	bl	8000ca8 <HAL_GetTick>
 8000ce8:	0002      	movs	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000008 	.word	0x20000008

08000d04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e125      	b.n	8000f6e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10a      	bne.n	8000d40 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2234      	movs	r2, #52	; 0x34
 8000d34:	2100      	movs	r1, #0
 8000d36:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fe32 	bl	80009a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d44:	2210      	movs	r2, #16
 8000d46:	4013      	ands	r3, r2
 8000d48:	d000      	beq.n	8000d4c <HAL_ADC_Init+0x48>
 8000d4a:	e103      	b.n	8000f54 <HAL_ADC_Init+0x250>
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d000      	beq.n	8000d58 <HAL_ADC_Init+0x54>
 8000d56:	e0fd      	b.n	8000f54 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2204      	movs	r2, #4
 8000d60:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d62:	d000      	beq.n	8000d66 <HAL_ADC_Init+0x62>
 8000d64:	e0f6      	b.n	8000f54 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6a:	4a83      	ldr	r2, [pc, #524]	; (8000f78 <HAL_ADC_Init+0x274>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2202      	movs	r2, #2
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d112      	bne.n	8000daa <HAL_ADC_Init+0xa6>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d009      	beq.n	8000da6 <HAL_ADC_Init+0xa2>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d101      	bne.n	8000daa <HAL_ADC_Init+0xa6>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_ADC_Init+0xa8>
 8000daa:	2300      	movs	r3, #0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d116      	bne.n	8000dde <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2218      	movs	r2, #24
 8000db8:	4393      	bics	r3, r2
 8000dba:	0019      	movs	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	0899      	lsrs	r1, r3, #2
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4964      	ldr	r1, [pc, #400]	; (8000f7c <HAL_ADC_Init+0x278>)
 8000dea:	400a      	ands	r2, r1
 8000dec:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7e1b      	ldrb	r3, [r3, #24]
 8000df2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7e5b      	ldrb	r3, [r3, #25]
 8000df8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dfa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e9b      	ldrb	r3, [r3, #26]
 8000e00:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e02:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d002      	beq.n	8000e12 <HAL_ADC_Init+0x10e>
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	015b      	lsls	r3, r3, #5
 8000e10:	e000      	b.n	8000e14 <HAL_ADC_Init+0x110>
 8000e12:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e14:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e1a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d101      	bne.n	8000e28 <HAL_ADC_Init+0x124>
 8000e24:	2304      	movs	r3, #4
 8000e26:	e000      	b.n	8000e2a <HAL_ADC_Init+0x126>
 8000e28:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2124      	movs	r1, #36	; 0x24
 8000e30:	5c5b      	ldrb	r3, [r3, r1]
 8000e32:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e34:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7edb      	ldrb	r3, [r3, #27]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d115      	bne.n	8000e70 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7e9b      	ldrb	r3, [r3, #26]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d105      	bne.n	8000e58 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	0252      	lsls	r2, r2, #9
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	e00b      	b.n	8000e70 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e68:	2201      	movs	r2, #1
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69da      	ldr	r2, [r3, #28]
 8000e74:	23c2      	movs	r3, #194	; 0xc2
 8000e76:	33ff      	adds	r3, #255	; 0xff
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d007      	beq.n	8000e8c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e84:	4313      	orrs	r3, r2
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68d9      	ldr	r1, [r3, #12]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	055b      	lsls	r3, r3, #21
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d01b      	beq.n	8000ee0 <HAL_ADC_Init+0x1dc>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d017      	beq.n	8000ee0 <HAL_ADC_Init+0x1dc>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d013      	beq.n	8000ee0 <HAL_ADC_Init+0x1dc>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d00f      	beq.n	8000ee0 <HAL_ADC_Init+0x1dc>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d00b      	beq.n	8000ee0 <HAL_ADC_Init+0x1dc>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d007      	beq.n	8000ee0 <HAL_ADC_Init+0x1dc>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	2b06      	cmp	r3, #6
 8000ed6:	d003      	beq.n	8000ee0 <HAL_ADC_Init+0x1dc>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d112      	bne.n	8000f06 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2107      	movs	r1, #7
 8000eec:	438a      	bics	r2, r1
 8000eee:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6959      	ldr	r1, [r3, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efa:	2207      	movs	r2, #7
 8000efc:	401a      	ands	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <HAL_ADC_Init+0x27c>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d10b      	bne.n	8000f2e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f20:	2203      	movs	r2, #3
 8000f22:	4393      	bics	r3, r2
 8000f24:	2201      	movs	r2, #1
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f2c:	e01c      	b.n	8000f68 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	2212      	movs	r2, #18
 8000f34:	4393      	bics	r3, r2
 8000f36:	2210      	movs	r2, #16
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f42:	2201      	movs	r2, #1
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f52:	e009      	b.n	8000f68 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f58:	2210      	movs	r2, #16
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f60:	230f      	movs	r3, #15
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b004      	add	sp, #16
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	fffffefd 	.word	0xfffffefd
 8000f7c:	fffe0219 	.word	0xfffe0219
 8000f80:	833fffe7 	.word	0x833fffe7

08000f84 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d138      	bne.n	8001012 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2234      	movs	r2, #52	; 0x34
 8000fa4:	5c9b      	ldrb	r3, [r3, r2]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <HAL_ADC_Start+0x2a>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e038      	b.n	8001020 <HAL_ADC_Start+0x9c>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2234      	movs	r2, #52	; 0x34
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7e5b      	ldrb	r3, [r3, #25]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	18fc      	adds	r4, r7, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 fad5 	bl	8001574 <ADC_Enable>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d120      	bne.n	800101a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <HAL_ADC_Start+0xa4>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	0052      	lsls	r2, r2, #1
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2234      	movs	r2, #52	; 0x34
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	221c      	movs	r2, #28
 8000ffe:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2104      	movs	r1, #4
 800100c:	430a      	orrs	r2, r1
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	e003      	b.n	800101a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001012:	230f      	movs	r3, #15
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	2202      	movs	r2, #2
 8001018:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800101a:	230f      	movs	r3, #15
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	781b      	ldrb	r3, [r3, #0]
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b005      	add	sp, #20
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	fffff0fe 	.word	0xfffff0fe

0800102c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001034:	230f      	movs	r3, #15
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2234      	movs	r2, #52	; 0x34
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_ADC_Stop+0x1e>
 8001046:	2302      	movs	r3, #2
 8001048:	e029      	b.n	800109e <HAL_ADC_Stop+0x72>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2234      	movs	r2, #52	; 0x34
 800104e:	2101      	movs	r1, #1
 8001050:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001052:	250f      	movs	r5, #15
 8001054:	197c      	adds	r4, r7, r5
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fb71 	bl	8001740 <ADC_ConversionStop>
 800105e:	0003      	movs	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001062:	197b      	adds	r3, r7, r5
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d112      	bne.n	8001090 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800106a:	197c      	adds	r4, r7, r5
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	0018      	movs	r0, r3
 8001070:	f000 fafc 	bl	800166c <ADC_Disable>
 8001074:	0003      	movs	r3, r0
 8001076:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001078:	197b      	adds	r3, r7, r5
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d107      	bne.n	8001090 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001084:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_ADC_Stop+0x7c>)
 8001086:	4013      	ands	r3, r2
 8001088:	2201      	movs	r2, #1
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2234      	movs	r2, #52	; 0x34
 8001094:	2100      	movs	r1, #0
 8001096:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001098:	230f      	movs	r3, #15
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	781b      	ldrb	r3, [r3, #0]
}
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bdb0      	pop	{r4, r5, r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	fffffefe 	.word	0xfffffefe

080010ac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d102      	bne.n	80010c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80010be:	2308      	movs	r3, #8
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e014      	b.n	80010ee <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d10b      	bne.n	80010ea <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d6:	2220      	movs	r2, #32
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2234      	movs	r2, #52	; 0x34
 80010e2:	2100      	movs	r1, #0
 80010e4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e06b      	b.n	80011c2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010ea:	230c      	movs	r3, #12
 80010ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010ee:	f7ff fddb 	bl	8000ca8 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010f6:	e019      	b.n	800112c <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	d016      	beq.n	800112c <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_ADC_PollForConversion+0x68>
 8001104:	f7ff fdd0 	bl	8000ca8 <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d20b      	bcs.n	800112c <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001118:	2204      	movs	r2, #4
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2234      	movs	r2, #52	; 0x34
 8001124:	2100      	movs	r1, #0
 8001126:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e04a      	b.n	80011c2 <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	d0df      	beq.n	80010f8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	23c0      	movs	r3, #192	; 0xc0
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4013      	ands	r3, r2
 8001152:	d12d      	bne.n	80011b0 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001158:	2b00      	cmp	r3, #0
 800115a:	d129      	bne.n	80011b0 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2208      	movs	r2, #8
 8001164:	4013      	ands	r3, r2
 8001166:	2b08      	cmp	r3, #8
 8001168:	d122      	bne.n	80011b0 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2204      	movs	r2, #4
 8001172:	4013      	ands	r3, r2
 8001174:	d110      	bne.n	8001198 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	210c      	movs	r1, #12
 8001182:	438a      	bics	r2, r1
 8001184:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_ADC_PollForConversion+0x120>)
 800118c:	4013      	ands	r3, r2
 800118e:	2201      	movs	r2, #1
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	639a      	str	r2, [r3, #56]	; 0x38
 8001196:	e00b      	b.n	80011b0 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119c:	2220      	movs	r2, #32
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a8:	2201      	movs	r2, #1
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7e1b      	ldrb	r3, [r3, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	220c      	movs	r2, #12
 80011be:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	fffffefe 	.word	0xfffffefe

080011d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2204      	movs	r2, #4
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d106      	bne.n	800120c <HAL_ADC_IRQHandler+0x24>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2204      	movs	r2, #4
 8001206:	4013      	ands	r3, r2
 8001208:	2b04      	cmp	r3, #4
 800120a:	d00d      	beq.n	8001228 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2208      	movs	r2, #8
 8001214:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001216:	2b08      	cmp	r3, #8
 8001218:	d14f      	bne.n	80012ba <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2208      	movs	r2, #8
 8001222:	4013      	ands	r3, r2
 8001224:	2b08      	cmp	r3, #8
 8001226:	d148      	bne.n	80012ba <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122c:	2210      	movs	r2, #16
 800122e:	4013      	ands	r3, r2
 8001230:	d106      	bne.n	8001240 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	23c0      	movs	r3, #192	; 0xc0
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4013      	ands	r3, r2
 800124c:	d12d      	bne.n	80012aa <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001252:	2b00      	cmp	r3, #0
 8001254:	d129      	bne.n	80012aa <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2208      	movs	r2, #8
 800125e:	4013      	ands	r3, r2
 8001260:	2b08      	cmp	r3, #8
 8001262:	d122      	bne.n	80012aa <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2204      	movs	r2, #4
 800126c:	4013      	ands	r3, r2
 800126e:	d110      	bne.n	8001292 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	210c      	movs	r1, #12
 800127c:	438a      	bics	r2, r1
 800127e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001284:	4a33      	ldr	r2, [pc, #204]	; (8001354 <HAL_ADC_IRQHandler+0x16c>)
 8001286:	4013      	ands	r3, r2
 8001288:	2201      	movs	r2, #1
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	639a      	str	r2, [r3, #56]	; 0x38
 8001290:	e00b      	b.n	80012aa <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001296:	2220      	movs	r2, #32
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a2:	2201      	movs	r2, #1
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 f853 	bl	8001358 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	220c      	movs	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b80      	cmp	r3, #128	; 0x80
 80012c6:	d115      	bne.n	80012f4 <HAL_ADC_IRQHandler+0x10c>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b80      	cmp	r3, #128	; 0x80
 80012d4:	d10e      	bne.n	80012f4 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	0252      	lsls	r2, r2, #9
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f83e 	bl	8001368 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2210      	movs	r2, #16
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d123      	bne.n	800134a <HAL_ADC_IRQHandler+0x162>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2210      	movs	r2, #16
 800130a:	4013      	ands	r3, r2
 800130c:	2b10      	cmp	r3, #16
 800130e:	d11c      	bne.n	800134a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	2b01      	cmp	r3, #1
 8001316:	d006      	beq.n	8001326 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2201      	movs	r2, #1
 8001320:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001322:	2b01      	cmp	r3, #1
 8001324:	d10d      	bne.n	8001342 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132a:	2202      	movs	r2, #2
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2210      	movs	r2, #16
 8001338:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0018      	movs	r0, r3
 800133e:	f000 f81b 	bl	8001378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2210      	movs	r2, #16
 8001348:	601a      	str	r2, [r3, #0]
  }

}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	fffffefe 	.word	0xfffffefe

08001358 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001392:	230f      	movs	r3, #15
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	055b      	lsls	r3, r3, #21
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d011      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x46>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d00d      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x46>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d009      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x46>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d005      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x46>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d001      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x46>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2234      	movs	r2, #52	; 0x34
 80013d2:	5c9b      	ldrb	r3, [r3, r2]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x54>
 80013d8:	2302      	movs	r3, #2
 80013da:	e0bb      	b.n	8001554 <HAL_ADC_ConfigChannel+0x1cc>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2234      	movs	r2, #52	; 0x34
 80013e0:	2101      	movs	r1, #1
 80013e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2204      	movs	r2, #4
 80013ec:	4013      	ands	r3, r2
 80013ee:	d000      	beq.n	80013f2 <HAL_ADC_ConfigChannel+0x6a>
 80013f0:	e09f      	b.n	8001532 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a59      	ldr	r2, [pc, #356]	; (800155c <HAL_ADC_ConfigChannel+0x1d4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d100      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x76>
 80013fc:	e077      	b.n	80014ee <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	409a      	lsls	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	055b      	lsls	r3, r3, #21
 800141c:	429a      	cmp	r2, r3
 800141e:	d037      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x108>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	2b01      	cmp	r3, #1
 8001426:	d033      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x108>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	2b02      	cmp	r3, #2
 800142e:	d02f      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x108>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	2b03      	cmp	r3, #3
 8001436:	d02b      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x108>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	2b04      	cmp	r3, #4
 800143e:	d027      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x108>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	2b05      	cmp	r3, #5
 8001446:	d023      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x108>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	2b06      	cmp	r3, #6
 800144e:	d01f      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x108>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	2b07      	cmp	r3, #7
 8001456:	d01b      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2107      	movs	r1, #7
 8001464:	400b      	ands	r3, r1
 8001466:	429a      	cmp	r2, r3
 8001468:	d012      	beq.n	8001490 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2107      	movs	r1, #7
 8001476:	438a      	bics	r2, r1
 8001478:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6959      	ldr	r1, [r3, #20]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2207      	movs	r2, #7
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b10      	cmp	r3, #16
 8001496:	d003      	beq.n	80014a0 <HAL_ADC_ConfigChannel+0x118>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b11      	cmp	r3, #17
 800149e:	d152      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_ADC_ConfigChannel+0x1d8>)
 80014a2:	6819      	ldr	r1, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b10      	cmp	r3, #16
 80014aa:	d102      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x12a>
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	e001      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x12e>
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	03db      	lsls	r3, r3, #15
 80014b6:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <HAL_ADC_ConfigChannel+0x1d8>)
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b10      	cmp	r3, #16
 80014c2:	d140      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_ADC_ConfigChannel+0x1dc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4927      	ldr	r1, [pc, #156]	; (8001568 <HAL_ADC_ConfigChannel+0x1e0>)
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7fe fe1c 	bl	8000108 <__udivsi3>
 80014d0:	0003      	movs	r3, r0
 80014d2:	001a      	movs	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	189b      	adds	r3, r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014de:	e002      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f9      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x158>
 80014ec:	e02b      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	4099      	lsls	r1, r3
 80014fc:	000b      	movs	r3, r1
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	400a      	ands	r2, r1
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b10      	cmp	r3, #16
 800150e:	d003      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x190>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b11      	cmp	r3, #17
 8001516:	d116      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_ADC_ConfigChannel+0x1d8>)
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b10      	cmp	r3, #16
 8001522:	d101      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x1a0>
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_ADC_ConfigChannel+0x1e4>)
 8001526:	e000      	b.n	800152a <HAL_ADC_ConfigChannel+0x1a2>
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <HAL_ADC_ConfigChannel+0x1e8>)
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_ADC_ConfigChannel+0x1d8>)
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e009      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001536:	2220      	movs	r2, #32
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800153e:	230f      	movs	r3, #15
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2234      	movs	r2, #52	; 0x34
 800154a:	2100      	movs	r1, #0
 800154c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800154e:	230f      	movs	r3, #15
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	781b      	ldrb	r3, [r3, #0]
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b004      	add	sp, #16
 800155a:	bd80      	pop	{r7, pc}
 800155c:	00001001 	.word	0x00001001
 8001560:	40012708 	.word	0x40012708
 8001564:	20000000 	.word	0x20000000
 8001568:	000f4240 	.word	0x000f4240
 800156c:	ff7fffff 	.word	0xff7fffff
 8001570:	ffbfffff 	.word	0xffbfffff

08001574 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2203      	movs	r2, #3
 800158c:	4013      	ands	r3, r2
 800158e:	2b01      	cmp	r3, #1
 8001590:	d112      	bne.n	80015b8 <ADC_Enable+0x44>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	2b01      	cmp	r3, #1
 800159e:	d009      	beq.n	80015b4 <ADC_Enable+0x40>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	401a      	ands	r2, r3
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d101      	bne.n	80015b8 <ADC_Enable+0x44>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <ADC_Enable+0x46>
 80015b8:	2300      	movs	r3, #0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d14b      	bne.n	8001656 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <ADC_Enable+0xec>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ce:	2210      	movs	r2, #16
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	2201      	movs	r2, #1
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e038      	b.n	8001658 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <ADC_Enable+0xf0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	491b      	ldr	r1, [pc, #108]	; (8001668 <ADC_Enable+0xf4>)
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7fe fd83 	bl	8000108 <__udivsi3>
 8001602:	0003      	movs	r3, r0
 8001604:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001606:	e002      	b.n	800160e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f9      	bne.n	8001608 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001614:	f7ff fb48 	bl	8000ca8 <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800161c:	e014      	b.n	8001648 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800161e:	f7ff fb43 	bl	8000ca8 <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d90d      	bls.n	8001648 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001630:	2210      	movs	r2, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163c:	2201      	movs	r2, #1
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e007      	b.n	8001658 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	4013      	ands	r3, r2
 8001652:	2b01      	cmp	r3, #1
 8001654:	d1e3      	bne.n	800161e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b004      	add	sp, #16
 800165e:	bd80      	pop	{r7, pc}
 8001660:	80000017 	.word	0x80000017
 8001664:	20000000 	.word	0x20000000
 8001668:	000f4240 	.word	0x000f4240

0800166c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2203      	movs	r2, #3
 8001680:	4013      	ands	r3, r2
 8001682:	2b01      	cmp	r3, #1
 8001684:	d112      	bne.n	80016ac <ADC_Disable+0x40>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	4013      	ands	r3, r2
 8001690:	2b01      	cmp	r3, #1
 8001692:	d009      	beq.n	80016a8 <ADC_Disable+0x3c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	401a      	ands	r2, r3
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d101      	bne.n	80016ac <ADC_Disable+0x40>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <ADC_Disable+0x42>
 80016ac:	2300      	movs	r3, #0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d041      	beq.n	8001736 <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2205      	movs	r2, #5
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d110      	bne.n	80016e2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2102      	movs	r1, #2
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2203      	movs	r2, #3
 80016d6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016d8:	f7ff fae6 	bl	8000ca8 <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016e0:	e022      	b.n	8001728 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e6:	2210      	movs	r2, #16
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f2:	2201      	movs	r2, #1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e01c      	b.n	8001738 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016fe:	f7ff fad3 	bl	8000ca8 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d90d      	bls.n	8001728 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	2210      	movs	r2, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	2201      	movs	r2, #1
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e007      	b.n	8001738 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2201      	movs	r2, #1
 8001730:	4013      	ands	r3, r2
 8001732:	2b01      	cmp	r3, #1
 8001734:	d0e3      	beq.n	80016fe <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	b004      	add	sp, #16
 800173e:	bd80      	pop	{r7, pc}

08001740 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2204      	movs	r2, #4
 8001754:	4013      	ands	r3, r2
 8001756:	d034      	beq.n	80017c2 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2204      	movs	r2, #4
 8001760:	4013      	ands	r3, r2
 8001762:	2b04      	cmp	r3, #4
 8001764:	d10d      	bne.n	8001782 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001770:	d107      	bne.n	8001782 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2110      	movs	r1, #16
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001782:	f7ff fa91 	bl	8000ca8 <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800178a:	e014      	b.n	80017b6 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800178c:	f7ff fa8c 	bl	8000ca8 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d90d      	bls.n	80017b6 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179e:	2210      	movs	r2, #16
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017aa:	2201      	movs	r2, #1
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e006      	b.n	80017c4 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2204      	movs	r2, #4
 80017be:	4013      	ands	r3, r2
 80017c0:	d1e4      	bne.n	800178c <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	0002      	movs	r2, r0
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	1dfb      	adds	r3, r7, #7
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b7f      	cmp	r3, #127	; 0x7f
 80017de:	d809      	bhi.n	80017f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	001a      	movs	r2, r3
 80017e6:	231f      	movs	r3, #31
 80017e8:	401a      	ands	r2, r3
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_EnableIRQ+0x30>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	4091      	lsls	r1, r2
 80017f0:	000a      	movs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]
  }
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	0002      	movs	r2, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b7f      	cmp	r3, #127	; 0x7f
 8001814:	d828      	bhi.n	8001868 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001816:	4a2f      	ldr	r2, [pc, #188]	; (80018d4 <__NVIC_SetPriority+0xd4>)
 8001818:	1dfb      	adds	r3, r7, #7
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	33c0      	adds	r3, #192	; 0xc0
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	589b      	ldr	r3, [r3, r2]
 8001826:	1dfa      	adds	r2, r7, #7
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	0011      	movs	r1, r2
 800182c:	2203      	movs	r2, #3
 800182e:	400a      	ands	r2, r1
 8001830:	00d2      	lsls	r2, r2, #3
 8001832:	21ff      	movs	r1, #255	; 0xff
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	43d2      	mvns	r2, r2
 800183a:	401a      	ands	r2, r3
 800183c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	22ff      	movs	r2, #255	; 0xff
 8001844:	401a      	ands	r2, r3
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	0018      	movs	r0, r3
 800184c:	2303      	movs	r3, #3
 800184e:	4003      	ands	r3, r0
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001854:	481f      	ldr	r0, [pc, #124]	; (80018d4 <__NVIC_SetPriority+0xd4>)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b25b      	sxtb	r3, r3
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	430a      	orrs	r2, r1
 8001860:	33c0      	adds	r3, #192	; 0xc0
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001866:	e031      	b.n	80018cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <__NVIC_SetPriority+0xd8>)
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	0019      	movs	r1, r3
 8001870:	230f      	movs	r3, #15
 8001872:	400b      	ands	r3, r1
 8001874:	3b08      	subs	r3, #8
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3306      	adds	r3, #6
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	18d3      	adds	r3, r2, r3
 800187e:	3304      	adds	r3, #4
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1dfa      	adds	r2, r7, #7
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	0011      	movs	r1, r2
 8001888:	2203      	movs	r2, #3
 800188a:	400a      	ands	r2, r1
 800188c:	00d2      	lsls	r2, r2, #3
 800188e:	21ff      	movs	r1, #255	; 0xff
 8001890:	4091      	lsls	r1, r2
 8001892:	000a      	movs	r2, r1
 8001894:	43d2      	mvns	r2, r2
 8001896:	401a      	ands	r2, r3
 8001898:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	22ff      	movs	r2, #255	; 0xff
 80018a0:	401a      	ands	r2, r3
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	0018      	movs	r0, r3
 80018a8:	2303      	movs	r3, #3
 80018aa:	4003      	ands	r3, r0
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <__NVIC_SetPriority+0xd8>)
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	001c      	movs	r4, r3
 80018b8:	230f      	movs	r3, #15
 80018ba:	4023      	ands	r3, r4
 80018bc:	3b08      	subs	r3, #8
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	430a      	orrs	r2, r1
 80018c2:	3306      	adds	r3, #6
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	18c3      	adds	r3, r0, r3
 80018c8:	3304      	adds	r3, #4
 80018ca:	601a      	str	r2, [r3, #0]
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b003      	add	sp, #12
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	1e5a      	subs	r2, r3, #1
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	045b      	lsls	r3, r3, #17
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d301      	bcc.n	80018f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f0:	2301      	movs	r3, #1
 80018f2:	e010      	b.n	8001916 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <SysTick_Config+0x44>)
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	3a01      	subs	r2, #1
 80018fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fc:	2301      	movs	r3, #1
 80018fe:	425b      	negs	r3, r3
 8001900:	2103      	movs	r1, #3
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff ff7c 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x44>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x44>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	210f      	movs	r1, #15
 8001930:	187b      	adds	r3, r7, r1
 8001932:	1c02      	adds	r2, r0, #0
 8001934:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	187b      	adds	r3, r7, r1
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	0011      	movs	r1, r2
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b004      	add	sp, #16
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	0002      	movs	r2, r0
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195a:	1dfb      	adds	r3, r7, #7
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b25b      	sxtb	r3, r3
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff ff33 	bl	80017cc <__NVIC_EnableIRQ>
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff ffaf 	bl	80018dc <SysTick_Config>
 800197e:	0003      	movs	r3, r0
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e036      	b.n	8001a0c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2221      	movs	r2, #33	; 0x21
 80019a2:	2102      	movs	r1, #2
 80019a4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <HAL_DMA_Init+0x8c>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f8b4 	bl	8001b5c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2221      	movs	r2, #33	; 0x21
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	2100      	movs	r1, #0
 8001a08:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}  
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b004      	add	sp, #16
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	ffffc00f 	.word	0xffffc00f

08001a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	2204      	movs	r2, #4
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d024      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x72>
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2204      	movs	r2, #4
 8001a44:	4013      	ands	r3, r2
 8001a46:	d020      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	4013      	ands	r3, r2
 8001a52:	d107      	bne.n	8001a64 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2104      	movs	r1, #4
 8001a60:	438a      	bics	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	4091      	lsls	r1, r2
 8001a70:	000a      	movs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d100      	bne.n	8001a7e <HAL_DMA_IRQHandler+0x66>
 8001a7c:	e06a      	b.n	8001b54 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	0010      	movs	r0, r2
 8001a86:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a88:	e064      	b.n	8001b54 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2202      	movs	r2, #2
 8001a90:	409a      	lsls	r2, r3
 8001a92:	0013      	movs	r3, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	d02b      	beq.n	8001af2 <HAL_DMA_IRQHandler+0xda>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d027      	beq.n	8001af2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d10b      	bne.n	8001ac6 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	210a      	movs	r1, #10
 8001aba:	438a      	bics	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2221      	movs	r2, #33	; 0x21
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ace:	2102      	movs	r1, #2
 8001ad0:	4091      	lsls	r1, r2
 8001ad2:	000a      	movs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d036      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	0010      	movs	r0, r2
 8001aee:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001af0:	e030      	b.n	8001b54 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	2208      	movs	r2, #8
 8001af8:	409a      	lsls	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	d028      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x13c>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2208      	movs	r2, #8
 8001b06:	4013      	ands	r3, r2
 8001b08:	d024      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	210e      	movs	r1, #14
 8001b16:	438a      	bics	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	2101      	movs	r1, #1
 8001b24:	4091      	lsls	r1, r2
 8001b26:	000a      	movs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2221      	movs	r2, #33	; 0x21
 8001b34:	2101      	movs	r1, #1
 8001b36:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	0010      	movs	r0, r2
 8001b50:	4798      	blx	r3
    }
   }
}  
 8001b52:	e7ff      	b.n	8001b54 <HAL_DMA_IRQHandler+0x13c>
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b004      	add	sp, #16
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <DMA_CalcBaseAndBitshift+0x30>)
 8001b6a:	4694      	mov	ip, r2
 8001b6c:	4463      	add	r3, ip
 8001b6e:	2114      	movs	r1, #20
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7fe fac9 	bl	8000108 <__udivsi3>
 8001b76:	0003      	movs	r3, r0
 8001b78:	009a      	lsls	r2, r3, #2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <DMA_CalcBaseAndBitshift+0x34>)
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	bffdfff8 	.word	0xbffdfff8
 8001b90:	40020000 	.word	0x40020000

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	e14f      	b.n	8001e44 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4091      	lsls	r1, r2
 8001bae:	000a      	movs	r2, r1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d100      	bne.n	8001bbc <HAL_GPIO_Init+0x28>
 8001bba:	e140      	b.n	8001e3e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d00b      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd0:	2b11      	cmp	r3, #17
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b12      	cmp	r3, #18
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	409a      	lsls	r2, r3
 8001bea:	0013      	movs	r3, r2
 8001bec:	43da      	mvns	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	2201      	movs	r2, #1
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0xea>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b12      	cmp	r3, #18
 8001c7c:	d123      	bne.n	8001cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	58d3      	ldr	r3, [r2, r3]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2207      	movs	r2, #7
 8001c90:	4013      	ands	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	220f      	movs	r2, #15
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2107      	movs	r1, #7
 8001caa:	400b      	ands	r3, r1
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	6939      	ldr	r1, [r7, #16]
 8001cc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	055b      	lsls	r3, r3, #21
 8001d02:	4013      	ands	r3, r2
 8001d04:	d100      	bne.n	8001d08 <HAL_GPIO_Init+0x174>
 8001d06:	e09a      	b.n	8001e3e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d08:	4b54      	ldr	r3, [pc, #336]	; (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	430a      	orrs	r2, r1
 8001d12:	619a      	str	r2, [r3, #24]
 8001d14:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d20:	4a4f      	ldr	r2, [pc, #316]	; (8001e60 <HAL_GPIO_Init+0x2cc>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	589b      	ldr	r3, [r3, r2]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2203      	movs	r2, #3
 8001d32:	4013      	ands	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	2390      	movs	r3, #144	; 0x90
 8001d48:	05db      	lsls	r3, r3, #23
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x1e2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a44      	ldr	r2, [pc, #272]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x1de>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a43      	ldr	r2, [pc, #268]	; (8001e68 <HAL_GPIO_Init+0x2d4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x1da>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a42      	ldr	r2, [pc, #264]	; (8001e6c <HAL_GPIO_Init+0x2d8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x1d6>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x1e4>
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x1e4>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x1e4>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x1e4>
 8001d76:	2300      	movs	r3, #0
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	2103      	movs	r1, #3
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d88:	4935      	ldr	r1, [pc, #212]	; (8001e60 <HAL_GPIO_Init+0x2cc>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	025b      	lsls	r3, r3, #9
 8001dae:	4013      	ands	r3, r2
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dba:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43da      	mvns	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	035b      	lsls	r3, r3, #13
 8001e02:	4013      	ands	r3, r2
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	039b      	lsls	r3, r3, #14
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_GPIO_Init+0x2dc>)
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	40da      	lsrs	r2, r3
 8001e4c:	1e13      	subs	r3, r2, #0
 8001e4e:	d000      	beq.n	8001e52 <HAL_GPIO_Init+0x2be>
 8001e50:	e6a8      	b.n	8001ba4 <HAL_GPIO_Init+0x10>
  } 
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b006      	add	sp, #24
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010000 	.word	0x40010000
 8001e64:	48000400 	.word	0x48000400
 8001e68:	48000800 	.word	0x48000800
 8001e6c:	48000c00 	.word	0x48000c00
 8001e70:	40010400 	.word	0x40010400

08001e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e082      	b.n	8001f8c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2241      	movs	r2, #65	; 0x41
 8001e8a:	5c9b      	ldrb	r3, [r3, r2]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	2100      	movs	r1, #0
 8001e98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7fe fdfb 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2241      	movs	r2, #65	; 0x41
 8001ea6:	2124      	movs	r1, #36	; 0x24
 8001ea8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	438a      	bics	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4934      	ldr	r1, [pc, #208]	; (8001f94 <HAL_I2C_Init+0x120>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4931      	ldr	r1, [pc, #196]	; (8001f98 <HAL_I2C_Init+0x124>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d108      	bne.n	8001ef2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	0209      	lsls	r1, r1, #8
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e007      	b.n	8001f02 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2184      	movs	r1, #132	; 0x84
 8001efc:	0209      	lsls	r1, r1, #8
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d104      	bne.n	8001f14 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	491f      	ldr	r1, [pc, #124]	; (8001f9c <HAL_I2C_Init+0x128>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	491a      	ldr	r1, [pc, #104]	; (8001f98 <HAL_I2C_Init+0x124>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	0011      	movs	r1, r2
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	021a      	lsls	r2, r3, #8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69d9      	ldr	r1, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1a      	ldr	r2, [r3, #32]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2241      	movs	r2, #65	; 0x41
 8001f78:	2120      	movs	r1, #32
 8001f7a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2242      	movs	r2, #66	; 0x42
 8001f86:	2100      	movs	r1, #0
 8001f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b002      	add	sp, #8
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	f0ffffff 	.word	0xf0ffffff
 8001f98:	ffff7fff 	.word	0xffff7fff
 8001f9c:	02008000 	.word	0x02008000

08001fa0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	0008      	movs	r0, r1
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	0019      	movs	r1, r3
 8001fae:	230a      	movs	r3, #10
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	1c02      	adds	r2, r0, #0
 8001fb4:	801a      	strh	r2, [r3, #0]
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	1c0a      	adds	r2, r1, #0
 8001fbc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2241      	movs	r2, #65	; 0x41
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d000      	beq.n	8001fcc <HAL_I2C_Master_Transmit+0x2c>
 8001fca:	e0e7      	b.n	800219c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	5c9b      	ldrb	r3, [r3, r2]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_I2C_Master_Transmit+0x3a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0e1      	b.n	800219e <HAL_I2C_Master_Transmit+0x1fe>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fe2:	f7fe fe61 	bl	8000ca8 <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	0219      	lsls	r1, r3, #8
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f000 f8fc 	bl	80021f4 <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cc      	b.n	800219e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2241      	movs	r2, #65	; 0x41
 8002008:	2121      	movs	r1, #33	; 0x21
 800200a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2242      	movs	r2, #66	; 0x42
 8002010:	2110      	movs	r1, #16
 8002012:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2208      	movs	r2, #8
 8002024:	18ba      	adds	r2, r7, r2
 8002026:	8812      	ldrh	r2, [r2, #0]
 8002028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d911      	bls.n	800205e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	22ff      	movs	r2, #255	; 0xff
 800203e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	b2da      	uxtb	r2, r3
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	045c      	lsls	r4, r3, #17
 800204a:	230a      	movs	r3, #10
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	8819      	ldrh	r1, [r3, #0]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	4b55      	ldr	r3, [pc, #340]	; (80021a8 <HAL_I2C_Master_Transmit+0x208>)
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	0023      	movs	r3, r4
 8002058:	f000 f9ec 	bl	8002434 <I2C_TransferConfig>
 800205c:	e075      	b.n	800214a <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	b2da      	uxtb	r2, r3
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	049c      	lsls	r4, r3, #18
 8002072:	230a      	movs	r3, #10
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	8819      	ldrh	r1, [r3, #0]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <HAL_I2C_Master_Transmit+0x208>)
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	0023      	movs	r3, r4
 8002080:	f000 f9d8 	bl	8002434 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002084:	e061      	b.n	800214a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	0018      	movs	r0, r3
 800208e:	f000 f8f0 	bl	8002272 <I2C_WaitOnTXISFlagUntilTimeout>
 8002092:	1e03      	subs	r3, r0, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e081      	b.n	800219e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d03a      	beq.n	800214a <HAL_I2C_Master_Transmit+0x1aa>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d136      	bne.n	800214a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	0013      	movs	r3, r2
 80020e6:	2200      	movs	r2, #0
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	f000 f883 	bl	80021f4 <I2C_WaitOnFlagUntilTimeout>
 80020ee:	1e03      	subs	r3, r0, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e053      	b.n	800219e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2bff      	cmp	r3, #255	; 0xff
 80020fe:	d911      	bls.n	8002124 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	22ff      	movs	r2, #255	; 0xff
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	b2da      	uxtb	r2, r3
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	045c      	lsls	r4, r3, #17
 8002110:	230a      	movs	r3, #10
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	8819      	ldrh	r1, [r3, #0]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	2300      	movs	r3, #0
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	0023      	movs	r3, r4
 800211e:	f000 f989 	bl	8002434 <I2C_TransferConfig>
 8002122:	e012      	b.n	800214a <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	b2da      	uxtb	r2, r3
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	049c      	lsls	r4, r3, #18
 8002138:	230a      	movs	r3, #10
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	8819      	ldrh	r1, [r3, #0]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	2300      	movs	r3, #0
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	0023      	movs	r3, r4
 8002146:	f000 f975 	bl	8002434 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d198      	bne.n	8002086 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	0018      	movs	r0, r3
 800215c:	f000 f8c8 	bl	80022f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002160:	1e03      	subs	r3, r0, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e01a      	b.n	800219e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2220      	movs	r2, #32
 800216e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	490c      	ldr	r1, [pc, #48]	; (80021ac <HAL_I2C_Master_Transmit+0x20c>)
 800217c:	400a      	ands	r2, r1
 800217e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2241      	movs	r2, #65	; 0x41
 8002184:	2120      	movs	r1, #32
 8002186:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2242      	movs	r2, #66	; 0x42
 800218c:	2100      	movs	r1, #0
 800218e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2240      	movs	r2, #64	; 0x40
 8002194:	2100      	movs	r1, #0
 8002196:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e000      	b.n	800219e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800219c:	2302      	movs	r3, #2
  }
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b007      	add	sp, #28
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	80002000 	.word	0x80002000
 80021ac:	fe00e800 	.word	0xfe00e800

080021b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2202      	movs	r2, #2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d103      	bne.n	80021ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2201      	movs	r2, #1
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d007      	beq.n	80021ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	430a      	orrs	r2, r1
 80021ea:	619a      	str	r2, [r3, #24]
  }
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002204:	e021      	b.n	800224a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	d01e      	beq.n	800224a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220c:	f7fe fd4c 	bl	8000ca8 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d302      	bcc.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d113      	bne.n	800224a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	2220      	movs	r2, #32
 8002228:	431a      	orrs	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2241      	movs	r2, #65	; 0x41
 8002232:	2120      	movs	r1, #32
 8002234:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2242      	movs	r2, #66	; 0x42
 800223a:	2100      	movs	r1, #0
 800223c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	2100      	movs	r1, #0
 8002244:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	4013      	ands	r3, r2
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	425a      	negs	r2, r3
 800225a:	4153      	adcs	r3, r2
 800225c:	b2db      	uxtb	r3, r3
 800225e:	001a      	movs	r2, r3
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d0ce      	beq.n	8002206 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b004      	add	sp, #16
 8002270:	bd80      	pop	{r7, pc}

08002272 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800227e:	e02b      	b.n	80022d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 f86e 	bl	8002368 <I2C_IsAcknowledgeFailed>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e029      	b.n	80022e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3301      	adds	r3, #1
 8002298:	d01e      	beq.n	80022d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7fe fd05 	bl	8000ca8 <HAL_GetTick>
 800229e:	0002      	movs	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d113      	bne.n	80022d8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	2220      	movs	r2, #32
 80022b6:	431a      	orrs	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2241      	movs	r2, #65	; 0x41
 80022c0:	2120      	movs	r1, #32
 80022c2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2242      	movs	r2, #66	; 0x42
 80022c8:	2100      	movs	r1, #0
 80022ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2240      	movs	r2, #64	; 0x40
 80022d0:	2100      	movs	r1, #0
 80022d2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e007      	b.n	80022e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d1cc      	bne.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b004      	add	sp, #16
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022fc:	e028      	b.n	8002350 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f82f 	bl	8002368 <I2C_IsAcknowledgeFailed>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e026      	b.n	8002360 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7fe fcc9 	bl	8000ca8 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d113      	bne.n	8002350 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	2220      	movs	r2, #32
 800232e:	431a      	orrs	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2241      	movs	r2, #65	; 0x41
 8002338:	2120      	movs	r1, #32
 800233a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2242      	movs	r2, #66	; 0x42
 8002340:	2100      	movs	r1, #0
 8002342:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	2100      	movs	r1, #0
 800234a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e007      	b.n	8002360 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2220      	movs	r2, #32
 8002358:	4013      	ands	r3, r2
 800235a:	2b20      	cmp	r3, #32
 800235c:	d1cf      	bne.n	80022fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}

08002368 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2210      	movs	r2, #16
 800237c:	4013      	ands	r3, r2
 800237e:	2b10      	cmp	r3, #16
 8002380:	d151      	bne.n	8002426 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002382:	e021      	b.n	80023c8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	3301      	adds	r3, #1
 8002388:	d01e      	beq.n	80023c8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238a:	f7fe fc8d 	bl	8000ca8 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	d302      	bcc.n	80023a0 <I2C_IsAcknowledgeFailed+0x38>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d113      	bne.n	80023c8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	2220      	movs	r2, #32
 80023a6:	431a      	orrs	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2241      	movs	r2, #65	; 0x41
 80023b0:	2120      	movs	r1, #32
 80023b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2242      	movs	r2, #66	; 0x42
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e02f      	b.n	8002428 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2220      	movs	r2, #32
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d1d6      	bne.n	8002384 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2210      	movs	r2, #16
 80023dc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2220      	movs	r2, #32
 80023e4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff fee1 	bl	80021b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	490d      	ldr	r1, [pc, #52]	; (8002430 <I2C_IsAcknowledgeFailed+0xc8>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	2204      	movs	r2, #4
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2241      	movs	r2, #65	; 0x41
 800240e:	2120      	movs	r1, #32
 8002410:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2242      	movs	r2, #66	; 0x42
 8002416:	2100      	movs	r1, #0
 8002418:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b004      	add	sp, #16
 800242e:	bd80      	pop	{r7, pc}
 8002430:	fe00e800 	.word	0xfe00e800

08002434 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	0008      	movs	r0, r1
 800243e:	0011      	movs	r1, r2
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	240a      	movs	r4, #10
 8002444:	193b      	adds	r3, r7, r4
 8002446:	1c02      	adds	r2, r0, #0
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	2009      	movs	r0, #9
 800244c:	183b      	adds	r3, r7, r0
 800244e:	1c0a      	adds	r2, r1, #0
 8002450:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	6a3a      	ldr	r2, [r7, #32]
 800245a:	0d51      	lsrs	r1, r2, #21
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	00d2      	lsls	r2, r2, #3
 8002460:	400a      	ands	r2, r1
 8002462:	490e      	ldr	r1, [pc, #56]	; (800249c <I2C_TransferConfig+0x68>)
 8002464:	430a      	orrs	r2, r1
 8002466:	43d2      	mvns	r2, r2
 8002468:	401a      	ands	r2, r3
 800246a:	0011      	movs	r1, r2
 800246c:	193b      	adds	r3, r7, r4
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	059b      	lsls	r3, r3, #22
 8002472:	0d9a      	lsrs	r2, r3, #22
 8002474:	183b      	adds	r3, r7, r0
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	0418      	lsls	r0, r3, #16
 800247a:	23ff      	movs	r3, #255	; 0xff
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	4003      	ands	r3, r0
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	431a      	orrs	r2, r3
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	431a      	orrs	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b005      	add	sp, #20
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	03ff63ff 	.word	0x03ff63ff

080024a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2241      	movs	r2, #65	; 0x41
 80024ae:	5c9b      	ldrb	r3, [r3, r2]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d138      	bne.n	8002528 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2240      	movs	r2, #64	; 0x40
 80024ba:	5c9b      	ldrb	r3, [r3, r2]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e032      	b.n	800252a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2240      	movs	r2, #64	; 0x40
 80024c8:	2101      	movs	r1, #1
 80024ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2241      	movs	r2, #65	; 0x41
 80024d0:	2124      	movs	r1, #36	; 0x24
 80024d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	438a      	bics	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4911      	ldr	r1, [pc, #68]	; (8002534 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6819      	ldr	r1, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2241      	movs	r2, #65	; 0x41
 8002518:	2120      	movs	r1, #32
 800251a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2240      	movs	r2, #64	; 0x40
 8002520:	2100      	movs	r1, #0
 8002522:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
  }
}
 800252a:	0018      	movs	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	ffffefff 	.word	0xffffefff

08002538 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2241      	movs	r2, #65	; 0x41
 8002546:	5c9b      	ldrb	r3, [r3, r2]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b20      	cmp	r3, #32
 800254c:	d139      	bne.n	80025c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2240      	movs	r2, #64	; 0x40
 8002552:	5c9b      	ldrb	r3, [r3, r2]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002558:	2302      	movs	r3, #2
 800255a:	e033      	b.n	80025c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	2101      	movs	r1, #1
 8002562:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2241      	movs	r2, #65	; 0x41
 8002568:	2124      	movs	r1, #36	; 0x24
 800256a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	438a      	bics	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2101      	movs	r1, #1
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2241      	movs	r2, #65	; 0x41
 80025b2:	2120      	movs	r1, #32
 80025b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	2100      	movs	r1, #0
 80025bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b004      	add	sp, #16
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	fffff0ff 	.word	0xfffff0ff

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e301      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2201      	movs	r2, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	d100      	bne.n	80025ee <HAL_RCC_OscConfig+0x1e>
 80025ec:	e08d      	b.n	800270a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025ee:	4bc3      	ldr	r3, [pc, #780]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	220c      	movs	r2, #12
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d00e      	beq.n	8002618 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025fa:	4bc0      	ldr	r3, [pc, #768]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	220c      	movs	r2, #12
 8002600:	4013      	ands	r3, r2
 8002602:	2b08      	cmp	r3, #8
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x64>
 8002606:	4bbd      	ldr	r3, [pc, #756]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	025b      	lsls	r3, r3, #9
 800260e:	401a      	ands	r2, r3
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	025b      	lsls	r3, r3, #9
 8002614:	429a      	cmp	r2, r3
 8002616:	d10d      	bne.n	8002634 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	4bb8      	ldr	r3, [pc, #736]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	029b      	lsls	r3, r3, #10
 8002620:	4013      	ands	r3, r2
 8002622:	d100      	bne.n	8002626 <HAL_RCC_OscConfig+0x56>
 8002624:	e070      	b.n	8002708 <HAL_RCC_OscConfig+0x138>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d000      	beq.n	8002630 <HAL_RCC_OscConfig+0x60>
 800262e:	e06b      	b.n	8002708 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e2d8      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_RCC_OscConfig+0x7c>
 800263c:	4baf      	ldr	r3, [pc, #700]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4bae      	ldr	r3, [pc, #696]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	0249      	lsls	r1, r1, #9
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e02f      	b.n	80026ac <HAL_RCC_OscConfig+0xdc>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x9e>
 8002654:	4ba9      	ldr	r3, [pc, #676]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4ba8      	ldr	r3, [pc, #672]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 800265a:	49a9      	ldr	r1, [pc, #676]	; (8002900 <HAL_RCC_OscConfig+0x330>)
 800265c:	400a      	ands	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	4ba6      	ldr	r3, [pc, #664]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4ba5      	ldr	r3, [pc, #660]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002666:	49a7      	ldr	r1, [pc, #668]	; (8002904 <HAL_RCC_OscConfig+0x334>)
 8002668:	400a      	ands	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e01e      	b.n	80026ac <HAL_RCC_OscConfig+0xdc>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d10e      	bne.n	8002694 <HAL_RCC_OscConfig+0xc4>
 8002676:	4ba1      	ldr	r3, [pc, #644]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4ba0      	ldr	r3, [pc, #640]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	02c9      	lsls	r1, r1, #11
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	4b9d      	ldr	r3, [pc, #628]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b9c      	ldr	r3, [pc, #624]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0249      	lsls	r1, r1, #9
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0xdc>
 8002694:	4b99      	ldr	r3, [pc, #612]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b98      	ldr	r3, [pc, #608]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 800269a:	4999      	ldr	r1, [pc, #612]	; (8002900 <HAL_RCC_OscConfig+0x330>)
 800269c:	400a      	ands	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	4b96      	ldr	r3, [pc, #600]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b95      	ldr	r3, [pc, #596]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80026a6:	4997      	ldr	r1, [pc, #604]	; (8002904 <HAL_RCC_OscConfig+0x334>)
 80026a8:	400a      	ands	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d014      	beq.n	80026de <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe faf8 	bl	8000ca8 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026be:	f7fe faf3 	bl	8000ca8 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b64      	cmp	r3, #100	; 0x64
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e28a      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d0:	4b8a      	ldr	r3, [pc, #552]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	029b      	lsls	r3, r3, #10
 80026d8:	4013      	ands	r3, r2
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0xee>
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fae3 	bl	8000ca8 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fade 	bl	8000ca8 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e275      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	4b80      	ldr	r3, [pc, #512]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	029b      	lsls	r3, r3, #10
 8002702:	4013      	ands	r3, r2
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x118>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2202      	movs	r2, #2
 8002710:	4013      	ands	r3, r2
 8002712:	d100      	bne.n	8002716 <HAL_RCC_OscConfig+0x146>
 8002714:	e069      	b.n	80027ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002716:	4b79      	ldr	r3, [pc, #484]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	220c      	movs	r2, #12
 800271c:	4013      	ands	r3, r2
 800271e:	d00b      	beq.n	8002738 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002720:	4b76      	ldr	r3, [pc, #472]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	220c      	movs	r2, #12
 8002726:	4013      	ands	r3, r2
 8002728:	2b08      	cmp	r3, #8
 800272a:	d11c      	bne.n	8002766 <HAL_RCC_OscConfig+0x196>
 800272c:	4b73      	ldr	r3, [pc, #460]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	025b      	lsls	r3, r3, #9
 8002734:	4013      	ands	r3, r2
 8002736:	d116      	bne.n	8002766 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002738:	4b70      	ldr	r3, [pc, #448]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2202      	movs	r2, #2
 800273e:	4013      	ands	r3, r2
 8002740:	d005      	beq.n	800274e <HAL_RCC_OscConfig+0x17e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e24b      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b6b      	ldr	r3, [pc, #428]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	22f8      	movs	r2, #248	; 0xf8
 8002754:	4393      	bics	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	00da      	lsls	r2, r3, #3
 800275e:	4b67      	ldr	r3, [pc, #412]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002764:	e041      	b.n	80027ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d024      	beq.n	80027b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002774:	2101      	movs	r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fa95 	bl	8000ca8 <HAL_GetTick>
 800277e:	0003      	movs	r3, r0
 8002780:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002784:	f7fe fa90 	bl	8000ca8 <HAL_GetTick>
 8002788:	0002      	movs	r2, r0
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e227      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2202      	movs	r2, #2
 800279c:	4013      	ands	r3, r2
 800279e:	d0f1      	beq.n	8002784 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b56      	ldr	r3, [pc, #344]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	22f8      	movs	r2, #248	; 0xf8
 80027a6:	4393      	bics	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00da      	lsls	r2, r3, #3
 80027b0:	4b52      	ldr	r3, [pc, #328]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e018      	b.n	80027ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b4f      	ldr	r3, [pc, #316]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80027be:	2101      	movs	r1, #1
 80027c0:	438a      	bics	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe fa70 	bl	8000ca8 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fa6b 	bl	8000ca8 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e202      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e0:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d1f1      	bne.n	80027ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2208      	movs	r2, #8
 80027f0:	4013      	ands	r3, r2
 80027f2:	d036      	beq.n	8002862 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d019      	beq.n	8002830 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fc:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80027fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002800:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002802:	2101      	movs	r1, #1
 8002804:	430a      	orrs	r2, r1
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002808:	f7fe fa4e 	bl	8000ca8 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002812:	f7fe fa49 	bl	8000ca8 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e1e0      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	2202      	movs	r2, #2
 800282a:	4013      	ands	r3, r2
 800282c:	d0f1      	beq.n	8002812 <HAL_RCC_OscConfig+0x242>
 800282e:	e018      	b.n	8002862 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002836:	2101      	movs	r1, #1
 8002838:	438a      	bics	r2, r1
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283c:	f7fe fa34 	bl	8000ca8 <HAL_GetTick>
 8002840:	0003      	movs	r3, r0
 8002842:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002846:	f7fe fa2f 	bl	8000ca8 <HAL_GetTick>
 800284a:	0002      	movs	r2, r0
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e1c6      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b28      	ldr	r3, [pc, #160]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	2202      	movs	r2, #2
 800285e:	4013      	ands	r3, r2
 8002860:	d1f1      	bne.n	8002846 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2204      	movs	r2, #4
 8002868:	4013      	ands	r3, r2
 800286a:	d100      	bne.n	800286e <HAL_RCC_OscConfig+0x29e>
 800286c:	e0b4      	b.n	80029d8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	201f      	movs	r0, #31
 8002870:	183b      	adds	r3, r7, r0
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b21      	ldr	r3, [pc, #132]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	055b      	lsls	r3, r3, #21
 800287e:	4013      	ands	r3, r2
 8002880:	d110      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002888:	2180      	movs	r1, #128	; 0x80
 800288a:	0549      	lsls	r1, r1, #21
 800288c:	430a      	orrs	r2, r1
 800288e:	61da      	str	r2, [r3, #28]
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	055b      	lsls	r3, r3, #21
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <HAL_RCC_OscConfig+0x338>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d11a      	bne.n	80028e6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_RCC_OscConfig+0x338>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <HAL_RCC_OscConfig+0x338>)
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	0049      	lsls	r1, r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe f9f3 	bl	8000ca8 <HAL_GetTick>
 80028c2:	0003      	movs	r3, r0
 80028c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c8:	f7fe f9ee 	bl	8000ca8 <HAL_GetTick>
 80028cc:	0002      	movs	r2, r0
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e185      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_OscConfig+0x338>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4013      	ands	r3, r2
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d10e      	bne.n	800290c <HAL_RCC_OscConfig+0x33c>
 80028ee:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80028f0:	6a1a      	ldr	r2, [r3, #32]
 80028f2:	4b02      	ldr	r3, [pc, #8]	; (80028fc <HAL_RCC_OscConfig+0x32c>)
 80028f4:	2101      	movs	r1, #1
 80028f6:	430a      	orrs	r2, r1
 80028f8:	621a      	str	r2, [r3, #32]
 80028fa:	e035      	b.n	8002968 <HAL_RCC_OscConfig+0x398>
 80028fc:	40021000 	.word	0x40021000
 8002900:	fffeffff 	.word	0xfffeffff
 8002904:	fffbffff 	.word	0xfffbffff
 8002908:	40007000 	.word	0x40007000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10c      	bne.n	800292e <HAL_RCC_OscConfig+0x35e>
 8002914:	4bb6      	ldr	r3, [pc, #728]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	4bb5      	ldr	r3, [pc, #724]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	621a      	str	r2, [r3, #32]
 8002920:	4bb3      	ldr	r3, [pc, #716]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	4bb2      	ldr	r3, [pc, #712]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002926:	2104      	movs	r1, #4
 8002928:	438a      	bics	r2, r1
 800292a:	621a      	str	r2, [r3, #32]
 800292c:	e01c      	b.n	8002968 <HAL_RCC_OscConfig+0x398>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b05      	cmp	r3, #5
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x380>
 8002936:	4bae      	ldr	r3, [pc, #696]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	4bad      	ldr	r3, [pc, #692]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 800293c:	2104      	movs	r1, #4
 800293e:	430a      	orrs	r2, r1
 8002940:	621a      	str	r2, [r3, #32]
 8002942:	4bab      	ldr	r3, [pc, #684]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002944:	6a1a      	ldr	r2, [r3, #32]
 8002946:	4baa      	ldr	r3, [pc, #680]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002948:	2101      	movs	r1, #1
 800294a:	430a      	orrs	r2, r1
 800294c:	621a      	str	r2, [r3, #32]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0x398>
 8002950:	4ba7      	ldr	r3, [pc, #668]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002952:	6a1a      	ldr	r2, [r3, #32]
 8002954:	4ba6      	ldr	r3, [pc, #664]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002956:	2101      	movs	r1, #1
 8002958:	438a      	bics	r2, r1
 800295a:	621a      	str	r2, [r3, #32]
 800295c:	4ba4      	ldr	r3, [pc, #656]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 800295e:	6a1a      	ldr	r2, [r3, #32]
 8002960:	4ba3      	ldr	r3, [pc, #652]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002962:	2104      	movs	r1, #4
 8002964:	438a      	bics	r2, r1
 8002966:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d014      	beq.n	800299a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe f99a 	bl	8000ca8 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002978:	e009      	b.n	800298e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe f995 	bl	8000ca8 <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	4a9b      	ldr	r2, [pc, #620]	; (8002bf4 <HAL_RCC_OscConfig+0x624>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e12b      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	4b98      	ldr	r3, [pc, #608]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	2202      	movs	r2, #2
 8002994:	4013      	ands	r3, r2
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x3aa>
 8002998:	e013      	b.n	80029c2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7fe f985 	bl	8000ca8 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a2:	e009      	b.n	80029b8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7fe f980 	bl	8000ca8 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	4a91      	ldr	r2, [pc, #580]	; (8002bf4 <HAL_RCC_OscConfig+0x624>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e116      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b8:	4b8d      	ldr	r3, [pc, #564]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	2202      	movs	r2, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029c2:	231f      	movs	r3, #31
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029cc:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	4b87      	ldr	r3, [pc, #540]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 80029d2:	4989      	ldr	r1, [pc, #548]	; (8002bf8 <HAL_RCC_OscConfig+0x628>)
 80029d4:	400a      	ands	r2, r1
 80029d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2210      	movs	r2, #16
 80029de:	4013      	ands	r3, r2
 80029e0:	d063      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d12a      	bne.n	8002a40 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029ea:	4b81      	ldr	r3, [pc, #516]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 80029ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ee:	4b80      	ldr	r3, [pc, #512]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 80029f0:	2104      	movs	r1, #4
 80029f2:	430a      	orrs	r2, r1
 80029f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029f6:	4b7e      	ldr	r3, [pc, #504]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 80029f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fa:	4b7d      	ldr	r3, [pc, #500]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	430a      	orrs	r2, r1
 8002a00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fe f951 	bl	8000ca8 <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a0c:	f7fe f94c 	bl	8000ca8 <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0e3      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a1e:	4b74      	ldr	r3, [pc, #464]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	2202      	movs	r2, #2
 8002a24:	4013      	ands	r3, r2
 8002a26:	d0f1      	beq.n	8002a0c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a28:	4b71      	ldr	r3, [pc, #452]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2c:	22f8      	movs	r2, #248	; 0xf8
 8002a2e:	4393      	bics	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	00da      	lsls	r2, r3, #3
 8002a38:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a3e:	e034      	b.n	8002aaa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	3305      	adds	r3, #5
 8002a46:	d111      	bne.n	8002a6c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a48:	4b69      	ldr	r3, [pc, #420]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4c:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a4e:	2104      	movs	r1, #4
 8002a50:	438a      	bics	r2, r1
 8002a52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a58:	22f8      	movs	r2, #248	; 0xf8
 8002a5a:	4393      	bics	r3, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	00da      	lsls	r2, r3, #3
 8002a64:	4b62      	ldr	r3, [pc, #392]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a66:	430a      	orrs	r2, r1
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6a:	e01e      	b.n	8002aaa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a6c:	4b60      	ldr	r3, [pc, #384]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a70:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a72:	2104      	movs	r1, #4
 8002a74:	430a      	orrs	r2, r1
 8002a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a78:	4b5d      	ldr	r3, [pc, #372]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7c:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	438a      	bics	r2, r1
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7fe f910 	bl	8000ca8 <HAL_GetTick>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a8e:	f7fe f90b 	bl	8000ca8 <HAL_GetTick>
 8002a92:	0002      	movs	r2, r0
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0a2      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002aa0:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d1f1      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d100      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4e4>
 8002ab2:	e097      	b.n	8002be4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab4:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	220c      	movs	r2, #12
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d100      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4f2>
 8002ac0:	e06b      	b.n	8002b9a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d14c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002ad0:	494a      	ldr	r1, [pc, #296]	; (8002bfc <HAL_RCC_OscConfig+0x62c>)
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe f8e7 	bl	8000ca8 <HAL_GetTick>
 8002ada:	0003      	movs	r3, r0
 8002adc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe f8e2 	bl	8000ca8 <HAL_GetTick>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e079      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	049b      	lsls	r3, r3, #18
 8002afa:	4013      	ands	r3, r2
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afe:	4b3c      	ldr	r3, [pc, #240]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	220f      	movs	r2, #15
 8002b04:	4393      	bics	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a3a      	ldr	r2, [pc, #232]	; (8002c00 <HAL_RCC_OscConfig+0x630>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	431a      	orrs	r2, r3
 8002b26:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2c:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	0449      	lsls	r1, r1, #17
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe f8b5 	bl	8000ca8 <HAL_GetTick>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe f8b0 	bl	8000ca8 <HAL_GetTick>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e047      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b56:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	049b      	lsls	r3, r3, #18
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x574>
 8002b62:	e03f      	b.n	8002be4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b6a:	4924      	ldr	r1, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x62c>)
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe f89a 	bl	8000ca8 <HAL_GetTick>
 8002b74:	0003      	movs	r3, r0
 8002b76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe f895 	bl	8000ca8 <HAL_GetTick>
 8002b7e:	0002      	movs	r2, r0
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e02c      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	049b      	lsls	r3, r3, #18
 8002b94:	4013      	ands	r3, r2
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x5aa>
 8002b98:	e024      	b.n	8002be4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e01f      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_RCC_OscConfig+0x620>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	025b      	lsls	r3, r3, #9
 8002bb8:	401a      	ands	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d10e      	bne.n	8002be0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	23f0      	movs	r3, #240	; 0xf0
 8002bd4:	039b      	lsls	r3, r3, #14
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b008      	add	sp, #32
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	00001388 	.word	0x00001388
 8002bf8:	efffffff 	.word	0xefffffff
 8002bfc:	feffffff 	.word	0xfeffffff
 8002c00:	ffc2ffff 	.word	0xffc2ffff

08002c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0b3      	b.n	8002d80 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b5b      	ldr	r3, [pc, #364]	; (8002d88 <HAL_RCC_ClockConfig+0x184>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4013      	ands	r3, r2
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d911      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b58      	ldr	r3, [pc, #352]	; (8002d88 <HAL_RCC_ClockConfig+0x184>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4393      	bics	r3, r2
 8002c2e:	0019      	movs	r1, r3
 8002c30:	4b55      	ldr	r3, [pc, #340]	; (8002d88 <HAL_RCC_ClockConfig+0x184>)
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x184>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e09a      	b.n	8002d80 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	4013      	ands	r3, r2
 8002c52:	d015      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d006      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c5e:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002c64:	21e0      	movs	r1, #224	; 0xe0
 8002c66:	00c9      	lsls	r1, r1, #3
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	22f0      	movs	r2, #240	; 0xf0
 8002c72:	4393      	bics	r3, r2
 8002c74:	0019      	movs	r1, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	4b44      	ldr	r3, [pc, #272]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	d040      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	029b      	lsls	r3, r3, #10
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d114      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06e      	b.n	8002d80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	049b      	lsls	r3, r3, #18
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e062      	b.n	8002d80 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e05b      	b.n	8002d80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc8:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2203      	movs	r2, #3
 8002cce:	4393      	bics	r3, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7fd ffe4 	bl	8000ca8 <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce4:	e009      	b.n	8002cfa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce6:	f7fd ffdf 	bl	8000ca8 <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <HAL_RCC_ClockConfig+0x18c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e042      	b.n	8002d80 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	220c      	movs	r2, #12
 8002d00:	401a      	ands	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1ec      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <HAL_RCC_ClockConfig+0x184>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	4013      	ands	r3, r2
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d211      	bcs.n	8002d3e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_ClockConfig+0x184>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4393      	bics	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <HAL_RCC_ClockConfig+0x184>)
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2c:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x184>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2201      	movs	r2, #1
 8002d32:	4013      	ands	r3, r2
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e020      	b.n	8002d80 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2204      	movs	r2, #4
 8002d44:	4013      	ands	r3, r2
 8002d46:	d009      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <HAL_RCC_ClockConfig+0x190>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d5c:	f000 f820 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002d60:	0001      	movs	r1, r0
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x188>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	220f      	movs	r2, #15
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <HAL_RCC_ClockConfig+0x194>)
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
 8002d70:	000a      	movs	r2, r1
 8002d72:	40da      	lsrs	r2, r3
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x198>)
 8002d76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fd ff4f 	bl	8000c1c <HAL_InitTick>
  
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b004      	add	sp, #16
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	00001388 	.word	0x00001388
 8002d94:	fffff8ff 	.word	0xfffff8ff
 8002d98:	080030b4 	.word	0x080030b4
 8002d9c:	20000000 	.word	0x20000000

08002da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b08f      	sub	sp, #60	; 0x3c
 8002da4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002da6:	2314      	movs	r3, #20
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dae:	c313      	stmia	r3!, {r0, r1, r4}
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002db8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dba:	c313      	stmia	r3!, {r0, r1, r4}
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc8:	2300      	movs	r3, #0
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	220c      	movs	r2, #12
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d002      	beq.n	8002dea <HAL_RCC_GetSysClockFreq+0x4a>
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d003      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x50>
 8002de8:	e02d      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dee:	e02d      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	0c9b      	lsrs	r3, r3, #18
 8002df4:	220f      	movs	r2, #15
 8002df6:	4013      	ands	r3, r2
 8002df8:	2214      	movs	r2, #20
 8002dfa:	18ba      	adds	r2, r7, r2
 8002dfc:	5cd3      	ldrb	r3, [r2, r3]
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	220f      	movs	r2, #15
 8002e06:	4013      	ands	r3, r2
 8002e08:	1d3a      	adds	r2, r7, #4
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	025b      	lsls	r3, r3, #9
 8002e14:	4013      	ands	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e1a:	4812      	ldr	r0, [pc, #72]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e1c:	f7fd f974 	bl	8000108 <__udivsi3>
 8002e20:	0003      	movs	r3, r0
 8002e22:	001a      	movs	r2, r3
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	4353      	muls	r3, r2
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2a:	e009      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e2e:	000a      	movs	r2, r1
 8002e30:	0152      	lsls	r2, r2, #5
 8002e32:	1a52      	subs	r2, r2, r1
 8002e34:	0193      	lsls	r3, r2, #6
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	185b      	adds	r3, r3, r1
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e44:	e002      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b00f      	add	sp, #60	; 0x3c
 8002e54:	bd90      	pop	{r4, r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	08003094 	.word	0x08003094
 8002e5c:	080030a4 	.word	0x080030a4
 8002e60:	40021000 	.word	0x40021000
 8002e64:	007a1200 	.word	0x007a1200

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	4013      	ands	r3, r2
 8002e82:	d100      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e84:	e08e      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2017      	movs	r0, #23
 8002e88:	183b      	adds	r3, r7, r0
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b57      	ldr	r3, [pc, #348]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	055b      	lsls	r3, r3, #21
 8002e96:	4013      	ands	r3, r2
 8002e98:	d110      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b54      	ldr	r3, [pc, #336]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	0549      	lsls	r1, r1, #21
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	61da      	str	r2, [r3, #28]
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	055b      	lsls	r3, r3, #21
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	183b      	adds	r3, r7, r0
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d11a      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec8:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b48      	ldr	r3, [pc, #288]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	0049      	lsls	r1, r1, #1
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed6:	f7fd fee7 	bl	8000ca8 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	e008      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee0:	f7fd fee2 	bl	8000ca8 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e077      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	23c0      	movs	r3, #192	; 0xc0
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d034      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	23c0      	movs	r3, #192	; 0xc0
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d02c      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f20:	4b32      	ldr	r3, [pc, #200]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a33      	ldr	r2, [pc, #204]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f2c:	6a1a      	ldr	r2, [r3, #32]
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f30:	2180      	movs	r1, #128	; 0x80
 8002f32:	0249      	lsls	r1, r1, #9
 8002f34:	430a      	orrs	r2, r1
 8002f36:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f3e:	492e      	ldr	r1, [pc, #184]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f44:	4b29      	ldr	r3, [pc, #164]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7fd fea9 	bl	8000ca8 <HAL_GetTick>
 8002f56:	0003      	movs	r3, r0
 8002f58:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	e009      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fd fea4 	bl	8000ca8 <HAL_GetTick>
 8002f60:	0002      	movs	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e038      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	2202      	movs	r2, #2
 8002f76:	4013      	ands	r3, r2
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f8e:	2317      	movs	r3, #23
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f9e:	4918      	ldr	r1, [pc, #96]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	4393      	bics	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b006      	add	sp, #24
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	fffffcff 	.word	0xfffffcff
 8002ff8:	fffeffff 	.word	0xfffeffff
 8002ffc:	00001388 	.word	0x00001388
 8003000:	efffffff 	.word	0xefffffff

08003004 <__libc_init_array>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2600      	movs	r6, #0
 8003008:	4d0c      	ldr	r5, [pc, #48]	; (800303c <__libc_init_array+0x38>)
 800300a:	4c0d      	ldr	r4, [pc, #52]	; (8003040 <__libc_init_array+0x3c>)
 800300c:	1b64      	subs	r4, r4, r5
 800300e:	10a4      	asrs	r4, r4, #2
 8003010:	42a6      	cmp	r6, r4
 8003012:	d109      	bne.n	8003028 <__libc_init_array+0x24>
 8003014:	2600      	movs	r6, #0
 8003016:	f000 f821 	bl	800305c <_init>
 800301a:	4d0a      	ldr	r5, [pc, #40]	; (8003044 <__libc_init_array+0x40>)
 800301c:	4c0a      	ldr	r4, [pc, #40]	; (8003048 <__libc_init_array+0x44>)
 800301e:	1b64      	subs	r4, r4, r5
 8003020:	10a4      	asrs	r4, r4, #2
 8003022:	42a6      	cmp	r6, r4
 8003024:	d105      	bne.n	8003032 <__libc_init_array+0x2e>
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	00b3      	lsls	r3, r6, #2
 800302a:	58eb      	ldr	r3, [r5, r3]
 800302c:	4798      	blx	r3
 800302e:	3601      	adds	r6, #1
 8003030:	e7ee      	b.n	8003010 <__libc_init_array+0xc>
 8003032:	00b3      	lsls	r3, r6, #2
 8003034:	58eb      	ldr	r3, [r5, r3]
 8003036:	4798      	blx	r3
 8003038:	3601      	adds	r6, #1
 800303a:	e7f2      	b.n	8003022 <__libc_init_array+0x1e>
 800303c:	080030c4 	.word	0x080030c4
 8003040:	080030c4 	.word	0x080030c4
 8003044:	080030c4 	.word	0x080030c4
 8003048:	080030c8 	.word	0x080030c8

0800304c <memset>:
 800304c:	0003      	movs	r3, r0
 800304e:	1882      	adds	r2, r0, r2
 8003050:	4293      	cmp	r3, r2
 8003052:	d100      	bne.n	8003056 <memset+0xa>
 8003054:	4770      	bx	lr
 8003056:	7019      	strb	r1, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	e7f9      	b.n	8003050 <memset+0x4>

0800305c <_init>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr

08003068 <_fini>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr
