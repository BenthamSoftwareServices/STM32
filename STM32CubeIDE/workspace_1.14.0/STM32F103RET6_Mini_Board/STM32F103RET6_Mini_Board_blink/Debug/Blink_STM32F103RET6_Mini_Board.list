
Blink_STM32F103RET6_Mini_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002304  08002304  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002304  08002304  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002304  08002304  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002304  08002304  00012304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002308  08002308  00012308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800230c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08002374  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002374  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   000034f0  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000118e  00000000  00000000  000235c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a8  00000000  00000000  00024758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000351  00000000  00000000  00024c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192e5  00000000  00000000  00024f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000059ba  00000000  00000000  0003e236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f735  00000000  00000000  00043bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001808  00000000  00000000  000d3328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000d4b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08002284 	.word	0x08002284

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08002284 	.word	0x08002284

08000224 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800022c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000230:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000234:	f003 0301 	and.w	r3, r3, #1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d013      	beq.n	8000264 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800023c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000240:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000244:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000248:	2b00      	cmp	r3, #0
 800024a:	d00b      	beq.n	8000264 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800024c:	e000      	b.n	8000250 <ITM_SendChar+0x2c>
    {
      __NOP();
 800024e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f9      	beq.n	800024e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800025a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000264:	687b      	ldr	r3, [r7, #4]
}
 8000266:	4618      	mov	r0, r3
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 f9d2 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f814 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f858 	bl	8000330 <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		printf("counter = %d\n", counter++);
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <main+0x2c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	4905      	ldr	r1, [pc, #20]	; (800029c <main+0x2c>)
 8000288:	600a      	str	r2, [r1, #0]
 800028a:	4619      	mov	r1, r3
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <main+0x30>)
 800028e:	f001 f97b 	bl	8001588 <iprintf>
//		printf("counter = \n");
//		HAL_GPIO_WritePin(GPIOB, LED_Pin, 0);
//		HAL_Delay(100);
//		HAL_GPIO_WritePin(GPIOB, LED_Pin, 1);
//		HAL_Delay(100);
		HAL_Delay(500);
 8000292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000296:	f000 fa23 	bl	80006e0 <HAL_Delay>
		printf("counter = %d\n", counter++);
 800029a:	e7f1      	b.n	8000280 <main+0x10>
 800029c:	20000084 	.word	0x20000084
 80002a0:	0800229c 	.word	0x0800229c

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 f9bd 	bl	8001632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	2301      	movs	r3, #1
 80002d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d8:	2302      	movs	r3, #2
 80002da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fcab 	bl	8000c48 <HAL_RCC_OscConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002f8:	f000 f882 	bl	8000400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	2302      	movs	r3, #2
 8000302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2102      	movs	r1, #2
 8000316:	4618      	mov	r0, r3
 8000318:	f000 ff18 	bl	800114c <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000322:	f000 f86d 	bl	8000400 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	; 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000344:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <MX_GPIO_Init+0x90>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a1d      	ldr	r2, [pc, #116]	; (80003c0 <MX_GPIO_Init+0x90>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0320 	and.w	r3, r3, #32
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <MX_GPIO_Init+0x90>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0308 	and.w	r3, r3, #8
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <MX_GPIO_Init+0x90>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <MX_GPIO_Init+0x94>)
 8000394:	f000 fc40 	bl	8000c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800039c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	4619      	mov	r1, r3
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_GPIO_Init+0x94>)
 80003b2:	f000 fa9d 	bl	80008f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b6:	bf00      	nop
 80003b8:	3720      	adds	r7, #32
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	e009      	b.n	80003ee <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	1c5a      	adds	r2, r3, #1
 80003de:	60ba      	str	r2, [r7, #8]
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff1e 	bl	8000224 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	3301      	adds	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	697a      	ldr	r2, [r7, #20]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	dbf1      	blt.n	80003da <_write+0x12>
  }
  return len;
 80003f6:	687b      	ldr	r3, [r7, #4]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000408:	e7fe      	b.n	8000408 <Error_Handler+0x8>
	...

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <HAL_MspInit+0x5c>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a14      	ldr	r2, [pc, #80]	; (8000468 <HAL_MspInit+0x5c>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6193      	str	r3, [r2, #24]
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x5c>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x5c>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000434:	61d3      	str	r3, [r2, #28]
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <HAL_MspInit+0x60>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <HAL_MspInit+0x60>)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000
 800046c:	40010000 	.word	0x40010000

08000470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000474:	e7fe      	b.n	8000474 <NMI_Handler+0x4>

08000476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <MemManage_Handler+0x4>

08000482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <BusFault_Handler+0x4>

08000488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <UsageFault_Handler+0x4>

0800048e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b6:	f000 f8f7 	bl	80006a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}

080004be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b086      	sub	sp, #24
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	e00a      	b.n	80004e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004d0:	f3af 8000 	nop.w
 80004d4:	4601      	mov	r1, r0
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	1c5a      	adds	r2, r3, #1
 80004da:	60ba      	str	r2, [r7, #8]
 80004dc:	b2ca      	uxtb	r2, r1
 80004de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	3301      	adds	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	697a      	ldr	r2, [r7, #20]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	dbf0      	blt.n	80004d0 <_read+0x12>
  }

  return len;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800051e:	605a      	str	r2, [r3, #4]
  return 0;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <_isatty>:

int _isatty(int file)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000534:	2301      	movs	r3, #1
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <_sbrk+0x5c>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <_sbrk+0x60>)
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <_sbrk+0x64>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <_sbrk+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	429a      	cmp	r2, r3
 8000586:	d207      	bcs.n	8000598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000588:	f001 f8a2 	bl	80016d0 <__errno>
 800058c:	4603      	mov	r3, r0
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e009      	b.n	80005ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <_sbrk+0x64>)
 80005a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20010000 	.word	0x20010000
 80005b8:	00000400 	.word	0x00000400
 80005bc:	20000088 	.word	0x20000088
 80005c0:	200001e0 	.word	0x200001e0

080005c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d0:	f7ff fff8 	bl	80005c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005d6:	490c      	ldr	r1, [pc, #48]	; (8000608 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a09      	ldr	r2, [pc, #36]	; (8000610 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005ec:	4c09      	ldr	r4, [pc, #36]	; (8000614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fa:	f001 f86f 	bl	80016dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fe37 	bl	8000270 <main>
  bx lr
 8000602:	4770      	bx	lr
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800060c:	0800230c 	.word	0x0800230c
  ldr r2, =_sbss
 8000610:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000614:	200001dc 	.word	0x200001dc

08000618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_2_IRQHandler>
	...

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_Init+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_Init+0x28>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f92b 	bl	8000888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	200f      	movs	r0, #15
 8000634:	f000 f808 	bl	8000648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000638:	f7ff fee8 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_InitTick+0x54>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_InitTick+0x58>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000662:	fbb2 f3f3 	udiv	r3, r2, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f935 	bl	80008d6 <HAL_SYSTICK_Config>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e00e      	b.n	8000694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d80a      	bhi.n	8000692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f000 f90b 	bl	800089e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_InitTick+0x5c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	e000      	b.n	8000694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_IncTick+0x1c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x20>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <HAL_IncTick+0x20>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000008 	.word	0x20000008
 80006c8:	2000008c 	.word	0x2000008c

080006cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return uwTick;
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <HAL_GetTick+0x10>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	2000008c 	.word	0x2000008c

080006e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e8:	f7ff fff0 	bl	80006cc <HAL_GetTick>
 80006ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f8:	d005      	beq.n	8000706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_Delay+0x44>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000706:	bf00      	nop
 8000708:	f7ff ffe0 	bl	80006cc <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8f7      	bhi.n	8000708 <HAL_Delay+0x28>
  {
  }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000008 	.word	0x20000008

08000728 <__NVIC_SetPriorityGrouping>:
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_SetPriority>:
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	db0a      	blt.n	80007b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	490c      	ldr	r1, [pc, #48]	; (80007d8 <__NVIC_SetPriority+0x4c>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	440b      	add	r3, r1
 80007b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007b4:	e00a      	b.n	80007cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <__NVIC_SetPriority+0x50>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	3b04      	subs	r3, #4
 80007c4:	0112      	lsls	r2, r2, #4
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	440b      	add	r3, r1
 80007ca:	761a      	strb	r2, [r3, #24]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000e100 	.word	0xe000e100
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <NVIC_EncodePriority>:
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	bf28      	it	cs
 80007fe:	2304      	movcs	r3, #4
 8000800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3304      	adds	r3, #4
 8000806:	2b06      	cmp	r3, #6
 8000808:	d902      	bls.n	8000810 <NVIC_EncodePriority+0x30>
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3b03      	subs	r3, #3
 800080e:	e000      	b.n	8000812 <NVIC_EncodePriority+0x32>
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	f04f 32ff 	mov.w	r2, #4294967295
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43da      	mvns	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	401a      	ands	r2, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43d9      	mvns	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4313      	orrs	r3, r2
}
 800083a:	4618      	mov	r0, r3
 800083c:	3724      	adds	r7, #36	; 0x24
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <SysTick_Config>:
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000854:	d301      	bcc.n	800085a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000856:	2301      	movs	r3, #1
 8000858:	e00f      	b.n	800087a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <SysTick_Config+0x40>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000862:	210f      	movs	r1, #15
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f7ff ff90 	bl	800078c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <SysTick_Config+0x40>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <SysTick_Config+0x40>)
 8000874:	2207      	movs	r2, #7
 8000876:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	e000e010 	.word	0xe000e010

08000888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff49 	bl	8000728 <__NVIC_SetPriorityGrouping>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800089e:	b580      	push	{r7, lr}
 80008a0:	b086      	sub	sp, #24
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
 80008aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b0:	f7ff ff5e 	bl	8000770 <__NVIC_GetPriorityGrouping>
 80008b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	6978      	ldr	r0, [r7, #20]
 80008bc:	f7ff ff90 	bl	80007e0 <NVIC_EncodePriority>
 80008c0:	4602      	mov	r2, r0
 80008c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff5f 	bl	800078c <__NVIC_SetPriority>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ffb0 	bl	8000844 <SysTick_Config>
 80008e4:	4603      	mov	r3, r0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b08b      	sub	sp, #44	; 0x2c
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000902:	e179      	b.n	8000bf8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000904:	2201      	movs	r2, #1
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	429a      	cmp	r2, r3
 800091e:	f040 8168 	bne.w	8000bf2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	4a96      	ldr	r2, [pc, #600]	; (8000b80 <HAL_GPIO_Init+0x290>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d05e      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 800092c:	4a94      	ldr	r2, [pc, #592]	; (8000b80 <HAL_GPIO_Init+0x290>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d875      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 8000932:	4a94      	ldr	r2, [pc, #592]	; (8000b84 <HAL_GPIO_Init+0x294>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d058      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 8000938:	4a92      	ldr	r2, [pc, #584]	; (8000b84 <HAL_GPIO_Init+0x294>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d86f      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 800093e:	4a92      	ldr	r2, [pc, #584]	; (8000b88 <HAL_GPIO_Init+0x298>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d052      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 8000944:	4a90      	ldr	r2, [pc, #576]	; (8000b88 <HAL_GPIO_Init+0x298>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d869      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 800094a:	4a90      	ldr	r2, [pc, #576]	; (8000b8c <HAL_GPIO_Init+0x29c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d04c      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 8000950:	4a8e      	ldr	r2, [pc, #568]	; (8000b8c <HAL_GPIO_Init+0x29c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d863      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 8000956:	4a8e      	ldr	r2, [pc, #568]	; (8000b90 <HAL_GPIO_Init+0x2a0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d046      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 800095c:	4a8c      	ldr	r2, [pc, #560]	; (8000b90 <HAL_GPIO_Init+0x2a0>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d85d      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 8000962:	2b12      	cmp	r3, #18
 8000964:	d82a      	bhi.n	80009bc <HAL_GPIO_Init+0xcc>
 8000966:	2b12      	cmp	r3, #18
 8000968:	d859      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 800096a:	a201      	add	r2, pc, #4	; (adr r2, 8000970 <HAL_GPIO_Init+0x80>)
 800096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000970:	080009eb 	.word	0x080009eb
 8000974:	080009c5 	.word	0x080009c5
 8000978:	080009d7 	.word	0x080009d7
 800097c:	08000a19 	.word	0x08000a19
 8000980:	08000a1f 	.word	0x08000a1f
 8000984:	08000a1f 	.word	0x08000a1f
 8000988:	08000a1f 	.word	0x08000a1f
 800098c:	08000a1f 	.word	0x08000a1f
 8000990:	08000a1f 	.word	0x08000a1f
 8000994:	08000a1f 	.word	0x08000a1f
 8000998:	08000a1f 	.word	0x08000a1f
 800099c:	08000a1f 	.word	0x08000a1f
 80009a0:	08000a1f 	.word	0x08000a1f
 80009a4:	08000a1f 	.word	0x08000a1f
 80009a8:	08000a1f 	.word	0x08000a1f
 80009ac:	08000a1f 	.word	0x08000a1f
 80009b0:	08000a1f 	.word	0x08000a1f
 80009b4:	080009cd 	.word	0x080009cd
 80009b8:	080009e1 	.word	0x080009e1
 80009bc:	4a75      	ldr	r2, [pc, #468]	; (8000b94 <HAL_GPIO_Init+0x2a4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d013      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009c2:	e02c      	b.n	8000a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	623b      	str	r3, [r7, #32]
          break;
 80009ca:	e029      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	3304      	adds	r3, #4
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	e024      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	3308      	adds	r3, #8
 80009dc:	623b      	str	r3, [r7, #32]
          break;
 80009de:	e01f      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	330c      	adds	r3, #12
 80009e6:	623b      	str	r3, [r7, #32]
          break;
 80009e8:	e01a      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009f2:	2304      	movs	r3, #4
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e013      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d105      	bne.n	8000a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a00:	2308      	movs	r3, #8
 8000a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	611a      	str	r2, [r3, #16]
          break;
 8000a0a:	e009      	b.n	8000a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	615a      	str	r2, [r3, #20]
          break;
 8000a16:	e003      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          break;
 8000a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	d801      	bhi.n	8000a2a <HAL_GPIO_Init+0x13a>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	e001      	b.n	8000a2e <HAL_GPIO_Init+0x13e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2bff      	cmp	r3, #255	; 0xff
 8000a34:	d802      	bhi.n	8000a3c <HAL_GPIO_Init+0x14c>
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	e002      	b.n	8000a42 <HAL_GPIO_Init+0x152>
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	3b08      	subs	r3, #8
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	210f      	movs	r1, #15
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	401a      	ands	r2, r3
 8000a54:	6a39      	ldr	r1, [r7, #32]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 80c1 	beq.w	8000bf2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a70:	4b49      	ldr	r3, [pc, #292]	; (8000b98 <HAL_GPIO_Init+0x2a8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <HAL_GPIO_Init+0x2a8>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <HAL_GPIO_Init+0x2a8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a88:	4a44      	ldr	r2, [pc, #272]	; (8000b9c <HAL_GPIO_Init+0x2ac>)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a3c      	ldr	r2, [pc, #240]	; (8000ba0 <HAL_GPIO_Init+0x2b0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d01f      	beq.n	8000af4 <HAL_GPIO_Init+0x204>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a3b      	ldr	r2, [pc, #236]	; (8000ba4 <HAL_GPIO_Init+0x2b4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d019      	beq.n	8000af0 <HAL_GPIO_Init+0x200>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a3a      	ldr	r2, [pc, #232]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d013      	beq.n	8000aec <HAL_GPIO_Init+0x1fc>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a39      	ldr	r2, [pc, #228]	; (8000bac <HAL_GPIO_Init+0x2bc>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00d      	beq.n	8000ae8 <HAL_GPIO_Init+0x1f8>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a38      	ldr	r2, [pc, #224]	; (8000bb0 <HAL_GPIO_Init+0x2c0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d007      	beq.n	8000ae4 <HAL_GPIO_Init+0x1f4>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a37      	ldr	r2, [pc, #220]	; (8000bb4 <HAL_GPIO_Init+0x2c4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d101      	bne.n	8000ae0 <HAL_GPIO_Init+0x1f0>
 8000adc:	2305      	movs	r3, #5
 8000ade:	e00a      	b.n	8000af6 <HAL_GPIO_Init+0x206>
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	e008      	b.n	8000af6 <HAL_GPIO_Init+0x206>
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x206>
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e004      	b.n	8000af6 <HAL_GPIO_Init+0x206>
 8000aec:	2302      	movs	r3, #2
 8000aee:	e002      	b.n	8000af6 <HAL_GPIO_Init+0x206>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x206>
 8000af4:	2300      	movs	r3, #0
 8000af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b06:	4925      	ldr	r1, [pc, #148]	; (8000b9c <HAL_GPIO_Init+0x2ac>)
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	4924      	ldr	r1, [pc, #144]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	608b      	str	r3, [r1, #8]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4920      	ldr	r1, [pc, #128]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	491a      	ldr	r1, [pc, #104]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60cb      	str	r3, [r1, #12]
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4916      	ldr	r1, [pc, #88]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d025      	beq.n	8000bbc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	4910      	ldr	r1, [pc, #64]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
 8000b7c:	e025      	b.n	8000bca <HAL_GPIO_Init+0x2da>
 8000b7e:	bf00      	nop
 8000b80:	10320000 	.word	0x10320000
 8000b84:	10310000 	.word	0x10310000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	10210000 	.word	0x10210000
 8000b90:	10120000 	.word	0x10120000
 8000b94:	10110000 	.word	0x10110000
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	40011400 	.word	0x40011400
 8000bb0:	40011800 	.word	0x40011800
 8000bb4:	40011c00 	.word	0x40011c00
 8000bb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_GPIO_Init+0x324>)
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	4913      	ldr	r1, [pc, #76]	; (8000c14 <HAL_GPIO_Init+0x324>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_GPIO_Init+0x324>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <HAL_GPIO_Init+0x324>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	600b      	str	r3, [r1, #0]
 8000be2:	e006      	b.n	8000bf2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_GPIO_Init+0x324>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4909      	ldr	r1, [pc, #36]	; (8000c14 <HAL_GPIO_Init+0x324>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f47f ae7e 	bne.w	8000904 <HAL_GPIO_Init+0x14>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	372c      	adds	r7, #44	; 0x2c
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40010400 	.word	0x40010400

08000c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
 8000c24:	4613      	mov	r3, r2
 8000c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c28:	787b      	ldrb	r3, [r7, #1]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c2e:	887a      	ldrh	r2, [r7, #2]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c34:	e003      	b.n	8000c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	041a      	lsls	r2, r3, #16
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	611a      	str	r2, [r3, #16]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e272      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8087 	beq.w	8000d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c68:	4b92      	ldr	r3, [pc, #584]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d00c      	beq.n	8000c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c74:	4b8f      	ldr	r3, [pc, #572]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 030c 	and.w	r3, r3, #12
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d112      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x5e>
 8000c80:	4b8c      	ldr	r3, [pc, #560]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8c:	d10b      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8e:	4b89      	ldr	r3, [pc, #548]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d06c      	beq.n	8000d74 <HAL_RCC_OscConfig+0x12c>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d168      	bne.n	8000d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e24c      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cae:	d106      	bne.n	8000cbe <HAL_RCC_OscConfig+0x76>
 8000cb0:	4b80      	ldr	r3, [pc, #512]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a7f      	ldr	r2, [pc, #508]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e02e      	b.n	8000d1c <HAL_RCC_OscConfig+0xd4>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x98>
 8000cc6:	4b7b      	ldr	r3, [pc, #492]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a7a      	ldr	r2, [pc, #488]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b78      	ldr	r3, [pc, #480]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a77      	ldr	r2, [pc, #476]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e01d      	b.n	8000d1c <HAL_RCC_OscConfig+0xd4>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce8:	d10c      	bne.n	8000d04 <HAL_RCC_OscConfig+0xbc>
 8000cea:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a71      	ldr	r2, [pc, #452]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b6f      	ldr	r3, [pc, #444]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a6e      	ldr	r2, [pc, #440]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e00b      	b.n	8000d1c <HAL_RCC_OscConfig+0xd4>
 8000d04:	4b6b      	ldr	r3, [pc, #428]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a6a      	ldr	r2, [pc, #424]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b68      	ldr	r3, [pc, #416]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a67      	ldr	r2, [pc, #412]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d013      	beq.n	8000d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff fcd2 	bl	80006cc <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d2c:	f7ff fcce 	bl	80006cc <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b64      	cmp	r3, #100	; 0x64
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e200      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3e:	4b5d      	ldr	r3, [pc, #372]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f0      	beq.n	8000d2c <HAL_RCC_OscConfig+0xe4>
 8000d4a:	e014      	b.n	8000d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fcbe 	bl	80006cc <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fcba 	bl	80006cc <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e1ec      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d66:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f0      	bne.n	8000d54 <HAL_RCC_OscConfig+0x10c>
 8000d72:	e000      	b.n	8000d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d063      	beq.n	8000e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d82:	4b4c      	ldr	r3, [pc, #304]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00b      	beq.n	8000da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d8e:	4b49      	ldr	r3, [pc, #292]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 030c 	and.w	r3, r3, #12
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d11c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x18c>
 8000d9a:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d116      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da6:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <HAL_RCC_OscConfig+0x176>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d001      	beq.n	8000dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e1c0      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbe:	4b3d      	ldr	r3, [pc, #244]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4939      	ldr	r1, [pc, #228]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd2:	e03a      	b.n	8000e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d020      	beq.n	8000e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de2:	f7ff fc73 	bl	80006cc <HAL_GetTick>
 8000de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dea:	f7ff fc6f 	bl	80006cc <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e1a1      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f0      	beq.n	8000dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4927      	ldr	r1, [pc, #156]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
 8000e1c:	e015      	b.n	8000e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e24:	f7ff fc52 	bl	80006cc <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fc4e 	bl	80006cc <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e180      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f0      	bne.n	8000e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d03a      	beq.n	8000ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d019      	beq.n	8000e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_RCC_OscConfig+0x274>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e64:	f7ff fc32 	bl	80006cc <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fc2e 	bl	80006cc <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e160      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f0      	beq.n	8000e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 fa9c 	bl	80013c8 <RCC_Delay>
 8000e90:	e01c      	b.n	8000ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_RCC_OscConfig+0x274>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e98:	f7ff fc18 	bl	80006cc <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9e:	e00f      	b.n	8000ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fc14 	bl	80006cc <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d908      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e146      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	42420000 	.word	0x42420000
 8000ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec0:	4b92      	ldr	r3, [pc, #584]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1e9      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80a6 	beq.w	8001026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ede:	4b8b      	ldr	r3, [pc, #556]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10d      	bne.n	8000f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b88      	ldr	r3, [pc, #544]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a87      	ldr	r2, [pc, #540]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b85      	ldr	r3, [pc, #532]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f02:	2301      	movs	r3, #1
 8000f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f06:	4b82      	ldr	r3, [pc, #520]	; (8001110 <HAL_RCC_OscConfig+0x4c8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d118      	bne.n	8000f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f12:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <HAL_RCC_OscConfig+0x4c8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a7e      	ldr	r2, [pc, #504]	; (8001110 <HAL_RCC_OscConfig+0x4c8>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1e:	f7ff fbd5 	bl	80006cc <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f26:	f7ff fbd1 	bl	80006cc <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b64      	cmp	r3, #100	; 0x64
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e103      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f38:	4b75      	ldr	r3, [pc, #468]	; (8001110 <HAL_RCC_OscConfig+0x4c8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f0      	beq.n	8000f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d106      	bne.n	8000f5a <HAL_RCC_OscConfig+0x312>
 8000f4c:	4b6f      	ldr	r3, [pc, #444]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4a6e      	ldr	r2, [pc, #440]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6213      	str	r3, [r2, #32]
 8000f58:	e02d      	b.n	8000fb6 <HAL_RCC_OscConfig+0x36e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x334>
 8000f62:	4b6a      	ldr	r3, [pc, #424]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	4a69      	ldr	r2, [pc, #420]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	6213      	str	r3, [r2, #32]
 8000f6e:	4b67      	ldr	r3, [pc, #412]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4a66      	ldr	r2, [pc, #408]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	f023 0304 	bic.w	r3, r3, #4
 8000f78:	6213      	str	r3, [r2, #32]
 8000f7a:	e01c      	b.n	8000fb6 <HAL_RCC_OscConfig+0x36e>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	d10c      	bne.n	8000f9e <HAL_RCC_OscConfig+0x356>
 8000f84:	4b61      	ldr	r3, [pc, #388]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	4a60      	ldr	r2, [pc, #384]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6213      	str	r3, [r2, #32]
 8000f90:	4b5e      	ldr	r3, [pc, #376]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4a5d      	ldr	r2, [pc, #372]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6213      	str	r3, [r2, #32]
 8000f9c:	e00b      	b.n	8000fb6 <HAL_RCC_OscConfig+0x36e>
 8000f9e:	4b5b      	ldr	r3, [pc, #364]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	4a5a      	ldr	r2, [pc, #360]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	6213      	str	r3, [r2, #32]
 8000faa:	4b58      	ldr	r3, [pc, #352]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	4a57      	ldr	r2, [pc, #348]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	f023 0304 	bic.w	r3, r3, #4
 8000fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d015      	beq.n	8000fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fb85 	bl	80006cc <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc4:	e00a      	b.n	8000fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc6:	f7ff fb81 	bl	80006cc <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e0b1      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fdc:	4b4b      	ldr	r3, [pc, #300]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0ee      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x37e>
 8000fe8:	e014      	b.n	8001014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fb6f 	bl	80006cc <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff0:	e00a      	b.n	8001008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fb6b 	bl	80006cc <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001000:	4293      	cmp	r3, r2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e09b      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001008:	4b40      	ldr	r3, [pc, #256]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1ee      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d105      	bne.n	8001026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a3b      	ldr	r2, [pc, #236]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8087 	beq.w	800113e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001030:	4b36      	ldr	r3, [pc, #216]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b08      	cmp	r3, #8
 800103a:	d061      	beq.n	8001100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d146      	bne.n	80010d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001044:	4b33      	ldr	r3, [pc, #204]	; (8001114 <HAL_RCC_OscConfig+0x4cc>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104a:	f7ff fb3f 	bl	80006cc <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001052:	f7ff fb3b 	bl	80006cc <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e06d      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f0      	bne.n	8001052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001078:	d108      	bne.n	800108c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	4921      	ldr	r1, [pc, #132]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a19      	ldr	r1, [r3, #32]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	430b      	orrs	r3, r1
 800109e:	491b      	ldr	r1, [pc, #108]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_RCC_OscConfig+0x4cc>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010aa:	f7ff fb0f 	bl	80006cc <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b2:	f7ff fb0b 	bl	80006cc <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e03d      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x46a>
 80010d0:	e035      	b.n	800113e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_RCC_OscConfig+0x4cc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff faf8 	bl	80006cc <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e0:	f7ff faf4 	bl	80006cc <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e026      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x498>
 80010fe:	e01e      	b.n	800113e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d107      	bne.n	8001118 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e019      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
 800110c:	40021000 	.word	0x40021000
 8001110:	40007000 	.word	0x40007000
 8001114:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_RCC_OscConfig+0x500>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	429a      	cmp	r2, r3
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001136:	429a      	cmp	r2, r3
 8001138:	d001      	beq.n	800113e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0d0      	b.n	8001302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001160:	4b6a      	ldr	r3, [pc, #424]	; (800130c <HAL_RCC_ClockConfig+0x1c0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d910      	bls.n	8001190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116e:	4b67      	ldr	r3, [pc, #412]	; (800130c <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 0207 	bic.w	r2, r3, #7
 8001176:	4965      	ldr	r1, [pc, #404]	; (800130c <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	4b63      	ldr	r3, [pc, #396]	; (800130c <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0b8      	b.n	8001302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a8:	4b59      	ldr	r3, [pc, #356]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a58      	ldr	r2, [pc, #352]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c0:	4b53      	ldr	r3, [pc, #332]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011cc:	4b50      	ldr	r3, [pc, #320]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	494d      	ldr	r1, [pc, #308]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d040      	beq.n	800126c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d115      	bne.n	800122a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e07f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d107      	bne.n	800121a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e073      	b.n	8001302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e06b      	b.n	8001302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122a:	4b39      	ldr	r3, [pc, #228]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f023 0203 	bic.w	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4936      	ldr	r1, [pc, #216]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800123c:	f7ff fa46 	bl	80006cc <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001242:	e00a      	b.n	800125a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001244:	f7ff fa42 	bl	80006cc <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e053      	b.n	8001302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 020c 	and.w	r2, r3, #12
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	429a      	cmp	r2, r3
 800126a:	d1eb      	bne.n	8001244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_RCC_ClockConfig+0x1c0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d210      	bcs.n	800129c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 0207 	bic.w	r2, r3, #7
 8001282:	4922      	ldr	r1, [pc, #136]	; (800130c <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e032      	b.n	8001302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4916      	ldr	r1, [pc, #88]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	490e      	ldr	r1, [pc, #56]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012da:	f000 f821 	bl	8001320 <HAL_RCC_GetSysClockFreq>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	490a      	ldr	r1, [pc, #40]	; (8001314 <HAL_RCC_ClockConfig+0x1c8>)
 80012ec:	5ccb      	ldrb	r3, [r1, r3]
 80012ee:	fa22 f303 	lsr.w	r3, r2, r3
 80012f2:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_RCC_ClockConfig+0x1cc>)
 80012f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_RCC_ClockConfig+0x1d0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f9a4 	bl	8000648 <HAL_InitTick>

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000
 8001310:	40021000 	.word	0x40021000
 8001314:	080022ac 	.word	0x080022ac
 8001318:	20000000 	.word	0x20000000
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b04      	cmp	r3, #4
 8001348:	d002      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0x30>
 800134a:	2b08      	cmp	r3, #8
 800134c:	d003      	beq.n	8001356 <HAL_RCC_GetSysClockFreq+0x36>
 800134e:	e027      	b.n	80013a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001352:	613b      	str	r3, [r7, #16]
      break;
 8001354:	e027      	b.n	80013a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	0c9b      	lsrs	r3, r3, #18
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d010      	beq.n	8001390 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	0c5b      	lsrs	r3, r3, #17
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001382:	fb03 f202 	mul.w	r2, r3, r2
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	fbb2 f3f3 	udiv	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e004      	b.n	800139a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	613b      	str	r3, [r7, #16]
      break;
 800139e:	e002      	b.n	80013a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80013a2:	613b      	str	r3, [r7, #16]
      break;
 80013a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013a6:	693b      	ldr	r3, [r7, #16]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	007a1200 	.word	0x007a1200
 80013bc:	080022bc 	.word	0x080022bc
 80013c0:	080022cc 	.word	0x080022cc
 80013c4:	003d0900 	.word	0x003d0900

080013c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <RCC_Delay+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <RCC_Delay+0x38>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0a5b      	lsrs	r3, r3, #9
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013e4:	bf00      	nop
  }
  while (Delay --);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	60fa      	str	r2, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <RCC_Delay+0x1c>
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000000 	.word	0x20000000
 8001400:	10624dd3 	.word	0x10624dd3

08001404 <std>:
 8001404:	2300      	movs	r3, #0
 8001406:	b510      	push	{r4, lr}
 8001408:	4604      	mov	r4, r0
 800140a:	e9c0 3300 	strd	r3, r3, [r0]
 800140e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001412:	6083      	str	r3, [r0, #8]
 8001414:	8181      	strh	r1, [r0, #12]
 8001416:	6643      	str	r3, [r0, #100]	; 0x64
 8001418:	81c2      	strh	r2, [r0, #14]
 800141a:	6183      	str	r3, [r0, #24]
 800141c:	4619      	mov	r1, r3
 800141e:	2208      	movs	r2, #8
 8001420:	305c      	adds	r0, #92	; 0x5c
 8001422:	f000 f906 	bl	8001632 <memset>
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <std+0x58>)
 8001428:	6224      	str	r4, [r4, #32]
 800142a:	6263      	str	r3, [r4, #36]	; 0x24
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <std+0x5c>)
 800142e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <std+0x60>)
 8001432:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <std+0x64>)
 8001436:	6323      	str	r3, [r4, #48]	; 0x30
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <std+0x68>)
 800143a:	429c      	cmp	r4, r3
 800143c:	d006      	beq.n	800144c <std+0x48>
 800143e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001442:	4294      	cmp	r4, r2
 8001444:	d002      	beq.n	800144c <std+0x48>
 8001446:	33d0      	adds	r3, #208	; 0xd0
 8001448:	429c      	cmp	r4, r3
 800144a:	d105      	bne.n	8001458 <std+0x54>
 800144c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001454:	f000 b966 	b.w	8001724 <__retarget_lock_init_recursive>
 8001458:	bd10      	pop	{r4, pc}
 800145a:	bf00      	nop
 800145c:	080015ad 	.word	0x080015ad
 8001460:	080015cf 	.word	0x080015cf
 8001464:	08001607 	.word	0x08001607
 8001468:	0800162b 	.word	0x0800162b
 800146c:	20000090 	.word	0x20000090

08001470 <stdio_exit_handler>:
 8001470:	4a02      	ldr	r2, [pc, #8]	; (800147c <stdio_exit_handler+0xc>)
 8001472:	4903      	ldr	r1, [pc, #12]	; (8001480 <stdio_exit_handler+0x10>)
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <stdio_exit_handler+0x14>)
 8001476:	f000 b869 	b.w	800154c <_fwalk_sglue>
 800147a:	bf00      	nop
 800147c:	2000000c 	.word	0x2000000c
 8001480:	08001fc5 	.word	0x08001fc5
 8001484:	20000018 	.word	0x20000018

08001488 <cleanup_stdio>:
 8001488:	6841      	ldr	r1, [r0, #4]
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <cleanup_stdio+0x34>)
 800148c:	b510      	push	{r4, lr}
 800148e:	4299      	cmp	r1, r3
 8001490:	4604      	mov	r4, r0
 8001492:	d001      	beq.n	8001498 <cleanup_stdio+0x10>
 8001494:	f000 fd96 	bl	8001fc4 <_fflush_r>
 8001498:	68a1      	ldr	r1, [r4, #8]
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <cleanup_stdio+0x38>)
 800149c:	4299      	cmp	r1, r3
 800149e:	d002      	beq.n	80014a6 <cleanup_stdio+0x1e>
 80014a0:	4620      	mov	r0, r4
 80014a2:	f000 fd8f 	bl	8001fc4 <_fflush_r>
 80014a6:	68e1      	ldr	r1, [r4, #12]
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <cleanup_stdio+0x3c>)
 80014aa:	4299      	cmp	r1, r3
 80014ac:	d004      	beq.n	80014b8 <cleanup_stdio+0x30>
 80014ae:	4620      	mov	r0, r4
 80014b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014b4:	f000 bd86 	b.w	8001fc4 <_fflush_r>
 80014b8:	bd10      	pop	{r4, pc}
 80014ba:	bf00      	nop
 80014bc:	20000090 	.word	0x20000090
 80014c0:	200000f8 	.word	0x200000f8
 80014c4:	20000160 	.word	0x20000160

080014c8 <global_stdio_init.part.0>:
 80014c8:	b510      	push	{r4, lr}
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <global_stdio_init.part.0+0x30>)
 80014cc:	4c0b      	ldr	r4, [pc, #44]	; (80014fc <global_stdio_init.part.0+0x34>)
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <global_stdio_init.part.0+0x38>)
 80014d0:	4620      	mov	r0, r4
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	2104      	movs	r1, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	f7ff ff94 	bl	8001404 <std>
 80014dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80014e0:	2201      	movs	r2, #1
 80014e2:	2109      	movs	r1, #9
 80014e4:	f7ff ff8e 	bl	8001404 <std>
 80014e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80014ec:	2202      	movs	r2, #2
 80014ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014f2:	2112      	movs	r1, #18
 80014f4:	f7ff bf86 	b.w	8001404 <std>
 80014f8:	200001c8 	.word	0x200001c8
 80014fc:	20000090 	.word	0x20000090
 8001500:	08001471 	.word	0x08001471

08001504 <__sfp_lock_acquire>:
 8001504:	4801      	ldr	r0, [pc, #4]	; (800150c <__sfp_lock_acquire+0x8>)
 8001506:	f000 b90e 	b.w	8001726 <__retarget_lock_acquire_recursive>
 800150a:	bf00      	nop
 800150c:	200001d1 	.word	0x200001d1

08001510 <__sfp_lock_release>:
 8001510:	4801      	ldr	r0, [pc, #4]	; (8001518 <__sfp_lock_release+0x8>)
 8001512:	f000 b909 	b.w	8001728 <__retarget_lock_release_recursive>
 8001516:	bf00      	nop
 8001518:	200001d1 	.word	0x200001d1

0800151c <__sinit>:
 800151c:	b510      	push	{r4, lr}
 800151e:	4604      	mov	r4, r0
 8001520:	f7ff fff0 	bl	8001504 <__sfp_lock_acquire>
 8001524:	6a23      	ldr	r3, [r4, #32]
 8001526:	b11b      	cbz	r3, 8001530 <__sinit+0x14>
 8001528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800152c:	f7ff bff0 	b.w	8001510 <__sfp_lock_release>
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__sinit+0x28>)
 8001532:	6223      	str	r3, [r4, #32]
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <__sinit+0x2c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f5      	bne.n	8001528 <__sinit+0xc>
 800153c:	f7ff ffc4 	bl	80014c8 <global_stdio_init.part.0>
 8001540:	e7f2      	b.n	8001528 <__sinit+0xc>
 8001542:	bf00      	nop
 8001544:	08001489 	.word	0x08001489
 8001548:	200001c8 	.word	0x200001c8

0800154c <_fwalk_sglue>:
 800154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001550:	4607      	mov	r7, r0
 8001552:	4688      	mov	r8, r1
 8001554:	4614      	mov	r4, r2
 8001556:	2600      	movs	r6, #0
 8001558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800155c:	f1b9 0901 	subs.w	r9, r9, #1
 8001560:	d505      	bpl.n	800156e <_fwalk_sglue+0x22>
 8001562:	6824      	ldr	r4, [r4, #0]
 8001564:	2c00      	cmp	r4, #0
 8001566:	d1f7      	bne.n	8001558 <_fwalk_sglue+0xc>
 8001568:	4630      	mov	r0, r6
 800156a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800156e:	89ab      	ldrh	r3, [r5, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d907      	bls.n	8001584 <_fwalk_sglue+0x38>
 8001574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001578:	3301      	adds	r3, #1
 800157a:	d003      	beq.n	8001584 <_fwalk_sglue+0x38>
 800157c:	4629      	mov	r1, r5
 800157e:	4638      	mov	r0, r7
 8001580:	47c0      	blx	r8
 8001582:	4306      	orrs	r6, r0
 8001584:	3568      	adds	r5, #104	; 0x68
 8001586:	e7e9      	b.n	800155c <_fwalk_sglue+0x10>

08001588 <iprintf>:
 8001588:	b40f      	push	{r0, r1, r2, r3}
 800158a:	b507      	push	{r0, r1, r2, lr}
 800158c:	4906      	ldr	r1, [pc, #24]	; (80015a8 <iprintf+0x20>)
 800158e:	ab04      	add	r3, sp, #16
 8001590:	6808      	ldr	r0, [r1, #0]
 8001592:	f853 2b04 	ldr.w	r2, [r3], #4
 8001596:	6881      	ldr	r1, [r0, #8]
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	f000 f9e3 	bl	8001964 <_vfiprintf_r>
 800159e:	b003      	add	sp, #12
 80015a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80015a4:	b004      	add	sp, #16
 80015a6:	4770      	bx	lr
 80015a8:	20000064 	.word	0x20000064

080015ac <__sread>:
 80015ac:	b510      	push	{r4, lr}
 80015ae:	460c      	mov	r4, r1
 80015b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015b4:	f000 f868 	bl	8001688 <_read_r>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	bfab      	itete	ge
 80015bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80015be:	89a3      	ldrhlt	r3, [r4, #12]
 80015c0:	181b      	addge	r3, r3, r0
 80015c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80015c6:	bfac      	ite	ge
 80015c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80015ca:	81a3      	strhlt	r3, [r4, #12]
 80015cc:	bd10      	pop	{r4, pc}

080015ce <__swrite>:
 80015ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d2:	461f      	mov	r7, r3
 80015d4:	898b      	ldrh	r3, [r1, #12]
 80015d6:	4605      	mov	r5, r0
 80015d8:	05db      	lsls	r3, r3, #23
 80015da:	460c      	mov	r4, r1
 80015dc:	4616      	mov	r6, r2
 80015de:	d505      	bpl.n	80015ec <__swrite+0x1e>
 80015e0:	2302      	movs	r3, #2
 80015e2:	2200      	movs	r2, #0
 80015e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e8:	f000 f83c 	bl	8001664 <_lseek_r>
 80015ec:	89a3      	ldrh	r3, [r4, #12]
 80015ee:	4632      	mov	r2, r6
 80015f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015f4:	81a3      	strh	r3, [r4, #12]
 80015f6:	4628      	mov	r0, r5
 80015f8:	463b      	mov	r3, r7
 80015fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001602:	f000 b853 	b.w	80016ac <_write_r>

08001606 <__sseek>:
 8001606:	b510      	push	{r4, lr}
 8001608:	460c      	mov	r4, r1
 800160a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800160e:	f000 f829 	bl	8001664 <_lseek_r>
 8001612:	1c43      	adds	r3, r0, #1
 8001614:	89a3      	ldrh	r3, [r4, #12]
 8001616:	bf15      	itete	ne
 8001618:	6560      	strne	r0, [r4, #84]	; 0x54
 800161a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800161e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001622:	81a3      	strheq	r3, [r4, #12]
 8001624:	bf18      	it	ne
 8001626:	81a3      	strhne	r3, [r4, #12]
 8001628:	bd10      	pop	{r4, pc}

0800162a <__sclose>:
 800162a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800162e:	f000 b809 	b.w	8001644 <_close_r>

08001632 <memset>:
 8001632:	4603      	mov	r3, r0
 8001634:	4402      	add	r2, r0
 8001636:	4293      	cmp	r3, r2
 8001638:	d100      	bne.n	800163c <memset+0xa>
 800163a:	4770      	bx	lr
 800163c:	f803 1b01 	strb.w	r1, [r3], #1
 8001640:	e7f9      	b.n	8001636 <memset+0x4>
	...

08001644 <_close_r>:
 8001644:	b538      	push	{r3, r4, r5, lr}
 8001646:	2300      	movs	r3, #0
 8001648:	4d05      	ldr	r5, [pc, #20]	; (8001660 <_close_r+0x1c>)
 800164a:	4604      	mov	r4, r0
 800164c:	4608      	mov	r0, r1
 800164e:	602b      	str	r3, [r5, #0]
 8001650:	f7fe ff52 	bl	80004f8 <_close>
 8001654:	1c43      	adds	r3, r0, #1
 8001656:	d102      	bne.n	800165e <_close_r+0x1a>
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	b103      	cbz	r3, 800165e <_close_r+0x1a>
 800165c:	6023      	str	r3, [r4, #0]
 800165e:	bd38      	pop	{r3, r4, r5, pc}
 8001660:	200001cc 	.word	0x200001cc

08001664 <_lseek_r>:
 8001664:	b538      	push	{r3, r4, r5, lr}
 8001666:	4604      	mov	r4, r0
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	2200      	movs	r2, #0
 800166e:	4d05      	ldr	r5, [pc, #20]	; (8001684 <_lseek_r+0x20>)
 8001670:	602a      	str	r2, [r5, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	f7fe ff64 	bl	8000540 <_lseek>
 8001678:	1c43      	adds	r3, r0, #1
 800167a:	d102      	bne.n	8001682 <_lseek_r+0x1e>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	b103      	cbz	r3, 8001682 <_lseek_r+0x1e>
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	200001cc 	.word	0x200001cc

08001688 <_read_r>:
 8001688:	b538      	push	{r3, r4, r5, lr}
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	2200      	movs	r2, #0
 8001692:	4d05      	ldr	r5, [pc, #20]	; (80016a8 <_read_r+0x20>)
 8001694:	602a      	str	r2, [r5, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	f7fe ff11 	bl	80004be <_read>
 800169c:	1c43      	adds	r3, r0, #1
 800169e:	d102      	bne.n	80016a6 <_read_r+0x1e>
 80016a0:	682b      	ldr	r3, [r5, #0]
 80016a2:	b103      	cbz	r3, 80016a6 <_read_r+0x1e>
 80016a4:	6023      	str	r3, [r4, #0]
 80016a6:	bd38      	pop	{r3, r4, r5, pc}
 80016a8:	200001cc 	.word	0x200001cc

080016ac <_write_r>:
 80016ac:	b538      	push	{r3, r4, r5, lr}
 80016ae:	4604      	mov	r4, r0
 80016b0:	4608      	mov	r0, r1
 80016b2:	4611      	mov	r1, r2
 80016b4:	2200      	movs	r2, #0
 80016b6:	4d05      	ldr	r5, [pc, #20]	; (80016cc <_write_r+0x20>)
 80016b8:	602a      	str	r2, [r5, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	f7fe fe84 	bl	80003c8 <_write>
 80016c0:	1c43      	adds	r3, r0, #1
 80016c2:	d102      	bne.n	80016ca <_write_r+0x1e>
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	b103      	cbz	r3, 80016ca <_write_r+0x1e>
 80016c8:	6023      	str	r3, [r4, #0]
 80016ca:	bd38      	pop	{r3, r4, r5, pc}
 80016cc:	200001cc 	.word	0x200001cc

080016d0 <__errno>:
 80016d0:	4b01      	ldr	r3, [pc, #4]	; (80016d8 <__errno+0x8>)
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000064 	.word	0x20000064

080016dc <__libc_init_array>:
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	2600      	movs	r6, #0
 80016e0:	4d0c      	ldr	r5, [pc, #48]	; (8001714 <__libc_init_array+0x38>)
 80016e2:	4c0d      	ldr	r4, [pc, #52]	; (8001718 <__libc_init_array+0x3c>)
 80016e4:	1b64      	subs	r4, r4, r5
 80016e6:	10a4      	asrs	r4, r4, #2
 80016e8:	42a6      	cmp	r6, r4
 80016ea:	d109      	bne.n	8001700 <__libc_init_array+0x24>
 80016ec:	f000 fdca 	bl	8002284 <_init>
 80016f0:	2600      	movs	r6, #0
 80016f2:	4d0a      	ldr	r5, [pc, #40]	; (800171c <__libc_init_array+0x40>)
 80016f4:	4c0a      	ldr	r4, [pc, #40]	; (8001720 <__libc_init_array+0x44>)
 80016f6:	1b64      	subs	r4, r4, r5
 80016f8:	10a4      	asrs	r4, r4, #2
 80016fa:	42a6      	cmp	r6, r4
 80016fc:	d105      	bne.n	800170a <__libc_init_array+0x2e>
 80016fe:	bd70      	pop	{r4, r5, r6, pc}
 8001700:	f855 3b04 	ldr.w	r3, [r5], #4
 8001704:	4798      	blx	r3
 8001706:	3601      	adds	r6, #1
 8001708:	e7ee      	b.n	80016e8 <__libc_init_array+0xc>
 800170a:	f855 3b04 	ldr.w	r3, [r5], #4
 800170e:	4798      	blx	r3
 8001710:	3601      	adds	r6, #1
 8001712:	e7f2      	b.n	80016fa <__libc_init_array+0x1e>
 8001714:	08002304 	.word	0x08002304
 8001718:	08002304 	.word	0x08002304
 800171c:	08002304 	.word	0x08002304
 8001720:	08002308 	.word	0x08002308

08001724 <__retarget_lock_init_recursive>:
 8001724:	4770      	bx	lr

08001726 <__retarget_lock_acquire_recursive>:
 8001726:	4770      	bx	lr

08001728 <__retarget_lock_release_recursive>:
 8001728:	4770      	bx	lr
	...

0800172c <_free_r>:
 800172c:	b538      	push	{r3, r4, r5, lr}
 800172e:	4605      	mov	r5, r0
 8001730:	2900      	cmp	r1, #0
 8001732:	d040      	beq.n	80017b6 <_free_r+0x8a>
 8001734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001738:	1f0c      	subs	r4, r1, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	bfb8      	it	lt
 800173e:	18e4      	addlt	r4, r4, r3
 8001740:	f000 f8dc 	bl	80018fc <__malloc_lock>
 8001744:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <_free_r+0x8c>)
 8001746:	6813      	ldr	r3, [r2, #0]
 8001748:	b933      	cbnz	r3, 8001758 <_free_r+0x2c>
 800174a:	6063      	str	r3, [r4, #4]
 800174c:	6014      	str	r4, [r2, #0]
 800174e:	4628      	mov	r0, r5
 8001750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001754:	f000 b8d8 	b.w	8001908 <__malloc_unlock>
 8001758:	42a3      	cmp	r3, r4
 800175a:	d908      	bls.n	800176e <_free_r+0x42>
 800175c:	6820      	ldr	r0, [r4, #0]
 800175e:	1821      	adds	r1, r4, r0
 8001760:	428b      	cmp	r3, r1
 8001762:	bf01      	itttt	eq
 8001764:	6819      	ldreq	r1, [r3, #0]
 8001766:	685b      	ldreq	r3, [r3, #4]
 8001768:	1809      	addeq	r1, r1, r0
 800176a:	6021      	streq	r1, [r4, #0]
 800176c:	e7ed      	b.n	800174a <_free_r+0x1e>
 800176e:	461a      	mov	r2, r3
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	b10b      	cbz	r3, 8001778 <_free_r+0x4c>
 8001774:	42a3      	cmp	r3, r4
 8001776:	d9fa      	bls.n	800176e <_free_r+0x42>
 8001778:	6811      	ldr	r1, [r2, #0]
 800177a:	1850      	adds	r0, r2, r1
 800177c:	42a0      	cmp	r0, r4
 800177e:	d10b      	bne.n	8001798 <_free_r+0x6c>
 8001780:	6820      	ldr	r0, [r4, #0]
 8001782:	4401      	add	r1, r0
 8001784:	1850      	adds	r0, r2, r1
 8001786:	4283      	cmp	r3, r0
 8001788:	6011      	str	r1, [r2, #0]
 800178a:	d1e0      	bne.n	800174e <_free_r+0x22>
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4408      	add	r0, r1
 8001792:	6010      	str	r0, [r2, #0]
 8001794:	6053      	str	r3, [r2, #4]
 8001796:	e7da      	b.n	800174e <_free_r+0x22>
 8001798:	d902      	bls.n	80017a0 <_free_r+0x74>
 800179a:	230c      	movs	r3, #12
 800179c:	602b      	str	r3, [r5, #0]
 800179e:	e7d6      	b.n	800174e <_free_r+0x22>
 80017a0:	6820      	ldr	r0, [r4, #0]
 80017a2:	1821      	adds	r1, r4, r0
 80017a4:	428b      	cmp	r3, r1
 80017a6:	bf01      	itttt	eq
 80017a8:	6819      	ldreq	r1, [r3, #0]
 80017aa:	685b      	ldreq	r3, [r3, #4]
 80017ac:	1809      	addeq	r1, r1, r0
 80017ae:	6021      	streq	r1, [r4, #0]
 80017b0:	6063      	str	r3, [r4, #4]
 80017b2:	6054      	str	r4, [r2, #4]
 80017b4:	e7cb      	b.n	800174e <_free_r+0x22>
 80017b6:	bd38      	pop	{r3, r4, r5, pc}
 80017b8:	200001d4 	.word	0x200001d4

080017bc <sbrk_aligned>:
 80017bc:	b570      	push	{r4, r5, r6, lr}
 80017be:	4e0e      	ldr	r6, [pc, #56]	; (80017f8 <sbrk_aligned+0x3c>)
 80017c0:	460c      	mov	r4, r1
 80017c2:	6831      	ldr	r1, [r6, #0]
 80017c4:	4605      	mov	r5, r0
 80017c6:	b911      	cbnz	r1, 80017ce <sbrk_aligned+0x12>
 80017c8:	f000 fcba 	bl	8002140 <_sbrk_r>
 80017cc:	6030      	str	r0, [r6, #0]
 80017ce:	4621      	mov	r1, r4
 80017d0:	4628      	mov	r0, r5
 80017d2:	f000 fcb5 	bl	8002140 <_sbrk_r>
 80017d6:	1c43      	adds	r3, r0, #1
 80017d8:	d00a      	beq.n	80017f0 <sbrk_aligned+0x34>
 80017da:	1cc4      	adds	r4, r0, #3
 80017dc:	f024 0403 	bic.w	r4, r4, #3
 80017e0:	42a0      	cmp	r0, r4
 80017e2:	d007      	beq.n	80017f4 <sbrk_aligned+0x38>
 80017e4:	1a21      	subs	r1, r4, r0
 80017e6:	4628      	mov	r0, r5
 80017e8:	f000 fcaa 	bl	8002140 <_sbrk_r>
 80017ec:	3001      	adds	r0, #1
 80017ee:	d101      	bne.n	80017f4 <sbrk_aligned+0x38>
 80017f0:	f04f 34ff 	mov.w	r4, #4294967295
 80017f4:	4620      	mov	r0, r4
 80017f6:	bd70      	pop	{r4, r5, r6, pc}
 80017f8:	200001d8 	.word	0x200001d8

080017fc <_malloc_r>:
 80017fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001800:	1ccd      	adds	r5, r1, #3
 8001802:	f025 0503 	bic.w	r5, r5, #3
 8001806:	3508      	adds	r5, #8
 8001808:	2d0c      	cmp	r5, #12
 800180a:	bf38      	it	cc
 800180c:	250c      	movcc	r5, #12
 800180e:	2d00      	cmp	r5, #0
 8001810:	4607      	mov	r7, r0
 8001812:	db01      	blt.n	8001818 <_malloc_r+0x1c>
 8001814:	42a9      	cmp	r1, r5
 8001816:	d905      	bls.n	8001824 <_malloc_r+0x28>
 8001818:	230c      	movs	r3, #12
 800181a:	2600      	movs	r6, #0
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	4630      	mov	r0, r6
 8001820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001824:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80018f8 <_malloc_r+0xfc>
 8001828:	f000 f868 	bl	80018fc <__malloc_lock>
 800182c:	f8d8 3000 	ldr.w	r3, [r8]
 8001830:	461c      	mov	r4, r3
 8001832:	bb5c      	cbnz	r4, 800188c <_malloc_r+0x90>
 8001834:	4629      	mov	r1, r5
 8001836:	4638      	mov	r0, r7
 8001838:	f7ff ffc0 	bl	80017bc <sbrk_aligned>
 800183c:	1c43      	adds	r3, r0, #1
 800183e:	4604      	mov	r4, r0
 8001840:	d155      	bne.n	80018ee <_malloc_r+0xf2>
 8001842:	f8d8 4000 	ldr.w	r4, [r8]
 8001846:	4626      	mov	r6, r4
 8001848:	2e00      	cmp	r6, #0
 800184a:	d145      	bne.n	80018d8 <_malloc_r+0xdc>
 800184c:	2c00      	cmp	r4, #0
 800184e:	d048      	beq.n	80018e2 <_malloc_r+0xe6>
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	4631      	mov	r1, r6
 8001854:	4638      	mov	r0, r7
 8001856:	eb04 0903 	add.w	r9, r4, r3
 800185a:	f000 fc71 	bl	8002140 <_sbrk_r>
 800185e:	4581      	cmp	r9, r0
 8001860:	d13f      	bne.n	80018e2 <_malloc_r+0xe6>
 8001862:	6821      	ldr	r1, [r4, #0]
 8001864:	4638      	mov	r0, r7
 8001866:	1a6d      	subs	r5, r5, r1
 8001868:	4629      	mov	r1, r5
 800186a:	f7ff ffa7 	bl	80017bc <sbrk_aligned>
 800186e:	3001      	adds	r0, #1
 8001870:	d037      	beq.n	80018e2 <_malloc_r+0xe6>
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	442b      	add	r3, r5
 8001876:	6023      	str	r3, [r4, #0]
 8001878:	f8d8 3000 	ldr.w	r3, [r8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d038      	beq.n	80018f2 <_malloc_r+0xf6>
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	42a2      	cmp	r2, r4
 8001884:	d12b      	bne.n	80018de <_malloc_r+0xe2>
 8001886:	2200      	movs	r2, #0
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	e00f      	b.n	80018ac <_malloc_r+0xb0>
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	1b52      	subs	r2, r2, r5
 8001890:	d41f      	bmi.n	80018d2 <_malloc_r+0xd6>
 8001892:	2a0b      	cmp	r2, #11
 8001894:	d917      	bls.n	80018c6 <_malloc_r+0xca>
 8001896:	1961      	adds	r1, r4, r5
 8001898:	42a3      	cmp	r3, r4
 800189a:	6025      	str	r5, [r4, #0]
 800189c:	bf18      	it	ne
 800189e:	6059      	strne	r1, [r3, #4]
 80018a0:	6863      	ldr	r3, [r4, #4]
 80018a2:	bf08      	it	eq
 80018a4:	f8c8 1000 	streq.w	r1, [r8]
 80018a8:	5162      	str	r2, [r4, r5]
 80018aa:	604b      	str	r3, [r1, #4]
 80018ac:	4638      	mov	r0, r7
 80018ae:	f104 060b 	add.w	r6, r4, #11
 80018b2:	f000 f829 	bl	8001908 <__malloc_unlock>
 80018b6:	f026 0607 	bic.w	r6, r6, #7
 80018ba:	1d23      	adds	r3, r4, #4
 80018bc:	1af2      	subs	r2, r6, r3
 80018be:	d0ae      	beq.n	800181e <_malloc_r+0x22>
 80018c0:	1b9b      	subs	r3, r3, r6
 80018c2:	50a3      	str	r3, [r4, r2]
 80018c4:	e7ab      	b.n	800181e <_malloc_r+0x22>
 80018c6:	42a3      	cmp	r3, r4
 80018c8:	6862      	ldr	r2, [r4, #4]
 80018ca:	d1dd      	bne.n	8001888 <_malloc_r+0x8c>
 80018cc:	f8c8 2000 	str.w	r2, [r8]
 80018d0:	e7ec      	b.n	80018ac <_malloc_r+0xb0>
 80018d2:	4623      	mov	r3, r4
 80018d4:	6864      	ldr	r4, [r4, #4]
 80018d6:	e7ac      	b.n	8001832 <_malloc_r+0x36>
 80018d8:	4634      	mov	r4, r6
 80018da:	6876      	ldr	r6, [r6, #4]
 80018dc:	e7b4      	b.n	8001848 <_malloc_r+0x4c>
 80018de:	4613      	mov	r3, r2
 80018e0:	e7cc      	b.n	800187c <_malloc_r+0x80>
 80018e2:	230c      	movs	r3, #12
 80018e4:	4638      	mov	r0, r7
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	f000 f80e 	bl	8001908 <__malloc_unlock>
 80018ec:	e797      	b.n	800181e <_malloc_r+0x22>
 80018ee:	6025      	str	r5, [r4, #0]
 80018f0:	e7dc      	b.n	80018ac <_malloc_r+0xb0>
 80018f2:	605b      	str	r3, [r3, #4]
 80018f4:	deff      	udf	#255	; 0xff
 80018f6:	bf00      	nop
 80018f8:	200001d4 	.word	0x200001d4

080018fc <__malloc_lock>:
 80018fc:	4801      	ldr	r0, [pc, #4]	; (8001904 <__malloc_lock+0x8>)
 80018fe:	f7ff bf12 	b.w	8001726 <__retarget_lock_acquire_recursive>
 8001902:	bf00      	nop
 8001904:	200001d0 	.word	0x200001d0

08001908 <__malloc_unlock>:
 8001908:	4801      	ldr	r0, [pc, #4]	; (8001910 <__malloc_unlock+0x8>)
 800190a:	f7ff bf0d 	b.w	8001728 <__retarget_lock_release_recursive>
 800190e:	bf00      	nop
 8001910:	200001d0 	.word	0x200001d0

08001914 <__sfputc_r>:
 8001914:	6893      	ldr	r3, [r2, #8]
 8001916:	b410      	push	{r4}
 8001918:	3b01      	subs	r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	6093      	str	r3, [r2, #8]
 800191e:	da07      	bge.n	8001930 <__sfputc_r+0x1c>
 8001920:	6994      	ldr	r4, [r2, #24]
 8001922:	42a3      	cmp	r3, r4
 8001924:	db01      	blt.n	800192a <__sfputc_r+0x16>
 8001926:	290a      	cmp	r1, #10
 8001928:	d102      	bne.n	8001930 <__sfputc_r+0x1c>
 800192a:	bc10      	pop	{r4}
 800192c:	f000 bb72 	b.w	8002014 <__swbuf_r>
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	1c58      	adds	r0, r3, #1
 8001934:	6010      	str	r0, [r2, #0]
 8001936:	7019      	strb	r1, [r3, #0]
 8001938:	4608      	mov	r0, r1
 800193a:	bc10      	pop	{r4}
 800193c:	4770      	bx	lr

0800193e <__sfputs_r>:
 800193e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001940:	4606      	mov	r6, r0
 8001942:	460f      	mov	r7, r1
 8001944:	4614      	mov	r4, r2
 8001946:	18d5      	adds	r5, r2, r3
 8001948:	42ac      	cmp	r4, r5
 800194a:	d101      	bne.n	8001950 <__sfputs_r+0x12>
 800194c:	2000      	movs	r0, #0
 800194e:	e007      	b.n	8001960 <__sfputs_r+0x22>
 8001950:	463a      	mov	r2, r7
 8001952:	4630      	mov	r0, r6
 8001954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001958:	f7ff ffdc 	bl	8001914 <__sfputc_r>
 800195c:	1c43      	adds	r3, r0, #1
 800195e:	d1f3      	bne.n	8001948 <__sfputs_r+0xa>
 8001960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001964 <_vfiprintf_r>:
 8001964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001968:	460d      	mov	r5, r1
 800196a:	4614      	mov	r4, r2
 800196c:	4698      	mov	r8, r3
 800196e:	4606      	mov	r6, r0
 8001970:	b09d      	sub	sp, #116	; 0x74
 8001972:	b118      	cbz	r0, 800197c <_vfiprintf_r+0x18>
 8001974:	6a03      	ldr	r3, [r0, #32]
 8001976:	b90b      	cbnz	r3, 800197c <_vfiprintf_r+0x18>
 8001978:	f7ff fdd0 	bl	800151c <__sinit>
 800197c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800197e:	07d9      	lsls	r1, r3, #31
 8001980:	d405      	bmi.n	800198e <_vfiprintf_r+0x2a>
 8001982:	89ab      	ldrh	r3, [r5, #12]
 8001984:	059a      	lsls	r2, r3, #22
 8001986:	d402      	bmi.n	800198e <_vfiprintf_r+0x2a>
 8001988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800198a:	f7ff fecc 	bl	8001726 <__retarget_lock_acquire_recursive>
 800198e:	89ab      	ldrh	r3, [r5, #12]
 8001990:	071b      	lsls	r3, r3, #28
 8001992:	d501      	bpl.n	8001998 <_vfiprintf_r+0x34>
 8001994:	692b      	ldr	r3, [r5, #16]
 8001996:	b99b      	cbnz	r3, 80019c0 <_vfiprintf_r+0x5c>
 8001998:	4629      	mov	r1, r5
 800199a:	4630      	mov	r0, r6
 800199c:	f000 fb78 	bl	8002090 <__swsetup_r>
 80019a0:	b170      	cbz	r0, 80019c0 <_vfiprintf_r+0x5c>
 80019a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019a4:	07dc      	lsls	r4, r3, #31
 80019a6:	d504      	bpl.n	80019b2 <_vfiprintf_r+0x4e>
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	b01d      	add	sp, #116	; 0x74
 80019ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019b2:	89ab      	ldrh	r3, [r5, #12]
 80019b4:	0598      	lsls	r0, r3, #22
 80019b6:	d4f7      	bmi.n	80019a8 <_vfiprintf_r+0x44>
 80019b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019ba:	f7ff feb5 	bl	8001728 <__retarget_lock_release_recursive>
 80019be:	e7f3      	b.n	80019a8 <_vfiprintf_r+0x44>
 80019c0:	2300      	movs	r3, #0
 80019c2:	9309      	str	r3, [sp, #36]	; 0x24
 80019c4:	2320      	movs	r3, #32
 80019c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019ca:	2330      	movs	r3, #48	; 0x30
 80019cc:	f04f 0901 	mov.w	r9, #1
 80019d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80019d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001b84 <_vfiprintf_r+0x220>
 80019d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019dc:	4623      	mov	r3, r4
 80019de:	469a      	mov	sl, r3
 80019e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019e4:	b10a      	cbz	r2, 80019ea <_vfiprintf_r+0x86>
 80019e6:	2a25      	cmp	r2, #37	; 0x25
 80019e8:	d1f9      	bne.n	80019de <_vfiprintf_r+0x7a>
 80019ea:	ebba 0b04 	subs.w	fp, sl, r4
 80019ee:	d00b      	beq.n	8001a08 <_vfiprintf_r+0xa4>
 80019f0:	465b      	mov	r3, fp
 80019f2:	4622      	mov	r2, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	4630      	mov	r0, r6
 80019f8:	f7ff ffa1 	bl	800193e <__sfputs_r>
 80019fc:	3001      	adds	r0, #1
 80019fe:	f000 80a9 	beq.w	8001b54 <_vfiprintf_r+0x1f0>
 8001a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a04:	445a      	add	r2, fp
 8001a06:	9209      	str	r2, [sp, #36]	; 0x24
 8001a08:	f89a 3000 	ldrb.w	r3, [sl]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a1 	beq.w	8001b54 <_vfiprintf_r+0x1f0>
 8001a12:	2300      	movs	r3, #0
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a1c:	f10a 0a01 	add.w	sl, sl, #1
 8001a20:	9304      	str	r3, [sp, #16]
 8001a22:	9307      	str	r3, [sp, #28]
 8001a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a28:	931a      	str	r3, [sp, #104]	; 0x68
 8001a2a:	4654      	mov	r4, sl
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a32:	4854      	ldr	r0, [pc, #336]	; (8001b84 <_vfiprintf_r+0x220>)
 8001a34:	f000 fb94 	bl	8002160 <memchr>
 8001a38:	9a04      	ldr	r2, [sp, #16]
 8001a3a:	b9d8      	cbnz	r0, 8001a74 <_vfiprintf_r+0x110>
 8001a3c:	06d1      	lsls	r1, r2, #27
 8001a3e:	bf44      	itt	mi
 8001a40:	2320      	movmi	r3, #32
 8001a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a46:	0713      	lsls	r3, r2, #28
 8001a48:	bf44      	itt	mi
 8001a4a:	232b      	movmi	r3, #43	; 0x2b
 8001a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a50:	f89a 3000 	ldrb.w	r3, [sl]
 8001a54:	2b2a      	cmp	r3, #42	; 0x2a
 8001a56:	d015      	beq.n	8001a84 <_vfiprintf_r+0x120>
 8001a58:	4654      	mov	r4, sl
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f04f 0c0a 	mov.w	ip, #10
 8001a60:	9a07      	ldr	r2, [sp, #28]
 8001a62:	4621      	mov	r1, r4
 8001a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a68:	3b30      	subs	r3, #48	; 0x30
 8001a6a:	2b09      	cmp	r3, #9
 8001a6c:	d94d      	bls.n	8001b0a <_vfiprintf_r+0x1a6>
 8001a6e:	b1b0      	cbz	r0, 8001a9e <_vfiprintf_r+0x13a>
 8001a70:	9207      	str	r2, [sp, #28]
 8001a72:	e014      	b.n	8001a9e <_vfiprintf_r+0x13a>
 8001a74:	eba0 0308 	sub.w	r3, r0, r8
 8001a78:	fa09 f303 	lsl.w	r3, r9, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	46a2      	mov	sl, r4
 8001a80:	9304      	str	r3, [sp, #16]
 8001a82:	e7d2      	b.n	8001a2a <_vfiprintf_r+0xc6>
 8001a84:	9b03      	ldr	r3, [sp, #12]
 8001a86:	1d19      	adds	r1, r3, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	9103      	str	r1, [sp, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bfbb      	ittet	lt
 8001a90:	425b      	neglt	r3, r3
 8001a92:	f042 0202 	orrlt.w	r2, r2, #2
 8001a96:	9307      	strge	r3, [sp, #28]
 8001a98:	9307      	strlt	r3, [sp, #28]
 8001a9a:	bfb8      	it	lt
 8001a9c:	9204      	strlt	r2, [sp, #16]
 8001a9e:	7823      	ldrb	r3, [r4, #0]
 8001aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8001aa2:	d10c      	bne.n	8001abe <_vfiprintf_r+0x15a>
 8001aa4:	7863      	ldrb	r3, [r4, #1]
 8001aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8001aa8:	d134      	bne.n	8001b14 <_vfiprintf_r+0x1b0>
 8001aaa:	9b03      	ldr	r3, [sp, #12]
 8001aac:	3402      	adds	r4, #2
 8001aae:	1d1a      	adds	r2, r3, #4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	9203      	str	r2, [sp, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bfb8      	it	lt
 8001ab8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001abc:	9305      	str	r3, [sp, #20]
 8001abe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001b88 <_vfiprintf_r+0x224>
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	4650      	mov	r0, sl
 8001ac6:	7821      	ldrb	r1, [r4, #0]
 8001ac8:	f000 fb4a 	bl	8002160 <memchr>
 8001acc:	b138      	cbz	r0, 8001ade <_vfiprintf_r+0x17a>
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	9b04      	ldr	r3, [sp, #16]
 8001ad2:	eba0 000a 	sub.w	r0, r0, sl
 8001ad6:	4082      	lsls	r2, r0
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	3401      	adds	r4, #1
 8001adc:	9304      	str	r3, [sp, #16]
 8001ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ae2:	2206      	movs	r2, #6
 8001ae4:	4829      	ldr	r0, [pc, #164]	; (8001b8c <_vfiprintf_r+0x228>)
 8001ae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001aea:	f000 fb39 	bl	8002160 <memchr>
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d03f      	beq.n	8001b72 <_vfiprintf_r+0x20e>
 8001af2:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <_vfiprintf_r+0x22c>)
 8001af4:	bb1b      	cbnz	r3, 8001b3e <_vfiprintf_r+0x1da>
 8001af6:	9b03      	ldr	r3, [sp, #12]
 8001af8:	3307      	adds	r3, #7
 8001afa:	f023 0307 	bic.w	r3, r3, #7
 8001afe:	3308      	adds	r3, #8
 8001b00:	9303      	str	r3, [sp, #12]
 8001b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b04:	443b      	add	r3, r7
 8001b06:	9309      	str	r3, [sp, #36]	; 0x24
 8001b08:	e768      	b.n	80019dc <_vfiprintf_r+0x78>
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b12:	e7a6      	b.n	8001a62 <_vfiprintf_r+0xfe>
 8001b14:	2300      	movs	r3, #0
 8001b16:	f04f 0c0a 	mov.w	ip, #10
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	3401      	adds	r4, #1
 8001b1e:	9305      	str	r3, [sp, #20]
 8001b20:	4620      	mov	r0, r4
 8001b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b26:	3a30      	subs	r2, #48	; 0x30
 8001b28:	2a09      	cmp	r2, #9
 8001b2a:	d903      	bls.n	8001b34 <_vfiprintf_r+0x1d0>
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0c6      	beq.n	8001abe <_vfiprintf_r+0x15a>
 8001b30:	9105      	str	r1, [sp, #20]
 8001b32:	e7c4      	b.n	8001abe <_vfiprintf_r+0x15a>
 8001b34:	4604      	mov	r4, r0
 8001b36:	2301      	movs	r3, #1
 8001b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b3c:	e7f0      	b.n	8001b20 <_vfiprintf_r+0x1bc>
 8001b3e:	ab03      	add	r3, sp, #12
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	462a      	mov	r2, r5
 8001b44:	4630      	mov	r0, r6
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_vfiprintf_r+0x230>)
 8001b48:	a904      	add	r1, sp, #16
 8001b4a:	f3af 8000 	nop.w
 8001b4e:	4607      	mov	r7, r0
 8001b50:	1c78      	adds	r0, r7, #1
 8001b52:	d1d6      	bne.n	8001b02 <_vfiprintf_r+0x19e>
 8001b54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b56:	07d9      	lsls	r1, r3, #31
 8001b58:	d405      	bmi.n	8001b66 <_vfiprintf_r+0x202>
 8001b5a:	89ab      	ldrh	r3, [r5, #12]
 8001b5c:	059a      	lsls	r2, r3, #22
 8001b5e:	d402      	bmi.n	8001b66 <_vfiprintf_r+0x202>
 8001b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b62:	f7ff fde1 	bl	8001728 <__retarget_lock_release_recursive>
 8001b66:	89ab      	ldrh	r3, [r5, #12]
 8001b68:	065b      	lsls	r3, r3, #25
 8001b6a:	f53f af1d 	bmi.w	80019a8 <_vfiprintf_r+0x44>
 8001b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b70:	e71c      	b.n	80019ac <_vfiprintf_r+0x48>
 8001b72:	ab03      	add	r3, sp, #12
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	462a      	mov	r2, r5
 8001b78:	4630      	mov	r0, r6
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <_vfiprintf_r+0x230>)
 8001b7c:	a904      	add	r1, sp, #16
 8001b7e:	f000 f87d 	bl	8001c7c <_printf_i>
 8001b82:	e7e4      	b.n	8001b4e <_vfiprintf_r+0x1ea>
 8001b84:	080022ce 	.word	0x080022ce
 8001b88:	080022d4 	.word	0x080022d4
 8001b8c:	080022d8 	.word	0x080022d8
 8001b90:	00000000 	.word	0x00000000
 8001b94:	0800193f 	.word	0x0800193f

08001b98 <_printf_common>:
 8001b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b9c:	4616      	mov	r6, r2
 8001b9e:	4699      	mov	r9, r3
 8001ba0:	688a      	ldr	r2, [r1, #8]
 8001ba2:	690b      	ldr	r3, [r1, #16]
 8001ba4:	4607      	mov	r7, r0
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	bfb8      	it	lt
 8001baa:	4613      	movlt	r3, r2
 8001bac:	6033      	str	r3, [r6, #0]
 8001bae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bb8:	b10a      	cbz	r2, 8001bbe <_printf_common+0x26>
 8001bba:	3301      	adds	r3, #1
 8001bbc:	6033      	str	r3, [r6, #0]
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	0699      	lsls	r1, r3, #26
 8001bc2:	bf42      	ittt	mi
 8001bc4:	6833      	ldrmi	r3, [r6, #0]
 8001bc6:	3302      	addmi	r3, #2
 8001bc8:	6033      	strmi	r3, [r6, #0]
 8001bca:	6825      	ldr	r5, [r4, #0]
 8001bcc:	f015 0506 	ands.w	r5, r5, #6
 8001bd0:	d106      	bne.n	8001be0 <_printf_common+0x48>
 8001bd2:	f104 0a19 	add.w	sl, r4, #25
 8001bd6:	68e3      	ldr	r3, [r4, #12]
 8001bd8:	6832      	ldr	r2, [r6, #0]
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	42ab      	cmp	r3, r5
 8001bde:	dc2b      	bgt.n	8001c38 <_printf_common+0xa0>
 8001be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001be4:	1e13      	subs	r3, r2, #0
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	bf18      	it	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	0692      	lsls	r2, r2, #26
 8001bee:	d430      	bmi.n	8001c52 <_printf_common+0xba>
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	4638      	mov	r0, r7
 8001bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bf8:	47c0      	blx	r8
 8001bfa:	3001      	adds	r0, #1
 8001bfc:	d023      	beq.n	8001c46 <_printf_common+0xae>
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	6922      	ldr	r2, [r4, #16]
 8001c02:	f003 0306 	and.w	r3, r3, #6
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf14      	ite	ne
 8001c0a:	2500      	movne	r5, #0
 8001c0c:	6833      	ldreq	r3, [r6, #0]
 8001c0e:	f04f 0600 	mov.w	r6, #0
 8001c12:	bf08      	it	eq
 8001c14:	68e5      	ldreq	r5, [r4, #12]
 8001c16:	f104 041a 	add.w	r4, r4, #26
 8001c1a:	bf08      	it	eq
 8001c1c:	1aed      	subeq	r5, r5, r3
 8001c1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001c22:	bf08      	it	eq
 8001c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bfc4      	itt	gt
 8001c2c:	1a9b      	subgt	r3, r3, r2
 8001c2e:	18ed      	addgt	r5, r5, r3
 8001c30:	42b5      	cmp	r5, r6
 8001c32:	d11a      	bne.n	8001c6a <_printf_common+0xd2>
 8001c34:	2000      	movs	r0, #0
 8001c36:	e008      	b.n	8001c4a <_printf_common+0xb2>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	4638      	mov	r0, r7
 8001c40:	47c0      	blx	r8
 8001c42:	3001      	adds	r0, #1
 8001c44:	d103      	bne.n	8001c4e <_printf_common+0xb6>
 8001c46:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c4e:	3501      	adds	r5, #1
 8001c50:	e7c1      	b.n	8001bd6 <_printf_common+0x3e>
 8001c52:	2030      	movs	r0, #48	; 0x30
 8001c54:	18e1      	adds	r1, r4, r3
 8001c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c60:	4422      	add	r2, r4
 8001c62:	3302      	adds	r3, #2
 8001c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c68:	e7c2      	b.n	8001bf0 <_printf_common+0x58>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	4649      	mov	r1, r9
 8001c70:	4638      	mov	r0, r7
 8001c72:	47c0      	blx	r8
 8001c74:	3001      	adds	r0, #1
 8001c76:	d0e6      	beq.n	8001c46 <_printf_common+0xae>
 8001c78:	3601      	adds	r6, #1
 8001c7a:	e7d9      	b.n	8001c30 <_printf_common+0x98>

08001c7c <_printf_i>:
 8001c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c80:	7e0f      	ldrb	r7, [r1, #24]
 8001c82:	4691      	mov	r9, r2
 8001c84:	2f78      	cmp	r7, #120	; 0x78
 8001c86:	4680      	mov	r8, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	469a      	mov	sl, r3
 8001c8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c92:	d807      	bhi.n	8001ca4 <_printf_i+0x28>
 8001c94:	2f62      	cmp	r7, #98	; 0x62
 8001c96:	d80a      	bhi.n	8001cae <_printf_i+0x32>
 8001c98:	2f00      	cmp	r7, #0
 8001c9a:	f000 80d5 	beq.w	8001e48 <_printf_i+0x1cc>
 8001c9e:	2f58      	cmp	r7, #88	; 0x58
 8001ca0:	f000 80c1 	beq.w	8001e26 <_printf_i+0x1aa>
 8001ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001cac:	e03a      	b.n	8001d24 <_printf_i+0xa8>
 8001cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001cb2:	2b15      	cmp	r3, #21
 8001cb4:	d8f6      	bhi.n	8001ca4 <_printf_i+0x28>
 8001cb6:	a101      	add	r1, pc, #4	; (adr r1, 8001cbc <_printf_i+0x40>)
 8001cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cbc:	08001d15 	.word	0x08001d15
 8001cc0:	08001d29 	.word	0x08001d29
 8001cc4:	08001ca5 	.word	0x08001ca5
 8001cc8:	08001ca5 	.word	0x08001ca5
 8001ccc:	08001ca5 	.word	0x08001ca5
 8001cd0:	08001ca5 	.word	0x08001ca5
 8001cd4:	08001d29 	.word	0x08001d29
 8001cd8:	08001ca5 	.word	0x08001ca5
 8001cdc:	08001ca5 	.word	0x08001ca5
 8001ce0:	08001ca5 	.word	0x08001ca5
 8001ce4:	08001ca5 	.word	0x08001ca5
 8001ce8:	08001e2f 	.word	0x08001e2f
 8001cec:	08001d55 	.word	0x08001d55
 8001cf0:	08001de9 	.word	0x08001de9
 8001cf4:	08001ca5 	.word	0x08001ca5
 8001cf8:	08001ca5 	.word	0x08001ca5
 8001cfc:	08001e51 	.word	0x08001e51
 8001d00:	08001ca5 	.word	0x08001ca5
 8001d04:	08001d55 	.word	0x08001d55
 8001d08:	08001ca5 	.word	0x08001ca5
 8001d0c:	08001ca5 	.word	0x08001ca5
 8001d10:	08001df1 	.word	0x08001df1
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	1d1a      	adds	r2, r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	602a      	str	r2, [r5, #0]
 8001d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0a0      	b.n	8001e6a <_printf_i+0x1ee>
 8001d28:	6820      	ldr	r0, [r4, #0]
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	0607      	lsls	r7, r0, #24
 8001d2e:	f103 0104 	add.w	r1, r3, #4
 8001d32:	6029      	str	r1, [r5, #0]
 8001d34:	d501      	bpl.n	8001d3a <_printf_i+0xbe>
 8001d36:	681e      	ldr	r6, [r3, #0]
 8001d38:	e003      	b.n	8001d42 <_printf_i+0xc6>
 8001d3a:	0646      	lsls	r6, r0, #25
 8001d3c:	d5fb      	bpl.n	8001d36 <_printf_i+0xba>
 8001d3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001d42:	2e00      	cmp	r6, #0
 8001d44:	da03      	bge.n	8001d4e <_printf_i+0xd2>
 8001d46:	232d      	movs	r3, #45	; 0x2d
 8001d48:	4276      	negs	r6, r6
 8001d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4859      	ldr	r0, [pc, #356]	; (8001eb8 <_printf_i+0x23c>)
 8001d52:	e012      	b.n	8001d7a <_printf_i+0xfe>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	6820      	ldr	r0, [r4, #0]
 8001d58:	1d19      	adds	r1, r3, #4
 8001d5a:	6029      	str	r1, [r5, #0]
 8001d5c:	0605      	lsls	r5, r0, #24
 8001d5e:	d501      	bpl.n	8001d64 <_printf_i+0xe8>
 8001d60:	681e      	ldr	r6, [r3, #0]
 8001d62:	e002      	b.n	8001d6a <_printf_i+0xee>
 8001d64:	0641      	lsls	r1, r0, #25
 8001d66:	d5fb      	bpl.n	8001d60 <_printf_i+0xe4>
 8001d68:	881e      	ldrh	r6, [r3, #0]
 8001d6a:	2f6f      	cmp	r7, #111	; 0x6f
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2308      	moveq	r3, #8
 8001d70:	230a      	movne	r3, #10
 8001d72:	4851      	ldr	r0, [pc, #324]	; (8001eb8 <_printf_i+0x23c>)
 8001d74:	2100      	movs	r1, #0
 8001d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d7a:	6865      	ldr	r5, [r4, #4]
 8001d7c:	2d00      	cmp	r5, #0
 8001d7e:	bfa8      	it	ge
 8001d80:	6821      	ldrge	r1, [r4, #0]
 8001d82:	60a5      	str	r5, [r4, #8]
 8001d84:	bfa4      	itt	ge
 8001d86:	f021 0104 	bicge.w	r1, r1, #4
 8001d8a:	6021      	strge	r1, [r4, #0]
 8001d8c:	b90e      	cbnz	r6, 8001d92 <_printf_i+0x116>
 8001d8e:	2d00      	cmp	r5, #0
 8001d90:	d04b      	beq.n	8001e2a <_printf_i+0x1ae>
 8001d92:	4615      	mov	r5, r2
 8001d94:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d98:	fb03 6711 	mls	r7, r3, r1, r6
 8001d9c:	5dc7      	ldrb	r7, [r0, r7]
 8001d9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001da2:	4637      	mov	r7, r6
 8001da4:	42bb      	cmp	r3, r7
 8001da6:	460e      	mov	r6, r1
 8001da8:	d9f4      	bls.n	8001d94 <_printf_i+0x118>
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d10b      	bne.n	8001dc6 <_printf_i+0x14a>
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	07de      	lsls	r6, r3, #31
 8001db2:	d508      	bpl.n	8001dc6 <_printf_i+0x14a>
 8001db4:	6923      	ldr	r3, [r4, #16]
 8001db6:	6861      	ldr	r1, [r4, #4]
 8001db8:	4299      	cmp	r1, r3
 8001dba:	bfde      	ittt	le
 8001dbc:	2330      	movle	r3, #48	; 0x30
 8001dbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001dc6:	1b52      	subs	r2, r2, r5
 8001dc8:	6122      	str	r2, [r4, #16]
 8001dca:	464b      	mov	r3, r9
 8001dcc:	4621      	mov	r1, r4
 8001dce:	4640      	mov	r0, r8
 8001dd0:	f8cd a000 	str.w	sl, [sp]
 8001dd4:	aa03      	add	r2, sp, #12
 8001dd6:	f7ff fedf 	bl	8001b98 <_printf_common>
 8001dda:	3001      	adds	r0, #1
 8001ddc:	d14a      	bne.n	8001e74 <_printf_i+0x1f8>
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295
 8001de2:	b004      	add	sp, #16
 8001de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f043 0320 	orr.w	r3, r3, #32
 8001dee:	6023      	str	r3, [r4, #0]
 8001df0:	2778      	movs	r7, #120	; 0x78
 8001df2:	4832      	ldr	r0, [pc, #200]	; (8001ebc <_printf_i+0x240>)
 8001df4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	6829      	ldr	r1, [r5, #0]
 8001dfc:	061f      	lsls	r7, r3, #24
 8001dfe:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e02:	d402      	bmi.n	8001e0a <_printf_i+0x18e>
 8001e04:	065f      	lsls	r7, r3, #25
 8001e06:	bf48      	it	mi
 8001e08:	b2b6      	uxthmi	r6, r6
 8001e0a:	07df      	lsls	r7, r3, #31
 8001e0c:	bf48      	it	mi
 8001e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8001e12:	6029      	str	r1, [r5, #0]
 8001e14:	bf48      	it	mi
 8001e16:	6023      	strmi	r3, [r4, #0]
 8001e18:	b91e      	cbnz	r6, 8001e22 <_printf_i+0x1a6>
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	f023 0320 	bic.w	r3, r3, #32
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	2310      	movs	r3, #16
 8001e24:	e7a6      	b.n	8001d74 <_printf_i+0xf8>
 8001e26:	4824      	ldr	r0, [pc, #144]	; (8001eb8 <_printf_i+0x23c>)
 8001e28:	e7e4      	b.n	8001df4 <_printf_i+0x178>
 8001e2a:	4615      	mov	r5, r2
 8001e2c:	e7bd      	b.n	8001daa <_printf_i+0x12e>
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	6826      	ldr	r6, [r4, #0]
 8001e32:	1d18      	adds	r0, r3, #4
 8001e34:	6961      	ldr	r1, [r4, #20]
 8001e36:	6028      	str	r0, [r5, #0]
 8001e38:	0635      	lsls	r5, r6, #24
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	d501      	bpl.n	8001e42 <_printf_i+0x1c6>
 8001e3e:	6019      	str	r1, [r3, #0]
 8001e40:	e002      	b.n	8001e48 <_printf_i+0x1cc>
 8001e42:	0670      	lsls	r0, r6, #25
 8001e44:	d5fb      	bpl.n	8001e3e <_printf_i+0x1c2>
 8001e46:	8019      	strh	r1, [r3, #0]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	4615      	mov	r5, r2
 8001e4c:	6123      	str	r3, [r4, #16]
 8001e4e:	e7bc      	b.n	8001dca <_printf_i+0x14e>
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	2100      	movs	r1, #0
 8001e54:	1d1a      	adds	r2, r3, #4
 8001e56:	602a      	str	r2, [r5, #0]
 8001e58:	681d      	ldr	r5, [r3, #0]
 8001e5a:	6862      	ldr	r2, [r4, #4]
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f000 f97f 	bl	8002160 <memchr>
 8001e62:	b108      	cbz	r0, 8001e68 <_printf_i+0x1ec>
 8001e64:	1b40      	subs	r0, r0, r5
 8001e66:	6060      	str	r0, [r4, #4]
 8001e68:	6863      	ldr	r3, [r4, #4]
 8001e6a:	6123      	str	r3, [r4, #16]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e72:	e7aa      	b.n	8001dca <_printf_i+0x14e>
 8001e74:	462a      	mov	r2, r5
 8001e76:	4649      	mov	r1, r9
 8001e78:	4640      	mov	r0, r8
 8001e7a:	6923      	ldr	r3, [r4, #16]
 8001e7c:	47d0      	blx	sl
 8001e7e:	3001      	adds	r0, #1
 8001e80:	d0ad      	beq.n	8001dde <_printf_i+0x162>
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	079b      	lsls	r3, r3, #30
 8001e86:	d413      	bmi.n	8001eb0 <_printf_i+0x234>
 8001e88:	68e0      	ldr	r0, [r4, #12]
 8001e8a:	9b03      	ldr	r3, [sp, #12]
 8001e8c:	4298      	cmp	r0, r3
 8001e8e:	bfb8      	it	lt
 8001e90:	4618      	movlt	r0, r3
 8001e92:	e7a6      	b.n	8001de2 <_printf_i+0x166>
 8001e94:	2301      	movs	r3, #1
 8001e96:	4632      	mov	r2, r6
 8001e98:	4649      	mov	r1, r9
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	47d0      	blx	sl
 8001e9e:	3001      	adds	r0, #1
 8001ea0:	d09d      	beq.n	8001dde <_printf_i+0x162>
 8001ea2:	3501      	adds	r5, #1
 8001ea4:	68e3      	ldr	r3, [r4, #12]
 8001ea6:	9903      	ldr	r1, [sp, #12]
 8001ea8:	1a5b      	subs	r3, r3, r1
 8001eaa:	42ab      	cmp	r3, r5
 8001eac:	dcf2      	bgt.n	8001e94 <_printf_i+0x218>
 8001eae:	e7eb      	b.n	8001e88 <_printf_i+0x20c>
 8001eb0:	2500      	movs	r5, #0
 8001eb2:	f104 0619 	add.w	r6, r4, #25
 8001eb6:	e7f5      	b.n	8001ea4 <_printf_i+0x228>
 8001eb8:	080022df 	.word	0x080022df
 8001ebc:	080022f0 	.word	0x080022f0

08001ec0 <__sflush_r>:
 8001ec0:	898a      	ldrh	r2, [r1, #12]
 8001ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec4:	4605      	mov	r5, r0
 8001ec6:	0710      	lsls	r0, r2, #28
 8001ec8:	460c      	mov	r4, r1
 8001eca:	d457      	bmi.n	8001f7c <__sflush_r+0xbc>
 8001ecc:	684b      	ldr	r3, [r1, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	dc04      	bgt.n	8001edc <__sflush_r+0x1c>
 8001ed2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	dc01      	bgt.n	8001edc <__sflush_r+0x1c>
 8001ed8:	2000      	movs	r0, #0
 8001eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ede:	2e00      	cmp	r6, #0
 8001ee0:	d0fa      	beq.n	8001ed8 <__sflush_r+0x18>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ee8:	682f      	ldr	r7, [r5, #0]
 8001eea:	6a21      	ldr	r1, [r4, #32]
 8001eec:	602b      	str	r3, [r5, #0]
 8001eee:	d032      	beq.n	8001f56 <__sflush_r+0x96>
 8001ef0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ef2:	89a3      	ldrh	r3, [r4, #12]
 8001ef4:	075a      	lsls	r2, r3, #29
 8001ef6:	d505      	bpl.n	8001f04 <__sflush_r+0x44>
 8001ef8:	6863      	ldr	r3, [r4, #4]
 8001efa:	1ac0      	subs	r0, r0, r3
 8001efc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001efe:	b10b      	cbz	r3, 8001f04 <__sflush_r+0x44>
 8001f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f02:	1ac0      	subs	r0, r0, r3
 8001f04:	2300      	movs	r3, #0
 8001f06:	4602      	mov	r2, r0
 8001f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	6a21      	ldr	r1, [r4, #32]
 8001f0e:	47b0      	blx	r6
 8001f10:	1c43      	adds	r3, r0, #1
 8001f12:	89a3      	ldrh	r3, [r4, #12]
 8001f14:	d106      	bne.n	8001f24 <__sflush_r+0x64>
 8001f16:	6829      	ldr	r1, [r5, #0]
 8001f18:	291d      	cmp	r1, #29
 8001f1a:	d82b      	bhi.n	8001f74 <__sflush_r+0xb4>
 8001f1c:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <__sflush_r+0x100>)
 8001f1e:	410a      	asrs	r2, r1
 8001f20:	07d6      	lsls	r6, r2, #31
 8001f22:	d427      	bmi.n	8001f74 <__sflush_r+0xb4>
 8001f24:	2200      	movs	r2, #0
 8001f26:	6062      	str	r2, [r4, #4]
 8001f28:	6922      	ldr	r2, [r4, #16]
 8001f2a:	04d9      	lsls	r1, r3, #19
 8001f2c:	6022      	str	r2, [r4, #0]
 8001f2e:	d504      	bpl.n	8001f3a <__sflush_r+0x7a>
 8001f30:	1c42      	adds	r2, r0, #1
 8001f32:	d101      	bne.n	8001f38 <__sflush_r+0x78>
 8001f34:	682b      	ldr	r3, [r5, #0]
 8001f36:	b903      	cbnz	r3, 8001f3a <__sflush_r+0x7a>
 8001f38:	6560      	str	r0, [r4, #84]	; 0x54
 8001f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f3c:	602f      	str	r7, [r5, #0]
 8001f3e:	2900      	cmp	r1, #0
 8001f40:	d0ca      	beq.n	8001ed8 <__sflush_r+0x18>
 8001f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f46:	4299      	cmp	r1, r3
 8001f48:	d002      	beq.n	8001f50 <__sflush_r+0x90>
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	f7ff fbee 	bl	800172c <_free_r>
 8001f50:	2000      	movs	r0, #0
 8001f52:	6360      	str	r0, [r4, #52]	; 0x34
 8001f54:	e7c1      	b.n	8001eda <__sflush_r+0x1a>
 8001f56:	2301      	movs	r3, #1
 8001f58:	4628      	mov	r0, r5
 8001f5a:	47b0      	blx	r6
 8001f5c:	1c41      	adds	r1, r0, #1
 8001f5e:	d1c8      	bne.n	8001ef2 <__sflush_r+0x32>
 8001f60:	682b      	ldr	r3, [r5, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0c5      	beq.n	8001ef2 <__sflush_r+0x32>
 8001f66:	2b1d      	cmp	r3, #29
 8001f68:	d001      	beq.n	8001f6e <__sflush_r+0xae>
 8001f6a:	2b16      	cmp	r3, #22
 8001f6c:	d101      	bne.n	8001f72 <__sflush_r+0xb2>
 8001f6e:	602f      	str	r7, [r5, #0]
 8001f70:	e7b2      	b.n	8001ed8 <__sflush_r+0x18>
 8001f72:	89a3      	ldrh	r3, [r4, #12]
 8001f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f78:	81a3      	strh	r3, [r4, #12]
 8001f7a:	e7ae      	b.n	8001eda <__sflush_r+0x1a>
 8001f7c:	690f      	ldr	r7, [r1, #16]
 8001f7e:	2f00      	cmp	r7, #0
 8001f80:	d0aa      	beq.n	8001ed8 <__sflush_r+0x18>
 8001f82:	0793      	lsls	r3, r2, #30
 8001f84:	bf18      	it	ne
 8001f86:	2300      	movne	r3, #0
 8001f88:	680e      	ldr	r6, [r1, #0]
 8001f8a:	bf08      	it	eq
 8001f8c:	694b      	ldreq	r3, [r1, #20]
 8001f8e:	1bf6      	subs	r6, r6, r7
 8001f90:	600f      	str	r7, [r1, #0]
 8001f92:	608b      	str	r3, [r1, #8]
 8001f94:	2e00      	cmp	r6, #0
 8001f96:	dd9f      	ble.n	8001ed8 <__sflush_r+0x18>
 8001f98:	4633      	mov	r3, r6
 8001f9a:	463a      	mov	r2, r7
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	6a21      	ldr	r1, [r4, #32]
 8001fa0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001fa4:	47e0      	blx	ip
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	dc06      	bgt.n	8001fb8 <__sflush_r+0xf8>
 8001faa:	89a3      	ldrh	r3, [r4, #12]
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb4:	81a3      	strh	r3, [r4, #12]
 8001fb6:	e790      	b.n	8001eda <__sflush_r+0x1a>
 8001fb8:	4407      	add	r7, r0
 8001fba:	1a36      	subs	r6, r6, r0
 8001fbc:	e7ea      	b.n	8001f94 <__sflush_r+0xd4>
 8001fbe:	bf00      	nop
 8001fc0:	dfbffffe 	.word	0xdfbffffe

08001fc4 <_fflush_r>:
 8001fc4:	b538      	push	{r3, r4, r5, lr}
 8001fc6:	690b      	ldr	r3, [r1, #16]
 8001fc8:	4605      	mov	r5, r0
 8001fca:	460c      	mov	r4, r1
 8001fcc:	b913      	cbnz	r3, 8001fd4 <_fflush_r+0x10>
 8001fce:	2500      	movs	r5, #0
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	bd38      	pop	{r3, r4, r5, pc}
 8001fd4:	b118      	cbz	r0, 8001fde <_fflush_r+0x1a>
 8001fd6:	6a03      	ldr	r3, [r0, #32]
 8001fd8:	b90b      	cbnz	r3, 8001fde <_fflush_r+0x1a>
 8001fda:	f7ff fa9f 	bl	800151c <__sinit>
 8001fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f3      	beq.n	8001fce <_fflush_r+0xa>
 8001fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fe8:	07d0      	lsls	r0, r2, #31
 8001fea:	d404      	bmi.n	8001ff6 <_fflush_r+0x32>
 8001fec:	0599      	lsls	r1, r3, #22
 8001fee:	d402      	bmi.n	8001ff6 <_fflush_r+0x32>
 8001ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ff2:	f7ff fb98 	bl	8001726 <__retarget_lock_acquire_recursive>
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	f7ff ff61 	bl	8001ec0 <__sflush_r>
 8001ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002000:	4605      	mov	r5, r0
 8002002:	07da      	lsls	r2, r3, #31
 8002004:	d4e4      	bmi.n	8001fd0 <_fflush_r+0xc>
 8002006:	89a3      	ldrh	r3, [r4, #12]
 8002008:	059b      	lsls	r3, r3, #22
 800200a:	d4e1      	bmi.n	8001fd0 <_fflush_r+0xc>
 800200c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800200e:	f7ff fb8b 	bl	8001728 <__retarget_lock_release_recursive>
 8002012:	e7dd      	b.n	8001fd0 <_fflush_r+0xc>

08002014 <__swbuf_r>:
 8002014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002016:	460e      	mov	r6, r1
 8002018:	4614      	mov	r4, r2
 800201a:	4605      	mov	r5, r0
 800201c:	b118      	cbz	r0, 8002026 <__swbuf_r+0x12>
 800201e:	6a03      	ldr	r3, [r0, #32]
 8002020:	b90b      	cbnz	r3, 8002026 <__swbuf_r+0x12>
 8002022:	f7ff fa7b 	bl	800151c <__sinit>
 8002026:	69a3      	ldr	r3, [r4, #24]
 8002028:	60a3      	str	r3, [r4, #8]
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	071a      	lsls	r2, r3, #28
 800202e:	d525      	bpl.n	800207c <__swbuf_r+0x68>
 8002030:	6923      	ldr	r3, [r4, #16]
 8002032:	b31b      	cbz	r3, 800207c <__swbuf_r+0x68>
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	6922      	ldr	r2, [r4, #16]
 8002038:	b2f6      	uxtb	r6, r6
 800203a:	1a98      	subs	r0, r3, r2
 800203c:	6963      	ldr	r3, [r4, #20]
 800203e:	4637      	mov	r7, r6
 8002040:	4283      	cmp	r3, r0
 8002042:	dc04      	bgt.n	800204e <__swbuf_r+0x3a>
 8002044:	4621      	mov	r1, r4
 8002046:	4628      	mov	r0, r5
 8002048:	f7ff ffbc 	bl	8001fc4 <_fflush_r>
 800204c:	b9e0      	cbnz	r0, 8002088 <__swbuf_r+0x74>
 800204e:	68a3      	ldr	r3, [r4, #8]
 8002050:	3b01      	subs	r3, #1
 8002052:	60a3      	str	r3, [r4, #8]
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	6022      	str	r2, [r4, #0]
 800205a:	701e      	strb	r6, [r3, #0]
 800205c:	6962      	ldr	r2, [r4, #20]
 800205e:	1c43      	adds	r3, r0, #1
 8002060:	429a      	cmp	r2, r3
 8002062:	d004      	beq.n	800206e <__swbuf_r+0x5a>
 8002064:	89a3      	ldrh	r3, [r4, #12]
 8002066:	07db      	lsls	r3, r3, #31
 8002068:	d506      	bpl.n	8002078 <__swbuf_r+0x64>
 800206a:	2e0a      	cmp	r6, #10
 800206c:	d104      	bne.n	8002078 <__swbuf_r+0x64>
 800206e:	4621      	mov	r1, r4
 8002070:	4628      	mov	r0, r5
 8002072:	f7ff ffa7 	bl	8001fc4 <_fflush_r>
 8002076:	b938      	cbnz	r0, 8002088 <__swbuf_r+0x74>
 8002078:	4638      	mov	r0, r7
 800207a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800207c:	4621      	mov	r1, r4
 800207e:	4628      	mov	r0, r5
 8002080:	f000 f806 	bl	8002090 <__swsetup_r>
 8002084:	2800      	cmp	r0, #0
 8002086:	d0d5      	beq.n	8002034 <__swbuf_r+0x20>
 8002088:	f04f 37ff 	mov.w	r7, #4294967295
 800208c:	e7f4      	b.n	8002078 <__swbuf_r+0x64>
	...

08002090 <__swsetup_r>:
 8002090:	b538      	push	{r3, r4, r5, lr}
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <__swsetup_r+0xac>)
 8002094:	4605      	mov	r5, r0
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	460c      	mov	r4, r1
 800209a:	b118      	cbz	r0, 80020a4 <__swsetup_r+0x14>
 800209c:	6a03      	ldr	r3, [r0, #32]
 800209e:	b90b      	cbnz	r3, 80020a4 <__swsetup_r+0x14>
 80020a0:	f7ff fa3c 	bl	800151c <__sinit>
 80020a4:	89a3      	ldrh	r3, [r4, #12]
 80020a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020aa:	0718      	lsls	r0, r3, #28
 80020ac:	d422      	bmi.n	80020f4 <__swsetup_r+0x64>
 80020ae:	06d9      	lsls	r1, r3, #27
 80020b0:	d407      	bmi.n	80020c2 <__swsetup_r+0x32>
 80020b2:	2309      	movs	r3, #9
 80020b4:	602b      	str	r3, [r5, #0]
 80020b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020ba:	f04f 30ff 	mov.w	r0, #4294967295
 80020be:	81a3      	strh	r3, [r4, #12]
 80020c0:	e034      	b.n	800212c <__swsetup_r+0x9c>
 80020c2:	0758      	lsls	r0, r3, #29
 80020c4:	d512      	bpl.n	80020ec <__swsetup_r+0x5c>
 80020c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020c8:	b141      	cbz	r1, 80020dc <__swsetup_r+0x4c>
 80020ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020ce:	4299      	cmp	r1, r3
 80020d0:	d002      	beq.n	80020d8 <__swsetup_r+0x48>
 80020d2:	4628      	mov	r0, r5
 80020d4:	f7ff fb2a 	bl	800172c <_free_r>
 80020d8:	2300      	movs	r3, #0
 80020da:	6363      	str	r3, [r4, #52]	; 0x34
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020e2:	81a3      	strh	r3, [r4, #12]
 80020e4:	2300      	movs	r3, #0
 80020e6:	6063      	str	r3, [r4, #4]
 80020e8:	6923      	ldr	r3, [r4, #16]
 80020ea:	6023      	str	r3, [r4, #0]
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	81a3      	strh	r3, [r4, #12]
 80020f4:	6923      	ldr	r3, [r4, #16]
 80020f6:	b94b      	cbnz	r3, 800210c <__swsetup_r+0x7c>
 80020f8:	89a3      	ldrh	r3, [r4, #12]
 80020fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002102:	d003      	beq.n	800210c <__swsetup_r+0x7c>
 8002104:	4621      	mov	r1, r4
 8002106:	4628      	mov	r0, r5
 8002108:	f000 f85d 	bl	80021c6 <__smakebuf_r>
 800210c:	89a0      	ldrh	r0, [r4, #12]
 800210e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002112:	f010 0301 	ands.w	r3, r0, #1
 8002116:	d00a      	beq.n	800212e <__swsetup_r+0x9e>
 8002118:	2300      	movs	r3, #0
 800211a:	60a3      	str	r3, [r4, #8]
 800211c:	6963      	ldr	r3, [r4, #20]
 800211e:	425b      	negs	r3, r3
 8002120:	61a3      	str	r3, [r4, #24]
 8002122:	6923      	ldr	r3, [r4, #16]
 8002124:	b943      	cbnz	r3, 8002138 <__swsetup_r+0xa8>
 8002126:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800212a:	d1c4      	bne.n	80020b6 <__swsetup_r+0x26>
 800212c:	bd38      	pop	{r3, r4, r5, pc}
 800212e:	0781      	lsls	r1, r0, #30
 8002130:	bf58      	it	pl
 8002132:	6963      	ldrpl	r3, [r4, #20]
 8002134:	60a3      	str	r3, [r4, #8]
 8002136:	e7f4      	b.n	8002122 <__swsetup_r+0x92>
 8002138:	2000      	movs	r0, #0
 800213a:	e7f7      	b.n	800212c <__swsetup_r+0x9c>
 800213c:	20000064 	.word	0x20000064

08002140 <_sbrk_r>:
 8002140:	b538      	push	{r3, r4, r5, lr}
 8002142:	2300      	movs	r3, #0
 8002144:	4d05      	ldr	r5, [pc, #20]	; (800215c <_sbrk_r+0x1c>)
 8002146:	4604      	mov	r4, r0
 8002148:	4608      	mov	r0, r1
 800214a:	602b      	str	r3, [r5, #0]
 800214c:	f7fe fa04 	bl	8000558 <_sbrk>
 8002150:	1c43      	adds	r3, r0, #1
 8002152:	d102      	bne.n	800215a <_sbrk_r+0x1a>
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	b103      	cbz	r3, 800215a <_sbrk_r+0x1a>
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	bd38      	pop	{r3, r4, r5, pc}
 800215c:	200001cc 	.word	0x200001cc

08002160 <memchr>:
 8002160:	4603      	mov	r3, r0
 8002162:	b510      	push	{r4, lr}
 8002164:	b2c9      	uxtb	r1, r1
 8002166:	4402      	add	r2, r0
 8002168:	4293      	cmp	r3, r2
 800216a:	4618      	mov	r0, r3
 800216c:	d101      	bne.n	8002172 <memchr+0x12>
 800216e:	2000      	movs	r0, #0
 8002170:	e003      	b.n	800217a <memchr+0x1a>
 8002172:	7804      	ldrb	r4, [r0, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	428c      	cmp	r4, r1
 8002178:	d1f6      	bne.n	8002168 <memchr+0x8>
 800217a:	bd10      	pop	{r4, pc}

0800217c <__swhatbuf_r>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	460c      	mov	r4, r1
 8002180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002184:	4615      	mov	r5, r2
 8002186:	2900      	cmp	r1, #0
 8002188:	461e      	mov	r6, r3
 800218a:	b096      	sub	sp, #88	; 0x58
 800218c:	da0c      	bge.n	80021a8 <__swhatbuf_r+0x2c>
 800218e:	89a3      	ldrh	r3, [r4, #12]
 8002190:	2100      	movs	r1, #0
 8002192:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002196:	bf0c      	ite	eq
 8002198:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800219c:	2340      	movne	r3, #64	; 0x40
 800219e:	2000      	movs	r0, #0
 80021a0:	6031      	str	r1, [r6, #0]
 80021a2:	602b      	str	r3, [r5, #0]
 80021a4:	b016      	add	sp, #88	; 0x58
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	466a      	mov	r2, sp
 80021aa:	f000 f849 	bl	8002240 <_fstat_r>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	dbed      	blt.n	800218e <__swhatbuf_r+0x12>
 80021b2:	9901      	ldr	r1, [sp, #4]
 80021b4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80021b8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80021bc:	4259      	negs	r1, r3
 80021be:	4159      	adcs	r1, r3
 80021c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c4:	e7eb      	b.n	800219e <__swhatbuf_r+0x22>

080021c6 <__smakebuf_r>:
 80021c6:	898b      	ldrh	r3, [r1, #12]
 80021c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021ca:	079d      	lsls	r5, r3, #30
 80021cc:	4606      	mov	r6, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	d507      	bpl.n	80021e2 <__smakebuf_r+0x1c>
 80021d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021d6:	6023      	str	r3, [r4, #0]
 80021d8:	6123      	str	r3, [r4, #16]
 80021da:	2301      	movs	r3, #1
 80021dc:	6163      	str	r3, [r4, #20]
 80021de:	b002      	add	sp, #8
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
 80021e2:	466a      	mov	r2, sp
 80021e4:	ab01      	add	r3, sp, #4
 80021e6:	f7ff ffc9 	bl	800217c <__swhatbuf_r>
 80021ea:	9900      	ldr	r1, [sp, #0]
 80021ec:	4605      	mov	r5, r0
 80021ee:	4630      	mov	r0, r6
 80021f0:	f7ff fb04 	bl	80017fc <_malloc_r>
 80021f4:	b948      	cbnz	r0, 800220a <__smakebuf_r+0x44>
 80021f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021fa:	059a      	lsls	r2, r3, #22
 80021fc:	d4ef      	bmi.n	80021de <__smakebuf_r+0x18>
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	f043 0302 	orr.w	r3, r3, #2
 8002206:	81a3      	strh	r3, [r4, #12]
 8002208:	e7e3      	b.n	80021d2 <__smakebuf_r+0xc>
 800220a:	89a3      	ldrh	r3, [r4, #12]
 800220c:	6020      	str	r0, [r4, #0]
 800220e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002212:	81a3      	strh	r3, [r4, #12]
 8002214:	9b00      	ldr	r3, [sp, #0]
 8002216:	6120      	str	r0, [r4, #16]
 8002218:	6163      	str	r3, [r4, #20]
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	b15b      	cbz	r3, 8002236 <__smakebuf_r+0x70>
 800221e:	4630      	mov	r0, r6
 8002220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002224:	f000 f81e 	bl	8002264 <_isatty_r>
 8002228:	b128      	cbz	r0, 8002236 <__smakebuf_r+0x70>
 800222a:	89a3      	ldrh	r3, [r4, #12]
 800222c:	f023 0303 	bic.w	r3, r3, #3
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	81a3      	strh	r3, [r4, #12]
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	431d      	orrs	r5, r3
 800223a:	81a5      	strh	r5, [r4, #12]
 800223c:	e7cf      	b.n	80021de <__smakebuf_r+0x18>
	...

08002240 <_fstat_r>:
 8002240:	b538      	push	{r3, r4, r5, lr}
 8002242:	2300      	movs	r3, #0
 8002244:	4d06      	ldr	r5, [pc, #24]	; (8002260 <_fstat_r+0x20>)
 8002246:	4604      	mov	r4, r0
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	602b      	str	r3, [r5, #0]
 800224e:	f7fe f95e 	bl	800050e <_fstat>
 8002252:	1c43      	adds	r3, r0, #1
 8002254:	d102      	bne.n	800225c <_fstat_r+0x1c>
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	b103      	cbz	r3, 800225c <_fstat_r+0x1c>
 800225a:	6023      	str	r3, [r4, #0]
 800225c:	bd38      	pop	{r3, r4, r5, pc}
 800225e:	bf00      	nop
 8002260:	200001cc 	.word	0x200001cc

08002264 <_isatty_r>:
 8002264:	b538      	push	{r3, r4, r5, lr}
 8002266:	2300      	movs	r3, #0
 8002268:	4d05      	ldr	r5, [pc, #20]	; (8002280 <_isatty_r+0x1c>)
 800226a:	4604      	mov	r4, r0
 800226c:	4608      	mov	r0, r1
 800226e:	602b      	str	r3, [r5, #0]
 8002270:	f7fe f95c 	bl	800052c <_isatty>
 8002274:	1c43      	adds	r3, r0, #1
 8002276:	d102      	bne.n	800227e <_isatty_r+0x1a>
 8002278:	682b      	ldr	r3, [r5, #0]
 800227a:	b103      	cbz	r3, 800227e <_isatty_r+0x1a>
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	bd38      	pop	{r3, r4, r5, pc}
 8002280:	200001cc 	.word	0x200001cc

08002284 <_init>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	bf00      	nop
 8002288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228a:	bc08      	pop	{r3}
 800228c:	469e      	mov	lr, r3
 800228e:	4770      	bx	lr

08002290 <_fini>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	bf00      	nop
 8002294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002296:	bc08      	pop	{r3}
 8002298:	469e      	mov	lr, r3
 800229a:	4770      	bx	lr
