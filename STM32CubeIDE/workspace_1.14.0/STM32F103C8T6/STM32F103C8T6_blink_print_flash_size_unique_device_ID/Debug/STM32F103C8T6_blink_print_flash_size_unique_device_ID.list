
STM32F103C8T6_blink_print_flash_size_unique_device_ID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002424  08002424  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002424  08002424  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002424  08002424  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002428  08002428  00012428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800242c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08002494  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002494  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000347b  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001175  00000000  00000000  0002354f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a8  00000000  00000000  000246c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000352  00000000  00000000  00024b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017328  00000000  00000000  00024ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005a6f  00000000  00000000  0003c1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081468  00000000  00000000  00041c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001848  00000000  00000000  000c30c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  000c490c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002324 	.word	0x08002324

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002324 	.word	0x08002324

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
//Declare variables, as local, here in main then they show up automatically in the debug variables pane
//General variables
	int x = 5;
 800019e:	2305      	movs	r3, #5
 80001a0:	61fb      	str	r3, [r7, #28]
	int counter = 0;
 80001a2:	2300      	movs	r3, #0
 80001a4:	61bb      	str	r3, [r7, #24]

//Set up pointer to Flash Size register
	uint16_t (*flash_size) = (uint16_t*) (0x1FFFF7E0); // address of F_SIZE register is specific to  STM32F103, Page 1076 of RM0008
 80001a6:	4b37      	ldr	r3, [pc, #220]	; (8000284 <main+0xec>)
 80001a8:	617b      	str	r3, [r7, #20]
	int low = 4; //dummy value, for low part of Flash Size register, for watching during debug
 80001aa:	2304      	movs	r3, #4
 80001ac:	613b      	str	r3, [r7, #16]
	int high = 8; //dummy value, for high part of Flash Size register, for watching during debug
 80001ae:	2308      	movs	r3, #8
 80001b0:	60fb      	str	r3, [r7, #12]

//Set up pointers to Unique device ID registers
	uint32_t (*udid_1) = (uint32_t*) (0x1FFFF7E8); // address of Unique device ID register 1 is specific to  STM32F103, Page 1077 of RM0008
 80001b2:	4b35      	ldr	r3, [pc, #212]	; (8000288 <main+0xf0>)
 80001b4:	60bb      	str	r3, [r7, #8]
//	uint32_t (*udid_2) = (uint32_t*) (0x1FFFF7EC); // address of Unique device ID register 2 is specific to  STM32F103, Page 1077 of RM0008
//	uint32_t (*udid_3) = (uint32_t*) (0x1FFFF7F0); // address of Unique device ID register 3 is specific to  STM32F103, Page 1078 of RM0008

//Declare variables used during extraction and formatting of data from Unique device ID registers
	int udid_1_value = 0;
 80001b6:	2300      	movs	r3, #0
 80001b8:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ba:	f000 fa35 	bl	8000628 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001be:	f000 f877 	bl	80002b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001c2:	f000 f8bb 	bl	800033c <MX_GPIO_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOC, LED_Pin, 0); //Turn on LED
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	482f      	ldr	r0, [pc, #188]	; (800028c <main+0xf4>)
 80001ce:	f000 fd19 	bl	8000c04 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80001d2:	2064      	movs	r0, #100	; 0x64
 80001d4:	f000 fa8a 	bl	80006ec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, LED_Pin, 1); //Turn off LED
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001de:	482b      	ldr	r0, [pc, #172]	; (800028c <main+0xf4>)
 80001e0:	f000 fd10 	bl	8000c04 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80001e4:	2064      	movs	r0, #100	; 0x64
 80001e6:	f000 fa81 	bl	80006ec <HAL_Delay>
		x++;
 80001ea:	69fb      	ldr	r3, [r7, #28]
 80001ec:	3301      	adds	r3, #1
 80001ee:	61fb      	str	r3, [r7, #28]
		HAL_Delay(1000);
 80001f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f4:	f000 fa7a 	bl	80006ec <HAL_Delay>

		printf("counter = %d\n", counter++);
 80001f8:	69bb      	ldr	r3, [r7, #24]
 80001fa:	1c5a      	adds	r2, r3, #1
 80001fc:	61ba      	str	r2, [r7, #24]
 80001fe:	4619      	mov	r1, r3
 8000200:	4823      	ldr	r0, [pc, #140]	; (8000290 <main+0xf8>)
 8000202:	f001 f9b7 	bl	8001574 <iprintf>
		high = ((*flash_size >> 8) & 0xFF); //Read the value of the Flash memory size register, shift right 8 bits then AND with 0xFF
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	881b      	ldrh	r3, [r3, #0]
 800020a:	0a1b      	lsrs	r3, r3, #8
 800020c:	b29b      	uxth	r3, r3
 800020e:	b2db      	uxtb	r3, r3
 8000210:	60fb      	str	r3, [r7, #12]
											//to clear top 8 bits and preserve the lower 8 bits
		low = ((*flash_size) & 0xFF);//Read the value of the Flash memory size register, then AND with 0xFF
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	b2db      	uxtb	r3, r3
 8000218:	613b      	str	r3, [r7, #16]
									 //to clear top 8 bits and preserve the lower 8 bits

		printf("Hex flash size = 0x%.2x", high);//Print 0x then the value of HIGH in 2-digit HEX format
 800021a:	68f9      	ldr	r1, [r7, #12]
 800021c:	481d      	ldr	r0, [pc, #116]	; (8000294 <main+0xfc>)
 800021e:	f001 f9a9 	bl	8001574 <iprintf>
		printf("%.2x\n", low);//Print the value of LOW in 2-digit HEX format and then a new line
 8000222:	6939      	ldr	r1, [r7, #16]
 8000224:	481c      	ldr	r0, [pc, #112]	; (8000298 <main+0x100>)
 8000226:	f001 f9a5 	bl	8001574 <iprintf>
		printf("Decimal flash size = %d", *flash_size); //Print "Decimal flash size = " then the the value of the address pointed to
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	4619      	mov	r1, r3
 8000230:	481a      	ldr	r0, [pc, #104]	; (800029c <main+0x104>)
 8000232:	f001 f99f 	bl	8001574 <iprintf>
														//by the value of the flash_size variable, that's what *flash_size does
		printf("Kb \n\n"); //Print "Kb" then 2 new lines
 8000236:	481a      	ldr	r0, [pc, #104]	; (80002a0 <main+0x108>)
 8000238:	f001 fa02 	bl	8001640 <puts>

		udid_1_value = ((*udid_1 >> 24) & 0xFF);
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	0e1b      	lsrs	r3, r3, #24
 8000242:	607b      	str	r3, [r7, #4]
		printf("Unique device identifier bits 31 - 0 = 0x%.2x", udid_1_value); //Print 0x then the value of udid_1_value in 2-digit HEX format
 8000244:	6879      	ldr	r1, [r7, #4]
 8000246:	4817      	ldr	r0, [pc, #92]	; (80002a4 <main+0x10c>)
 8000248:	f001 f994 	bl	8001574 <iprintf>
		udid_1_value = ((*udid_1 >> 16) & 0xFF);
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	0c1b      	lsrs	r3, r3, #16
 8000252:	b2db      	uxtb	r3, r3
 8000254:	607b      	str	r3, [r7, #4]
		printf("%.2x", udid_1_value);
 8000256:	6879      	ldr	r1, [r7, #4]
 8000258:	4813      	ldr	r0, [pc, #76]	; (80002a8 <main+0x110>)
 800025a:	f001 f98b 	bl	8001574 <iprintf>
		udid_1_value = ((*udid_1 >> 8) & 0xFF);
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	0a1b      	lsrs	r3, r3, #8
 8000264:	b2db      	uxtb	r3, r3
 8000266:	607b      	str	r3, [r7, #4]
		printf("%.2x", udid_1_value);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	480f      	ldr	r0, [pc, #60]	; (80002a8 <main+0x110>)
 800026c:	f001 f982 	bl	8001574 <iprintf>
		udid_1_value = ((*udid_1 >> 0) & 0xFF);
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	607b      	str	r3, [r7, #4]
		printf("%.2x\n\n", udid_1_value);
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	480c      	ldr	r0, [pc, #48]	; (80002ac <main+0x114>)
 800027c:	f001 f97a 	bl	8001574 <iprintf>
		HAL_GPIO_WritePin(GPIOC, LED_Pin, 0); //Turn on LED
 8000280:	e7a1      	b.n	80001c6 <main+0x2e>
 8000282:	bf00      	nop
 8000284:	1ffff7e0 	.word	0x1ffff7e0
 8000288:	1ffff7e8 	.word	0x1ffff7e8
 800028c:	40011000 	.word	0x40011000
 8000290:	0800233c 	.word	0x0800233c
 8000294:	0800234c 	.word	0x0800234c
 8000298:	08002364 	.word	0x08002364
 800029c:	0800236c 	.word	0x0800236c
 80002a0:	08002384 	.word	0x08002384
 80002a4:	0800238c 	.word	0x0800238c
 80002a8:	080023bc 	.word	0x080023bc
 80002ac:	080023c4 	.word	0x080023c4

080002b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fa9e 	bl	8001800 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d2:	2301      	movs	r3, #1
 80002d4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002da:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	2302      	movs	r3, #2
 80002e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fc9b 	bl	8000c34 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x58>
		Error_Handler();
 8000304:	f000 f882 	bl	800040c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000318:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2102      	movs	r1, #2
 8000322:	4618      	mov	r0, r3
 8000324:	f000 ff08 	bl	8001138 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x82>
		Error_Handler();
 800032e:	f000 f86d 	bl	800040c <Error_Handler>
	}
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	; 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a1d      	ldr	r2, [pc, #116]	; (80003cc <MX_GPIO_Init+0x90>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a17      	ldr	r2, [pc, #92]	; (80003cc <MX_GPIO_Init+0x90>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <MX_GPIO_Init+0x90>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <MX_GPIO_Init+0x94>)
 80003a0:	f000 fc30 	bl	8000c04 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80003a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <MX_GPIO_Init+0x94>)
 80003be:	f000 fa9d 	bl	80008fc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40011000 	.word	0x40011000

080003d4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	e009      	b.n	80003fa <_write+0x26>
		ITM_SendChar(*ptr++);
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	1c5a      	adds	r2, r3, #1
 80003ea:	60ba      	str	r2, [r7, #8]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff feac 	bl	800014c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	3301      	adds	r3, #1
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	429a      	cmp	r2, r3
 8000400:	dbf1      	blt.n	80003e6 <_write+0x12>
	}
	return len;
 8000402:	687b      	ldr	r3, [r7, #4]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>
	...

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a14      	ldr	r2, [pc, #80]	; (8000474 <HAL_MspInit+0x5c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_MspInit+0x5c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c2:	f000 f8f7 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}

080004ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b086      	sub	sp, #24
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	60f8      	str	r0, [r7, #12]
 80004d2:	60b9      	str	r1, [r7, #8]
 80004d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	e00a      	b.n	80004f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004dc:	f3af 8000 	nop.w
 80004e0:	4601      	mov	r1, r0
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	1c5a      	adds	r2, r3, #1
 80004e6:	60ba      	str	r2, [r7, #8]
 80004e8:	b2ca      	uxtb	r2, r1
 80004ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697a      	ldr	r2, [r7, #20]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	dbf0      	blt.n	80004dc <_read+0x12>
  }

  return len;
 80004fa:	687b      	ldr	r3, [r7, #4]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800052a:	605a      	str	r2, [r3, #4]
  return 0;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <_isatty>:

int _isatty(int file)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000540:	2301      	movs	r3, #1
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <_sbrk+0x5c>)
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <_sbrk+0x60>)
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d102      	bne.n	8000586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <_sbrk+0x64>)
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <_sbrk+0x68>)
 8000584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <_sbrk+0x64>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	429a      	cmp	r2, r3
 8000592:	d207      	bcs.n	80005a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000594:	f001 f982 	bl	800189c <__errno>
 8000598:	4603      	mov	r3, r0
 800059a:	220c      	movs	r2, #12
 800059c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	e009      	b.n	80005b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <_sbrk+0x64>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <_sbrk+0x64>)
 80005b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20005000 	.word	0x20005000
 80005c4:	00000400 	.word	0x00000400
 80005c8:	20000084 	.word	0x20000084
 80005cc:	200001d8 	.word	0x200001d8

080005d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005dc:	f7ff fff8 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005e2:	490c      	ldr	r1, [pc, #48]	; (8000614 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f8:	4c09      	ldr	r4, [pc, #36]	; (8000620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000606:	f001 f94f 	bl	80018a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff fdc5 	bl	8000198 <main>
  bx lr
 800060e:	4770      	bx	lr
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000618:	0800242c 	.word	0x0800242c
  ldr r2, =_sbss
 800061c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000620:	200001d8 	.word	0x200001d8

08000624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_2_IRQHandler>
	...

08000628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_Init+0x28>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_Init+0x28>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000638:	2003      	movs	r0, #3
 800063a:	f000 f92b 	bl	8000894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063e:	200f      	movs	r0, #15
 8000640:	f000 f808 	bl	8000654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000644:	f7ff fee8 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40022000 	.word	0x40022000

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_InitTick+0x54>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_InitTick+0x58>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f935 	bl	80008e2 <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f90b 	bl	80008aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x5c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000004 	.word	0x20000004

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a03      	ldr	r2, [pc, #12]	; (80006d4 <HAL_IncTick+0x20>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000088 	.word	0x20000088

080006d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <HAL_GetTick+0x10>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	20000088 	.word	0x20000088

080006ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f7ff fff0 	bl	80006d8 <HAL_GetTick>
 80006f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000704:	d005      	beq.n	8000712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_Delay+0x44>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000712:	bf00      	nop
 8000714:	f7ff ffe0 	bl	80006d8 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	429a      	cmp	r2, r3
 8000722:	d8f7      	bhi.n	8000714 <HAL_Delay+0x28>
  {
  }
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008

08000734 <__NVIC_SetPriorityGrouping>:
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_SetPriority>:
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SysTick_Config>:
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000860:	d301      	bcc.n	8000866 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000862:	2301      	movs	r3, #1
 8000864:	e00f      	b.n	8000886 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <SysTick_Config+0x40>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086e:	210f      	movs	r1, #15
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f7ff ff90 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <SysTick_Config+0x40>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <SysTick_Config+0x40>)
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	e000e010 	.word	0xe000e010

08000894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff49 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008bc:	f7ff ff5e 	bl	800077c <__NVIC_GetPriorityGrouping>
 80008c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff90 	bl	80007ec <NVIC_EncodePriority>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff5f 	bl	8000798 <__NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffb0 	bl	8000850 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090e:	e169      	b.n	8000be4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000910:	2201      	movs	r2, #1
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	f040 8158 	bne.w	8000bde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	4a9a      	ldr	r2, [pc, #616]	; (8000b9c <HAL_GPIO_Init+0x2a0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d05e      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000938:	4a98      	ldr	r2, [pc, #608]	; (8000b9c <HAL_GPIO_Init+0x2a0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d875      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 800093e:	4a98      	ldr	r2, [pc, #608]	; (8000ba0 <HAL_GPIO_Init+0x2a4>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d058      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000944:	4a96      	ldr	r2, [pc, #600]	; (8000ba0 <HAL_GPIO_Init+0x2a4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d86f      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 800094a:	4a96      	ldr	r2, [pc, #600]	; (8000ba4 <HAL_GPIO_Init+0x2a8>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d052      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000950:	4a94      	ldr	r2, [pc, #592]	; (8000ba4 <HAL_GPIO_Init+0x2a8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d869      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 8000956:	4a94      	ldr	r2, [pc, #592]	; (8000ba8 <HAL_GPIO_Init+0x2ac>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d04c      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 800095c:	4a92      	ldr	r2, [pc, #584]	; (8000ba8 <HAL_GPIO_Init+0x2ac>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d863      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 8000962:	4a92      	ldr	r2, [pc, #584]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d046      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000968:	4a90      	ldr	r2, [pc, #576]	; (8000bac <HAL_GPIO_Init+0x2b0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d85d      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 800096e:	2b12      	cmp	r3, #18
 8000970:	d82a      	bhi.n	80009c8 <HAL_GPIO_Init+0xcc>
 8000972:	2b12      	cmp	r3, #18
 8000974:	d859      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 8000976:	a201      	add	r2, pc, #4	; (adr r2, 800097c <HAL_GPIO_Init+0x80>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	080009f7 	.word	0x080009f7
 8000980:	080009d1 	.word	0x080009d1
 8000984:	080009e3 	.word	0x080009e3
 8000988:	08000a25 	.word	0x08000a25
 800098c:	08000a2b 	.word	0x08000a2b
 8000990:	08000a2b 	.word	0x08000a2b
 8000994:	08000a2b 	.word	0x08000a2b
 8000998:	08000a2b 	.word	0x08000a2b
 800099c:	08000a2b 	.word	0x08000a2b
 80009a0:	08000a2b 	.word	0x08000a2b
 80009a4:	08000a2b 	.word	0x08000a2b
 80009a8:	08000a2b 	.word	0x08000a2b
 80009ac:	08000a2b 	.word	0x08000a2b
 80009b0:	08000a2b 	.word	0x08000a2b
 80009b4:	08000a2b 	.word	0x08000a2b
 80009b8:	08000a2b 	.word	0x08000a2b
 80009bc:	08000a2b 	.word	0x08000a2b
 80009c0:	080009d9 	.word	0x080009d9
 80009c4:	080009ed 	.word	0x080009ed
 80009c8:	4a79      	ldr	r2, [pc, #484]	; (8000bb0 <HAL_GPIO_Init+0x2b4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d013      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ce:	e02c      	b.n	8000a2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	623b      	str	r3, [r7, #32]
          break;
 80009d6:	e029      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	3304      	adds	r3, #4
 80009de:	623b      	str	r3, [r7, #32]
          break;
 80009e0:	e024      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	3308      	adds	r3, #8
 80009e8:	623b      	str	r3, [r7, #32]
          break;
 80009ea:	e01f      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	330c      	adds	r3, #12
 80009f2:	623b      	str	r3, [r7, #32]
          break;
 80009f4:	e01a      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009fe:	2304      	movs	r3, #4
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e013      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d105      	bne.n	8000a18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	611a      	str	r2, [r3, #16]
          break;
 8000a16:	e009      	b.n	8000a2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	615a      	str	r2, [r3, #20]
          break;
 8000a22:	e003      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
          break;
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          break;
 8000a2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	2bff      	cmp	r3, #255	; 0xff
 8000a30:	d801      	bhi.n	8000a36 <HAL_GPIO_Init+0x13a>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	e001      	b.n	8000a3a <HAL_GPIO_Init+0x13e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	2bff      	cmp	r3, #255	; 0xff
 8000a40:	d802      	bhi.n	8000a48 <HAL_GPIO_Init+0x14c>
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	e002      	b.n	8000a4e <HAL_GPIO_Init+0x152>
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	3b08      	subs	r3, #8
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	210f      	movs	r1, #15
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	401a      	ands	r2, r3
 8000a60:	6a39      	ldr	r1, [r7, #32]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 80b1 	beq.w	8000bde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a94:	4a48      	ldr	r2, [pc, #288]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	f003 0303 	and.w	r3, r3, #3
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	220f      	movs	r2, #15
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <HAL_GPIO_Init+0x2c0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d013      	beq.n	8000ae8 <HAL_GPIO_Init+0x1ec>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a3f      	ldr	r2, [pc, #252]	; (8000bc0 <HAL_GPIO_Init+0x2c4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d00d      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e8>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a3e      	ldr	r2, [pc, #248]	; (8000bc4 <HAL_GPIO_Init+0x2c8>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d007      	beq.n	8000ae0 <HAL_GPIO_Init+0x1e4>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <HAL_GPIO_Init+0x2cc>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d101      	bne.n	8000adc <HAL_GPIO_Init+0x1e0>
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e006      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000adc:	2304      	movs	r3, #4
 8000ade:	e004      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e002      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e000      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aec:	f002 0203 	and.w	r2, r2, #3
 8000af0:	0092      	lsls	r2, r2, #2
 8000af2:	4093      	lsls	r3, r2
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000afa:	492f      	ldr	r1, [pc, #188]	; (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3302      	adds	r3, #2
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d006      	beq.n	8000b22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	492c      	ldr	r1, [pc, #176]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	608b      	str	r3, [r1, #8]
 8000b20:	e006      	b.n	8000b30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	4928      	ldr	r1, [pc, #160]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	4922      	ldr	r1, [pc, #136]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	60cb      	str	r3, [r1, #12]
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	491e      	ldr	r1, [pc, #120]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b54:	4013      	ands	r3, r2
 8000b56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	4918      	ldr	r1, [pc, #96]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	604b      	str	r3, [r1, #4]
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	4914      	ldr	r1, [pc, #80]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d021      	beq.n	8000bd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	490e      	ldr	r1, [pc, #56]	; (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
 8000b98:	e021      	b.n	8000bde <HAL_GPIO_Init+0x2e2>
 8000b9a:	bf00      	nop
 8000b9c:	10320000 	.word	0x10320000
 8000ba0:	10310000 	.word	0x10310000
 8000ba4:	10220000 	.word	0x10220000
 8000ba8:	10210000 	.word	0x10210000
 8000bac:	10120000 	.word	0x10120000
 8000bb0:	10110000 	.word	0x10110000
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	40010800 	.word	0x40010800
 8000bc0:	40010c00 	.word	0x40010c00
 8000bc4:	40011000 	.word	0x40011000
 8000bc8:	40011400 	.word	0x40011400
 8000bcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_GPIO_Init+0x304>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	4909      	ldr	r1, [pc, #36]	; (8000c00 <HAL_GPIO_Init+0x304>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	3301      	adds	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	fa22 f303 	lsr.w	r3, r2, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f47f ae8e 	bne.w	8000910 <HAL_GPIO_Init+0x14>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	372c      	adds	r7, #44	; 0x2c
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40010400 	.word	0x40010400

08000c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c20:	e003      	b.n	8000c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	041a      	lsls	r2, r3, #16
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	611a      	str	r2, [r3, #16]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e272      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 8087 	beq.w	8000d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c54:	4b92      	ldr	r3, [pc, #584]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 030c 	and.w	r3, r3, #12
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	d00c      	beq.n	8000c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c60:	4b8f      	ldr	r3, [pc, #572]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 030c 	and.w	r3, r3, #12
 8000c68:	2b08      	cmp	r3, #8
 8000c6a:	d112      	bne.n	8000c92 <HAL_RCC_OscConfig+0x5e>
 8000c6c:	4b8c      	ldr	r3, [pc, #560]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c78:	d10b      	bne.n	8000c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7a:	4b89      	ldr	r3, [pc, #548]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d06c      	beq.n	8000d60 <HAL_RCC_OscConfig+0x12c>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d168      	bne.n	8000d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e24c      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c9a:	d106      	bne.n	8000caa <HAL_RCC_OscConfig+0x76>
 8000c9c:	4b80      	ldr	r3, [pc, #512]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a7f      	ldr	r2, [pc, #508]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e02e      	b.n	8000d08 <HAL_RCC_OscConfig+0xd4>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10c      	bne.n	8000ccc <HAL_RCC_OscConfig+0x98>
 8000cb2:	4b7b      	ldr	r3, [pc, #492]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a7a      	ldr	r2, [pc, #488]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	4b78      	ldr	r3, [pc, #480]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a77      	ldr	r2, [pc, #476]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	e01d      	b.n	8000d08 <HAL_RCC_OscConfig+0xd4>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd4:	d10c      	bne.n	8000cf0 <HAL_RCC_OscConfig+0xbc>
 8000cd6:	4b72      	ldr	r3, [pc, #456]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a71      	ldr	r2, [pc, #452]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b6f      	ldr	r3, [pc, #444]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a6e      	ldr	r2, [pc, #440]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e00b      	b.n	8000d08 <HAL_RCC_OscConfig+0xd4>
 8000cf0:	4b6b      	ldr	r3, [pc, #428]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a6a      	ldr	r2, [pc, #424]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b68      	ldr	r3, [pc, #416]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a67      	ldr	r2, [pc, #412]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d10:	f7ff fce2 	bl	80006d8 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d18:	f7ff fcde 	bl	80006d8 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b64      	cmp	r3, #100	; 0x64
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e200      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	4b5d      	ldr	r3, [pc, #372]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f0      	beq.n	8000d18 <HAL_RCC_OscConfig+0xe4>
 8000d36:	e014      	b.n	8000d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fcce 	bl	80006d8 <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d40:	f7ff fcca 	bl	80006d8 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b64      	cmp	r3, #100	; 0x64
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e1ec      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d52:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x10c>
 8000d5e:	e000      	b.n	8000d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d063      	beq.n	8000e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 030c 	and.w	r3, r3, #12
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00b      	beq.n	8000d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d7a:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d11c      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x18c>
 8000d86:	4b46      	ldr	r3, [pc, #280]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d116      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d92:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <HAL_RCC_OscConfig+0x176>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d001      	beq.n	8000daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e1c0      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4939      	ldr	r1, [pc, #228]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dbe:	e03a      	b.n	8000e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d020      	beq.n	8000e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dce:	f7ff fc83 	bl	80006d8 <HAL_GetTick>
 8000dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd4:	e008      	b.n	8000de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd6:	f7ff fc7f 	bl	80006d8 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e1a1      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de8:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f0      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	4927      	ldr	r1, [pc, #156]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
 8000e08:	e015      	b.n	8000e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e10:	f7ff fc62 	bl	80006d8 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e18:	f7ff fc5e 	bl	80006d8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e180      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f0      	bne.n	8000e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d03a      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d019      	beq.n	8000e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_RCC_OscConfig+0x274>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e50:	f7ff fc42 	bl	80006d8 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e58:	f7ff fc3e 	bl	80006d8 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e160      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 fa9c 	bl	80013b4 <RCC_Delay>
 8000e7c:	e01c      	b.n	8000eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_RCC_OscConfig+0x274>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e84:	f7ff fc28 	bl	80006d8 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8a:	e00f      	b.n	8000eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fc24 	bl	80006d8 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d908      	bls.n	8000eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e146      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	42420000 	.word	0x42420000
 8000ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eac:	4b92      	ldr	r3, [pc, #584]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1e9      	bne.n	8000e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 80a6 	beq.w	8001012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eca:	4b8b      	ldr	r3, [pc, #556]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10d      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b88      	ldr	r3, [pc, #544]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a87      	ldr	r2, [pc, #540]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	61d3      	str	r3, [r2, #28]
 8000ee2:	4b85      	ldr	r3, [pc, #532]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef2:	4b82      	ldr	r3, [pc, #520]	; (80010fc <HAL_RCC_OscConfig+0x4c8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d118      	bne.n	8000f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000efe:	4b7f      	ldr	r3, [pc, #508]	; (80010fc <HAL_RCC_OscConfig+0x4c8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a7e      	ldr	r2, [pc, #504]	; (80010fc <HAL_RCC_OscConfig+0x4c8>)
 8000f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fbe5 	bl	80006d8 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f12:	f7ff fbe1 	bl	80006d8 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b64      	cmp	r3, #100	; 0x64
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e103      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f24:	4b75      	ldr	r3, [pc, #468]	; (80010fc <HAL_RCC_OscConfig+0x4c8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f0      	beq.n	8000f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d106      	bne.n	8000f46 <HAL_RCC_OscConfig+0x312>
 8000f38:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4a6e      	ldr	r2, [pc, #440]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6213      	str	r3, [r2, #32]
 8000f44:	e02d      	b.n	8000fa2 <HAL_RCC_OscConfig+0x36e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x334>
 8000f4e:	4b6a      	ldr	r3, [pc, #424]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4a69      	ldr	r2, [pc, #420]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	6213      	str	r3, [r2, #32]
 8000f5a:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a66      	ldr	r2, [pc, #408]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	6213      	str	r3, [r2, #32]
 8000f66:	e01c      	b.n	8000fa2 <HAL_RCC_OscConfig+0x36e>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2b05      	cmp	r3, #5
 8000f6e:	d10c      	bne.n	8000f8a <HAL_RCC_OscConfig+0x356>
 8000f70:	4b61      	ldr	r3, [pc, #388]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a60      	ldr	r2, [pc, #384]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6213      	str	r3, [r2, #32]
 8000f7c:	4b5e      	ldr	r3, [pc, #376]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	4a5d      	ldr	r2, [pc, #372]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6213      	str	r3, [r2, #32]
 8000f88:	e00b      	b.n	8000fa2 <HAL_RCC_OscConfig+0x36e>
 8000f8a:	4b5b      	ldr	r3, [pc, #364]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4a5a      	ldr	r2, [pc, #360]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	6213      	str	r3, [r2, #32]
 8000f96:	4b58      	ldr	r3, [pc, #352]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a57      	ldr	r2, [pc, #348]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d015      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fb95 	bl	80006d8 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb0:	e00a      	b.n	8000fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb2:	f7ff fb91 	bl	80006d8 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e0b1      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc8:	4b4b      	ldr	r3, [pc, #300]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0ee      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x37e>
 8000fd4:	e014      	b.n	8001000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fb7f 	bl	80006d8 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fdc:	e00a      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fde:	f7ff fb7b 	bl	80006d8 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e09b      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1ee      	bne.n	8000fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d105      	bne.n	8001012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001006:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a3b      	ldr	r2, [pc, #236]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8087 	beq.w	800112a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d061      	beq.n	80010ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d146      	bne.n	80010be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <HAL_RCC_OscConfig+0x4cc>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fb4f 	bl	80006d8 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff fb4b 	bl	80006d8 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e06d      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f0      	bne.n	800103e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001064:	d108      	bne.n	8001078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4921      	ldr	r1, [pc, #132]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a19      	ldr	r1, [r3, #32]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	430b      	orrs	r3, r1
 800108a:	491b      	ldr	r1, [pc, #108]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_RCC_OscConfig+0x4cc>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fb1f 	bl	80006d8 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff fb1b 	bl	80006d8 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e03d      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x46a>
 80010bc:	e035      	b.n	800112a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_RCC_OscConfig+0x4cc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fb08 	bl	80006d8 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010cc:	f7ff fb04 	bl	80006d8 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e026      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x498>
 80010ea:	e01e      	b.n	800112a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d107      	bne.n	8001104 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e019      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40007000 	.word	0x40007000
 8001100:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_RCC_OscConfig+0x500>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	429a      	cmp	r2, r3
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001122:	429a      	cmp	r2, r3
 8001124:	d001      	beq.n	800112a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0d0      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b6a      	ldr	r3, [pc, #424]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d910      	bls.n	800117c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 0207 	bic.w	r2, r3, #7
 8001162:	4965      	ldr	r1, [pc, #404]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b63      	ldr	r3, [pc, #396]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0b8      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001194:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a58      	ldr	r2, [pc, #352]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800119e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ac:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b8:	4b50      	ldr	r3, [pc, #320]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	494d      	ldr	r1, [pc, #308]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d040      	beq.n	8001258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d115      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e07f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e073      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e06b      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b39      	ldr	r3, [pc, #228]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4936      	ldr	r1, [pc, #216]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fa56 	bl	80006d8 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	e00a      	b.n	8001246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff fa52 	bl	80006d8 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e053      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 020c 	and.w	r2, r3, #12
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d1eb      	bne.n	8001230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d210      	bcs.n	8001288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 0207 	bic.w	r2, r3, #7
 800126e:	4922      	ldr	r1, [pc, #136]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e032      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4916      	ldr	r1, [pc, #88]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	490e      	ldr	r1, [pc, #56]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c6:	f000 f821 	bl	800130c <HAL_RCC_GetSysClockFreq>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	490a      	ldr	r1, [pc, #40]	; (8001300 <HAL_RCC_ClockConfig+0x1c8>)
 80012d8:	5ccb      	ldrb	r3, [r1, r3]
 80012da:	fa22 f303 	lsr.w	r3, r2, r3
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x1cc>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_ClockConfig+0x1d0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f9b4 	bl	8000654 <HAL_InitTick>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40021000 	.word	0x40021000
 8001300:	080023cc 	.word	0x080023cc
 8001304:	20000000 	.word	0x20000000
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b04      	cmp	r3, #4
 8001334:	d002      	beq.n	800133c <HAL_RCC_GetSysClockFreq+0x30>
 8001336:	2b08      	cmp	r3, #8
 8001338:	d003      	beq.n	8001342 <HAL_RCC_GetSysClockFreq+0x36>
 800133a:	e027      	b.n	800138c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800133e:	613b      	str	r3, [r7, #16]
      break;
 8001340:	e027      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	0c9b      	lsrs	r3, r3, #18
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d010      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	0c5b      	lsrs	r3, r3, #17
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800136e:	fb03 f202 	mul.w	r2, r3, r2
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e004      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	613b      	str	r3, [r7, #16]
      break;
 800138a:	e002      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800138e:	613b      	str	r3, [r7, #16]
      break;
 8001390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001392:	693b      	ldr	r3, [r7, #16]
}
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	080023dc 	.word	0x080023dc
 80013ac:	080023ec 	.word	0x080023ec
 80013b0:	003d0900 	.word	0x003d0900

080013b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <RCC_Delay+0x34>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <RCC_Delay+0x38>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0a5b      	lsrs	r3, r3, #9
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013d0:	bf00      	nop
  }
  while (Delay --);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1e5a      	subs	r2, r3, #1
 80013d6:	60fa      	str	r2, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f9      	bne.n	80013d0 <RCC_Delay+0x1c>
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000000 	.word	0x20000000
 80013ec:	10624dd3 	.word	0x10624dd3

080013f0 <std>:
 80013f0:	2300      	movs	r3, #0
 80013f2:	b510      	push	{r4, lr}
 80013f4:	4604      	mov	r4, r0
 80013f6:	e9c0 3300 	strd	r3, r3, [r0]
 80013fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013fe:	6083      	str	r3, [r0, #8]
 8001400:	8181      	strh	r1, [r0, #12]
 8001402:	6643      	str	r3, [r0, #100]	; 0x64
 8001404:	81c2      	strh	r2, [r0, #14]
 8001406:	6183      	str	r3, [r0, #24]
 8001408:	4619      	mov	r1, r3
 800140a:	2208      	movs	r2, #8
 800140c:	305c      	adds	r0, #92	; 0x5c
 800140e:	f000 f9f7 	bl	8001800 <memset>
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <std+0x58>)
 8001414:	6224      	str	r4, [r4, #32]
 8001416:	6263      	str	r3, [r4, #36]	; 0x24
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <std+0x5c>)
 800141a:	62a3      	str	r3, [r4, #40]	; 0x28
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <std+0x60>)
 800141e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <std+0x64>)
 8001422:	6323      	str	r3, [r4, #48]	; 0x30
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <std+0x68>)
 8001426:	429c      	cmp	r4, r3
 8001428:	d006      	beq.n	8001438 <std+0x48>
 800142a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800142e:	4294      	cmp	r4, r2
 8001430:	d002      	beq.n	8001438 <std+0x48>
 8001432:	33d0      	adds	r3, #208	; 0xd0
 8001434:	429c      	cmp	r4, r3
 8001436:	d105      	bne.n	8001444 <std+0x54>
 8001438:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800143c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001440:	f000 ba56 	b.w	80018f0 <__retarget_lock_init_recursive>
 8001444:	bd10      	pop	{r4, pc}
 8001446:	bf00      	nop
 8001448:	08001651 	.word	0x08001651
 800144c:	08001673 	.word	0x08001673
 8001450:	080016ab 	.word	0x080016ab
 8001454:	080016cf 	.word	0x080016cf
 8001458:	2000008c 	.word	0x2000008c

0800145c <stdio_exit_handler>:
 800145c:	4a02      	ldr	r2, [pc, #8]	; (8001468 <stdio_exit_handler+0xc>)
 800145e:	4903      	ldr	r1, [pc, #12]	; (800146c <stdio_exit_handler+0x10>)
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <stdio_exit_handler+0x14>)
 8001462:	f000 b869 	b.w	8001538 <_fwalk_sglue>
 8001466:	bf00      	nop
 8001468:	2000000c 	.word	0x2000000c
 800146c:	08002191 	.word	0x08002191
 8001470:	20000018 	.word	0x20000018

08001474 <cleanup_stdio>:
 8001474:	6841      	ldr	r1, [r0, #4]
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <cleanup_stdio+0x34>)
 8001478:	b510      	push	{r4, lr}
 800147a:	4299      	cmp	r1, r3
 800147c:	4604      	mov	r4, r0
 800147e:	d001      	beq.n	8001484 <cleanup_stdio+0x10>
 8001480:	f000 fe86 	bl	8002190 <_fflush_r>
 8001484:	68a1      	ldr	r1, [r4, #8]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <cleanup_stdio+0x38>)
 8001488:	4299      	cmp	r1, r3
 800148a:	d002      	beq.n	8001492 <cleanup_stdio+0x1e>
 800148c:	4620      	mov	r0, r4
 800148e:	f000 fe7f 	bl	8002190 <_fflush_r>
 8001492:	68e1      	ldr	r1, [r4, #12]
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <cleanup_stdio+0x3c>)
 8001496:	4299      	cmp	r1, r3
 8001498:	d004      	beq.n	80014a4 <cleanup_stdio+0x30>
 800149a:	4620      	mov	r0, r4
 800149c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014a0:	f000 be76 	b.w	8002190 <_fflush_r>
 80014a4:	bd10      	pop	{r4, pc}
 80014a6:	bf00      	nop
 80014a8:	2000008c 	.word	0x2000008c
 80014ac:	200000f4 	.word	0x200000f4
 80014b0:	2000015c 	.word	0x2000015c

080014b4 <global_stdio_init.part.0>:
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <global_stdio_init.part.0+0x30>)
 80014b8:	4c0b      	ldr	r4, [pc, #44]	; (80014e8 <global_stdio_init.part.0+0x34>)
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <global_stdio_init.part.0+0x38>)
 80014bc:	4620      	mov	r0, r4
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	2104      	movs	r1, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	f7ff ff94 	bl	80013f0 <std>
 80014c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80014cc:	2201      	movs	r2, #1
 80014ce:	2109      	movs	r1, #9
 80014d0:	f7ff ff8e 	bl	80013f0 <std>
 80014d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80014d8:	2202      	movs	r2, #2
 80014da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014de:	2112      	movs	r1, #18
 80014e0:	f7ff bf86 	b.w	80013f0 <std>
 80014e4:	200001c4 	.word	0x200001c4
 80014e8:	2000008c 	.word	0x2000008c
 80014ec:	0800145d 	.word	0x0800145d

080014f0 <__sfp_lock_acquire>:
 80014f0:	4801      	ldr	r0, [pc, #4]	; (80014f8 <__sfp_lock_acquire+0x8>)
 80014f2:	f000 b9fe 	b.w	80018f2 <__retarget_lock_acquire_recursive>
 80014f6:	bf00      	nop
 80014f8:	200001cd 	.word	0x200001cd

080014fc <__sfp_lock_release>:
 80014fc:	4801      	ldr	r0, [pc, #4]	; (8001504 <__sfp_lock_release+0x8>)
 80014fe:	f000 b9f9 	b.w	80018f4 <__retarget_lock_release_recursive>
 8001502:	bf00      	nop
 8001504:	200001cd 	.word	0x200001cd

08001508 <__sinit>:
 8001508:	b510      	push	{r4, lr}
 800150a:	4604      	mov	r4, r0
 800150c:	f7ff fff0 	bl	80014f0 <__sfp_lock_acquire>
 8001510:	6a23      	ldr	r3, [r4, #32]
 8001512:	b11b      	cbz	r3, 800151c <__sinit+0x14>
 8001514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001518:	f7ff bff0 	b.w	80014fc <__sfp_lock_release>
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__sinit+0x28>)
 800151e:	6223      	str	r3, [r4, #32]
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__sinit+0x2c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f5      	bne.n	8001514 <__sinit+0xc>
 8001528:	f7ff ffc4 	bl	80014b4 <global_stdio_init.part.0>
 800152c:	e7f2      	b.n	8001514 <__sinit+0xc>
 800152e:	bf00      	nop
 8001530:	08001475 	.word	0x08001475
 8001534:	200001c4 	.word	0x200001c4

08001538 <_fwalk_sglue>:
 8001538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800153c:	4607      	mov	r7, r0
 800153e:	4688      	mov	r8, r1
 8001540:	4614      	mov	r4, r2
 8001542:	2600      	movs	r6, #0
 8001544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001548:	f1b9 0901 	subs.w	r9, r9, #1
 800154c:	d505      	bpl.n	800155a <_fwalk_sglue+0x22>
 800154e:	6824      	ldr	r4, [r4, #0]
 8001550:	2c00      	cmp	r4, #0
 8001552:	d1f7      	bne.n	8001544 <_fwalk_sglue+0xc>
 8001554:	4630      	mov	r0, r6
 8001556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800155a:	89ab      	ldrh	r3, [r5, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d907      	bls.n	8001570 <_fwalk_sglue+0x38>
 8001560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001564:	3301      	adds	r3, #1
 8001566:	d003      	beq.n	8001570 <_fwalk_sglue+0x38>
 8001568:	4629      	mov	r1, r5
 800156a:	4638      	mov	r0, r7
 800156c:	47c0      	blx	r8
 800156e:	4306      	orrs	r6, r0
 8001570:	3568      	adds	r5, #104	; 0x68
 8001572:	e7e9      	b.n	8001548 <_fwalk_sglue+0x10>

08001574 <iprintf>:
 8001574:	b40f      	push	{r0, r1, r2, r3}
 8001576:	b507      	push	{r0, r1, r2, lr}
 8001578:	4906      	ldr	r1, [pc, #24]	; (8001594 <iprintf+0x20>)
 800157a:	ab04      	add	r3, sp, #16
 800157c:	6808      	ldr	r0, [r1, #0]
 800157e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001582:	6881      	ldr	r1, [r0, #8]
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f000 fad3 	bl	8001b30 <_vfiprintf_r>
 800158a:	b003      	add	sp, #12
 800158c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001590:	b004      	add	sp, #16
 8001592:	4770      	bx	lr
 8001594:	20000064 	.word	0x20000064

08001598 <_puts_r>:
 8001598:	6a03      	ldr	r3, [r0, #32]
 800159a:	b570      	push	{r4, r5, r6, lr}
 800159c:	4605      	mov	r5, r0
 800159e:	460e      	mov	r6, r1
 80015a0:	6884      	ldr	r4, [r0, #8]
 80015a2:	b90b      	cbnz	r3, 80015a8 <_puts_r+0x10>
 80015a4:	f7ff ffb0 	bl	8001508 <__sinit>
 80015a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015aa:	07db      	lsls	r3, r3, #31
 80015ac:	d405      	bmi.n	80015ba <_puts_r+0x22>
 80015ae:	89a3      	ldrh	r3, [r4, #12]
 80015b0:	0598      	lsls	r0, r3, #22
 80015b2:	d402      	bmi.n	80015ba <_puts_r+0x22>
 80015b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015b6:	f000 f99c 	bl	80018f2 <__retarget_lock_acquire_recursive>
 80015ba:	89a3      	ldrh	r3, [r4, #12]
 80015bc:	0719      	lsls	r1, r3, #28
 80015be:	d513      	bpl.n	80015e8 <_puts_r+0x50>
 80015c0:	6923      	ldr	r3, [r4, #16]
 80015c2:	b18b      	cbz	r3, 80015e8 <_puts_r+0x50>
 80015c4:	3e01      	subs	r6, #1
 80015c6:	68a3      	ldr	r3, [r4, #8]
 80015c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80015cc:	3b01      	subs	r3, #1
 80015ce:	60a3      	str	r3, [r4, #8]
 80015d0:	b9e9      	cbnz	r1, 800160e <_puts_r+0x76>
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da2e      	bge.n	8001634 <_puts_r+0x9c>
 80015d6:	4622      	mov	r2, r4
 80015d8:	210a      	movs	r1, #10
 80015da:	4628      	mov	r0, r5
 80015dc:	f000 f87b 	bl	80016d6 <__swbuf_r>
 80015e0:	3001      	adds	r0, #1
 80015e2:	d007      	beq.n	80015f4 <_puts_r+0x5c>
 80015e4:	250a      	movs	r5, #10
 80015e6:	e007      	b.n	80015f8 <_puts_r+0x60>
 80015e8:	4621      	mov	r1, r4
 80015ea:	4628      	mov	r0, r5
 80015ec:	f000 f8b0 	bl	8001750 <__swsetup_r>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d0e7      	beq.n	80015c4 <_puts_r+0x2c>
 80015f4:	f04f 35ff 	mov.w	r5, #4294967295
 80015f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015fa:	07da      	lsls	r2, r3, #31
 80015fc:	d405      	bmi.n	800160a <_puts_r+0x72>
 80015fe:	89a3      	ldrh	r3, [r4, #12]
 8001600:	059b      	lsls	r3, r3, #22
 8001602:	d402      	bmi.n	800160a <_puts_r+0x72>
 8001604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001606:	f000 f975 	bl	80018f4 <__retarget_lock_release_recursive>
 800160a:	4628      	mov	r0, r5
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b00      	cmp	r3, #0
 8001610:	da04      	bge.n	800161c <_puts_r+0x84>
 8001612:	69a2      	ldr	r2, [r4, #24]
 8001614:	429a      	cmp	r2, r3
 8001616:	dc06      	bgt.n	8001626 <_puts_r+0x8e>
 8001618:	290a      	cmp	r1, #10
 800161a:	d004      	beq.n	8001626 <_puts_r+0x8e>
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	6022      	str	r2, [r4, #0]
 8001622:	7019      	strb	r1, [r3, #0]
 8001624:	e7cf      	b.n	80015c6 <_puts_r+0x2e>
 8001626:	4622      	mov	r2, r4
 8001628:	4628      	mov	r0, r5
 800162a:	f000 f854 	bl	80016d6 <__swbuf_r>
 800162e:	3001      	adds	r0, #1
 8001630:	d1c9      	bne.n	80015c6 <_puts_r+0x2e>
 8001632:	e7df      	b.n	80015f4 <_puts_r+0x5c>
 8001634:	250a      	movs	r5, #10
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	6022      	str	r2, [r4, #0]
 800163c:	701d      	strb	r5, [r3, #0]
 800163e:	e7db      	b.n	80015f8 <_puts_r+0x60>

08001640 <puts>:
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <puts+0xc>)
 8001642:	4601      	mov	r1, r0
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	f7ff bfa7 	b.w	8001598 <_puts_r>
 800164a:	bf00      	nop
 800164c:	20000064 	.word	0x20000064

08001650 <__sread>:
 8001650:	b510      	push	{r4, lr}
 8001652:	460c      	mov	r4, r1
 8001654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001658:	f000 f8fc 	bl	8001854 <_read_r>
 800165c:	2800      	cmp	r0, #0
 800165e:	bfab      	itete	ge
 8001660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001662:	89a3      	ldrhlt	r3, [r4, #12]
 8001664:	181b      	addge	r3, r3, r0
 8001666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800166a:	bfac      	ite	ge
 800166c:	6563      	strge	r3, [r4, #84]	; 0x54
 800166e:	81a3      	strhlt	r3, [r4, #12]
 8001670:	bd10      	pop	{r4, pc}

08001672 <__swrite>:
 8001672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001676:	461f      	mov	r7, r3
 8001678:	898b      	ldrh	r3, [r1, #12]
 800167a:	4605      	mov	r5, r0
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	460c      	mov	r4, r1
 8001680:	4616      	mov	r6, r2
 8001682:	d505      	bpl.n	8001690 <__swrite+0x1e>
 8001684:	2302      	movs	r3, #2
 8001686:	2200      	movs	r2, #0
 8001688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800168c:	f000 f8d0 	bl	8001830 <_lseek_r>
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	4632      	mov	r2, r6
 8001694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001698:	81a3      	strh	r3, [r4, #12]
 800169a:	4628      	mov	r0, r5
 800169c:	463b      	mov	r3, r7
 800169e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016a6:	f000 b8e7 	b.w	8001878 <_write_r>

080016aa <__sseek>:
 80016aa:	b510      	push	{r4, lr}
 80016ac:	460c      	mov	r4, r1
 80016ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016b2:	f000 f8bd 	bl	8001830 <_lseek_r>
 80016b6:	1c43      	adds	r3, r0, #1
 80016b8:	89a3      	ldrh	r3, [r4, #12]
 80016ba:	bf15      	itete	ne
 80016bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80016be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80016c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80016c6:	81a3      	strheq	r3, [r4, #12]
 80016c8:	bf18      	it	ne
 80016ca:	81a3      	strhne	r3, [r4, #12]
 80016cc:	bd10      	pop	{r4, pc}

080016ce <__sclose>:
 80016ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016d2:	f000 b89d 	b.w	8001810 <_close_r>

080016d6 <__swbuf_r>:
 80016d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d8:	460e      	mov	r6, r1
 80016da:	4614      	mov	r4, r2
 80016dc:	4605      	mov	r5, r0
 80016de:	b118      	cbz	r0, 80016e8 <__swbuf_r+0x12>
 80016e0:	6a03      	ldr	r3, [r0, #32]
 80016e2:	b90b      	cbnz	r3, 80016e8 <__swbuf_r+0x12>
 80016e4:	f7ff ff10 	bl	8001508 <__sinit>
 80016e8:	69a3      	ldr	r3, [r4, #24]
 80016ea:	60a3      	str	r3, [r4, #8]
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	071a      	lsls	r2, r3, #28
 80016f0:	d525      	bpl.n	800173e <__swbuf_r+0x68>
 80016f2:	6923      	ldr	r3, [r4, #16]
 80016f4:	b31b      	cbz	r3, 800173e <__swbuf_r+0x68>
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	6922      	ldr	r2, [r4, #16]
 80016fa:	b2f6      	uxtb	r6, r6
 80016fc:	1a98      	subs	r0, r3, r2
 80016fe:	6963      	ldr	r3, [r4, #20]
 8001700:	4637      	mov	r7, r6
 8001702:	4283      	cmp	r3, r0
 8001704:	dc04      	bgt.n	8001710 <__swbuf_r+0x3a>
 8001706:	4621      	mov	r1, r4
 8001708:	4628      	mov	r0, r5
 800170a:	f000 fd41 	bl	8002190 <_fflush_r>
 800170e:	b9e0      	cbnz	r0, 800174a <__swbuf_r+0x74>
 8001710:	68a3      	ldr	r3, [r4, #8]
 8001712:	3b01      	subs	r3, #1
 8001714:	60a3      	str	r3, [r4, #8]
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	6022      	str	r2, [r4, #0]
 800171c:	701e      	strb	r6, [r3, #0]
 800171e:	6962      	ldr	r2, [r4, #20]
 8001720:	1c43      	adds	r3, r0, #1
 8001722:	429a      	cmp	r2, r3
 8001724:	d004      	beq.n	8001730 <__swbuf_r+0x5a>
 8001726:	89a3      	ldrh	r3, [r4, #12]
 8001728:	07db      	lsls	r3, r3, #31
 800172a:	d506      	bpl.n	800173a <__swbuf_r+0x64>
 800172c:	2e0a      	cmp	r6, #10
 800172e:	d104      	bne.n	800173a <__swbuf_r+0x64>
 8001730:	4621      	mov	r1, r4
 8001732:	4628      	mov	r0, r5
 8001734:	f000 fd2c 	bl	8002190 <_fflush_r>
 8001738:	b938      	cbnz	r0, 800174a <__swbuf_r+0x74>
 800173a:	4638      	mov	r0, r7
 800173c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800173e:	4621      	mov	r1, r4
 8001740:	4628      	mov	r0, r5
 8001742:	f000 f805 	bl	8001750 <__swsetup_r>
 8001746:	2800      	cmp	r0, #0
 8001748:	d0d5      	beq.n	80016f6 <__swbuf_r+0x20>
 800174a:	f04f 37ff 	mov.w	r7, #4294967295
 800174e:	e7f4      	b.n	800173a <__swbuf_r+0x64>

08001750 <__swsetup_r>:
 8001750:	b538      	push	{r3, r4, r5, lr}
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <__swsetup_r+0xac>)
 8001754:	4605      	mov	r5, r0
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	460c      	mov	r4, r1
 800175a:	b118      	cbz	r0, 8001764 <__swsetup_r+0x14>
 800175c:	6a03      	ldr	r3, [r0, #32]
 800175e:	b90b      	cbnz	r3, 8001764 <__swsetup_r+0x14>
 8001760:	f7ff fed2 	bl	8001508 <__sinit>
 8001764:	89a3      	ldrh	r3, [r4, #12]
 8001766:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800176a:	0718      	lsls	r0, r3, #28
 800176c:	d422      	bmi.n	80017b4 <__swsetup_r+0x64>
 800176e:	06d9      	lsls	r1, r3, #27
 8001770:	d407      	bmi.n	8001782 <__swsetup_r+0x32>
 8001772:	2309      	movs	r3, #9
 8001774:	602b      	str	r3, [r5, #0]
 8001776:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800177a:	f04f 30ff 	mov.w	r0, #4294967295
 800177e:	81a3      	strh	r3, [r4, #12]
 8001780:	e034      	b.n	80017ec <__swsetup_r+0x9c>
 8001782:	0758      	lsls	r0, r3, #29
 8001784:	d512      	bpl.n	80017ac <__swsetup_r+0x5c>
 8001786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001788:	b141      	cbz	r1, 800179c <__swsetup_r+0x4c>
 800178a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800178e:	4299      	cmp	r1, r3
 8001790:	d002      	beq.n	8001798 <__swsetup_r+0x48>
 8001792:	4628      	mov	r0, r5
 8001794:	f000 f8b0 	bl	80018f8 <_free_r>
 8001798:	2300      	movs	r3, #0
 800179a:	6363      	str	r3, [r4, #52]	; 0x34
 800179c:	89a3      	ldrh	r3, [r4, #12]
 800179e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80017a2:	81a3      	strh	r3, [r4, #12]
 80017a4:	2300      	movs	r3, #0
 80017a6:	6063      	str	r3, [r4, #4]
 80017a8:	6923      	ldr	r3, [r4, #16]
 80017aa:	6023      	str	r3, [r4, #0]
 80017ac:	89a3      	ldrh	r3, [r4, #12]
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	81a3      	strh	r3, [r4, #12]
 80017b4:	6923      	ldr	r3, [r4, #16]
 80017b6:	b94b      	cbnz	r3, 80017cc <__swsetup_r+0x7c>
 80017b8:	89a3      	ldrh	r3, [r4, #12]
 80017ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80017be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c2:	d003      	beq.n	80017cc <__swsetup_r+0x7c>
 80017c4:	4621      	mov	r1, r4
 80017c6:	4628      	mov	r0, r5
 80017c8:	f000 fd2f 	bl	800222a <__smakebuf_r>
 80017cc:	89a0      	ldrh	r0, [r4, #12]
 80017ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017d2:	f010 0301 	ands.w	r3, r0, #1
 80017d6:	d00a      	beq.n	80017ee <__swsetup_r+0x9e>
 80017d8:	2300      	movs	r3, #0
 80017da:	60a3      	str	r3, [r4, #8]
 80017dc:	6963      	ldr	r3, [r4, #20]
 80017de:	425b      	negs	r3, r3
 80017e0:	61a3      	str	r3, [r4, #24]
 80017e2:	6923      	ldr	r3, [r4, #16]
 80017e4:	b943      	cbnz	r3, 80017f8 <__swsetup_r+0xa8>
 80017e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80017ea:	d1c4      	bne.n	8001776 <__swsetup_r+0x26>
 80017ec:	bd38      	pop	{r3, r4, r5, pc}
 80017ee:	0781      	lsls	r1, r0, #30
 80017f0:	bf58      	it	pl
 80017f2:	6963      	ldrpl	r3, [r4, #20]
 80017f4:	60a3      	str	r3, [r4, #8]
 80017f6:	e7f4      	b.n	80017e2 <__swsetup_r+0x92>
 80017f8:	2000      	movs	r0, #0
 80017fa:	e7f7      	b.n	80017ec <__swsetup_r+0x9c>
 80017fc:	20000064 	.word	0x20000064

08001800 <memset>:
 8001800:	4603      	mov	r3, r0
 8001802:	4402      	add	r2, r0
 8001804:	4293      	cmp	r3, r2
 8001806:	d100      	bne.n	800180a <memset+0xa>
 8001808:	4770      	bx	lr
 800180a:	f803 1b01 	strb.w	r1, [r3], #1
 800180e:	e7f9      	b.n	8001804 <memset+0x4>

08001810 <_close_r>:
 8001810:	b538      	push	{r3, r4, r5, lr}
 8001812:	2300      	movs	r3, #0
 8001814:	4d05      	ldr	r5, [pc, #20]	; (800182c <_close_r+0x1c>)
 8001816:	4604      	mov	r4, r0
 8001818:	4608      	mov	r0, r1
 800181a:	602b      	str	r3, [r5, #0]
 800181c:	f7fe fe72 	bl	8000504 <_close>
 8001820:	1c43      	adds	r3, r0, #1
 8001822:	d102      	bne.n	800182a <_close_r+0x1a>
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	b103      	cbz	r3, 800182a <_close_r+0x1a>
 8001828:	6023      	str	r3, [r4, #0]
 800182a:	bd38      	pop	{r3, r4, r5, pc}
 800182c:	200001c8 	.word	0x200001c8

08001830 <_lseek_r>:
 8001830:	b538      	push	{r3, r4, r5, lr}
 8001832:	4604      	mov	r4, r0
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	2200      	movs	r2, #0
 800183a:	4d05      	ldr	r5, [pc, #20]	; (8001850 <_lseek_r+0x20>)
 800183c:	602a      	str	r2, [r5, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	f7fe fe84 	bl	800054c <_lseek>
 8001844:	1c43      	adds	r3, r0, #1
 8001846:	d102      	bne.n	800184e <_lseek_r+0x1e>
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	b103      	cbz	r3, 800184e <_lseek_r+0x1e>
 800184c:	6023      	str	r3, [r4, #0]
 800184e:	bd38      	pop	{r3, r4, r5, pc}
 8001850:	200001c8 	.word	0x200001c8

08001854 <_read_r>:
 8001854:	b538      	push	{r3, r4, r5, lr}
 8001856:	4604      	mov	r4, r0
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	2200      	movs	r2, #0
 800185e:	4d05      	ldr	r5, [pc, #20]	; (8001874 <_read_r+0x20>)
 8001860:	602a      	str	r2, [r5, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	f7fe fe31 	bl	80004ca <_read>
 8001868:	1c43      	adds	r3, r0, #1
 800186a:	d102      	bne.n	8001872 <_read_r+0x1e>
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	b103      	cbz	r3, 8001872 <_read_r+0x1e>
 8001870:	6023      	str	r3, [r4, #0]
 8001872:	bd38      	pop	{r3, r4, r5, pc}
 8001874:	200001c8 	.word	0x200001c8

08001878 <_write_r>:
 8001878:	b538      	push	{r3, r4, r5, lr}
 800187a:	4604      	mov	r4, r0
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	2200      	movs	r2, #0
 8001882:	4d05      	ldr	r5, [pc, #20]	; (8001898 <_write_r+0x20>)
 8001884:	602a      	str	r2, [r5, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	f7fe fda4 	bl	80003d4 <_write>
 800188c:	1c43      	adds	r3, r0, #1
 800188e:	d102      	bne.n	8001896 <_write_r+0x1e>
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	b103      	cbz	r3, 8001896 <_write_r+0x1e>
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	bd38      	pop	{r3, r4, r5, pc}
 8001898:	200001c8 	.word	0x200001c8

0800189c <__errno>:
 800189c:	4b01      	ldr	r3, [pc, #4]	; (80018a4 <__errno+0x8>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000064 	.word	0x20000064

080018a8 <__libc_init_array>:
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	2600      	movs	r6, #0
 80018ac:	4d0c      	ldr	r5, [pc, #48]	; (80018e0 <__libc_init_array+0x38>)
 80018ae:	4c0d      	ldr	r4, [pc, #52]	; (80018e4 <__libc_init_array+0x3c>)
 80018b0:	1b64      	subs	r4, r4, r5
 80018b2:	10a4      	asrs	r4, r4, #2
 80018b4:	42a6      	cmp	r6, r4
 80018b6:	d109      	bne.n	80018cc <__libc_init_array+0x24>
 80018b8:	f000 fd34 	bl	8002324 <_init>
 80018bc:	2600      	movs	r6, #0
 80018be:	4d0a      	ldr	r5, [pc, #40]	; (80018e8 <__libc_init_array+0x40>)
 80018c0:	4c0a      	ldr	r4, [pc, #40]	; (80018ec <__libc_init_array+0x44>)
 80018c2:	1b64      	subs	r4, r4, r5
 80018c4:	10a4      	asrs	r4, r4, #2
 80018c6:	42a6      	cmp	r6, r4
 80018c8:	d105      	bne.n	80018d6 <__libc_init_array+0x2e>
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d0:	4798      	blx	r3
 80018d2:	3601      	adds	r6, #1
 80018d4:	e7ee      	b.n	80018b4 <__libc_init_array+0xc>
 80018d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018da:	4798      	blx	r3
 80018dc:	3601      	adds	r6, #1
 80018de:	e7f2      	b.n	80018c6 <__libc_init_array+0x1e>
 80018e0:	08002424 	.word	0x08002424
 80018e4:	08002424 	.word	0x08002424
 80018e8:	08002424 	.word	0x08002424
 80018ec:	08002428 	.word	0x08002428

080018f0 <__retarget_lock_init_recursive>:
 80018f0:	4770      	bx	lr

080018f2 <__retarget_lock_acquire_recursive>:
 80018f2:	4770      	bx	lr

080018f4 <__retarget_lock_release_recursive>:
 80018f4:	4770      	bx	lr
	...

080018f8 <_free_r>:
 80018f8:	b538      	push	{r3, r4, r5, lr}
 80018fa:	4605      	mov	r5, r0
 80018fc:	2900      	cmp	r1, #0
 80018fe:	d040      	beq.n	8001982 <_free_r+0x8a>
 8001900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001904:	1f0c      	subs	r4, r1, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	bfb8      	it	lt
 800190a:	18e4      	addlt	r4, r4, r3
 800190c:	f000 f8dc 	bl	8001ac8 <__malloc_lock>
 8001910:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <_free_r+0x8c>)
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	b933      	cbnz	r3, 8001924 <_free_r+0x2c>
 8001916:	6063      	str	r3, [r4, #4]
 8001918:	6014      	str	r4, [r2, #0]
 800191a:	4628      	mov	r0, r5
 800191c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001920:	f000 b8d8 	b.w	8001ad4 <__malloc_unlock>
 8001924:	42a3      	cmp	r3, r4
 8001926:	d908      	bls.n	800193a <_free_r+0x42>
 8001928:	6820      	ldr	r0, [r4, #0]
 800192a:	1821      	adds	r1, r4, r0
 800192c:	428b      	cmp	r3, r1
 800192e:	bf01      	itttt	eq
 8001930:	6819      	ldreq	r1, [r3, #0]
 8001932:	685b      	ldreq	r3, [r3, #4]
 8001934:	1809      	addeq	r1, r1, r0
 8001936:	6021      	streq	r1, [r4, #0]
 8001938:	e7ed      	b.n	8001916 <_free_r+0x1e>
 800193a:	461a      	mov	r2, r3
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	b10b      	cbz	r3, 8001944 <_free_r+0x4c>
 8001940:	42a3      	cmp	r3, r4
 8001942:	d9fa      	bls.n	800193a <_free_r+0x42>
 8001944:	6811      	ldr	r1, [r2, #0]
 8001946:	1850      	adds	r0, r2, r1
 8001948:	42a0      	cmp	r0, r4
 800194a:	d10b      	bne.n	8001964 <_free_r+0x6c>
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	4401      	add	r1, r0
 8001950:	1850      	adds	r0, r2, r1
 8001952:	4283      	cmp	r3, r0
 8001954:	6011      	str	r1, [r2, #0]
 8001956:	d1e0      	bne.n	800191a <_free_r+0x22>
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4408      	add	r0, r1
 800195e:	6010      	str	r0, [r2, #0]
 8001960:	6053      	str	r3, [r2, #4]
 8001962:	e7da      	b.n	800191a <_free_r+0x22>
 8001964:	d902      	bls.n	800196c <_free_r+0x74>
 8001966:	230c      	movs	r3, #12
 8001968:	602b      	str	r3, [r5, #0]
 800196a:	e7d6      	b.n	800191a <_free_r+0x22>
 800196c:	6820      	ldr	r0, [r4, #0]
 800196e:	1821      	adds	r1, r4, r0
 8001970:	428b      	cmp	r3, r1
 8001972:	bf01      	itttt	eq
 8001974:	6819      	ldreq	r1, [r3, #0]
 8001976:	685b      	ldreq	r3, [r3, #4]
 8001978:	1809      	addeq	r1, r1, r0
 800197a:	6021      	streq	r1, [r4, #0]
 800197c:	6063      	str	r3, [r4, #4]
 800197e:	6054      	str	r4, [r2, #4]
 8001980:	e7cb      	b.n	800191a <_free_r+0x22>
 8001982:	bd38      	pop	{r3, r4, r5, pc}
 8001984:	200001d0 	.word	0x200001d0

08001988 <sbrk_aligned>:
 8001988:	b570      	push	{r4, r5, r6, lr}
 800198a:	4e0e      	ldr	r6, [pc, #56]	; (80019c4 <sbrk_aligned+0x3c>)
 800198c:	460c      	mov	r4, r1
 800198e:	6831      	ldr	r1, [r6, #0]
 8001990:	4605      	mov	r5, r0
 8001992:	b911      	cbnz	r1, 800199a <sbrk_aligned+0x12>
 8001994:	f000 fca8 	bl	80022e8 <_sbrk_r>
 8001998:	6030      	str	r0, [r6, #0]
 800199a:	4621      	mov	r1, r4
 800199c:	4628      	mov	r0, r5
 800199e:	f000 fca3 	bl	80022e8 <_sbrk_r>
 80019a2:	1c43      	adds	r3, r0, #1
 80019a4:	d00a      	beq.n	80019bc <sbrk_aligned+0x34>
 80019a6:	1cc4      	adds	r4, r0, #3
 80019a8:	f024 0403 	bic.w	r4, r4, #3
 80019ac:	42a0      	cmp	r0, r4
 80019ae:	d007      	beq.n	80019c0 <sbrk_aligned+0x38>
 80019b0:	1a21      	subs	r1, r4, r0
 80019b2:	4628      	mov	r0, r5
 80019b4:	f000 fc98 	bl	80022e8 <_sbrk_r>
 80019b8:	3001      	adds	r0, #1
 80019ba:	d101      	bne.n	80019c0 <sbrk_aligned+0x38>
 80019bc:	f04f 34ff 	mov.w	r4, #4294967295
 80019c0:	4620      	mov	r0, r4
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
 80019c4:	200001d4 	.word	0x200001d4

080019c8 <_malloc_r>:
 80019c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019cc:	1ccd      	adds	r5, r1, #3
 80019ce:	f025 0503 	bic.w	r5, r5, #3
 80019d2:	3508      	adds	r5, #8
 80019d4:	2d0c      	cmp	r5, #12
 80019d6:	bf38      	it	cc
 80019d8:	250c      	movcc	r5, #12
 80019da:	2d00      	cmp	r5, #0
 80019dc:	4607      	mov	r7, r0
 80019de:	db01      	blt.n	80019e4 <_malloc_r+0x1c>
 80019e0:	42a9      	cmp	r1, r5
 80019e2:	d905      	bls.n	80019f0 <_malloc_r+0x28>
 80019e4:	230c      	movs	r3, #12
 80019e6:	2600      	movs	r6, #0
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	4630      	mov	r0, r6
 80019ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001ac4 <_malloc_r+0xfc>
 80019f4:	f000 f868 	bl	8001ac8 <__malloc_lock>
 80019f8:	f8d8 3000 	ldr.w	r3, [r8]
 80019fc:	461c      	mov	r4, r3
 80019fe:	bb5c      	cbnz	r4, 8001a58 <_malloc_r+0x90>
 8001a00:	4629      	mov	r1, r5
 8001a02:	4638      	mov	r0, r7
 8001a04:	f7ff ffc0 	bl	8001988 <sbrk_aligned>
 8001a08:	1c43      	adds	r3, r0, #1
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	d155      	bne.n	8001aba <_malloc_r+0xf2>
 8001a0e:	f8d8 4000 	ldr.w	r4, [r8]
 8001a12:	4626      	mov	r6, r4
 8001a14:	2e00      	cmp	r6, #0
 8001a16:	d145      	bne.n	8001aa4 <_malloc_r+0xdc>
 8001a18:	2c00      	cmp	r4, #0
 8001a1a:	d048      	beq.n	8001aae <_malloc_r+0xe6>
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	4631      	mov	r1, r6
 8001a20:	4638      	mov	r0, r7
 8001a22:	eb04 0903 	add.w	r9, r4, r3
 8001a26:	f000 fc5f 	bl	80022e8 <_sbrk_r>
 8001a2a:	4581      	cmp	r9, r0
 8001a2c:	d13f      	bne.n	8001aae <_malloc_r+0xe6>
 8001a2e:	6821      	ldr	r1, [r4, #0]
 8001a30:	4638      	mov	r0, r7
 8001a32:	1a6d      	subs	r5, r5, r1
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7ff ffa7 	bl	8001988 <sbrk_aligned>
 8001a3a:	3001      	adds	r0, #1
 8001a3c:	d037      	beq.n	8001aae <_malloc_r+0xe6>
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	442b      	add	r3, r5
 8001a42:	6023      	str	r3, [r4, #0]
 8001a44:	f8d8 3000 	ldr.w	r3, [r8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d038      	beq.n	8001abe <_malloc_r+0xf6>
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	42a2      	cmp	r2, r4
 8001a50:	d12b      	bne.n	8001aaa <_malloc_r+0xe2>
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	e00f      	b.n	8001a78 <_malloc_r+0xb0>
 8001a58:	6822      	ldr	r2, [r4, #0]
 8001a5a:	1b52      	subs	r2, r2, r5
 8001a5c:	d41f      	bmi.n	8001a9e <_malloc_r+0xd6>
 8001a5e:	2a0b      	cmp	r2, #11
 8001a60:	d917      	bls.n	8001a92 <_malloc_r+0xca>
 8001a62:	1961      	adds	r1, r4, r5
 8001a64:	42a3      	cmp	r3, r4
 8001a66:	6025      	str	r5, [r4, #0]
 8001a68:	bf18      	it	ne
 8001a6a:	6059      	strne	r1, [r3, #4]
 8001a6c:	6863      	ldr	r3, [r4, #4]
 8001a6e:	bf08      	it	eq
 8001a70:	f8c8 1000 	streq.w	r1, [r8]
 8001a74:	5162      	str	r2, [r4, r5]
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	4638      	mov	r0, r7
 8001a7a:	f104 060b 	add.w	r6, r4, #11
 8001a7e:	f000 f829 	bl	8001ad4 <__malloc_unlock>
 8001a82:	f026 0607 	bic.w	r6, r6, #7
 8001a86:	1d23      	adds	r3, r4, #4
 8001a88:	1af2      	subs	r2, r6, r3
 8001a8a:	d0ae      	beq.n	80019ea <_malloc_r+0x22>
 8001a8c:	1b9b      	subs	r3, r3, r6
 8001a8e:	50a3      	str	r3, [r4, r2]
 8001a90:	e7ab      	b.n	80019ea <_malloc_r+0x22>
 8001a92:	42a3      	cmp	r3, r4
 8001a94:	6862      	ldr	r2, [r4, #4]
 8001a96:	d1dd      	bne.n	8001a54 <_malloc_r+0x8c>
 8001a98:	f8c8 2000 	str.w	r2, [r8]
 8001a9c:	e7ec      	b.n	8001a78 <_malloc_r+0xb0>
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	6864      	ldr	r4, [r4, #4]
 8001aa2:	e7ac      	b.n	80019fe <_malloc_r+0x36>
 8001aa4:	4634      	mov	r4, r6
 8001aa6:	6876      	ldr	r6, [r6, #4]
 8001aa8:	e7b4      	b.n	8001a14 <_malloc_r+0x4c>
 8001aaa:	4613      	mov	r3, r2
 8001aac:	e7cc      	b.n	8001a48 <_malloc_r+0x80>
 8001aae:	230c      	movs	r3, #12
 8001ab0:	4638      	mov	r0, r7
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	f000 f80e 	bl	8001ad4 <__malloc_unlock>
 8001ab8:	e797      	b.n	80019ea <_malloc_r+0x22>
 8001aba:	6025      	str	r5, [r4, #0]
 8001abc:	e7dc      	b.n	8001a78 <_malloc_r+0xb0>
 8001abe:	605b      	str	r3, [r3, #4]
 8001ac0:	deff      	udf	#255	; 0xff
 8001ac2:	bf00      	nop
 8001ac4:	200001d0 	.word	0x200001d0

08001ac8 <__malloc_lock>:
 8001ac8:	4801      	ldr	r0, [pc, #4]	; (8001ad0 <__malloc_lock+0x8>)
 8001aca:	f7ff bf12 	b.w	80018f2 <__retarget_lock_acquire_recursive>
 8001ace:	bf00      	nop
 8001ad0:	200001cc 	.word	0x200001cc

08001ad4 <__malloc_unlock>:
 8001ad4:	4801      	ldr	r0, [pc, #4]	; (8001adc <__malloc_unlock+0x8>)
 8001ad6:	f7ff bf0d 	b.w	80018f4 <__retarget_lock_release_recursive>
 8001ada:	bf00      	nop
 8001adc:	200001cc 	.word	0x200001cc

08001ae0 <__sfputc_r>:
 8001ae0:	6893      	ldr	r3, [r2, #8]
 8001ae2:	b410      	push	{r4}
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	6093      	str	r3, [r2, #8]
 8001aea:	da07      	bge.n	8001afc <__sfputc_r+0x1c>
 8001aec:	6994      	ldr	r4, [r2, #24]
 8001aee:	42a3      	cmp	r3, r4
 8001af0:	db01      	blt.n	8001af6 <__sfputc_r+0x16>
 8001af2:	290a      	cmp	r1, #10
 8001af4:	d102      	bne.n	8001afc <__sfputc_r+0x1c>
 8001af6:	bc10      	pop	{r4}
 8001af8:	f7ff bded 	b.w	80016d6 <__swbuf_r>
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	1c58      	adds	r0, r3, #1
 8001b00:	6010      	str	r0, [r2, #0]
 8001b02:	7019      	strb	r1, [r3, #0]
 8001b04:	4608      	mov	r0, r1
 8001b06:	bc10      	pop	{r4}
 8001b08:	4770      	bx	lr

08001b0a <__sfputs_r>:
 8001b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0c:	4606      	mov	r6, r0
 8001b0e:	460f      	mov	r7, r1
 8001b10:	4614      	mov	r4, r2
 8001b12:	18d5      	adds	r5, r2, r3
 8001b14:	42ac      	cmp	r4, r5
 8001b16:	d101      	bne.n	8001b1c <__sfputs_r+0x12>
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e007      	b.n	8001b2c <__sfputs_r+0x22>
 8001b1c:	463a      	mov	r2, r7
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b24:	f7ff ffdc 	bl	8001ae0 <__sfputc_r>
 8001b28:	1c43      	adds	r3, r0, #1
 8001b2a:	d1f3      	bne.n	8001b14 <__sfputs_r+0xa>
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b30 <_vfiprintf_r>:
 8001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b34:	460d      	mov	r5, r1
 8001b36:	4614      	mov	r4, r2
 8001b38:	4698      	mov	r8, r3
 8001b3a:	4606      	mov	r6, r0
 8001b3c:	b09d      	sub	sp, #116	; 0x74
 8001b3e:	b118      	cbz	r0, 8001b48 <_vfiprintf_r+0x18>
 8001b40:	6a03      	ldr	r3, [r0, #32]
 8001b42:	b90b      	cbnz	r3, 8001b48 <_vfiprintf_r+0x18>
 8001b44:	f7ff fce0 	bl	8001508 <__sinit>
 8001b48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b4a:	07d9      	lsls	r1, r3, #31
 8001b4c:	d405      	bmi.n	8001b5a <_vfiprintf_r+0x2a>
 8001b4e:	89ab      	ldrh	r3, [r5, #12]
 8001b50:	059a      	lsls	r2, r3, #22
 8001b52:	d402      	bmi.n	8001b5a <_vfiprintf_r+0x2a>
 8001b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b56:	f7ff fecc 	bl	80018f2 <__retarget_lock_acquire_recursive>
 8001b5a:	89ab      	ldrh	r3, [r5, #12]
 8001b5c:	071b      	lsls	r3, r3, #28
 8001b5e:	d501      	bpl.n	8001b64 <_vfiprintf_r+0x34>
 8001b60:	692b      	ldr	r3, [r5, #16]
 8001b62:	b99b      	cbnz	r3, 8001b8c <_vfiprintf_r+0x5c>
 8001b64:	4629      	mov	r1, r5
 8001b66:	4630      	mov	r0, r6
 8001b68:	f7ff fdf2 	bl	8001750 <__swsetup_r>
 8001b6c:	b170      	cbz	r0, 8001b8c <_vfiprintf_r+0x5c>
 8001b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b70:	07dc      	lsls	r4, r3, #31
 8001b72:	d504      	bpl.n	8001b7e <_vfiprintf_r+0x4e>
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	b01d      	add	sp, #116	; 0x74
 8001b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b7e:	89ab      	ldrh	r3, [r5, #12]
 8001b80:	0598      	lsls	r0, r3, #22
 8001b82:	d4f7      	bmi.n	8001b74 <_vfiprintf_r+0x44>
 8001b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b86:	f7ff feb5 	bl	80018f4 <__retarget_lock_release_recursive>
 8001b8a:	e7f3      	b.n	8001b74 <_vfiprintf_r+0x44>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8001b90:	2320      	movs	r3, #32
 8001b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b96:	2330      	movs	r3, #48	; 0x30
 8001b98:	f04f 0901 	mov.w	r9, #1
 8001b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ba0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001d50 <_vfiprintf_r+0x220>
 8001ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ba8:	4623      	mov	r3, r4
 8001baa:	469a      	mov	sl, r3
 8001bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bb0:	b10a      	cbz	r2, 8001bb6 <_vfiprintf_r+0x86>
 8001bb2:	2a25      	cmp	r2, #37	; 0x25
 8001bb4:	d1f9      	bne.n	8001baa <_vfiprintf_r+0x7a>
 8001bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8001bba:	d00b      	beq.n	8001bd4 <_vfiprintf_r+0xa4>
 8001bbc:	465b      	mov	r3, fp
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	f7ff ffa1 	bl	8001b0a <__sfputs_r>
 8001bc8:	3001      	adds	r0, #1
 8001bca:	f000 80a9 	beq.w	8001d20 <_vfiprintf_r+0x1f0>
 8001bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bd0:	445a      	add	r2, fp
 8001bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8001bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80a1 	beq.w	8001d20 <_vfiprintf_r+0x1f0>
 8001bde:	2300      	movs	r3, #0
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001be8:	f10a 0a01 	add.w	sl, sl, #1
 8001bec:	9304      	str	r3, [sp, #16]
 8001bee:	9307      	str	r3, [sp, #28]
 8001bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8001bf6:	4654      	mov	r4, sl
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bfe:	4854      	ldr	r0, [pc, #336]	; (8001d50 <_vfiprintf_r+0x220>)
 8001c00:	f000 fb82 	bl	8002308 <memchr>
 8001c04:	9a04      	ldr	r2, [sp, #16]
 8001c06:	b9d8      	cbnz	r0, 8001c40 <_vfiprintf_r+0x110>
 8001c08:	06d1      	lsls	r1, r2, #27
 8001c0a:	bf44      	itt	mi
 8001c0c:	2320      	movmi	r3, #32
 8001c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c12:	0713      	lsls	r3, r2, #28
 8001c14:	bf44      	itt	mi
 8001c16:	232b      	movmi	r3, #43	; 0x2b
 8001c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8001c20:	2b2a      	cmp	r3, #42	; 0x2a
 8001c22:	d015      	beq.n	8001c50 <_vfiprintf_r+0x120>
 8001c24:	4654      	mov	r4, sl
 8001c26:	2000      	movs	r0, #0
 8001c28:	f04f 0c0a 	mov.w	ip, #10
 8001c2c:	9a07      	ldr	r2, [sp, #28]
 8001c2e:	4621      	mov	r1, r4
 8001c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c34:	3b30      	subs	r3, #48	; 0x30
 8001c36:	2b09      	cmp	r3, #9
 8001c38:	d94d      	bls.n	8001cd6 <_vfiprintf_r+0x1a6>
 8001c3a:	b1b0      	cbz	r0, 8001c6a <_vfiprintf_r+0x13a>
 8001c3c:	9207      	str	r2, [sp, #28]
 8001c3e:	e014      	b.n	8001c6a <_vfiprintf_r+0x13a>
 8001c40:	eba0 0308 	sub.w	r3, r0, r8
 8001c44:	fa09 f303 	lsl.w	r3, r9, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	46a2      	mov	sl, r4
 8001c4c:	9304      	str	r3, [sp, #16]
 8001c4e:	e7d2      	b.n	8001bf6 <_vfiprintf_r+0xc6>
 8001c50:	9b03      	ldr	r3, [sp, #12]
 8001c52:	1d19      	adds	r1, r3, #4
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	9103      	str	r1, [sp, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bfbb      	ittet	lt
 8001c5c:	425b      	neglt	r3, r3
 8001c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8001c62:	9307      	strge	r3, [sp, #28]
 8001c64:	9307      	strlt	r3, [sp, #28]
 8001c66:	bfb8      	it	lt
 8001c68:	9204      	strlt	r2, [sp, #16]
 8001c6a:	7823      	ldrb	r3, [r4, #0]
 8001c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8001c6e:	d10c      	bne.n	8001c8a <_vfiprintf_r+0x15a>
 8001c70:	7863      	ldrb	r3, [r4, #1]
 8001c72:	2b2a      	cmp	r3, #42	; 0x2a
 8001c74:	d134      	bne.n	8001ce0 <_vfiprintf_r+0x1b0>
 8001c76:	9b03      	ldr	r3, [sp, #12]
 8001c78:	3402      	adds	r4, #2
 8001c7a:	1d1a      	adds	r2, r3, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	9203      	str	r2, [sp, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bfb8      	it	lt
 8001c84:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c88:	9305      	str	r3, [sp, #20]
 8001c8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001d54 <_vfiprintf_r+0x224>
 8001c8e:	2203      	movs	r2, #3
 8001c90:	4650      	mov	r0, sl
 8001c92:	7821      	ldrb	r1, [r4, #0]
 8001c94:	f000 fb38 	bl	8002308 <memchr>
 8001c98:	b138      	cbz	r0, 8001caa <_vfiprintf_r+0x17a>
 8001c9a:	2240      	movs	r2, #64	; 0x40
 8001c9c:	9b04      	ldr	r3, [sp, #16]
 8001c9e:	eba0 000a 	sub.w	r0, r0, sl
 8001ca2:	4082      	lsls	r2, r0
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	3401      	adds	r4, #1
 8001ca8:	9304      	str	r3, [sp, #16]
 8001caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cae:	2206      	movs	r2, #6
 8001cb0:	4829      	ldr	r0, [pc, #164]	; (8001d58 <_vfiprintf_r+0x228>)
 8001cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cb6:	f000 fb27 	bl	8002308 <memchr>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d03f      	beq.n	8001d3e <_vfiprintf_r+0x20e>
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <_vfiprintf_r+0x22c>)
 8001cc0:	bb1b      	cbnz	r3, 8001d0a <_vfiprintf_r+0x1da>
 8001cc2:	9b03      	ldr	r3, [sp, #12]
 8001cc4:	3307      	adds	r3, #7
 8001cc6:	f023 0307 	bic.w	r3, r3, #7
 8001cca:	3308      	adds	r3, #8
 8001ccc:	9303      	str	r3, [sp, #12]
 8001cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cd0:	443b      	add	r3, r7
 8001cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8001cd4:	e768      	b.n	8001ba8 <_vfiprintf_r+0x78>
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cde:	e7a6      	b.n	8001c2e <_vfiprintf_r+0xfe>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f04f 0c0a 	mov.w	ip, #10
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	3401      	adds	r4, #1
 8001cea:	9305      	str	r3, [sp, #20]
 8001cec:	4620      	mov	r0, r4
 8001cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cf2:	3a30      	subs	r2, #48	; 0x30
 8001cf4:	2a09      	cmp	r2, #9
 8001cf6:	d903      	bls.n	8001d00 <_vfiprintf_r+0x1d0>
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0c6      	beq.n	8001c8a <_vfiprintf_r+0x15a>
 8001cfc:	9105      	str	r1, [sp, #20]
 8001cfe:	e7c4      	b.n	8001c8a <_vfiprintf_r+0x15a>
 8001d00:	4604      	mov	r4, r0
 8001d02:	2301      	movs	r3, #1
 8001d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d08:	e7f0      	b.n	8001cec <_vfiprintf_r+0x1bc>
 8001d0a:	ab03      	add	r3, sp, #12
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	462a      	mov	r2, r5
 8001d10:	4630      	mov	r0, r6
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <_vfiprintf_r+0x230>)
 8001d14:	a904      	add	r1, sp, #16
 8001d16:	f3af 8000 	nop.w
 8001d1a:	4607      	mov	r7, r0
 8001d1c:	1c78      	adds	r0, r7, #1
 8001d1e:	d1d6      	bne.n	8001cce <_vfiprintf_r+0x19e>
 8001d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d22:	07d9      	lsls	r1, r3, #31
 8001d24:	d405      	bmi.n	8001d32 <_vfiprintf_r+0x202>
 8001d26:	89ab      	ldrh	r3, [r5, #12]
 8001d28:	059a      	lsls	r2, r3, #22
 8001d2a:	d402      	bmi.n	8001d32 <_vfiprintf_r+0x202>
 8001d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d2e:	f7ff fde1 	bl	80018f4 <__retarget_lock_release_recursive>
 8001d32:	89ab      	ldrh	r3, [r5, #12]
 8001d34:	065b      	lsls	r3, r3, #25
 8001d36:	f53f af1d 	bmi.w	8001b74 <_vfiprintf_r+0x44>
 8001d3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d3c:	e71c      	b.n	8001b78 <_vfiprintf_r+0x48>
 8001d3e:	ab03      	add	r3, sp, #12
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	462a      	mov	r2, r5
 8001d44:	4630      	mov	r0, r6
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <_vfiprintf_r+0x230>)
 8001d48:	a904      	add	r1, sp, #16
 8001d4a:	f000 f87d 	bl	8001e48 <_printf_i>
 8001d4e:	e7e4      	b.n	8001d1a <_vfiprintf_r+0x1ea>
 8001d50:	080023ee 	.word	0x080023ee
 8001d54:	080023f4 	.word	0x080023f4
 8001d58:	080023f8 	.word	0x080023f8
 8001d5c:	00000000 	.word	0x00000000
 8001d60:	08001b0b 	.word	0x08001b0b

08001d64 <_printf_common>:
 8001d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d68:	4616      	mov	r6, r2
 8001d6a:	4699      	mov	r9, r3
 8001d6c:	688a      	ldr	r2, [r1, #8]
 8001d6e:	690b      	ldr	r3, [r1, #16]
 8001d70:	4607      	mov	r7, r0
 8001d72:	4293      	cmp	r3, r2
 8001d74:	bfb8      	it	lt
 8001d76:	4613      	movlt	r3, r2
 8001d78:	6033      	str	r3, [r6, #0]
 8001d7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d7e:	460c      	mov	r4, r1
 8001d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d84:	b10a      	cbz	r2, 8001d8a <_printf_common+0x26>
 8001d86:	3301      	adds	r3, #1
 8001d88:	6033      	str	r3, [r6, #0]
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	0699      	lsls	r1, r3, #26
 8001d8e:	bf42      	ittt	mi
 8001d90:	6833      	ldrmi	r3, [r6, #0]
 8001d92:	3302      	addmi	r3, #2
 8001d94:	6033      	strmi	r3, [r6, #0]
 8001d96:	6825      	ldr	r5, [r4, #0]
 8001d98:	f015 0506 	ands.w	r5, r5, #6
 8001d9c:	d106      	bne.n	8001dac <_printf_common+0x48>
 8001d9e:	f104 0a19 	add.w	sl, r4, #25
 8001da2:	68e3      	ldr	r3, [r4, #12]
 8001da4:	6832      	ldr	r2, [r6, #0]
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	42ab      	cmp	r3, r5
 8001daa:	dc2b      	bgt.n	8001e04 <_printf_common+0xa0>
 8001dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001db0:	1e13      	subs	r3, r2, #0
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	bf18      	it	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	0692      	lsls	r2, r2, #26
 8001dba:	d430      	bmi.n	8001e1e <_printf_common+0xba>
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	4638      	mov	r0, r7
 8001dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dc4:	47c0      	blx	r8
 8001dc6:	3001      	adds	r0, #1
 8001dc8:	d023      	beq.n	8001e12 <_printf_common+0xae>
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	6922      	ldr	r2, [r4, #16]
 8001dce:	f003 0306 	and.w	r3, r3, #6
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf14      	ite	ne
 8001dd6:	2500      	movne	r5, #0
 8001dd8:	6833      	ldreq	r3, [r6, #0]
 8001dda:	f04f 0600 	mov.w	r6, #0
 8001dde:	bf08      	it	eq
 8001de0:	68e5      	ldreq	r5, [r4, #12]
 8001de2:	f104 041a 	add.w	r4, r4, #26
 8001de6:	bf08      	it	eq
 8001de8:	1aed      	subeq	r5, r5, r3
 8001dea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001dee:	bf08      	it	eq
 8001df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001df4:	4293      	cmp	r3, r2
 8001df6:	bfc4      	itt	gt
 8001df8:	1a9b      	subgt	r3, r3, r2
 8001dfa:	18ed      	addgt	r5, r5, r3
 8001dfc:	42b5      	cmp	r5, r6
 8001dfe:	d11a      	bne.n	8001e36 <_printf_common+0xd2>
 8001e00:	2000      	movs	r0, #0
 8001e02:	e008      	b.n	8001e16 <_printf_common+0xb2>
 8001e04:	2301      	movs	r3, #1
 8001e06:	4652      	mov	r2, sl
 8001e08:	4649      	mov	r1, r9
 8001e0a:	4638      	mov	r0, r7
 8001e0c:	47c0      	blx	r8
 8001e0e:	3001      	adds	r0, #1
 8001e10:	d103      	bne.n	8001e1a <_printf_common+0xb6>
 8001e12:	f04f 30ff 	mov.w	r0, #4294967295
 8001e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e1a:	3501      	adds	r5, #1
 8001e1c:	e7c1      	b.n	8001da2 <_printf_common+0x3e>
 8001e1e:	2030      	movs	r0, #48	; 0x30
 8001e20:	18e1      	adds	r1, r4, r3
 8001e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e2c:	4422      	add	r2, r4
 8001e2e:	3302      	adds	r3, #2
 8001e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e34:	e7c2      	b.n	8001dbc <_printf_common+0x58>
 8001e36:	2301      	movs	r3, #1
 8001e38:	4622      	mov	r2, r4
 8001e3a:	4649      	mov	r1, r9
 8001e3c:	4638      	mov	r0, r7
 8001e3e:	47c0      	blx	r8
 8001e40:	3001      	adds	r0, #1
 8001e42:	d0e6      	beq.n	8001e12 <_printf_common+0xae>
 8001e44:	3601      	adds	r6, #1
 8001e46:	e7d9      	b.n	8001dfc <_printf_common+0x98>

08001e48 <_printf_i>:
 8001e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e4c:	7e0f      	ldrb	r7, [r1, #24]
 8001e4e:	4691      	mov	r9, r2
 8001e50:	2f78      	cmp	r7, #120	; 0x78
 8001e52:	4680      	mov	r8, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	469a      	mov	sl, r3
 8001e58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e5e:	d807      	bhi.n	8001e70 <_printf_i+0x28>
 8001e60:	2f62      	cmp	r7, #98	; 0x62
 8001e62:	d80a      	bhi.n	8001e7a <_printf_i+0x32>
 8001e64:	2f00      	cmp	r7, #0
 8001e66:	f000 80d5 	beq.w	8002014 <_printf_i+0x1cc>
 8001e6a:	2f58      	cmp	r7, #88	; 0x58
 8001e6c:	f000 80c1 	beq.w	8001ff2 <_printf_i+0x1aa>
 8001e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e78:	e03a      	b.n	8001ef0 <_printf_i+0xa8>
 8001e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e7e:	2b15      	cmp	r3, #21
 8001e80:	d8f6      	bhi.n	8001e70 <_printf_i+0x28>
 8001e82:	a101      	add	r1, pc, #4	; (adr r1, 8001e88 <_printf_i+0x40>)
 8001e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e88:	08001ee1 	.word	0x08001ee1
 8001e8c:	08001ef5 	.word	0x08001ef5
 8001e90:	08001e71 	.word	0x08001e71
 8001e94:	08001e71 	.word	0x08001e71
 8001e98:	08001e71 	.word	0x08001e71
 8001e9c:	08001e71 	.word	0x08001e71
 8001ea0:	08001ef5 	.word	0x08001ef5
 8001ea4:	08001e71 	.word	0x08001e71
 8001ea8:	08001e71 	.word	0x08001e71
 8001eac:	08001e71 	.word	0x08001e71
 8001eb0:	08001e71 	.word	0x08001e71
 8001eb4:	08001ffb 	.word	0x08001ffb
 8001eb8:	08001f21 	.word	0x08001f21
 8001ebc:	08001fb5 	.word	0x08001fb5
 8001ec0:	08001e71 	.word	0x08001e71
 8001ec4:	08001e71 	.word	0x08001e71
 8001ec8:	0800201d 	.word	0x0800201d
 8001ecc:	08001e71 	.word	0x08001e71
 8001ed0:	08001f21 	.word	0x08001f21
 8001ed4:	08001e71 	.word	0x08001e71
 8001ed8:	08001e71 	.word	0x08001e71
 8001edc:	08001fbd 	.word	0x08001fbd
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	1d1a      	adds	r2, r3, #4
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	602a      	str	r2, [r5, #0]
 8001ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0a0      	b.n	8002036 <_printf_i+0x1ee>
 8001ef4:	6820      	ldr	r0, [r4, #0]
 8001ef6:	682b      	ldr	r3, [r5, #0]
 8001ef8:	0607      	lsls	r7, r0, #24
 8001efa:	f103 0104 	add.w	r1, r3, #4
 8001efe:	6029      	str	r1, [r5, #0]
 8001f00:	d501      	bpl.n	8001f06 <_printf_i+0xbe>
 8001f02:	681e      	ldr	r6, [r3, #0]
 8001f04:	e003      	b.n	8001f0e <_printf_i+0xc6>
 8001f06:	0646      	lsls	r6, r0, #25
 8001f08:	d5fb      	bpl.n	8001f02 <_printf_i+0xba>
 8001f0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001f0e:	2e00      	cmp	r6, #0
 8001f10:	da03      	bge.n	8001f1a <_printf_i+0xd2>
 8001f12:	232d      	movs	r3, #45	; 0x2d
 8001f14:	4276      	negs	r6, r6
 8001f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	4859      	ldr	r0, [pc, #356]	; (8002084 <_printf_i+0x23c>)
 8001f1e:	e012      	b.n	8001f46 <_printf_i+0xfe>
 8001f20:	682b      	ldr	r3, [r5, #0]
 8001f22:	6820      	ldr	r0, [r4, #0]
 8001f24:	1d19      	adds	r1, r3, #4
 8001f26:	6029      	str	r1, [r5, #0]
 8001f28:	0605      	lsls	r5, r0, #24
 8001f2a:	d501      	bpl.n	8001f30 <_printf_i+0xe8>
 8001f2c:	681e      	ldr	r6, [r3, #0]
 8001f2e:	e002      	b.n	8001f36 <_printf_i+0xee>
 8001f30:	0641      	lsls	r1, r0, #25
 8001f32:	d5fb      	bpl.n	8001f2c <_printf_i+0xe4>
 8001f34:	881e      	ldrh	r6, [r3, #0]
 8001f36:	2f6f      	cmp	r7, #111	; 0x6f
 8001f38:	bf0c      	ite	eq
 8001f3a:	2308      	moveq	r3, #8
 8001f3c:	230a      	movne	r3, #10
 8001f3e:	4851      	ldr	r0, [pc, #324]	; (8002084 <_printf_i+0x23c>)
 8001f40:	2100      	movs	r1, #0
 8001f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f46:	6865      	ldr	r5, [r4, #4]
 8001f48:	2d00      	cmp	r5, #0
 8001f4a:	bfa8      	it	ge
 8001f4c:	6821      	ldrge	r1, [r4, #0]
 8001f4e:	60a5      	str	r5, [r4, #8]
 8001f50:	bfa4      	itt	ge
 8001f52:	f021 0104 	bicge.w	r1, r1, #4
 8001f56:	6021      	strge	r1, [r4, #0]
 8001f58:	b90e      	cbnz	r6, 8001f5e <_printf_i+0x116>
 8001f5a:	2d00      	cmp	r5, #0
 8001f5c:	d04b      	beq.n	8001ff6 <_printf_i+0x1ae>
 8001f5e:	4615      	mov	r5, r2
 8001f60:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f64:	fb03 6711 	mls	r7, r3, r1, r6
 8001f68:	5dc7      	ldrb	r7, [r0, r7]
 8001f6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001f6e:	4637      	mov	r7, r6
 8001f70:	42bb      	cmp	r3, r7
 8001f72:	460e      	mov	r6, r1
 8001f74:	d9f4      	bls.n	8001f60 <_printf_i+0x118>
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d10b      	bne.n	8001f92 <_printf_i+0x14a>
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	07de      	lsls	r6, r3, #31
 8001f7e:	d508      	bpl.n	8001f92 <_printf_i+0x14a>
 8001f80:	6923      	ldr	r3, [r4, #16]
 8001f82:	6861      	ldr	r1, [r4, #4]
 8001f84:	4299      	cmp	r1, r3
 8001f86:	bfde      	ittt	le
 8001f88:	2330      	movle	r3, #48	; 0x30
 8001f8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f92:	1b52      	subs	r2, r2, r5
 8001f94:	6122      	str	r2, [r4, #16]
 8001f96:	464b      	mov	r3, r9
 8001f98:	4621      	mov	r1, r4
 8001f9a:	4640      	mov	r0, r8
 8001f9c:	f8cd a000 	str.w	sl, [sp]
 8001fa0:	aa03      	add	r2, sp, #12
 8001fa2:	f7ff fedf 	bl	8001d64 <_printf_common>
 8001fa6:	3001      	adds	r0, #1
 8001fa8:	d14a      	bne.n	8002040 <_printf_i+0x1f8>
 8001faa:	f04f 30ff 	mov.w	r0, #4294967295
 8001fae:	b004      	add	sp, #16
 8001fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	f043 0320 	orr.w	r3, r3, #32
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	2778      	movs	r7, #120	; 0x78
 8001fbe:	4832      	ldr	r0, [pc, #200]	; (8002088 <_printf_i+0x240>)
 8001fc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	6829      	ldr	r1, [r5, #0]
 8001fc8:	061f      	lsls	r7, r3, #24
 8001fca:	f851 6b04 	ldr.w	r6, [r1], #4
 8001fce:	d402      	bmi.n	8001fd6 <_printf_i+0x18e>
 8001fd0:	065f      	lsls	r7, r3, #25
 8001fd2:	bf48      	it	mi
 8001fd4:	b2b6      	uxthmi	r6, r6
 8001fd6:	07df      	lsls	r7, r3, #31
 8001fd8:	bf48      	it	mi
 8001fda:	f043 0320 	orrmi.w	r3, r3, #32
 8001fde:	6029      	str	r1, [r5, #0]
 8001fe0:	bf48      	it	mi
 8001fe2:	6023      	strmi	r3, [r4, #0]
 8001fe4:	b91e      	cbnz	r6, 8001fee <_printf_i+0x1a6>
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	f023 0320 	bic.w	r3, r3, #32
 8001fec:	6023      	str	r3, [r4, #0]
 8001fee:	2310      	movs	r3, #16
 8001ff0:	e7a6      	b.n	8001f40 <_printf_i+0xf8>
 8001ff2:	4824      	ldr	r0, [pc, #144]	; (8002084 <_printf_i+0x23c>)
 8001ff4:	e7e4      	b.n	8001fc0 <_printf_i+0x178>
 8001ff6:	4615      	mov	r5, r2
 8001ff8:	e7bd      	b.n	8001f76 <_printf_i+0x12e>
 8001ffa:	682b      	ldr	r3, [r5, #0]
 8001ffc:	6826      	ldr	r6, [r4, #0]
 8001ffe:	1d18      	adds	r0, r3, #4
 8002000:	6961      	ldr	r1, [r4, #20]
 8002002:	6028      	str	r0, [r5, #0]
 8002004:	0635      	lsls	r5, r6, #24
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	d501      	bpl.n	800200e <_printf_i+0x1c6>
 800200a:	6019      	str	r1, [r3, #0]
 800200c:	e002      	b.n	8002014 <_printf_i+0x1cc>
 800200e:	0670      	lsls	r0, r6, #25
 8002010:	d5fb      	bpl.n	800200a <_printf_i+0x1c2>
 8002012:	8019      	strh	r1, [r3, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	4615      	mov	r5, r2
 8002018:	6123      	str	r3, [r4, #16]
 800201a:	e7bc      	b.n	8001f96 <_printf_i+0x14e>
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	2100      	movs	r1, #0
 8002020:	1d1a      	adds	r2, r3, #4
 8002022:	602a      	str	r2, [r5, #0]
 8002024:	681d      	ldr	r5, [r3, #0]
 8002026:	6862      	ldr	r2, [r4, #4]
 8002028:	4628      	mov	r0, r5
 800202a:	f000 f96d 	bl	8002308 <memchr>
 800202e:	b108      	cbz	r0, 8002034 <_printf_i+0x1ec>
 8002030:	1b40      	subs	r0, r0, r5
 8002032:	6060      	str	r0, [r4, #4]
 8002034:	6863      	ldr	r3, [r4, #4]
 8002036:	6123      	str	r3, [r4, #16]
 8002038:	2300      	movs	r3, #0
 800203a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800203e:	e7aa      	b.n	8001f96 <_printf_i+0x14e>
 8002040:	462a      	mov	r2, r5
 8002042:	4649      	mov	r1, r9
 8002044:	4640      	mov	r0, r8
 8002046:	6923      	ldr	r3, [r4, #16]
 8002048:	47d0      	blx	sl
 800204a:	3001      	adds	r0, #1
 800204c:	d0ad      	beq.n	8001faa <_printf_i+0x162>
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	079b      	lsls	r3, r3, #30
 8002052:	d413      	bmi.n	800207c <_printf_i+0x234>
 8002054:	68e0      	ldr	r0, [r4, #12]
 8002056:	9b03      	ldr	r3, [sp, #12]
 8002058:	4298      	cmp	r0, r3
 800205a:	bfb8      	it	lt
 800205c:	4618      	movlt	r0, r3
 800205e:	e7a6      	b.n	8001fae <_printf_i+0x166>
 8002060:	2301      	movs	r3, #1
 8002062:	4632      	mov	r2, r6
 8002064:	4649      	mov	r1, r9
 8002066:	4640      	mov	r0, r8
 8002068:	47d0      	blx	sl
 800206a:	3001      	adds	r0, #1
 800206c:	d09d      	beq.n	8001faa <_printf_i+0x162>
 800206e:	3501      	adds	r5, #1
 8002070:	68e3      	ldr	r3, [r4, #12]
 8002072:	9903      	ldr	r1, [sp, #12]
 8002074:	1a5b      	subs	r3, r3, r1
 8002076:	42ab      	cmp	r3, r5
 8002078:	dcf2      	bgt.n	8002060 <_printf_i+0x218>
 800207a:	e7eb      	b.n	8002054 <_printf_i+0x20c>
 800207c:	2500      	movs	r5, #0
 800207e:	f104 0619 	add.w	r6, r4, #25
 8002082:	e7f5      	b.n	8002070 <_printf_i+0x228>
 8002084:	080023ff 	.word	0x080023ff
 8002088:	08002410 	.word	0x08002410

0800208c <__sflush_r>:
 800208c:	898a      	ldrh	r2, [r1, #12]
 800208e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002090:	4605      	mov	r5, r0
 8002092:	0710      	lsls	r0, r2, #28
 8002094:	460c      	mov	r4, r1
 8002096:	d457      	bmi.n	8002148 <__sflush_r+0xbc>
 8002098:	684b      	ldr	r3, [r1, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	dc04      	bgt.n	80020a8 <__sflush_r+0x1c>
 800209e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dc01      	bgt.n	80020a8 <__sflush_r+0x1c>
 80020a4:	2000      	movs	r0, #0
 80020a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020aa:	2e00      	cmp	r6, #0
 80020ac:	d0fa      	beq.n	80020a4 <__sflush_r+0x18>
 80020ae:	2300      	movs	r3, #0
 80020b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80020b4:	682f      	ldr	r7, [r5, #0]
 80020b6:	6a21      	ldr	r1, [r4, #32]
 80020b8:	602b      	str	r3, [r5, #0]
 80020ba:	d032      	beq.n	8002122 <__sflush_r+0x96>
 80020bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020be:	89a3      	ldrh	r3, [r4, #12]
 80020c0:	075a      	lsls	r2, r3, #29
 80020c2:	d505      	bpl.n	80020d0 <__sflush_r+0x44>
 80020c4:	6863      	ldr	r3, [r4, #4]
 80020c6:	1ac0      	subs	r0, r0, r3
 80020c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020ca:	b10b      	cbz	r3, 80020d0 <__sflush_r+0x44>
 80020cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020ce:	1ac0      	subs	r0, r0, r3
 80020d0:	2300      	movs	r3, #0
 80020d2:	4602      	mov	r2, r0
 80020d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020d6:	4628      	mov	r0, r5
 80020d8:	6a21      	ldr	r1, [r4, #32]
 80020da:	47b0      	blx	r6
 80020dc:	1c43      	adds	r3, r0, #1
 80020de:	89a3      	ldrh	r3, [r4, #12]
 80020e0:	d106      	bne.n	80020f0 <__sflush_r+0x64>
 80020e2:	6829      	ldr	r1, [r5, #0]
 80020e4:	291d      	cmp	r1, #29
 80020e6:	d82b      	bhi.n	8002140 <__sflush_r+0xb4>
 80020e8:	4a28      	ldr	r2, [pc, #160]	; (800218c <__sflush_r+0x100>)
 80020ea:	410a      	asrs	r2, r1
 80020ec:	07d6      	lsls	r6, r2, #31
 80020ee:	d427      	bmi.n	8002140 <__sflush_r+0xb4>
 80020f0:	2200      	movs	r2, #0
 80020f2:	6062      	str	r2, [r4, #4]
 80020f4:	6922      	ldr	r2, [r4, #16]
 80020f6:	04d9      	lsls	r1, r3, #19
 80020f8:	6022      	str	r2, [r4, #0]
 80020fa:	d504      	bpl.n	8002106 <__sflush_r+0x7a>
 80020fc:	1c42      	adds	r2, r0, #1
 80020fe:	d101      	bne.n	8002104 <__sflush_r+0x78>
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	b903      	cbnz	r3, 8002106 <__sflush_r+0x7a>
 8002104:	6560      	str	r0, [r4, #84]	; 0x54
 8002106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002108:	602f      	str	r7, [r5, #0]
 800210a:	2900      	cmp	r1, #0
 800210c:	d0ca      	beq.n	80020a4 <__sflush_r+0x18>
 800210e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002112:	4299      	cmp	r1, r3
 8002114:	d002      	beq.n	800211c <__sflush_r+0x90>
 8002116:	4628      	mov	r0, r5
 8002118:	f7ff fbee 	bl	80018f8 <_free_r>
 800211c:	2000      	movs	r0, #0
 800211e:	6360      	str	r0, [r4, #52]	; 0x34
 8002120:	e7c1      	b.n	80020a6 <__sflush_r+0x1a>
 8002122:	2301      	movs	r3, #1
 8002124:	4628      	mov	r0, r5
 8002126:	47b0      	blx	r6
 8002128:	1c41      	adds	r1, r0, #1
 800212a:	d1c8      	bne.n	80020be <__sflush_r+0x32>
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0c5      	beq.n	80020be <__sflush_r+0x32>
 8002132:	2b1d      	cmp	r3, #29
 8002134:	d001      	beq.n	800213a <__sflush_r+0xae>
 8002136:	2b16      	cmp	r3, #22
 8002138:	d101      	bne.n	800213e <__sflush_r+0xb2>
 800213a:	602f      	str	r7, [r5, #0]
 800213c:	e7b2      	b.n	80020a4 <__sflush_r+0x18>
 800213e:	89a3      	ldrh	r3, [r4, #12]
 8002140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002144:	81a3      	strh	r3, [r4, #12]
 8002146:	e7ae      	b.n	80020a6 <__sflush_r+0x1a>
 8002148:	690f      	ldr	r7, [r1, #16]
 800214a:	2f00      	cmp	r7, #0
 800214c:	d0aa      	beq.n	80020a4 <__sflush_r+0x18>
 800214e:	0793      	lsls	r3, r2, #30
 8002150:	bf18      	it	ne
 8002152:	2300      	movne	r3, #0
 8002154:	680e      	ldr	r6, [r1, #0]
 8002156:	bf08      	it	eq
 8002158:	694b      	ldreq	r3, [r1, #20]
 800215a:	1bf6      	subs	r6, r6, r7
 800215c:	600f      	str	r7, [r1, #0]
 800215e:	608b      	str	r3, [r1, #8]
 8002160:	2e00      	cmp	r6, #0
 8002162:	dd9f      	ble.n	80020a4 <__sflush_r+0x18>
 8002164:	4633      	mov	r3, r6
 8002166:	463a      	mov	r2, r7
 8002168:	4628      	mov	r0, r5
 800216a:	6a21      	ldr	r1, [r4, #32]
 800216c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002170:	47e0      	blx	ip
 8002172:	2800      	cmp	r0, #0
 8002174:	dc06      	bgt.n	8002184 <__sflush_r+0xf8>
 8002176:	89a3      	ldrh	r3, [r4, #12]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002180:	81a3      	strh	r3, [r4, #12]
 8002182:	e790      	b.n	80020a6 <__sflush_r+0x1a>
 8002184:	4407      	add	r7, r0
 8002186:	1a36      	subs	r6, r6, r0
 8002188:	e7ea      	b.n	8002160 <__sflush_r+0xd4>
 800218a:	bf00      	nop
 800218c:	dfbffffe 	.word	0xdfbffffe

08002190 <_fflush_r>:
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	690b      	ldr	r3, [r1, #16]
 8002194:	4605      	mov	r5, r0
 8002196:	460c      	mov	r4, r1
 8002198:	b913      	cbnz	r3, 80021a0 <_fflush_r+0x10>
 800219a:	2500      	movs	r5, #0
 800219c:	4628      	mov	r0, r5
 800219e:	bd38      	pop	{r3, r4, r5, pc}
 80021a0:	b118      	cbz	r0, 80021aa <_fflush_r+0x1a>
 80021a2:	6a03      	ldr	r3, [r0, #32]
 80021a4:	b90b      	cbnz	r3, 80021aa <_fflush_r+0x1a>
 80021a6:	f7ff f9af 	bl	8001508 <__sinit>
 80021aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f3      	beq.n	800219a <_fflush_r+0xa>
 80021b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021b4:	07d0      	lsls	r0, r2, #31
 80021b6:	d404      	bmi.n	80021c2 <_fflush_r+0x32>
 80021b8:	0599      	lsls	r1, r3, #22
 80021ba:	d402      	bmi.n	80021c2 <_fflush_r+0x32>
 80021bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021be:	f7ff fb98 	bl	80018f2 <__retarget_lock_acquire_recursive>
 80021c2:	4628      	mov	r0, r5
 80021c4:	4621      	mov	r1, r4
 80021c6:	f7ff ff61 	bl	800208c <__sflush_r>
 80021ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021cc:	4605      	mov	r5, r0
 80021ce:	07da      	lsls	r2, r3, #31
 80021d0:	d4e4      	bmi.n	800219c <_fflush_r+0xc>
 80021d2:	89a3      	ldrh	r3, [r4, #12]
 80021d4:	059b      	lsls	r3, r3, #22
 80021d6:	d4e1      	bmi.n	800219c <_fflush_r+0xc>
 80021d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021da:	f7ff fb8b 	bl	80018f4 <__retarget_lock_release_recursive>
 80021de:	e7dd      	b.n	800219c <_fflush_r+0xc>

080021e0 <__swhatbuf_r>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	460c      	mov	r4, r1
 80021e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e8:	4615      	mov	r5, r2
 80021ea:	2900      	cmp	r1, #0
 80021ec:	461e      	mov	r6, r3
 80021ee:	b096      	sub	sp, #88	; 0x58
 80021f0:	da0c      	bge.n	800220c <__swhatbuf_r+0x2c>
 80021f2:	89a3      	ldrh	r3, [r4, #12]
 80021f4:	2100      	movs	r1, #0
 80021f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80021fa:	bf0c      	ite	eq
 80021fc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002200:	2340      	movne	r3, #64	; 0x40
 8002202:	2000      	movs	r0, #0
 8002204:	6031      	str	r1, [r6, #0]
 8002206:	602b      	str	r3, [r5, #0]
 8002208:	b016      	add	sp, #88	; 0x58
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	466a      	mov	r2, sp
 800220e:	f000 f849 	bl	80022a4 <_fstat_r>
 8002212:	2800      	cmp	r0, #0
 8002214:	dbed      	blt.n	80021f2 <__swhatbuf_r+0x12>
 8002216:	9901      	ldr	r1, [sp, #4]
 8002218:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800221c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002220:	4259      	negs	r1, r3
 8002222:	4159      	adcs	r1, r3
 8002224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002228:	e7eb      	b.n	8002202 <__swhatbuf_r+0x22>

0800222a <__smakebuf_r>:
 800222a:	898b      	ldrh	r3, [r1, #12]
 800222c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800222e:	079d      	lsls	r5, r3, #30
 8002230:	4606      	mov	r6, r0
 8002232:	460c      	mov	r4, r1
 8002234:	d507      	bpl.n	8002246 <__smakebuf_r+0x1c>
 8002236:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800223a:	6023      	str	r3, [r4, #0]
 800223c:	6123      	str	r3, [r4, #16]
 800223e:	2301      	movs	r3, #1
 8002240:	6163      	str	r3, [r4, #20]
 8002242:	b002      	add	sp, #8
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	466a      	mov	r2, sp
 8002248:	ab01      	add	r3, sp, #4
 800224a:	f7ff ffc9 	bl	80021e0 <__swhatbuf_r>
 800224e:	9900      	ldr	r1, [sp, #0]
 8002250:	4605      	mov	r5, r0
 8002252:	4630      	mov	r0, r6
 8002254:	f7ff fbb8 	bl	80019c8 <_malloc_r>
 8002258:	b948      	cbnz	r0, 800226e <__smakebuf_r+0x44>
 800225a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800225e:	059a      	lsls	r2, r3, #22
 8002260:	d4ef      	bmi.n	8002242 <__smakebuf_r+0x18>
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	81a3      	strh	r3, [r4, #12]
 800226c:	e7e3      	b.n	8002236 <__smakebuf_r+0xc>
 800226e:	89a3      	ldrh	r3, [r4, #12]
 8002270:	6020      	str	r0, [r4, #0]
 8002272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002276:	81a3      	strh	r3, [r4, #12]
 8002278:	9b00      	ldr	r3, [sp, #0]
 800227a:	6120      	str	r0, [r4, #16]
 800227c:	6163      	str	r3, [r4, #20]
 800227e:	9b01      	ldr	r3, [sp, #4]
 8002280:	b15b      	cbz	r3, 800229a <__smakebuf_r+0x70>
 8002282:	4630      	mov	r0, r6
 8002284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002288:	f000 f81e 	bl	80022c8 <_isatty_r>
 800228c:	b128      	cbz	r0, 800229a <__smakebuf_r+0x70>
 800228e:	89a3      	ldrh	r3, [r4, #12]
 8002290:	f023 0303 	bic.w	r3, r3, #3
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	81a3      	strh	r3, [r4, #12]
 800229a:	89a3      	ldrh	r3, [r4, #12]
 800229c:	431d      	orrs	r5, r3
 800229e:	81a5      	strh	r5, [r4, #12]
 80022a0:	e7cf      	b.n	8002242 <__smakebuf_r+0x18>
	...

080022a4 <_fstat_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	2300      	movs	r3, #0
 80022a8:	4d06      	ldr	r5, [pc, #24]	; (80022c4 <_fstat_r+0x20>)
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	602b      	str	r3, [r5, #0]
 80022b2:	f7fe f932 	bl	800051a <_fstat>
 80022b6:	1c43      	adds	r3, r0, #1
 80022b8:	d102      	bne.n	80022c0 <_fstat_r+0x1c>
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	b103      	cbz	r3, 80022c0 <_fstat_r+0x1c>
 80022be:	6023      	str	r3, [r4, #0]
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
 80022c2:	bf00      	nop
 80022c4:	200001c8 	.word	0x200001c8

080022c8 <_isatty_r>:
 80022c8:	b538      	push	{r3, r4, r5, lr}
 80022ca:	2300      	movs	r3, #0
 80022cc:	4d05      	ldr	r5, [pc, #20]	; (80022e4 <_isatty_r+0x1c>)
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	602b      	str	r3, [r5, #0]
 80022d4:	f7fe f930 	bl	8000538 <_isatty>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	d102      	bne.n	80022e2 <_isatty_r+0x1a>
 80022dc:	682b      	ldr	r3, [r5, #0]
 80022de:	b103      	cbz	r3, 80022e2 <_isatty_r+0x1a>
 80022e0:	6023      	str	r3, [r4, #0]
 80022e2:	bd38      	pop	{r3, r4, r5, pc}
 80022e4:	200001c8 	.word	0x200001c8

080022e8 <_sbrk_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	2300      	movs	r3, #0
 80022ec:	4d05      	ldr	r5, [pc, #20]	; (8002304 <_sbrk_r+0x1c>)
 80022ee:	4604      	mov	r4, r0
 80022f0:	4608      	mov	r0, r1
 80022f2:	602b      	str	r3, [r5, #0]
 80022f4:	f7fe f936 	bl	8000564 <_sbrk>
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d102      	bne.n	8002302 <_sbrk_r+0x1a>
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	b103      	cbz	r3, 8002302 <_sbrk_r+0x1a>
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	200001c8 	.word	0x200001c8

08002308 <memchr>:
 8002308:	4603      	mov	r3, r0
 800230a:	b510      	push	{r4, lr}
 800230c:	b2c9      	uxtb	r1, r1
 800230e:	4402      	add	r2, r0
 8002310:	4293      	cmp	r3, r2
 8002312:	4618      	mov	r0, r3
 8002314:	d101      	bne.n	800231a <memchr+0x12>
 8002316:	2000      	movs	r0, #0
 8002318:	e003      	b.n	8002322 <memchr+0x1a>
 800231a:	7804      	ldrb	r4, [r0, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	428c      	cmp	r4, r1
 8002320:	d1f6      	bne.n	8002310 <memchr+0x8>
 8002322:	bd10      	pop	{r4, pc}

08002324 <_init>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	bf00      	nop
 8002328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232a:	bc08      	pop	{r3}
 800232c:	469e      	mov	lr, r3
 800232e:	4770      	bx	lr

08002330 <_fini>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	bf00      	nop
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr
