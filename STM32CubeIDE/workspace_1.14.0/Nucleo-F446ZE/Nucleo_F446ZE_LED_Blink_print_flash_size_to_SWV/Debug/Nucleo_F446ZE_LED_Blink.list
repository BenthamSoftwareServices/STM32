
Nucleo_F446ZE_LED_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003198  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003404  08003404  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800340c  0800340c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000074  08003488  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08003488  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086ae  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017d7  00000000  00000000  00028795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00029f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059e  00000000  00000000  0002a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c12  00000000  00000000  0002ac76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009cc9  00000000  00000000  0004c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca262  00000000  00000000  00056551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024c8  00000000  00000000  001207b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00122c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003350 	.word	0x08003350

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08003350 	.word	0x08003350

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fb3e 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f858 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f8ec 	bl	80007e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060c:	f000 f8c0 	bl	8000790 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);	//Turn on Blue LED
 8000610:	2201      	movs	r2, #1
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	481e      	ldr	r0, [pc, #120]	; (8000690 <main+0x94>)
 8000616:	f000 fe43 	bl	80012a0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800061a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061e:	f000 fba1 	bl	8000d64 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0); //Turn on Blue LED
 8000622:	2200      	movs	r2, #0
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	481a      	ldr	r0, [pc, #104]	; (8000690 <main+0x94>)
 8000628:	f000 fe3a 	bl	80012a0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000630:	f000 fb98 	bl	8000d64 <HAL_Delay>
		printf("counter = %d\n", counter++); //Print the value of the variable - counter
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <main+0x98>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	4916      	ldr	r1, [pc, #88]	; (8000694 <main+0x98>)
 800063c:	600a      	str	r2, [r1, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	4815      	ldr	r0, [pc, #84]	; (8000698 <main+0x9c>)
 8000642:	f001 ffb5 	bl	80025b0 <iprintf>

		high = ((*flash_size >> 8) & 0xFF); //Read the value of the Flash memory size register, shift right 8 bits then AND with 0xFF
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <main+0xa0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b29b      	uxth	r3, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <main+0xa4>)
 8000654:	6013      	str	r3, [r2, #0]
											//to clear top 8 bits and preserve the lower 8 bits
		low = ((*flash_size) & 0xFF);//Read the value of the Flash memory size register, then AND with 0xFF
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <main+0xa0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <main+0xa8>)
 8000660:	6013      	str	r3, [r2, #0]
									 //to clear top 8 bits and preserve the lower 8 bits

		printf("Hex flash size = 0x%.2x", high);//Print 0x then the value of HIGH in 2-digit HEX format
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <main+0xa4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	480f      	ldr	r0, [pc, #60]	; (80006a8 <main+0xac>)
 800066a:	f001 ffa1 	bl	80025b0 <iprintf>
		printf("%.2x\n", low);//Print the value of LOW in 2-digit HEX format and then a new line
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <main+0xa8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <main+0xb0>)
 8000676:	f001 ff9b 	bl	80025b0 <iprintf>
		printf("Decimal flash size = %d", *flash_size); //Print "Decimal flash size = " then the the value of the address pointed to
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <main+0xa0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <main+0xb4>)
 8000684:	f001 ff94 	bl	80025b0 <iprintf>
														//by the value of the flash_size variable, that's what *flash_size does
		printf("Kb \n\n"); //Print "Kb" then 2 new lines
 8000688:	480a      	ldr	r0, [pc, #40]	; (80006b4 <main+0xb8>)
 800068a:	f001 fff7 	bl	800267c <puts>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);	//Turn on Blue LED
 800068e:	e7bf      	b.n	8000610 <main+0x14>
 8000690:	40020400 	.word	0x40020400
 8000694:	200000d8 	.word	0x200000d8
 8000698:	08003368 	.word	0x08003368
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000004 	.word	0x20000004
 80006a8:	08003378 	.word	0x08003378
 80006ac:	08003390 	.word	0x08003390
 80006b0:	08003398 	.word	0x08003398
 80006b4:	080033b0 	.word	0x080033b0

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 f8b8 	bl	800283c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <SystemClock_Config+0xd0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a28      	ldr	r2, [pc, #160]	; (8000788 <SystemClock_Config+0xd0>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xd4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemClock_Config+0xd4>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000718:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800071c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800072c:	23a8      	movs	r3, #168	; 0xa8
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000734:	2307      	movs	r3, #7
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4618      	mov	r0, r3
 8000742:	f001 f911 	bl	8001968 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800074c:	f000 f934 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2105      	movs	r1, #5
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fdb0 	bl	80012d4 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800077a:	f000 f91d 	bl	80009b8 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART3_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART3_UART_Init+0x4c>)
 80007c8:	f001 fb6c 	bl	8001ea4 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f8f1 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000090 	.word	0x20000090
 80007e0:	40004800 	.word	0x40004800

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	4b5b      	ldr	r3, [pc, #364]	; (800096c <MX_GPIO_Init+0x188>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a5a      	ldr	r2, [pc, #360]	; (800096c <MX_GPIO_Init+0x188>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b58      	ldr	r3, [pc, #352]	; (800096c <MX_GPIO_Init+0x188>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	4b54      	ldr	r3, [pc, #336]	; (800096c <MX_GPIO_Init+0x188>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a53      	ldr	r2, [pc, #332]	; (800096c <MX_GPIO_Init+0x188>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b51      	ldr	r3, [pc, #324]	; (800096c <MX_GPIO_Init+0x188>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b4d      	ldr	r3, [pc, #308]	; (800096c <MX_GPIO_Init+0x188>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a4c      	ldr	r2, [pc, #304]	; (800096c <MX_GPIO_Init+0x188>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b4a      	ldr	r3, [pc, #296]	; (800096c <MX_GPIO_Init+0x188>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b46      	ldr	r3, [pc, #280]	; (800096c <MX_GPIO_Init+0x188>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a45      	ldr	r2, [pc, #276]	; (800096c <MX_GPIO_Init+0x188>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_GPIO_Init+0x188>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b3f      	ldr	r3, [pc, #252]	; (800096c <MX_GPIO_Init+0x188>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x188>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x188>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0x188>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0x188>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <MX_GPIO_Init+0x188>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a8:	4831      	ldr	r0, [pc, #196]	; (8000970 <MX_GPIO_Init+0x18c>)
 80008aa:	f000 fcf9 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4830      	ldr	r0, [pc, #192]	; (8000974 <MX_GPIO_Init+0x190>)
 80008b4:	f000 fcf4 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	482a      	ldr	r0, [pc, #168]	; (8000978 <MX_GPIO_Init+0x194>)
 80008d0:	f000 fb52 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008d4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4820      	ldr	r0, [pc, #128]	; (8000970 <MX_GPIO_Init+0x18c>)
 80008ee:	f000 fb43 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	481a      	ldr	r0, [pc, #104]	; (8000974 <MX_GPIO_Init+0x190>)
 800090a:	f000 fb35 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4814      	ldr	r0, [pc, #80]	; (8000974 <MX_GPIO_Init+0x190>)
 8000922:	f000 fb29 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000926:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000938:	230a      	movs	r3, #10
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	480e      	ldr	r0, [pc, #56]	; (800097c <MX_GPIO_Init+0x198>)
 8000944:	f000 fb18 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <MX_GPIO_Init+0x198>)
 800095e:	f000 fb0b 	bl	8000f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	; 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800
 8000978:	40020800 	.word	0x40020800
 800097c:	40020000 	.word	0x40020000

08000980 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	e009      	b.n	80009a6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	60ba      	str	r2, [r7, #8]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fe06 	bl	80005ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dbf1      	blt.n	8000992 <_write+0x12>
	}
	return len;
 80009ae:	687b      	ldr	r3, [r7, #4]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_UART_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12c      	bne.n	8000a90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a5c:	f043 0308 	orr.w	r3, r3, #8
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0308 	and.w	r3, r3, #8
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a80:	2307      	movs	r3, #7
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_UART_MspInit+0x8c>)
 8000a8c:	f000 fa74 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40004800 	.word	0x40004800
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020c00 	.word	0x40020c00

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f918 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
  }

  return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_isatty>:

int _isatty(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f001 fe84 	bl	80028d8 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20020000 	.word	0x20020000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	200000dc 	.word	0x200000dc
 8000c04:	20000230 	.word	0x20000230

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c30:	f7ff ffea 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f001 fe43 	bl	80028e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fccd 	bl	80005fc <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c70:	08003414 	.word	0x08003414
  ldr r2, =_sbss
 8000c74:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c78:	20000230 	.word	0x20000230

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f931 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fe86 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f93b 	bl	8000f5e <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f911 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	20000014 	.word	0x20000014
 8000d20:	20000010 	.word	0x20000010

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000014 	.word	0x20000014
 8000d48:	200000e0 	.word	0x200000e0

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200000e0 	.word	0x200000e0

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000014 	.word	0x20000014

08000dac <__NVIC_SetPriorityGrouping>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_SetPriority>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff47 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff5c 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffb0 	bl	8000ecc <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e165      	b.n	8001260 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8154 	bne.w	800125a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d005      	beq.n	8000fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80ae 	beq.w	800125a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <HAL_GPIO_Init+0x300>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a5c      	ldr	r2, [pc, #368]	; (8001278 <HAL_GPIO_Init+0x300>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b5a      	ldr	r3, [pc, #360]	; (8001278 <HAL_GPIO_Init+0x300>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111a:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_GPIO_Init+0x304>)
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4f      	ldr	r2, [pc, #316]	; (8001280 <HAL_GPIO_Init+0x308>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x21a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4e      	ldr	r2, [pc, #312]	; (8001284 <HAL_GPIO_Init+0x30c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x216>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4d      	ldr	r2, [pc, #308]	; (8001288 <HAL_GPIO_Init+0x310>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x212>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4c      	ldr	r2, [pc, #304]	; (800128c <HAL_GPIO_Init+0x314>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x20e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4b      	ldr	r2, [pc, #300]	; (8001290 <HAL_GPIO_Init+0x318>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x20a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <HAL_GPIO_Init+0x31c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x206>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a49      	ldr	r2, [pc, #292]	; (8001298 <HAL_GPIO_Init+0x320>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x202>
 8001176:	2306      	movs	r3, #6
 8001178:	e00c      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 800117a:	2307      	movs	r3, #7
 800117c:	e00a      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 800117e:	2305      	movs	r3, #5
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 8001182:	2304      	movs	r3, #4
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x21c>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	; (800127c <HAL_GPIO_Init+0x304>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b3a      	ldr	r3, [pc, #232]	; (800129c <HAL_GPIO_Init+0x324>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d6:	4a31      	ldr	r2, [pc, #196]	; (800129c <HAL_GPIO_Init+0x324>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <HAL_GPIO_Init+0x324>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001200:	4a26      	ldr	r2, [pc, #152]	; (800129c <HAL_GPIO_Init+0x324>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_GPIO_Init+0x324>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <HAL_GPIO_Init+0x324>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_GPIO_Init+0x324>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001254:	4a11      	ldr	r2, [pc, #68]	; (800129c <HAL_GPIO_Init+0x324>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f ae96 	bls.w	8000f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40021400 	.word	0x40021400
 8001298:	40021800 	.word	0x40021800
 800129c:	40013c00 	.word	0x40013c00

080012a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
 80012ac:	4613      	mov	r3, r2
 80012ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b0:	787b      	ldrb	r3, [r7, #1]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012bc:	e003      	b.n	80012c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	041a      	lsls	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e0cc      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012e8:	4b68      	ldr	r3, [pc, #416]	; (800148c <HAL_RCC_ClockConfig+0x1b8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d90c      	bls.n	8001310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b65      	ldr	r3, [pc, #404]	; (800148c <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0b8      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001328:	4b59      	ldr	r3, [pc, #356]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001340:	4b53      	ldr	r3, [pc, #332]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800134a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134c:	4b50      	ldr	r3, [pc, #320]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	494d      	ldr	r1, [pc, #308]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	4313      	orrs	r3, r2
 800135c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d044      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d119      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e07f      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d003      	beq.n	8001392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800138e:	2b03      	cmp	r3, #3
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001392:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d109      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e06f      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e067      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b2:	4b37      	ldr	r3, [pc, #220]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f023 0203 	bic.w	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4934      	ldr	r1, [pc, #208]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c4:	f7ff fcc2 	bl	8000d4c <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013cc:	f7ff fcbe 	bl	8000d4c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e04f      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 020c 	and.w	r2, r3, #12
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d1eb      	bne.n	80013cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_RCC_ClockConfig+0x1b8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d20c      	bcs.n	800141c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <HAL_RCC_ClockConfig+0x1b8>)
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_RCC_ClockConfig+0x1b8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e032      	b.n	8001482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4916      	ldr	r1, [pc, #88]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	490e      	ldr	r1, [pc, #56]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800145a:	f000 f855 	bl	8001508 <HAL_RCC_GetSysClockFreq>
 800145e:	4602      	mov	r2, r0
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	490a      	ldr	r1, [pc, #40]	; (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	5ccb      	ldrb	r3, [r1, r3]
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fc22 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023c00 	.word	0x40023c00
 8001490:	40023800 	.word	0x40023800
 8001494:	080033b8 	.word	0x080033b8
 8001498:	2000000c 	.word	0x2000000c
 800149c:	20000010 	.word	0x20000010

080014a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	2000000c 	.word	0x2000000c

080014b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014bc:	f7ff fff0 	bl	80014a0 <HAL_RCC_GetHCLKFreq>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	0a9b      	lsrs	r3, r3, #10
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	4903      	ldr	r1, [pc, #12]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ce:	5ccb      	ldrb	r3, [r1, r3]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	080033c8 	.word	0x080033c8

080014e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014e4:	f7ff ffdc 	bl	80014a0 <HAL_RCC_GetHCLKFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	0b5b      	lsrs	r3, r3, #13
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	4903      	ldr	r1, [pc, #12]	; (8001504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	080033c8 	.word	0x080033c8

08001508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800150c:	b0ae      	sub	sp, #184	; 0xb8
 800150e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800152e:	4bcb      	ldr	r3, [pc, #812]	; (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b0c      	cmp	r3, #12
 8001538:	f200 8206 	bhi.w	8001948 <HAL_RCC_GetSysClockFreq+0x440>
 800153c:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <HAL_RCC_GetSysClockFreq+0x3c>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001579 	.word	0x08001579
 8001548:	08001949 	.word	0x08001949
 800154c:	08001949 	.word	0x08001949
 8001550:	08001949 	.word	0x08001949
 8001554:	08001581 	.word	0x08001581
 8001558:	08001949 	.word	0x08001949
 800155c:	08001949 	.word	0x08001949
 8001560:	08001949 	.word	0x08001949
 8001564:	08001589 	.word	0x08001589
 8001568:	08001949 	.word	0x08001949
 800156c:	08001949 	.word	0x08001949
 8001570:	08001949 	.word	0x08001949
 8001574:	08001779 	.word	0x08001779
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4bb9      	ldr	r3, [pc, #740]	; (8001860 <HAL_RCC_GetSysClockFreq+0x358>)
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800157e:	e1e7      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001580:	4bb8      	ldr	r3, [pc, #736]	; (8001864 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001586:	e1e3      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001588:	4bb4      	ldr	r3, [pc, #720]	; (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001594:	4bb1      	ldr	r3, [pc, #708]	; (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d071      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4bae      	ldr	r3, [pc, #696]	; (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80015b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80015c6:	4622      	mov	r2, r4
 80015c8:	462b      	mov	r3, r5
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	0159      	lsls	r1, r3, #5
 80015d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d8:	0150      	lsls	r0, r2, #5
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4621      	mov	r1, r4
 80015e0:	1a51      	subs	r1, r2, r1
 80015e2:	6439      	str	r1, [r7, #64]	; 0x40
 80015e4:	4629      	mov	r1, r5
 80015e6:	eb63 0301 	sbc.w	r3, r3, r1
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80015f8:	4649      	mov	r1, r9
 80015fa:	018b      	lsls	r3, r1, #6
 80015fc:	4641      	mov	r1, r8
 80015fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001602:	4641      	mov	r1, r8
 8001604:	018a      	lsls	r2, r1, #6
 8001606:	4641      	mov	r1, r8
 8001608:	1a51      	subs	r1, r2, r1
 800160a:	63b9      	str	r1, [r7, #56]	; 0x38
 800160c:	4649      	mov	r1, r9
 800160e:	eb63 0301 	sbc.w	r3, r3, r1
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001620:	4649      	mov	r1, r9
 8001622:	00cb      	lsls	r3, r1, #3
 8001624:	4641      	mov	r1, r8
 8001626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800162a:	4641      	mov	r1, r8
 800162c:	00ca      	lsls	r2, r1, #3
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	4603      	mov	r3, r0
 8001634:	4622      	mov	r2, r4
 8001636:	189b      	adds	r3, r3, r2
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
 800163a:	462b      	mov	r3, r5
 800163c:	460a      	mov	r2, r1
 800163e:	eb42 0303 	adc.w	r3, r2, r3
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001650:	4629      	mov	r1, r5
 8001652:	024b      	lsls	r3, r1, #9
 8001654:	4621      	mov	r1, r4
 8001656:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800165a:	4621      	mov	r1, r4
 800165c:	024a      	lsls	r2, r1, #9
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001666:	2200      	movs	r2, #0
 8001668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800166c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001670:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001674:	f7fe fe1c 	bl	80002b0 <__aeabi_uldivmod>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4613      	mov	r3, r2
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001682:	e067      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001684:	4b75      	ldr	r3, [pc, #468]	; (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	099b      	lsrs	r3, r3, #6
 800168a:	2200      	movs	r2, #0
 800168c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001690:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169c:	67bb      	str	r3, [r7, #120]	; 0x78
 800169e:	2300      	movs	r3, #0
 80016a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80016a6:	4622      	mov	r2, r4
 80016a8:	462b      	mov	r3, r5
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	f04f 0100 	mov.w	r1, #0
 80016b2:	0159      	lsls	r1, r3, #5
 80016b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b8:	0150      	lsls	r0, r2, #5
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4621      	mov	r1, r4
 80016c0:	1a51      	subs	r1, r2, r1
 80016c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80016c4:	4629      	mov	r1, r5
 80016c6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80016d8:	4649      	mov	r1, r9
 80016da:	018b      	lsls	r3, r1, #6
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e2:	4641      	mov	r1, r8
 80016e4:	018a      	lsls	r2, r1, #6
 80016e6:	4641      	mov	r1, r8
 80016e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80016ec:	4649      	mov	r1, r9
 80016ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001706:	4692      	mov	sl, r2
 8001708:	469b      	mov	fp, r3
 800170a:	4623      	mov	r3, r4
 800170c:	eb1a 0303 	adds.w	r3, sl, r3
 8001710:	623b      	str	r3, [r7, #32]
 8001712:	462b      	mov	r3, r5
 8001714:	eb4b 0303 	adc.w	r3, fp, r3
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001726:	4629      	mov	r1, r5
 8001728:	028b      	lsls	r3, r1, #10
 800172a:	4621      	mov	r1, r4
 800172c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001730:	4621      	mov	r1, r4
 8001732:	028a      	lsls	r2, r1, #10
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800173c:	2200      	movs	r2, #0
 800173e:	673b      	str	r3, [r7, #112]	; 0x70
 8001740:	677a      	str	r2, [r7, #116]	; 0x74
 8001742:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001746:	f7fe fdb3 	bl	80002b0 <__aeabi_uldivmod>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4613      	mov	r3, r2
 8001750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	3301      	adds	r3, #1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800176a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001776:	e0eb      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001784:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d06b      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001790:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_RCC_GetSysClockFreq+0x354>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	2200      	movs	r2, #0
 8001798:	66bb      	str	r3, [r7, #104]	; 0x68
 800179a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800179c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800179e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a2:	663b      	str	r3, [r7, #96]	; 0x60
 80017a4:	2300      	movs	r3, #0
 80017a6:	667b      	str	r3, [r7, #100]	; 0x64
 80017a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80017ac:	4622      	mov	r2, r4
 80017ae:	462b      	mov	r3, r5
 80017b0:	f04f 0000 	mov.w	r0, #0
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	0159      	lsls	r1, r3, #5
 80017ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017be:	0150      	lsls	r0, r2, #5
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4621      	mov	r1, r4
 80017c6:	1a51      	subs	r1, r2, r1
 80017c8:	61b9      	str	r1, [r7, #24]
 80017ca:	4629      	mov	r1, r5
 80017cc:	eb63 0301 	sbc.w	r3, r3, r1
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017de:	4659      	mov	r1, fp
 80017e0:	018b      	lsls	r3, r1, #6
 80017e2:	4651      	mov	r1, sl
 80017e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e8:	4651      	mov	r1, sl
 80017ea:	018a      	lsls	r2, r1, #6
 80017ec:	4651      	mov	r1, sl
 80017ee:	ebb2 0801 	subs.w	r8, r2, r1
 80017f2:	4659      	mov	r1, fp
 80017f4:	eb63 0901 	sbc.w	r9, r3, r1
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800180c:	4690      	mov	r8, r2
 800180e:	4699      	mov	r9, r3
 8001810:	4623      	mov	r3, r4
 8001812:	eb18 0303 	adds.w	r3, r8, r3
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	462b      	mov	r3, r5
 800181a:	eb49 0303 	adc.w	r3, r9, r3
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800182c:	4629      	mov	r1, r5
 800182e:	024b      	lsls	r3, r1, #9
 8001830:	4621      	mov	r1, r4
 8001832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001836:	4621      	mov	r1, r4
 8001838:	024a      	lsls	r2, r1, #9
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001842:	2200      	movs	r2, #0
 8001844:	65bb      	str	r3, [r7, #88]	; 0x58
 8001846:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800184c:	f7fe fd30 	bl	80002b0 <__aeabi_uldivmod>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4613      	mov	r3, r2
 8001856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800185a:	e065      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x420>
 800185c:	40023800 	.word	0x40023800
 8001860:	00f42400 	.word	0x00f42400
 8001864:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001868:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <HAL_RCC_GetSysClockFreq+0x458>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	2200      	movs	r2, #0
 8001870:	4618      	mov	r0, r3
 8001872:	4611      	mov	r1, r2
 8001874:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001878:	653b      	str	r3, [r7, #80]	; 0x50
 800187a:	2300      	movs	r3, #0
 800187c:	657b      	str	r3, [r7, #84]	; 0x54
 800187e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001882:	4642      	mov	r2, r8
 8001884:	464b      	mov	r3, r9
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0159      	lsls	r1, r3, #5
 8001890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001894:	0150      	lsls	r0, r2, #5
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4641      	mov	r1, r8
 800189c:	1a51      	subs	r1, r2, r1
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	4649      	mov	r1, r9
 80018a2:	eb63 0301 	sbc.w	r3, r3, r1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018b4:	4659      	mov	r1, fp
 80018b6:	018b      	lsls	r3, r1, #6
 80018b8:	4651      	mov	r1, sl
 80018ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018be:	4651      	mov	r1, sl
 80018c0:	018a      	lsls	r2, r1, #6
 80018c2:	4651      	mov	r1, sl
 80018c4:	1a54      	subs	r4, r2, r1
 80018c6:	4659      	mov	r1, fp
 80018c8:	eb63 0501 	sbc.w	r5, r3, r1
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	00eb      	lsls	r3, r5, #3
 80018d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018da:	00e2      	lsls	r2, r4, #3
 80018dc:	4614      	mov	r4, r2
 80018de:	461d      	mov	r5, r3
 80018e0:	4643      	mov	r3, r8
 80018e2:	18e3      	adds	r3, r4, r3
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	464b      	mov	r3, r9
 80018e8:	eb45 0303 	adc.w	r3, r5, r3
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fa:	4629      	mov	r1, r5
 80018fc:	028b      	lsls	r3, r1, #10
 80018fe:	4621      	mov	r1, r4
 8001900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001904:	4621      	mov	r1, r4
 8001906:	028a      	lsls	r2, r1, #10
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001910:	2200      	movs	r2, #0
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
 8001914:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001916:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800191a:	f7fe fcc9 	bl	80002b0 <__aeabi_uldivmod>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4613      	mov	r3, r2
 8001924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_RCC_GetSysClockFreq+0x458>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0f1b      	lsrs	r3, r3, #28
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800193a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001946:	e003      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_GetSysClockFreq+0x45c>)
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800194e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001954:	4618      	mov	r0, r3
 8001956:	37b8      	adds	r7, #184	; 0xb8
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400

08001968 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e28d      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8083 	beq.w	8001a8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001988:	4b94      	ldr	r3, [pc, #592]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b04      	cmp	r3, #4
 8001992:	d019      	beq.n	80019c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001994:	4b91      	ldr	r3, [pc, #580]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800199c:	2b08      	cmp	r3, #8
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019a0:	4b8e      	ldr	r3, [pc, #568]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ac:	d00c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ae:	4b8b      	ldr	r3, [pc, #556]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d112      	bne.n	80019e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ba:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c6:	d10b      	bne.n	80019e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	4b84      	ldr	r3, [pc, #528]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d05b      	beq.n	8001a8c <HAL_RCC_OscConfig+0x124>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d157      	bne.n	8001a8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e25a      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d106      	bne.n	80019f8 <HAL_RCC_OscConfig+0x90>
 80019ea:	4b7c      	ldr	r3, [pc, #496]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7b      	ldr	r2, [pc, #492]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0xcc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0xb4>
 8001a02:	4b76      	ldr	r3, [pc, #472]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a75      	ldr	r2, [pc, #468]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b73      	ldr	r3, [pc, #460]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a72      	ldr	r2, [pc, #456]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xcc>
 8001a1c:	4b6f      	ldr	r3, [pc, #444]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6e      	ldr	r2, [pc, #440]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b6c      	ldr	r3, [pc, #432]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6b      	ldr	r2, [pc, #428]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f986 	bl	8000d4c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff f982 	bl	8000d4c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e21f      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xdc>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f972 	bl	8000d4c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f96e 	bl	8000d4c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e20b      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x104>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d06f      	beq.n	8001b7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d017      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d105      	bne.n	8001abe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d11c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aca:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_RCC_OscConfig+0x186>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e1d3      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4937      	ldr	r1, [pc, #220]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	e03a      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0c:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <HAL_RCC_OscConfig+0x278>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff f91b 	bl	8000d4c <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f917 	bl	8000d4c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1b4      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4925      	ldr	r1, [pc, #148]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e015      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_RCC_OscConfig+0x278>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f8fa 	bl	8000d4c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f8f6 	bl	8000d4c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e193      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d036      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d016      	beq.n	8001bbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff f8da 	bl	8000d4c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f8d6 	bl	8000d4c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e173      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x234>
 8001bba:	e01b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f8c3 	bl	8000d4c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	e00e      	b.n	8001be8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bca:	f7ff f8bf 	bl	8000d4c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d907      	bls.n	8001be8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e15c      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	42470000 	.word	0x42470000
 8001be4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ea      	bne.n	8001bca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8097 	beq.w	8001d30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c06:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10f      	bne.n	8001c32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a7e      	ldr	r2, [pc, #504]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c32:	4b79      	ldr	r3, [pc, #484]	; (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3e:	4b76      	ldr	r3, [pc, #472]	; (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a75      	ldr	r2, [pc, #468]	; (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff f87f 	bl	8000d4c <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff f87b 	bl	8000d4c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e118      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b6c      	ldr	r3, [pc, #432]	; (8001e18 <HAL_RCC_OscConfig+0x4b0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x31e>
 8001c78:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a65      	ldr	r2, [pc, #404]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
 8001c84:	e01c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x358>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x340>
 8001c8e:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a60      	ldr	r2, [pc, #384]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9a:	4b5e      	ldr	r3, [pc, #376]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	4a5d      	ldr	r2, [pc, #372]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x358>
 8001ca8:	4b5a      	ldr	r3, [pc, #360]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a59      	ldr	r2, [pc, #356]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb4:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	4a56      	ldr	r2, [pc, #344]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	f023 0304 	bic.w	r3, r3, #4
 8001cbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d015      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f840 	bl	8000d4c <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f83c 	bl	8000d4c <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0d7      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce6:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0ee      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x368>
 8001cf2:	e014      	b.n	8001d1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f82a 	bl	8000d4c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f826 	bl	8000d4c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0c1      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ee      	bne.n	8001cfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80ad 	beq.w	8001e94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d060      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d145      	bne.n	8001dda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_RCC_OscConfig+0x4b4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe fffa 	bl	8000d4c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe fff6 	bl	8000d4c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e093      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	019b      	lsls	r3, r3, #6
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	085b      	lsrs	r3, r3, #1
 8001d92:	3b01      	subs	r3, #1
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	071b      	lsls	r3, r3, #28
 8001da6:	491b      	ldr	r1, [pc, #108]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_RCC_OscConfig+0x4b4>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7fe ffcb 	bl	8000d4c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dba:	f7fe ffc7 	bl	8000d4c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e064      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x452>
 8001dd8:	e05c      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_RCC_OscConfig+0x4b4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7fe ffb4 	bl	8000d4c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de8:	f7fe ffb0 	bl	8000d4c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e04d      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x480>
 8001e06:	e045      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e040      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_RCC_OscConfig+0x538>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d030      	beq.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d129      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d122      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d119      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10f      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e042      	b.n	8001f3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fda2 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2224      	movs	r2, #36	; 0x24
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f82b 	bl	8001f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f48:	b0c0      	sub	sp, #256	; 0x100
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f60:	68d9      	ldr	r1, [r3, #12]
 8001f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	ea40 0301 	orr.w	r3, r0, r1
 8001f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f9c:	f021 010c 	bic.w	r1, r1, #12
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001faa:	430b      	orrs	r3, r1
 8001fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fbe:	6999      	ldr	r1, [r3, #24]
 8001fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	ea40 0301 	orr.w	r3, r0, r1
 8001fca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <UART_SetConfig+0x2cc>)
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d005      	beq.n	8001fe4 <UART_SetConfig+0xa0>
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b8d      	ldr	r3, [pc, #564]	; (8002214 <UART_SetConfig+0x2d0>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d104      	bne.n	8001fee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fe4:	f7ff fa7c 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
 8001fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001fec:	e003      	b.n	8001ff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fee:	f7ff fa63 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
 8001ff2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002000:	f040 810c 	bne.w	800221c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002008:	2200      	movs	r2, #0
 800200a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800200e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002016:	4622      	mov	r2, r4
 8002018:	462b      	mov	r3, r5
 800201a:	1891      	adds	r1, r2, r2
 800201c:	65b9      	str	r1, [r7, #88]	; 0x58
 800201e:	415b      	adcs	r3, r3
 8002020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002026:	4621      	mov	r1, r4
 8002028:	eb12 0801 	adds.w	r8, r2, r1
 800202c:	4629      	mov	r1, r5
 800202e:	eb43 0901 	adc.w	r9, r3, r1
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800203e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002046:	4690      	mov	r8, r2
 8002048:	4699      	mov	r9, r3
 800204a:	4623      	mov	r3, r4
 800204c:	eb18 0303 	adds.w	r3, r8, r3
 8002050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002054:	462b      	mov	r3, r5
 8002056:	eb49 0303 	adc.w	r3, r9, r3
 800205a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800205e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800206a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800206e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002072:	460b      	mov	r3, r1
 8002074:	18db      	adds	r3, r3, r3
 8002076:	653b      	str	r3, [r7, #80]	; 0x50
 8002078:	4613      	mov	r3, r2
 800207a:	eb42 0303 	adc.w	r3, r2, r3
 800207e:	657b      	str	r3, [r7, #84]	; 0x54
 8002080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002088:	f7fe f912 	bl	80002b0 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <UART_SetConfig+0x2d4>)
 8002092:	fba3 2302 	umull	r2, r3, r3, r2
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	011c      	lsls	r4, r3, #4
 800209a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800209e:	2200      	movs	r2, #0
 80020a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020ac:	4642      	mov	r2, r8
 80020ae:	464b      	mov	r3, r9
 80020b0:	1891      	adds	r1, r2, r2
 80020b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80020b4:	415b      	adcs	r3, r3
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020bc:	4641      	mov	r1, r8
 80020be:	eb12 0a01 	adds.w	sl, r2, r1
 80020c2:	4649      	mov	r1, r9
 80020c4:	eb43 0b01 	adc.w	fp, r3, r1
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020dc:	4692      	mov	sl, r2
 80020de:	469b      	mov	fp, r3
 80020e0:	4643      	mov	r3, r8
 80020e2:	eb1a 0303 	adds.w	r3, sl, r3
 80020e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020ea:	464b      	mov	r3, r9
 80020ec:	eb4b 0303 	adc.w	r3, fp, r3
 80020f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002100:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002108:	460b      	mov	r3, r1
 800210a:	18db      	adds	r3, r3, r3
 800210c:	643b      	str	r3, [r7, #64]	; 0x40
 800210e:	4613      	mov	r3, r2
 8002110:	eb42 0303 	adc.w	r3, r2, r3
 8002114:	647b      	str	r3, [r7, #68]	; 0x44
 8002116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800211a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800211e:	f7fe f8c7 	bl	80002b0 <__aeabi_uldivmod>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4611      	mov	r1, r2
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <UART_SetConfig+0x2d4>)
 800212a:	fba3 2301 	umull	r2, r3, r3, r1
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2264      	movs	r2, #100	; 0x64
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	1acb      	subs	r3, r1, r3
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800213e:	4b36      	ldr	r3, [pc, #216]	; (8002218 <UART_SetConfig+0x2d4>)
 8002140:	fba3 2302 	umull	r2, r3, r3, r2
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800214c:	441c      	add	r4, r3
 800214e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002152:	2200      	movs	r2, #0
 8002154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002158:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800215c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002160:	4642      	mov	r2, r8
 8002162:	464b      	mov	r3, r9
 8002164:	1891      	adds	r1, r2, r2
 8002166:	63b9      	str	r1, [r7, #56]	; 0x38
 8002168:	415b      	adcs	r3, r3
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002170:	4641      	mov	r1, r8
 8002172:	1851      	adds	r1, r2, r1
 8002174:	6339      	str	r1, [r7, #48]	; 0x30
 8002176:	4649      	mov	r1, r9
 8002178:	414b      	adcs	r3, r1
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002188:	4659      	mov	r1, fp
 800218a:	00cb      	lsls	r3, r1, #3
 800218c:	4651      	mov	r1, sl
 800218e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002192:	4651      	mov	r1, sl
 8002194:	00ca      	lsls	r2, r1, #3
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	4603      	mov	r3, r0
 800219c:	4642      	mov	r2, r8
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021a4:	464b      	mov	r3, r9
 80021a6:	460a      	mov	r2, r1
 80021a8:	eb42 0303 	adc.w	r3, r2, r3
 80021ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021c4:	460b      	mov	r3, r1
 80021c6:	18db      	adds	r3, r3, r3
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ca:	4613      	mov	r3, r2
 80021cc:	eb42 0303 	adc.w	r3, r2, r3
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021da:	f7fe f869 	bl	80002b0 <__aeabi_uldivmod>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <UART_SetConfig+0x2d4>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2164      	movs	r1, #100	; 0x64
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	3332      	adds	r3, #50	; 0x32
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <UART_SetConfig+0x2d4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 0207 	and.w	r2, r3, #7
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4422      	add	r2, r4
 800220a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800220c:	e106      	b.n	800241c <UART_SetConfig+0x4d8>
 800220e:	bf00      	nop
 8002210:	40011000 	.word	0x40011000
 8002214:	40011400 	.word	0x40011400
 8002218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800221c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002220:	2200      	movs	r2, #0
 8002222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002226:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800222a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800222e:	4642      	mov	r2, r8
 8002230:	464b      	mov	r3, r9
 8002232:	1891      	adds	r1, r2, r2
 8002234:	6239      	str	r1, [r7, #32]
 8002236:	415b      	adcs	r3, r3
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800223e:	4641      	mov	r1, r8
 8002240:	1854      	adds	r4, r2, r1
 8002242:	4649      	mov	r1, r9
 8002244:	eb43 0501 	adc.w	r5, r3, r1
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	00eb      	lsls	r3, r5, #3
 8002252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002256:	00e2      	lsls	r2, r4, #3
 8002258:	4614      	mov	r4, r2
 800225a:	461d      	mov	r5, r3
 800225c:	4643      	mov	r3, r8
 800225e:	18e3      	adds	r3, r4, r3
 8002260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002264:	464b      	mov	r3, r9
 8002266:	eb45 0303 	adc.w	r3, r5, r3
 800226a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800226e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800227a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800228a:	4629      	mov	r1, r5
 800228c:	008b      	lsls	r3, r1, #2
 800228e:	4621      	mov	r1, r4
 8002290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002294:	4621      	mov	r1, r4
 8002296:	008a      	lsls	r2, r1, #2
 8002298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800229c:	f7fe f808 	bl	80002b0 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4b60      	ldr	r3, [pc, #384]	; (8002428 <UART_SetConfig+0x4e4>)
 80022a6:	fba3 2302 	umull	r2, r3, r3, r2
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	011c      	lsls	r4, r3, #4
 80022ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022c0:	4642      	mov	r2, r8
 80022c2:	464b      	mov	r3, r9
 80022c4:	1891      	adds	r1, r2, r2
 80022c6:	61b9      	str	r1, [r7, #24]
 80022c8:	415b      	adcs	r3, r3
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022d0:	4641      	mov	r1, r8
 80022d2:	1851      	adds	r1, r2, r1
 80022d4:	6139      	str	r1, [r7, #16]
 80022d6:	4649      	mov	r1, r9
 80022d8:	414b      	adcs	r3, r1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e8:	4659      	mov	r1, fp
 80022ea:	00cb      	lsls	r3, r1, #3
 80022ec:	4651      	mov	r1, sl
 80022ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f2:	4651      	mov	r1, sl
 80022f4:	00ca      	lsls	r2, r1, #3
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	4642      	mov	r2, r8
 80022fe:	189b      	adds	r3, r3, r2
 8002300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002304:	464b      	mov	r3, r9
 8002306:	460a      	mov	r2, r1
 8002308:	eb42 0303 	adc.w	r3, r2, r3
 800230c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	67bb      	str	r3, [r7, #120]	; 0x78
 800231a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002328:	4649      	mov	r1, r9
 800232a:	008b      	lsls	r3, r1, #2
 800232c:	4641      	mov	r1, r8
 800232e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002332:	4641      	mov	r1, r8
 8002334:	008a      	lsls	r2, r1, #2
 8002336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800233a:	f7fd ffb9 	bl	80002b0 <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4611      	mov	r1, r2
 8002344:	4b38      	ldr	r3, [pc, #224]	; (8002428 <UART_SetConfig+0x4e4>)
 8002346:	fba3 2301 	umull	r2, r3, r3, r1
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2264      	movs	r2, #100	; 0x64
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	1acb      	subs	r3, r1, r3
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	3332      	adds	r3, #50	; 0x32
 8002358:	4a33      	ldr	r2, [pc, #204]	; (8002428 <UART_SetConfig+0x4e4>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002364:	441c      	add	r4, r3
 8002366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800236a:	2200      	movs	r2, #0
 800236c:	673b      	str	r3, [r7, #112]	; 0x70
 800236e:	677a      	str	r2, [r7, #116]	; 0x74
 8002370:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002374:	4642      	mov	r2, r8
 8002376:	464b      	mov	r3, r9
 8002378:	1891      	adds	r1, r2, r2
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	415b      	adcs	r3, r3
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002384:	4641      	mov	r1, r8
 8002386:	1851      	adds	r1, r2, r1
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	4649      	mov	r1, r9
 800238c:	414b      	adcs	r3, r1
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800239c:	4659      	mov	r1, fp
 800239e:	00cb      	lsls	r3, r1, #3
 80023a0:	4651      	mov	r1, sl
 80023a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a6:	4651      	mov	r1, sl
 80023a8:	00ca      	lsls	r2, r1, #3
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	4642      	mov	r2, r8
 80023b2:	189b      	adds	r3, r3, r2
 80023b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80023b6:	464b      	mov	r3, r9
 80023b8:	460a      	mov	r2, r1
 80023ba:	eb42 0303 	adc.w	r3, r2, r3
 80023be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	663b      	str	r3, [r7, #96]	; 0x60
 80023ca:	667a      	str	r2, [r7, #100]	; 0x64
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023d8:	4649      	mov	r1, r9
 80023da:	008b      	lsls	r3, r1, #2
 80023dc:	4641      	mov	r1, r8
 80023de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023e2:	4641      	mov	r1, r8
 80023e4:	008a      	lsls	r2, r1, #2
 80023e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023ea:	f7fd ff61 	bl	80002b0 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <UART_SetConfig+0x4e4>)
 80023f4:	fba3 1302 	umull	r1, r3, r3, r2
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	2164      	movs	r1, #100	; 0x64
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	3332      	adds	r3, #50	; 0x32
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <UART_SetConfig+0x4e4>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4422      	add	r2, r4
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002422:	46bd      	mov	sp, r7
 8002424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002428:	51eb851f 	.word	0x51eb851f

0800242c <std>:
 800242c:	2300      	movs	r3, #0
 800242e:	b510      	push	{r4, lr}
 8002430:	4604      	mov	r4, r0
 8002432:	e9c0 3300 	strd	r3, r3, [r0]
 8002436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800243a:	6083      	str	r3, [r0, #8]
 800243c:	8181      	strh	r1, [r0, #12]
 800243e:	6643      	str	r3, [r0, #100]	; 0x64
 8002440:	81c2      	strh	r2, [r0, #14]
 8002442:	6183      	str	r3, [r0, #24]
 8002444:	4619      	mov	r1, r3
 8002446:	2208      	movs	r2, #8
 8002448:	305c      	adds	r0, #92	; 0x5c
 800244a:	f000 f9f7 	bl	800283c <memset>
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <std+0x58>)
 8002450:	6263      	str	r3, [r4, #36]	; 0x24
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <std+0x5c>)
 8002454:	62a3      	str	r3, [r4, #40]	; 0x28
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <std+0x60>)
 8002458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <std+0x64>)
 800245c:	6323      	str	r3, [r4, #48]	; 0x30
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <std+0x68>)
 8002460:	6224      	str	r4, [r4, #32]
 8002462:	429c      	cmp	r4, r3
 8002464:	d006      	beq.n	8002474 <std+0x48>
 8002466:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800246a:	4294      	cmp	r4, r2
 800246c:	d002      	beq.n	8002474 <std+0x48>
 800246e:	33d0      	adds	r3, #208	; 0xd0
 8002470:	429c      	cmp	r4, r3
 8002472:	d105      	bne.n	8002480 <std+0x54>
 8002474:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800247c:	f000 ba56 	b.w	800292c <__retarget_lock_init_recursive>
 8002480:	bd10      	pop	{r4, pc}
 8002482:	bf00      	nop
 8002484:	0800268d 	.word	0x0800268d
 8002488:	080026af 	.word	0x080026af
 800248c:	080026e7 	.word	0x080026e7
 8002490:	0800270b 	.word	0x0800270b
 8002494:	200000e4 	.word	0x200000e4

08002498 <stdio_exit_handler>:
 8002498:	4a02      	ldr	r2, [pc, #8]	; (80024a4 <stdio_exit_handler+0xc>)
 800249a:	4903      	ldr	r1, [pc, #12]	; (80024a8 <stdio_exit_handler+0x10>)
 800249c:	4803      	ldr	r0, [pc, #12]	; (80024ac <stdio_exit_handler+0x14>)
 800249e:	f000 b869 	b.w	8002574 <_fwalk_sglue>
 80024a2:	bf00      	nop
 80024a4:	20000018 	.word	0x20000018
 80024a8:	080031d9 	.word	0x080031d9
 80024ac:	20000024 	.word	0x20000024

080024b0 <cleanup_stdio>:
 80024b0:	6841      	ldr	r1, [r0, #4]
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <cleanup_stdio+0x34>)
 80024b4:	4299      	cmp	r1, r3
 80024b6:	b510      	push	{r4, lr}
 80024b8:	4604      	mov	r4, r0
 80024ba:	d001      	beq.n	80024c0 <cleanup_stdio+0x10>
 80024bc:	f000 fe8c 	bl	80031d8 <_fflush_r>
 80024c0:	68a1      	ldr	r1, [r4, #8]
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <cleanup_stdio+0x38>)
 80024c4:	4299      	cmp	r1, r3
 80024c6:	d002      	beq.n	80024ce <cleanup_stdio+0x1e>
 80024c8:	4620      	mov	r0, r4
 80024ca:	f000 fe85 	bl	80031d8 <_fflush_r>
 80024ce:	68e1      	ldr	r1, [r4, #12]
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <cleanup_stdio+0x3c>)
 80024d2:	4299      	cmp	r1, r3
 80024d4:	d004      	beq.n	80024e0 <cleanup_stdio+0x30>
 80024d6:	4620      	mov	r0, r4
 80024d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024dc:	f000 be7c 	b.w	80031d8 <_fflush_r>
 80024e0:	bd10      	pop	{r4, pc}
 80024e2:	bf00      	nop
 80024e4:	200000e4 	.word	0x200000e4
 80024e8:	2000014c 	.word	0x2000014c
 80024ec:	200001b4 	.word	0x200001b4

080024f0 <global_stdio_init.part.0>:
 80024f0:	b510      	push	{r4, lr}
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <global_stdio_init.part.0+0x30>)
 80024f4:	4c0b      	ldr	r4, [pc, #44]	; (8002524 <global_stdio_init.part.0+0x34>)
 80024f6:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <global_stdio_init.part.0+0x38>)
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	4620      	mov	r0, r4
 80024fc:	2200      	movs	r2, #0
 80024fe:	2104      	movs	r1, #4
 8002500:	f7ff ff94 	bl	800242c <std>
 8002504:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002508:	2201      	movs	r2, #1
 800250a:	2109      	movs	r1, #9
 800250c:	f7ff ff8e 	bl	800242c <std>
 8002510:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002514:	2202      	movs	r2, #2
 8002516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800251a:	2112      	movs	r1, #18
 800251c:	f7ff bf86 	b.w	800242c <std>
 8002520:	2000021c 	.word	0x2000021c
 8002524:	200000e4 	.word	0x200000e4
 8002528:	08002499 	.word	0x08002499

0800252c <__sfp_lock_acquire>:
 800252c:	4801      	ldr	r0, [pc, #4]	; (8002534 <__sfp_lock_acquire+0x8>)
 800252e:	f000 b9fe 	b.w	800292e <__retarget_lock_acquire_recursive>
 8002532:	bf00      	nop
 8002534:	20000225 	.word	0x20000225

08002538 <__sfp_lock_release>:
 8002538:	4801      	ldr	r0, [pc, #4]	; (8002540 <__sfp_lock_release+0x8>)
 800253a:	f000 b9f9 	b.w	8002930 <__retarget_lock_release_recursive>
 800253e:	bf00      	nop
 8002540:	20000225 	.word	0x20000225

08002544 <__sinit>:
 8002544:	b510      	push	{r4, lr}
 8002546:	4604      	mov	r4, r0
 8002548:	f7ff fff0 	bl	800252c <__sfp_lock_acquire>
 800254c:	6a23      	ldr	r3, [r4, #32]
 800254e:	b11b      	cbz	r3, 8002558 <__sinit+0x14>
 8002550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002554:	f7ff bff0 	b.w	8002538 <__sfp_lock_release>
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <__sinit+0x28>)
 800255a:	6223      	str	r3, [r4, #32]
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <__sinit+0x2c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f5      	bne.n	8002550 <__sinit+0xc>
 8002564:	f7ff ffc4 	bl	80024f0 <global_stdio_init.part.0>
 8002568:	e7f2      	b.n	8002550 <__sinit+0xc>
 800256a:	bf00      	nop
 800256c:	080024b1 	.word	0x080024b1
 8002570:	2000021c 	.word	0x2000021c

08002574 <_fwalk_sglue>:
 8002574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002578:	4607      	mov	r7, r0
 800257a:	4688      	mov	r8, r1
 800257c:	4614      	mov	r4, r2
 800257e:	2600      	movs	r6, #0
 8002580:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002584:	f1b9 0901 	subs.w	r9, r9, #1
 8002588:	d505      	bpl.n	8002596 <_fwalk_sglue+0x22>
 800258a:	6824      	ldr	r4, [r4, #0]
 800258c:	2c00      	cmp	r4, #0
 800258e:	d1f7      	bne.n	8002580 <_fwalk_sglue+0xc>
 8002590:	4630      	mov	r0, r6
 8002592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002596:	89ab      	ldrh	r3, [r5, #12]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d907      	bls.n	80025ac <_fwalk_sglue+0x38>
 800259c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025a0:	3301      	adds	r3, #1
 80025a2:	d003      	beq.n	80025ac <_fwalk_sglue+0x38>
 80025a4:	4629      	mov	r1, r5
 80025a6:	4638      	mov	r0, r7
 80025a8:	47c0      	blx	r8
 80025aa:	4306      	orrs	r6, r0
 80025ac:	3568      	adds	r5, #104	; 0x68
 80025ae:	e7e9      	b.n	8002584 <_fwalk_sglue+0x10>

080025b0 <iprintf>:
 80025b0:	b40f      	push	{r0, r1, r2, r3}
 80025b2:	b507      	push	{r0, r1, r2, lr}
 80025b4:	4906      	ldr	r1, [pc, #24]	; (80025d0 <iprintf+0x20>)
 80025b6:	ab04      	add	r3, sp, #16
 80025b8:	6808      	ldr	r0, [r1, #0]
 80025ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80025be:	6881      	ldr	r1, [r0, #8]
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	f000 fad9 	bl	8002b78 <_vfiprintf_r>
 80025c6:	b003      	add	sp, #12
 80025c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80025cc:	b004      	add	sp, #16
 80025ce:	4770      	bx	lr
 80025d0:	20000070 	.word	0x20000070

080025d4 <_puts_r>:
 80025d4:	6a03      	ldr	r3, [r0, #32]
 80025d6:	b570      	push	{r4, r5, r6, lr}
 80025d8:	6884      	ldr	r4, [r0, #8]
 80025da:	4605      	mov	r5, r0
 80025dc:	460e      	mov	r6, r1
 80025de:	b90b      	cbnz	r3, 80025e4 <_puts_r+0x10>
 80025e0:	f7ff ffb0 	bl	8002544 <__sinit>
 80025e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025e6:	07db      	lsls	r3, r3, #31
 80025e8:	d405      	bmi.n	80025f6 <_puts_r+0x22>
 80025ea:	89a3      	ldrh	r3, [r4, #12]
 80025ec:	0598      	lsls	r0, r3, #22
 80025ee:	d402      	bmi.n	80025f6 <_puts_r+0x22>
 80025f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025f2:	f000 f99c 	bl	800292e <__retarget_lock_acquire_recursive>
 80025f6:	89a3      	ldrh	r3, [r4, #12]
 80025f8:	0719      	lsls	r1, r3, #28
 80025fa:	d513      	bpl.n	8002624 <_puts_r+0x50>
 80025fc:	6923      	ldr	r3, [r4, #16]
 80025fe:	b18b      	cbz	r3, 8002624 <_puts_r+0x50>
 8002600:	3e01      	subs	r6, #1
 8002602:	68a3      	ldr	r3, [r4, #8]
 8002604:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002608:	3b01      	subs	r3, #1
 800260a:	60a3      	str	r3, [r4, #8]
 800260c:	b9e9      	cbnz	r1, 800264a <_puts_r+0x76>
 800260e:	2b00      	cmp	r3, #0
 8002610:	da2e      	bge.n	8002670 <_puts_r+0x9c>
 8002612:	4622      	mov	r2, r4
 8002614:	210a      	movs	r1, #10
 8002616:	4628      	mov	r0, r5
 8002618:	f000 f87b 	bl	8002712 <__swbuf_r>
 800261c:	3001      	adds	r0, #1
 800261e:	d007      	beq.n	8002630 <_puts_r+0x5c>
 8002620:	250a      	movs	r5, #10
 8002622:	e007      	b.n	8002634 <_puts_r+0x60>
 8002624:	4621      	mov	r1, r4
 8002626:	4628      	mov	r0, r5
 8002628:	f000 f8b0 	bl	800278c <__swsetup_r>
 800262c:	2800      	cmp	r0, #0
 800262e:	d0e7      	beq.n	8002600 <_puts_r+0x2c>
 8002630:	f04f 35ff 	mov.w	r5, #4294967295
 8002634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002636:	07da      	lsls	r2, r3, #31
 8002638:	d405      	bmi.n	8002646 <_puts_r+0x72>
 800263a:	89a3      	ldrh	r3, [r4, #12]
 800263c:	059b      	lsls	r3, r3, #22
 800263e:	d402      	bmi.n	8002646 <_puts_r+0x72>
 8002640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002642:	f000 f975 	bl	8002930 <__retarget_lock_release_recursive>
 8002646:	4628      	mov	r0, r5
 8002648:	bd70      	pop	{r4, r5, r6, pc}
 800264a:	2b00      	cmp	r3, #0
 800264c:	da04      	bge.n	8002658 <_puts_r+0x84>
 800264e:	69a2      	ldr	r2, [r4, #24]
 8002650:	429a      	cmp	r2, r3
 8002652:	dc06      	bgt.n	8002662 <_puts_r+0x8e>
 8002654:	290a      	cmp	r1, #10
 8002656:	d004      	beq.n	8002662 <_puts_r+0x8e>
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	6022      	str	r2, [r4, #0]
 800265e:	7019      	strb	r1, [r3, #0]
 8002660:	e7cf      	b.n	8002602 <_puts_r+0x2e>
 8002662:	4622      	mov	r2, r4
 8002664:	4628      	mov	r0, r5
 8002666:	f000 f854 	bl	8002712 <__swbuf_r>
 800266a:	3001      	adds	r0, #1
 800266c:	d1c9      	bne.n	8002602 <_puts_r+0x2e>
 800266e:	e7df      	b.n	8002630 <_puts_r+0x5c>
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	250a      	movs	r5, #10
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	6022      	str	r2, [r4, #0]
 8002678:	701d      	strb	r5, [r3, #0]
 800267a:	e7db      	b.n	8002634 <_puts_r+0x60>

0800267c <puts>:
 800267c:	4b02      	ldr	r3, [pc, #8]	; (8002688 <puts+0xc>)
 800267e:	4601      	mov	r1, r0
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	f7ff bfa7 	b.w	80025d4 <_puts_r>
 8002686:	bf00      	nop
 8002688:	20000070 	.word	0x20000070

0800268c <__sread>:
 800268c:	b510      	push	{r4, lr}
 800268e:	460c      	mov	r4, r1
 8002690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002694:	f000 f8fc 	bl	8002890 <_read_r>
 8002698:	2800      	cmp	r0, #0
 800269a:	bfab      	itete	ge
 800269c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800269e:	89a3      	ldrhlt	r3, [r4, #12]
 80026a0:	181b      	addge	r3, r3, r0
 80026a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026a6:	bfac      	ite	ge
 80026a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80026aa:	81a3      	strhlt	r3, [r4, #12]
 80026ac:	bd10      	pop	{r4, pc}

080026ae <__swrite>:
 80026ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b2:	461f      	mov	r7, r3
 80026b4:	898b      	ldrh	r3, [r1, #12]
 80026b6:	05db      	lsls	r3, r3, #23
 80026b8:	4605      	mov	r5, r0
 80026ba:	460c      	mov	r4, r1
 80026bc:	4616      	mov	r6, r2
 80026be:	d505      	bpl.n	80026cc <__swrite+0x1e>
 80026c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026c4:	2302      	movs	r3, #2
 80026c6:	2200      	movs	r2, #0
 80026c8:	f000 f8d0 	bl	800286c <_lseek_r>
 80026cc:	89a3      	ldrh	r3, [r4, #12]
 80026ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026d6:	81a3      	strh	r3, [r4, #12]
 80026d8:	4632      	mov	r2, r6
 80026da:	463b      	mov	r3, r7
 80026dc:	4628      	mov	r0, r5
 80026de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026e2:	f000 b8e7 	b.w	80028b4 <_write_r>

080026e6 <__sseek>:
 80026e6:	b510      	push	{r4, lr}
 80026e8:	460c      	mov	r4, r1
 80026ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ee:	f000 f8bd 	bl	800286c <_lseek_r>
 80026f2:	1c43      	adds	r3, r0, #1
 80026f4:	89a3      	ldrh	r3, [r4, #12]
 80026f6:	bf15      	itete	ne
 80026f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80026fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002702:	81a3      	strheq	r3, [r4, #12]
 8002704:	bf18      	it	ne
 8002706:	81a3      	strhne	r3, [r4, #12]
 8002708:	bd10      	pop	{r4, pc}

0800270a <__sclose>:
 800270a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800270e:	f000 b89d 	b.w	800284c <_close_r>

08002712 <__swbuf_r>:
 8002712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002714:	460e      	mov	r6, r1
 8002716:	4614      	mov	r4, r2
 8002718:	4605      	mov	r5, r0
 800271a:	b118      	cbz	r0, 8002724 <__swbuf_r+0x12>
 800271c:	6a03      	ldr	r3, [r0, #32]
 800271e:	b90b      	cbnz	r3, 8002724 <__swbuf_r+0x12>
 8002720:	f7ff ff10 	bl	8002544 <__sinit>
 8002724:	69a3      	ldr	r3, [r4, #24]
 8002726:	60a3      	str	r3, [r4, #8]
 8002728:	89a3      	ldrh	r3, [r4, #12]
 800272a:	071a      	lsls	r2, r3, #28
 800272c:	d525      	bpl.n	800277a <__swbuf_r+0x68>
 800272e:	6923      	ldr	r3, [r4, #16]
 8002730:	b31b      	cbz	r3, 800277a <__swbuf_r+0x68>
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	6922      	ldr	r2, [r4, #16]
 8002736:	1a98      	subs	r0, r3, r2
 8002738:	6963      	ldr	r3, [r4, #20]
 800273a:	b2f6      	uxtb	r6, r6
 800273c:	4283      	cmp	r3, r0
 800273e:	4637      	mov	r7, r6
 8002740:	dc04      	bgt.n	800274c <__swbuf_r+0x3a>
 8002742:	4621      	mov	r1, r4
 8002744:	4628      	mov	r0, r5
 8002746:	f000 fd47 	bl	80031d8 <_fflush_r>
 800274a:	b9e0      	cbnz	r0, 8002786 <__swbuf_r+0x74>
 800274c:	68a3      	ldr	r3, [r4, #8]
 800274e:	3b01      	subs	r3, #1
 8002750:	60a3      	str	r3, [r4, #8]
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	6022      	str	r2, [r4, #0]
 8002758:	701e      	strb	r6, [r3, #0]
 800275a:	6962      	ldr	r2, [r4, #20]
 800275c:	1c43      	adds	r3, r0, #1
 800275e:	429a      	cmp	r2, r3
 8002760:	d004      	beq.n	800276c <__swbuf_r+0x5a>
 8002762:	89a3      	ldrh	r3, [r4, #12]
 8002764:	07db      	lsls	r3, r3, #31
 8002766:	d506      	bpl.n	8002776 <__swbuf_r+0x64>
 8002768:	2e0a      	cmp	r6, #10
 800276a:	d104      	bne.n	8002776 <__swbuf_r+0x64>
 800276c:	4621      	mov	r1, r4
 800276e:	4628      	mov	r0, r5
 8002770:	f000 fd32 	bl	80031d8 <_fflush_r>
 8002774:	b938      	cbnz	r0, 8002786 <__swbuf_r+0x74>
 8002776:	4638      	mov	r0, r7
 8002778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800277a:	4621      	mov	r1, r4
 800277c:	4628      	mov	r0, r5
 800277e:	f000 f805 	bl	800278c <__swsetup_r>
 8002782:	2800      	cmp	r0, #0
 8002784:	d0d5      	beq.n	8002732 <__swbuf_r+0x20>
 8002786:	f04f 37ff 	mov.w	r7, #4294967295
 800278a:	e7f4      	b.n	8002776 <__swbuf_r+0x64>

0800278c <__swsetup_r>:
 800278c:	b538      	push	{r3, r4, r5, lr}
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <__swsetup_r+0xac>)
 8002790:	4605      	mov	r5, r0
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	460c      	mov	r4, r1
 8002796:	b118      	cbz	r0, 80027a0 <__swsetup_r+0x14>
 8002798:	6a03      	ldr	r3, [r0, #32]
 800279a:	b90b      	cbnz	r3, 80027a0 <__swsetup_r+0x14>
 800279c:	f7ff fed2 	bl	8002544 <__sinit>
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027a6:	0718      	lsls	r0, r3, #28
 80027a8:	d422      	bmi.n	80027f0 <__swsetup_r+0x64>
 80027aa:	06d9      	lsls	r1, r3, #27
 80027ac:	d407      	bmi.n	80027be <__swsetup_r+0x32>
 80027ae:	2309      	movs	r3, #9
 80027b0:	602b      	str	r3, [r5, #0]
 80027b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80027b6:	81a3      	strh	r3, [r4, #12]
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	e034      	b.n	8002828 <__swsetup_r+0x9c>
 80027be:	0758      	lsls	r0, r3, #29
 80027c0:	d512      	bpl.n	80027e8 <__swsetup_r+0x5c>
 80027c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027c4:	b141      	cbz	r1, 80027d8 <__swsetup_r+0x4c>
 80027c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027ca:	4299      	cmp	r1, r3
 80027cc:	d002      	beq.n	80027d4 <__swsetup_r+0x48>
 80027ce:	4628      	mov	r0, r5
 80027d0:	f000 f8b0 	bl	8002934 <_free_r>
 80027d4:	2300      	movs	r3, #0
 80027d6:	6363      	str	r3, [r4, #52]	; 0x34
 80027d8:	89a3      	ldrh	r3, [r4, #12]
 80027da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80027de:	81a3      	strh	r3, [r4, #12]
 80027e0:	2300      	movs	r3, #0
 80027e2:	6063      	str	r3, [r4, #4]
 80027e4:	6923      	ldr	r3, [r4, #16]
 80027e6:	6023      	str	r3, [r4, #0]
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	f043 0308 	orr.w	r3, r3, #8
 80027ee:	81a3      	strh	r3, [r4, #12]
 80027f0:	6923      	ldr	r3, [r4, #16]
 80027f2:	b94b      	cbnz	r3, 8002808 <__swsetup_r+0x7c>
 80027f4:	89a3      	ldrh	r3, [r4, #12]
 80027f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80027fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027fe:	d003      	beq.n	8002808 <__swsetup_r+0x7c>
 8002800:	4621      	mov	r1, r4
 8002802:	4628      	mov	r0, r5
 8002804:	f000 fd36 	bl	8003274 <__smakebuf_r>
 8002808:	89a0      	ldrh	r0, [r4, #12]
 800280a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800280e:	f010 0301 	ands.w	r3, r0, #1
 8002812:	d00a      	beq.n	800282a <__swsetup_r+0x9e>
 8002814:	2300      	movs	r3, #0
 8002816:	60a3      	str	r3, [r4, #8]
 8002818:	6963      	ldr	r3, [r4, #20]
 800281a:	425b      	negs	r3, r3
 800281c:	61a3      	str	r3, [r4, #24]
 800281e:	6923      	ldr	r3, [r4, #16]
 8002820:	b943      	cbnz	r3, 8002834 <__swsetup_r+0xa8>
 8002822:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002826:	d1c4      	bne.n	80027b2 <__swsetup_r+0x26>
 8002828:	bd38      	pop	{r3, r4, r5, pc}
 800282a:	0781      	lsls	r1, r0, #30
 800282c:	bf58      	it	pl
 800282e:	6963      	ldrpl	r3, [r4, #20]
 8002830:	60a3      	str	r3, [r4, #8]
 8002832:	e7f4      	b.n	800281e <__swsetup_r+0x92>
 8002834:	2000      	movs	r0, #0
 8002836:	e7f7      	b.n	8002828 <__swsetup_r+0x9c>
 8002838:	20000070 	.word	0x20000070

0800283c <memset>:
 800283c:	4402      	add	r2, r0
 800283e:	4603      	mov	r3, r0
 8002840:	4293      	cmp	r3, r2
 8002842:	d100      	bne.n	8002846 <memset+0xa>
 8002844:	4770      	bx	lr
 8002846:	f803 1b01 	strb.w	r1, [r3], #1
 800284a:	e7f9      	b.n	8002840 <memset+0x4>

0800284c <_close_r>:
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	4d06      	ldr	r5, [pc, #24]	; (8002868 <_close_r+0x1c>)
 8002850:	2300      	movs	r3, #0
 8002852:	4604      	mov	r4, r0
 8002854:	4608      	mov	r0, r1
 8002856:	602b      	str	r3, [r5, #0]
 8002858:	f7fe f96b 	bl	8000b32 <_close>
 800285c:	1c43      	adds	r3, r0, #1
 800285e:	d102      	bne.n	8002866 <_close_r+0x1a>
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	b103      	cbz	r3, 8002866 <_close_r+0x1a>
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	20000220 	.word	0x20000220

0800286c <_lseek_r>:
 800286c:	b538      	push	{r3, r4, r5, lr}
 800286e:	4d07      	ldr	r5, [pc, #28]	; (800288c <_lseek_r+0x20>)
 8002870:	4604      	mov	r4, r0
 8002872:	4608      	mov	r0, r1
 8002874:	4611      	mov	r1, r2
 8002876:	2200      	movs	r2, #0
 8002878:	602a      	str	r2, [r5, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	f7fe f980 	bl	8000b80 <_lseek>
 8002880:	1c43      	adds	r3, r0, #1
 8002882:	d102      	bne.n	800288a <_lseek_r+0x1e>
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	b103      	cbz	r3, 800288a <_lseek_r+0x1e>
 8002888:	6023      	str	r3, [r4, #0]
 800288a:	bd38      	pop	{r3, r4, r5, pc}
 800288c:	20000220 	.word	0x20000220

08002890 <_read_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	4d07      	ldr	r5, [pc, #28]	; (80028b0 <_read_r+0x20>)
 8002894:	4604      	mov	r4, r0
 8002896:	4608      	mov	r0, r1
 8002898:	4611      	mov	r1, r2
 800289a:	2200      	movs	r2, #0
 800289c:	602a      	str	r2, [r5, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	f7fe f92a 	bl	8000af8 <_read>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_read_r+0x1e>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_read_r+0x1e>
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	20000220 	.word	0x20000220

080028b4 <_write_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4d07      	ldr	r5, [pc, #28]	; (80028d4 <_write_r+0x20>)
 80028b8:	4604      	mov	r4, r0
 80028ba:	4608      	mov	r0, r1
 80028bc:	4611      	mov	r1, r2
 80028be:	2200      	movs	r2, #0
 80028c0:	602a      	str	r2, [r5, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f7fe f85c 	bl	8000980 <_write>
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	d102      	bne.n	80028d2 <_write_r+0x1e>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	b103      	cbz	r3, 80028d2 <_write_r+0x1e>
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	20000220 	.word	0x20000220

080028d8 <__errno>:
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <__errno+0x8>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000070 	.word	0x20000070

080028e4 <__libc_init_array>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	4d0d      	ldr	r5, [pc, #52]	; (800291c <__libc_init_array+0x38>)
 80028e8:	4c0d      	ldr	r4, [pc, #52]	; (8002920 <__libc_init_array+0x3c>)
 80028ea:	1b64      	subs	r4, r4, r5
 80028ec:	10a4      	asrs	r4, r4, #2
 80028ee:	2600      	movs	r6, #0
 80028f0:	42a6      	cmp	r6, r4
 80028f2:	d109      	bne.n	8002908 <__libc_init_array+0x24>
 80028f4:	4d0b      	ldr	r5, [pc, #44]	; (8002924 <__libc_init_array+0x40>)
 80028f6:	4c0c      	ldr	r4, [pc, #48]	; (8002928 <__libc_init_array+0x44>)
 80028f8:	f000 fd2a 	bl	8003350 <_init>
 80028fc:	1b64      	subs	r4, r4, r5
 80028fe:	10a4      	asrs	r4, r4, #2
 8002900:	2600      	movs	r6, #0
 8002902:	42a6      	cmp	r6, r4
 8002904:	d105      	bne.n	8002912 <__libc_init_array+0x2e>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	f855 3b04 	ldr.w	r3, [r5], #4
 800290c:	4798      	blx	r3
 800290e:	3601      	adds	r6, #1
 8002910:	e7ee      	b.n	80028f0 <__libc_init_array+0xc>
 8002912:	f855 3b04 	ldr.w	r3, [r5], #4
 8002916:	4798      	blx	r3
 8002918:	3601      	adds	r6, #1
 800291a:	e7f2      	b.n	8002902 <__libc_init_array+0x1e>
 800291c:	0800340c 	.word	0x0800340c
 8002920:	0800340c 	.word	0x0800340c
 8002924:	0800340c 	.word	0x0800340c
 8002928:	08003410 	.word	0x08003410

0800292c <__retarget_lock_init_recursive>:
 800292c:	4770      	bx	lr

0800292e <__retarget_lock_acquire_recursive>:
 800292e:	4770      	bx	lr

08002930 <__retarget_lock_release_recursive>:
 8002930:	4770      	bx	lr
	...

08002934 <_free_r>:
 8002934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002936:	2900      	cmp	r1, #0
 8002938:	d044      	beq.n	80029c4 <_free_r+0x90>
 800293a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800293e:	9001      	str	r0, [sp, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f1a1 0404 	sub.w	r4, r1, #4
 8002946:	bfb8      	it	lt
 8002948:	18e4      	addlt	r4, r4, r3
 800294a:	f000 f8df 	bl	8002b0c <__malloc_lock>
 800294e:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <_free_r+0x94>)
 8002950:	9801      	ldr	r0, [sp, #4]
 8002952:	6813      	ldr	r3, [r2, #0]
 8002954:	b933      	cbnz	r3, 8002964 <_free_r+0x30>
 8002956:	6063      	str	r3, [r4, #4]
 8002958:	6014      	str	r4, [r2, #0]
 800295a:	b003      	add	sp, #12
 800295c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002960:	f000 b8da 	b.w	8002b18 <__malloc_unlock>
 8002964:	42a3      	cmp	r3, r4
 8002966:	d908      	bls.n	800297a <_free_r+0x46>
 8002968:	6825      	ldr	r5, [r4, #0]
 800296a:	1961      	adds	r1, r4, r5
 800296c:	428b      	cmp	r3, r1
 800296e:	bf01      	itttt	eq
 8002970:	6819      	ldreq	r1, [r3, #0]
 8002972:	685b      	ldreq	r3, [r3, #4]
 8002974:	1949      	addeq	r1, r1, r5
 8002976:	6021      	streq	r1, [r4, #0]
 8002978:	e7ed      	b.n	8002956 <_free_r+0x22>
 800297a:	461a      	mov	r2, r3
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	b10b      	cbz	r3, 8002984 <_free_r+0x50>
 8002980:	42a3      	cmp	r3, r4
 8002982:	d9fa      	bls.n	800297a <_free_r+0x46>
 8002984:	6811      	ldr	r1, [r2, #0]
 8002986:	1855      	adds	r5, r2, r1
 8002988:	42a5      	cmp	r5, r4
 800298a:	d10b      	bne.n	80029a4 <_free_r+0x70>
 800298c:	6824      	ldr	r4, [r4, #0]
 800298e:	4421      	add	r1, r4
 8002990:	1854      	adds	r4, r2, r1
 8002992:	42a3      	cmp	r3, r4
 8002994:	6011      	str	r1, [r2, #0]
 8002996:	d1e0      	bne.n	800295a <_free_r+0x26>
 8002998:	681c      	ldr	r4, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	6053      	str	r3, [r2, #4]
 800299e:	440c      	add	r4, r1
 80029a0:	6014      	str	r4, [r2, #0]
 80029a2:	e7da      	b.n	800295a <_free_r+0x26>
 80029a4:	d902      	bls.n	80029ac <_free_r+0x78>
 80029a6:	230c      	movs	r3, #12
 80029a8:	6003      	str	r3, [r0, #0]
 80029aa:	e7d6      	b.n	800295a <_free_r+0x26>
 80029ac:	6825      	ldr	r5, [r4, #0]
 80029ae:	1961      	adds	r1, r4, r5
 80029b0:	428b      	cmp	r3, r1
 80029b2:	bf04      	itt	eq
 80029b4:	6819      	ldreq	r1, [r3, #0]
 80029b6:	685b      	ldreq	r3, [r3, #4]
 80029b8:	6063      	str	r3, [r4, #4]
 80029ba:	bf04      	itt	eq
 80029bc:	1949      	addeq	r1, r1, r5
 80029be:	6021      	streq	r1, [r4, #0]
 80029c0:	6054      	str	r4, [r2, #4]
 80029c2:	e7ca      	b.n	800295a <_free_r+0x26>
 80029c4:	b003      	add	sp, #12
 80029c6:	bd30      	pop	{r4, r5, pc}
 80029c8:	20000228 	.word	0x20000228

080029cc <sbrk_aligned>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4e0e      	ldr	r6, [pc, #56]	; (8002a08 <sbrk_aligned+0x3c>)
 80029d0:	460c      	mov	r4, r1
 80029d2:	6831      	ldr	r1, [r6, #0]
 80029d4:	4605      	mov	r5, r0
 80029d6:	b911      	cbnz	r1, 80029de <sbrk_aligned+0x12>
 80029d8:	f000 fcaa 	bl	8003330 <_sbrk_r>
 80029dc:	6030      	str	r0, [r6, #0]
 80029de:	4621      	mov	r1, r4
 80029e0:	4628      	mov	r0, r5
 80029e2:	f000 fca5 	bl	8003330 <_sbrk_r>
 80029e6:	1c43      	adds	r3, r0, #1
 80029e8:	d00a      	beq.n	8002a00 <sbrk_aligned+0x34>
 80029ea:	1cc4      	adds	r4, r0, #3
 80029ec:	f024 0403 	bic.w	r4, r4, #3
 80029f0:	42a0      	cmp	r0, r4
 80029f2:	d007      	beq.n	8002a04 <sbrk_aligned+0x38>
 80029f4:	1a21      	subs	r1, r4, r0
 80029f6:	4628      	mov	r0, r5
 80029f8:	f000 fc9a 	bl	8003330 <_sbrk_r>
 80029fc:	3001      	adds	r0, #1
 80029fe:	d101      	bne.n	8002a04 <sbrk_aligned+0x38>
 8002a00:	f04f 34ff 	mov.w	r4, #4294967295
 8002a04:	4620      	mov	r0, r4
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	2000022c 	.word	0x2000022c

08002a0c <_malloc_r>:
 8002a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a10:	1ccd      	adds	r5, r1, #3
 8002a12:	f025 0503 	bic.w	r5, r5, #3
 8002a16:	3508      	adds	r5, #8
 8002a18:	2d0c      	cmp	r5, #12
 8002a1a:	bf38      	it	cc
 8002a1c:	250c      	movcc	r5, #12
 8002a1e:	2d00      	cmp	r5, #0
 8002a20:	4607      	mov	r7, r0
 8002a22:	db01      	blt.n	8002a28 <_malloc_r+0x1c>
 8002a24:	42a9      	cmp	r1, r5
 8002a26:	d905      	bls.n	8002a34 <_malloc_r+0x28>
 8002a28:	230c      	movs	r3, #12
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	2600      	movs	r6, #0
 8002a2e:	4630      	mov	r0, r6
 8002a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b08 <_malloc_r+0xfc>
 8002a38:	f000 f868 	bl	8002b0c <__malloc_lock>
 8002a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8002a40:	461c      	mov	r4, r3
 8002a42:	bb5c      	cbnz	r4, 8002a9c <_malloc_r+0x90>
 8002a44:	4629      	mov	r1, r5
 8002a46:	4638      	mov	r0, r7
 8002a48:	f7ff ffc0 	bl	80029cc <sbrk_aligned>
 8002a4c:	1c43      	adds	r3, r0, #1
 8002a4e:	4604      	mov	r4, r0
 8002a50:	d155      	bne.n	8002afe <_malloc_r+0xf2>
 8002a52:	f8d8 4000 	ldr.w	r4, [r8]
 8002a56:	4626      	mov	r6, r4
 8002a58:	2e00      	cmp	r6, #0
 8002a5a:	d145      	bne.n	8002ae8 <_malloc_r+0xdc>
 8002a5c:	2c00      	cmp	r4, #0
 8002a5e:	d048      	beq.n	8002af2 <_malloc_r+0xe6>
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	4631      	mov	r1, r6
 8002a64:	4638      	mov	r0, r7
 8002a66:	eb04 0903 	add.w	r9, r4, r3
 8002a6a:	f000 fc61 	bl	8003330 <_sbrk_r>
 8002a6e:	4581      	cmp	r9, r0
 8002a70:	d13f      	bne.n	8002af2 <_malloc_r+0xe6>
 8002a72:	6821      	ldr	r1, [r4, #0]
 8002a74:	1a6d      	subs	r5, r5, r1
 8002a76:	4629      	mov	r1, r5
 8002a78:	4638      	mov	r0, r7
 8002a7a:	f7ff ffa7 	bl	80029cc <sbrk_aligned>
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d037      	beq.n	8002af2 <_malloc_r+0xe6>
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	442b      	add	r3, r5
 8002a86:	6023      	str	r3, [r4, #0]
 8002a88:	f8d8 3000 	ldr.w	r3, [r8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d038      	beq.n	8002b02 <_malloc_r+0xf6>
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	42a2      	cmp	r2, r4
 8002a94:	d12b      	bne.n	8002aee <_malloc_r+0xe2>
 8002a96:	2200      	movs	r2, #0
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e00f      	b.n	8002abc <_malloc_r+0xb0>
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	1b52      	subs	r2, r2, r5
 8002aa0:	d41f      	bmi.n	8002ae2 <_malloc_r+0xd6>
 8002aa2:	2a0b      	cmp	r2, #11
 8002aa4:	d917      	bls.n	8002ad6 <_malloc_r+0xca>
 8002aa6:	1961      	adds	r1, r4, r5
 8002aa8:	42a3      	cmp	r3, r4
 8002aaa:	6025      	str	r5, [r4, #0]
 8002aac:	bf18      	it	ne
 8002aae:	6059      	strne	r1, [r3, #4]
 8002ab0:	6863      	ldr	r3, [r4, #4]
 8002ab2:	bf08      	it	eq
 8002ab4:	f8c8 1000 	streq.w	r1, [r8]
 8002ab8:	5162      	str	r2, [r4, r5]
 8002aba:	604b      	str	r3, [r1, #4]
 8002abc:	4638      	mov	r0, r7
 8002abe:	f104 060b 	add.w	r6, r4, #11
 8002ac2:	f000 f829 	bl	8002b18 <__malloc_unlock>
 8002ac6:	f026 0607 	bic.w	r6, r6, #7
 8002aca:	1d23      	adds	r3, r4, #4
 8002acc:	1af2      	subs	r2, r6, r3
 8002ace:	d0ae      	beq.n	8002a2e <_malloc_r+0x22>
 8002ad0:	1b9b      	subs	r3, r3, r6
 8002ad2:	50a3      	str	r3, [r4, r2]
 8002ad4:	e7ab      	b.n	8002a2e <_malloc_r+0x22>
 8002ad6:	42a3      	cmp	r3, r4
 8002ad8:	6862      	ldr	r2, [r4, #4]
 8002ada:	d1dd      	bne.n	8002a98 <_malloc_r+0x8c>
 8002adc:	f8c8 2000 	str.w	r2, [r8]
 8002ae0:	e7ec      	b.n	8002abc <_malloc_r+0xb0>
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	6864      	ldr	r4, [r4, #4]
 8002ae6:	e7ac      	b.n	8002a42 <_malloc_r+0x36>
 8002ae8:	4634      	mov	r4, r6
 8002aea:	6876      	ldr	r6, [r6, #4]
 8002aec:	e7b4      	b.n	8002a58 <_malloc_r+0x4c>
 8002aee:	4613      	mov	r3, r2
 8002af0:	e7cc      	b.n	8002a8c <_malloc_r+0x80>
 8002af2:	230c      	movs	r3, #12
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4638      	mov	r0, r7
 8002af8:	f000 f80e 	bl	8002b18 <__malloc_unlock>
 8002afc:	e797      	b.n	8002a2e <_malloc_r+0x22>
 8002afe:	6025      	str	r5, [r4, #0]
 8002b00:	e7dc      	b.n	8002abc <_malloc_r+0xb0>
 8002b02:	605b      	str	r3, [r3, #4]
 8002b04:	deff      	udf	#255	; 0xff
 8002b06:	bf00      	nop
 8002b08:	20000228 	.word	0x20000228

08002b0c <__malloc_lock>:
 8002b0c:	4801      	ldr	r0, [pc, #4]	; (8002b14 <__malloc_lock+0x8>)
 8002b0e:	f7ff bf0e 	b.w	800292e <__retarget_lock_acquire_recursive>
 8002b12:	bf00      	nop
 8002b14:	20000224 	.word	0x20000224

08002b18 <__malloc_unlock>:
 8002b18:	4801      	ldr	r0, [pc, #4]	; (8002b20 <__malloc_unlock+0x8>)
 8002b1a:	f7ff bf09 	b.w	8002930 <__retarget_lock_release_recursive>
 8002b1e:	bf00      	nop
 8002b20:	20000224 	.word	0x20000224

08002b24 <__sfputc_r>:
 8002b24:	6893      	ldr	r3, [r2, #8]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	b410      	push	{r4}
 8002b2c:	6093      	str	r3, [r2, #8]
 8002b2e:	da08      	bge.n	8002b42 <__sfputc_r+0x1e>
 8002b30:	6994      	ldr	r4, [r2, #24]
 8002b32:	42a3      	cmp	r3, r4
 8002b34:	db01      	blt.n	8002b3a <__sfputc_r+0x16>
 8002b36:	290a      	cmp	r1, #10
 8002b38:	d103      	bne.n	8002b42 <__sfputc_r+0x1e>
 8002b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b3e:	f7ff bde8 	b.w	8002712 <__swbuf_r>
 8002b42:	6813      	ldr	r3, [r2, #0]
 8002b44:	1c58      	adds	r0, r3, #1
 8002b46:	6010      	str	r0, [r2, #0]
 8002b48:	7019      	strb	r1, [r3, #0]
 8002b4a:	4608      	mov	r0, r1
 8002b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <__sfputs_r>:
 8002b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b54:	4606      	mov	r6, r0
 8002b56:	460f      	mov	r7, r1
 8002b58:	4614      	mov	r4, r2
 8002b5a:	18d5      	adds	r5, r2, r3
 8002b5c:	42ac      	cmp	r4, r5
 8002b5e:	d101      	bne.n	8002b64 <__sfputs_r+0x12>
 8002b60:	2000      	movs	r0, #0
 8002b62:	e007      	b.n	8002b74 <__sfputs_r+0x22>
 8002b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b68:	463a      	mov	r2, r7
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	f7ff ffda 	bl	8002b24 <__sfputc_r>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d1f3      	bne.n	8002b5c <__sfputs_r+0xa>
 8002b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b78 <_vfiprintf_r>:
 8002b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	460d      	mov	r5, r1
 8002b7e:	b09d      	sub	sp, #116	; 0x74
 8002b80:	4614      	mov	r4, r2
 8002b82:	4698      	mov	r8, r3
 8002b84:	4606      	mov	r6, r0
 8002b86:	b118      	cbz	r0, 8002b90 <_vfiprintf_r+0x18>
 8002b88:	6a03      	ldr	r3, [r0, #32]
 8002b8a:	b90b      	cbnz	r3, 8002b90 <_vfiprintf_r+0x18>
 8002b8c:	f7ff fcda 	bl	8002544 <__sinit>
 8002b90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b92:	07d9      	lsls	r1, r3, #31
 8002b94:	d405      	bmi.n	8002ba2 <_vfiprintf_r+0x2a>
 8002b96:	89ab      	ldrh	r3, [r5, #12]
 8002b98:	059a      	lsls	r2, r3, #22
 8002b9a:	d402      	bmi.n	8002ba2 <_vfiprintf_r+0x2a>
 8002b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b9e:	f7ff fec6 	bl	800292e <__retarget_lock_acquire_recursive>
 8002ba2:	89ab      	ldrh	r3, [r5, #12]
 8002ba4:	071b      	lsls	r3, r3, #28
 8002ba6:	d501      	bpl.n	8002bac <_vfiprintf_r+0x34>
 8002ba8:	692b      	ldr	r3, [r5, #16]
 8002baa:	b99b      	cbnz	r3, 8002bd4 <_vfiprintf_r+0x5c>
 8002bac:	4629      	mov	r1, r5
 8002bae:	4630      	mov	r0, r6
 8002bb0:	f7ff fdec 	bl	800278c <__swsetup_r>
 8002bb4:	b170      	cbz	r0, 8002bd4 <_vfiprintf_r+0x5c>
 8002bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bb8:	07dc      	lsls	r4, r3, #31
 8002bba:	d504      	bpl.n	8002bc6 <_vfiprintf_r+0x4e>
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	b01d      	add	sp, #116	; 0x74
 8002bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc6:	89ab      	ldrh	r3, [r5, #12]
 8002bc8:	0598      	lsls	r0, r3, #22
 8002bca:	d4f7      	bmi.n	8002bbc <_vfiprintf_r+0x44>
 8002bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bce:	f7ff feaf 	bl	8002930 <__retarget_lock_release_recursive>
 8002bd2:	e7f3      	b.n	8002bbc <_vfiprintf_r+0x44>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8002bd8:	2320      	movs	r3, #32
 8002bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8002be2:	2330      	movs	r3, #48	; 0x30
 8002be4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002d98 <_vfiprintf_r+0x220>
 8002be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bec:	f04f 0901 	mov.w	r9, #1
 8002bf0:	4623      	mov	r3, r4
 8002bf2:	469a      	mov	sl, r3
 8002bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bf8:	b10a      	cbz	r2, 8002bfe <_vfiprintf_r+0x86>
 8002bfa:	2a25      	cmp	r2, #37	; 0x25
 8002bfc:	d1f9      	bne.n	8002bf2 <_vfiprintf_r+0x7a>
 8002bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8002c02:	d00b      	beq.n	8002c1c <_vfiprintf_r+0xa4>
 8002c04:	465b      	mov	r3, fp
 8002c06:	4622      	mov	r2, r4
 8002c08:	4629      	mov	r1, r5
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f7ff ffa1 	bl	8002b52 <__sfputs_r>
 8002c10:	3001      	adds	r0, #1
 8002c12:	f000 80a9 	beq.w	8002d68 <_vfiprintf_r+0x1f0>
 8002c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c18:	445a      	add	r2, fp
 8002c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8002c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a1 	beq.w	8002d68 <_vfiprintf_r+0x1f0>
 8002c26:	2300      	movs	r3, #0
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c30:	f10a 0a01 	add.w	sl, sl, #1
 8002c34:	9304      	str	r3, [sp, #16]
 8002c36:	9307      	str	r3, [sp, #28]
 8002c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8002c3e:	4654      	mov	r4, sl
 8002c40:	2205      	movs	r2, #5
 8002c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c46:	4854      	ldr	r0, [pc, #336]	; (8002d98 <_vfiprintf_r+0x220>)
 8002c48:	f7fd fae2 	bl	8000210 <memchr>
 8002c4c:	9a04      	ldr	r2, [sp, #16]
 8002c4e:	b9d8      	cbnz	r0, 8002c88 <_vfiprintf_r+0x110>
 8002c50:	06d1      	lsls	r1, r2, #27
 8002c52:	bf44      	itt	mi
 8002c54:	2320      	movmi	r3, #32
 8002c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c5a:	0713      	lsls	r3, r2, #28
 8002c5c:	bf44      	itt	mi
 8002c5e:	232b      	movmi	r3, #43	; 0x2b
 8002c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c64:	f89a 3000 	ldrb.w	r3, [sl]
 8002c68:	2b2a      	cmp	r3, #42	; 0x2a
 8002c6a:	d015      	beq.n	8002c98 <_vfiprintf_r+0x120>
 8002c6c:	9a07      	ldr	r2, [sp, #28]
 8002c6e:	4654      	mov	r4, sl
 8002c70:	2000      	movs	r0, #0
 8002c72:	f04f 0c0a 	mov.w	ip, #10
 8002c76:	4621      	mov	r1, r4
 8002c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c7c:	3b30      	subs	r3, #48	; 0x30
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	d94d      	bls.n	8002d1e <_vfiprintf_r+0x1a6>
 8002c82:	b1b0      	cbz	r0, 8002cb2 <_vfiprintf_r+0x13a>
 8002c84:	9207      	str	r2, [sp, #28]
 8002c86:	e014      	b.n	8002cb2 <_vfiprintf_r+0x13a>
 8002c88:	eba0 0308 	sub.w	r3, r0, r8
 8002c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8002c90:	4313      	orrs	r3, r2
 8002c92:	9304      	str	r3, [sp, #16]
 8002c94:	46a2      	mov	sl, r4
 8002c96:	e7d2      	b.n	8002c3e <_vfiprintf_r+0xc6>
 8002c98:	9b03      	ldr	r3, [sp, #12]
 8002c9a:	1d19      	adds	r1, r3, #4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	9103      	str	r1, [sp, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bfbb      	ittet	lt
 8002ca4:	425b      	neglt	r3, r3
 8002ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8002caa:	9307      	strge	r3, [sp, #28]
 8002cac:	9307      	strlt	r3, [sp, #28]
 8002cae:	bfb8      	it	lt
 8002cb0:	9204      	strlt	r2, [sp, #16]
 8002cb2:	7823      	ldrb	r3, [r4, #0]
 8002cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8002cb6:	d10c      	bne.n	8002cd2 <_vfiprintf_r+0x15a>
 8002cb8:	7863      	ldrb	r3, [r4, #1]
 8002cba:	2b2a      	cmp	r3, #42	; 0x2a
 8002cbc:	d134      	bne.n	8002d28 <_vfiprintf_r+0x1b0>
 8002cbe:	9b03      	ldr	r3, [sp, #12]
 8002cc0:	1d1a      	adds	r2, r3, #4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	9203      	str	r2, [sp, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bfb8      	it	lt
 8002cca:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cce:	3402      	adds	r4, #2
 8002cd0:	9305      	str	r3, [sp, #20]
 8002cd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002da8 <_vfiprintf_r+0x230>
 8002cd6:	7821      	ldrb	r1, [r4, #0]
 8002cd8:	2203      	movs	r2, #3
 8002cda:	4650      	mov	r0, sl
 8002cdc:	f7fd fa98 	bl	8000210 <memchr>
 8002ce0:	b138      	cbz	r0, 8002cf2 <_vfiprintf_r+0x17a>
 8002ce2:	9b04      	ldr	r3, [sp, #16]
 8002ce4:	eba0 000a 	sub.w	r0, r0, sl
 8002ce8:	2240      	movs	r2, #64	; 0x40
 8002cea:	4082      	lsls	r2, r0
 8002cec:	4313      	orrs	r3, r2
 8002cee:	3401      	adds	r4, #1
 8002cf0:	9304      	str	r3, [sp, #16]
 8002cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cf6:	4829      	ldr	r0, [pc, #164]	; (8002d9c <_vfiprintf_r+0x224>)
 8002cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cfc:	2206      	movs	r2, #6
 8002cfe:	f7fd fa87 	bl	8000210 <memchr>
 8002d02:	2800      	cmp	r0, #0
 8002d04:	d03f      	beq.n	8002d86 <_vfiprintf_r+0x20e>
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <_vfiprintf_r+0x228>)
 8002d08:	bb1b      	cbnz	r3, 8002d52 <_vfiprintf_r+0x1da>
 8002d0a:	9b03      	ldr	r3, [sp, #12]
 8002d0c:	3307      	adds	r3, #7
 8002d0e:	f023 0307 	bic.w	r3, r3, #7
 8002d12:	3308      	adds	r3, #8
 8002d14:	9303      	str	r3, [sp, #12]
 8002d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d18:	443b      	add	r3, r7
 8002d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d1c:	e768      	b.n	8002bf0 <_vfiprintf_r+0x78>
 8002d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d22:	460c      	mov	r4, r1
 8002d24:	2001      	movs	r0, #1
 8002d26:	e7a6      	b.n	8002c76 <_vfiprintf_r+0xfe>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	3401      	adds	r4, #1
 8002d2c:	9305      	str	r3, [sp, #20]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f04f 0c0a 	mov.w	ip, #10
 8002d34:	4620      	mov	r0, r4
 8002d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d3a:	3a30      	subs	r2, #48	; 0x30
 8002d3c:	2a09      	cmp	r2, #9
 8002d3e:	d903      	bls.n	8002d48 <_vfiprintf_r+0x1d0>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0c6      	beq.n	8002cd2 <_vfiprintf_r+0x15a>
 8002d44:	9105      	str	r1, [sp, #20]
 8002d46:	e7c4      	b.n	8002cd2 <_vfiprintf_r+0x15a>
 8002d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e7f0      	b.n	8002d34 <_vfiprintf_r+0x1bc>
 8002d52:	ab03      	add	r3, sp, #12
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	462a      	mov	r2, r5
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <_vfiprintf_r+0x22c>)
 8002d5a:	a904      	add	r1, sp, #16
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	f3af 8000 	nop.w
 8002d62:	4607      	mov	r7, r0
 8002d64:	1c78      	adds	r0, r7, #1
 8002d66:	d1d6      	bne.n	8002d16 <_vfiprintf_r+0x19e>
 8002d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d6a:	07d9      	lsls	r1, r3, #31
 8002d6c:	d405      	bmi.n	8002d7a <_vfiprintf_r+0x202>
 8002d6e:	89ab      	ldrh	r3, [r5, #12]
 8002d70:	059a      	lsls	r2, r3, #22
 8002d72:	d402      	bmi.n	8002d7a <_vfiprintf_r+0x202>
 8002d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d76:	f7ff fddb 	bl	8002930 <__retarget_lock_release_recursive>
 8002d7a:	89ab      	ldrh	r3, [r5, #12]
 8002d7c:	065b      	lsls	r3, r3, #25
 8002d7e:	f53f af1d 	bmi.w	8002bbc <_vfiprintf_r+0x44>
 8002d82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d84:	e71c      	b.n	8002bc0 <_vfiprintf_r+0x48>
 8002d86:	ab03      	add	r3, sp, #12
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	462a      	mov	r2, r5
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <_vfiprintf_r+0x22c>)
 8002d8e:	a904      	add	r1, sp, #16
 8002d90:	4630      	mov	r0, r6
 8002d92:	f000 f879 	bl	8002e88 <_printf_i>
 8002d96:	e7e4      	b.n	8002d62 <_vfiprintf_r+0x1ea>
 8002d98:	080033d0 	.word	0x080033d0
 8002d9c:	080033da 	.word	0x080033da
 8002da0:	00000000 	.word	0x00000000
 8002da4:	08002b53 	.word	0x08002b53
 8002da8:	080033d6 	.word	0x080033d6

08002dac <_printf_common>:
 8002dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db0:	4616      	mov	r6, r2
 8002db2:	4699      	mov	r9, r3
 8002db4:	688a      	ldr	r2, [r1, #8]
 8002db6:	690b      	ldr	r3, [r1, #16]
 8002db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bfb8      	it	lt
 8002dc0:	4613      	movlt	r3, r2
 8002dc2:	6033      	str	r3, [r6, #0]
 8002dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dc8:	4607      	mov	r7, r0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	b10a      	cbz	r2, 8002dd2 <_printf_common+0x26>
 8002dce:	3301      	adds	r3, #1
 8002dd0:	6033      	str	r3, [r6, #0]
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	0699      	lsls	r1, r3, #26
 8002dd6:	bf42      	ittt	mi
 8002dd8:	6833      	ldrmi	r3, [r6, #0]
 8002dda:	3302      	addmi	r3, #2
 8002ddc:	6033      	strmi	r3, [r6, #0]
 8002dde:	6825      	ldr	r5, [r4, #0]
 8002de0:	f015 0506 	ands.w	r5, r5, #6
 8002de4:	d106      	bne.n	8002df4 <_printf_common+0x48>
 8002de6:	f104 0a19 	add.w	sl, r4, #25
 8002dea:	68e3      	ldr	r3, [r4, #12]
 8002dec:	6832      	ldr	r2, [r6, #0]
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	42ab      	cmp	r3, r5
 8002df2:	dc26      	bgt.n	8002e42 <_printf_common+0x96>
 8002df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002df8:	1e13      	subs	r3, r2, #0
 8002dfa:	6822      	ldr	r2, [r4, #0]
 8002dfc:	bf18      	it	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	0692      	lsls	r2, r2, #26
 8002e02:	d42b      	bmi.n	8002e5c <_printf_common+0xb0>
 8002e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e08:	4649      	mov	r1, r9
 8002e0a:	4638      	mov	r0, r7
 8002e0c:	47c0      	blx	r8
 8002e0e:	3001      	adds	r0, #1
 8002e10:	d01e      	beq.n	8002e50 <_printf_common+0xa4>
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	6922      	ldr	r2, [r4, #16]
 8002e16:	f003 0306 	and.w	r3, r3, #6
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	bf02      	ittt	eq
 8002e1e:	68e5      	ldreq	r5, [r4, #12]
 8002e20:	6833      	ldreq	r3, [r6, #0]
 8002e22:	1aed      	subeq	r5, r5, r3
 8002e24:	68a3      	ldr	r3, [r4, #8]
 8002e26:	bf0c      	ite	eq
 8002e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e2c:	2500      	movne	r5, #0
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	bfc4      	itt	gt
 8002e32:	1a9b      	subgt	r3, r3, r2
 8002e34:	18ed      	addgt	r5, r5, r3
 8002e36:	2600      	movs	r6, #0
 8002e38:	341a      	adds	r4, #26
 8002e3a:	42b5      	cmp	r5, r6
 8002e3c:	d11a      	bne.n	8002e74 <_printf_common+0xc8>
 8002e3e:	2000      	movs	r0, #0
 8002e40:	e008      	b.n	8002e54 <_printf_common+0xa8>
 8002e42:	2301      	movs	r3, #1
 8002e44:	4652      	mov	r2, sl
 8002e46:	4649      	mov	r1, r9
 8002e48:	4638      	mov	r0, r7
 8002e4a:	47c0      	blx	r8
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	d103      	bne.n	8002e58 <_printf_common+0xac>
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e58:	3501      	adds	r5, #1
 8002e5a:	e7c6      	b.n	8002dea <_printf_common+0x3e>
 8002e5c:	18e1      	adds	r1, r4, r3
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	2030      	movs	r0, #48	; 0x30
 8002e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e66:	4422      	add	r2, r4
 8002e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e70:	3302      	adds	r3, #2
 8002e72:	e7c7      	b.n	8002e04 <_printf_common+0x58>
 8002e74:	2301      	movs	r3, #1
 8002e76:	4622      	mov	r2, r4
 8002e78:	4649      	mov	r1, r9
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	47c0      	blx	r8
 8002e7e:	3001      	adds	r0, #1
 8002e80:	d0e6      	beq.n	8002e50 <_printf_common+0xa4>
 8002e82:	3601      	adds	r6, #1
 8002e84:	e7d9      	b.n	8002e3a <_printf_common+0x8e>
	...

08002e88 <_printf_i>:
 8002e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e8c:	7e0f      	ldrb	r7, [r1, #24]
 8002e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e90:	2f78      	cmp	r7, #120	; 0x78
 8002e92:	4691      	mov	r9, r2
 8002e94:	4680      	mov	r8, r0
 8002e96:	460c      	mov	r4, r1
 8002e98:	469a      	mov	sl, r3
 8002e9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e9e:	d807      	bhi.n	8002eb0 <_printf_i+0x28>
 8002ea0:	2f62      	cmp	r7, #98	; 0x62
 8002ea2:	d80a      	bhi.n	8002eba <_printf_i+0x32>
 8002ea4:	2f00      	cmp	r7, #0
 8002ea6:	f000 80d4 	beq.w	8003052 <_printf_i+0x1ca>
 8002eaa:	2f58      	cmp	r7, #88	; 0x58
 8002eac:	f000 80c0 	beq.w	8003030 <_printf_i+0x1a8>
 8002eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002eb8:	e03a      	b.n	8002f30 <_printf_i+0xa8>
 8002eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ebe:	2b15      	cmp	r3, #21
 8002ec0:	d8f6      	bhi.n	8002eb0 <_printf_i+0x28>
 8002ec2:	a101      	add	r1, pc, #4	; (adr r1, 8002ec8 <_printf_i+0x40>)
 8002ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ec8:	08002f21 	.word	0x08002f21
 8002ecc:	08002f35 	.word	0x08002f35
 8002ed0:	08002eb1 	.word	0x08002eb1
 8002ed4:	08002eb1 	.word	0x08002eb1
 8002ed8:	08002eb1 	.word	0x08002eb1
 8002edc:	08002eb1 	.word	0x08002eb1
 8002ee0:	08002f35 	.word	0x08002f35
 8002ee4:	08002eb1 	.word	0x08002eb1
 8002ee8:	08002eb1 	.word	0x08002eb1
 8002eec:	08002eb1 	.word	0x08002eb1
 8002ef0:	08002eb1 	.word	0x08002eb1
 8002ef4:	08003039 	.word	0x08003039
 8002ef8:	08002f61 	.word	0x08002f61
 8002efc:	08002ff3 	.word	0x08002ff3
 8002f00:	08002eb1 	.word	0x08002eb1
 8002f04:	08002eb1 	.word	0x08002eb1
 8002f08:	0800305b 	.word	0x0800305b
 8002f0c:	08002eb1 	.word	0x08002eb1
 8002f10:	08002f61 	.word	0x08002f61
 8002f14:	08002eb1 	.word	0x08002eb1
 8002f18:	08002eb1 	.word	0x08002eb1
 8002f1c:	08002ffb 	.word	0x08002ffb
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	1d1a      	adds	r2, r3, #4
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	602a      	str	r2, [r5, #0]
 8002f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f30:	2301      	movs	r3, #1
 8002f32:	e09f      	b.n	8003074 <_printf_i+0x1ec>
 8002f34:	6820      	ldr	r0, [r4, #0]
 8002f36:	682b      	ldr	r3, [r5, #0]
 8002f38:	0607      	lsls	r7, r0, #24
 8002f3a:	f103 0104 	add.w	r1, r3, #4
 8002f3e:	6029      	str	r1, [r5, #0]
 8002f40:	d501      	bpl.n	8002f46 <_printf_i+0xbe>
 8002f42:	681e      	ldr	r6, [r3, #0]
 8002f44:	e003      	b.n	8002f4e <_printf_i+0xc6>
 8002f46:	0646      	lsls	r6, r0, #25
 8002f48:	d5fb      	bpl.n	8002f42 <_printf_i+0xba>
 8002f4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002f4e:	2e00      	cmp	r6, #0
 8002f50:	da03      	bge.n	8002f5a <_printf_i+0xd2>
 8002f52:	232d      	movs	r3, #45	; 0x2d
 8002f54:	4276      	negs	r6, r6
 8002f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f5a:	485a      	ldr	r0, [pc, #360]	; (80030c4 <_printf_i+0x23c>)
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	e012      	b.n	8002f86 <_printf_i+0xfe>
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	1d19      	adds	r1, r3, #4
 8002f66:	6029      	str	r1, [r5, #0]
 8002f68:	0605      	lsls	r5, r0, #24
 8002f6a:	d501      	bpl.n	8002f70 <_printf_i+0xe8>
 8002f6c:	681e      	ldr	r6, [r3, #0]
 8002f6e:	e002      	b.n	8002f76 <_printf_i+0xee>
 8002f70:	0641      	lsls	r1, r0, #25
 8002f72:	d5fb      	bpl.n	8002f6c <_printf_i+0xe4>
 8002f74:	881e      	ldrh	r6, [r3, #0]
 8002f76:	4853      	ldr	r0, [pc, #332]	; (80030c4 <_printf_i+0x23c>)
 8002f78:	2f6f      	cmp	r7, #111	; 0x6f
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2308      	moveq	r3, #8
 8002f7e:	230a      	movne	r3, #10
 8002f80:	2100      	movs	r1, #0
 8002f82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f86:	6865      	ldr	r5, [r4, #4]
 8002f88:	60a5      	str	r5, [r4, #8]
 8002f8a:	2d00      	cmp	r5, #0
 8002f8c:	bfa2      	ittt	ge
 8002f8e:	6821      	ldrge	r1, [r4, #0]
 8002f90:	f021 0104 	bicge.w	r1, r1, #4
 8002f94:	6021      	strge	r1, [r4, #0]
 8002f96:	b90e      	cbnz	r6, 8002f9c <_printf_i+0x114>
 8002f98:	2d00      	cmp	r5, #0
 8002f9a:	d04b      	beq.n	8003034 <_printf_i+0x1ac>
 8002f9c:	4615      	mov	r5, r2
 8002f9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002fa2:	fb03 6711 	mls	r7, r3, r1, r6
 8002fa6:	5dc7      	ldrb	r7, [r0, r7]
 8002fa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fac:	4637      	mov	r7, r6
 8002fae:	42bb      	cmp	r3, r7
 8002fb0:	460e      	mov	r6, r1
 8002fb2:	d9f4      	bls.n	8002f9e <_printf_i+0x116>
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d10b      	bne.n	8002fd0 <_printf_i+0x148>
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	07de      	lsls	r6, r3, #31
 8002fbc:	d508      	bpl.n	8002fd0 <_printf_i+0x148>
 8002fbe:	6923      	ldr	r3, [r4, #16]
 8002fc0:	6861      	ldr	r1, [r4, #4]
 8002fc2:	4299      	cmp	r1, r3
 8002fc4:	bfde      	ittt	le
 8002fc6:	2330      	movle	r3, #48	; 0x30
 8002fc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fd0:	1b52      	subs	r2, r2, r5
 8002fd2:	6122      	str	r2, [r4, #16]
 8002fd4:	f8cd a000 	str.w	sl, [sp]
 8002fd8:	464b      	mov	r3, r9
 8002fda:	aa03      	add	r2, sp, #12
 8002fdc:	4621      	mov	r1, r4
 8002fde:	4640      	mov	r0, r8
 8002fe0:	f7ff fee4 	bl	8002dac <_printf_common>
 8002fe4:	3001      	adds	r0, #1
 8002fe6:	d14a      	bne.n	800307e <_printf_i+0x1f6>
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	b004      	add	sp, #16
 8002fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	f043 0320 	orr.w	r3, r3, #32
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	4833      	ldr	r0, [pc, #204]	; (80030c8 <_printf_i+0x240>)
 8002ffc:	2778      	movs	r7, #120	; 0x78
 8002ffe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	6829      	ldr	r1, [r5, #0]
 8003006:	061f      	lsls	r7, r3, #24
 8003008:	f851 6b04 	ldr.w	r6, [r1], #4
 800300c:	d402      	bmi.n	8003014 <_printf_i+0x18c>
 800300e:	065f      	lsls	r7, r3, #25
 8003010:	bf48      	it	mi
 8003012:	b2b6      	uxthmi	r6, r6
 8003014:	07df      	lsls	r7, r3, #31
 8003016:	bf48      	it	mi
 8003018:	f043 0320 	orrmi.w	r3, r3, #32
 800301c:	6029      	str	r1, [r5, #0]
 800301e:	bf48      	it	mi
 8003020:	6023      	strmi	r3, [r4, #0]
 8003022:	b91e      	cbnz	r6, 800302c <_printf_i+0x1a4>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	f023 0320 	bic.w	r3, r3, #32
 800302a:	6023      	str	r3, [r4, #0]
 800302c:	2310      	movs	r3, #16
 800302e:	e7a7      	b.n	8002f80 <_printf_i+0xf8>
 8003030:	4824      	ldr	r0, [pc, #144]	; (80030c4 <_printf_i+0x23c>)
 8003032:	e7e4      	b.n	8002ffe <_printf_i+0x176>
 8003034:	4615      	mov	r5, r2
 8003036:	e7bd      	b.n	8002fb4 <_printf_i+0x12c>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	6826      	ldr	r6, [r4, #0]
 800303c:	6961      	ldr	r1, [r4, #20]
 800303e:	1d18      	adds	r0, r3, #4
 8003040:	6028      	str	r0, [r5, #0]
 8003042:	0635      	lsls	r5, r6, #24
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	d501      	bpl.n	800304c <_printf_i+0x1c4>
 8003048:	6019      	str	r1, [r3, #0]
 800304a:	e002      	b.n	8003052 <_printf_i+0x1ca>
 800304c:	0670      	lsls	r0, r6, #25
 800304e:	d5fb      	bpl.n	8003048 <_printf_i+0x1c0>
 8003050:	8019      	strh	r1, [r3, #0]
 8003052:	2300      	movs	r3, #0
 8003054:	6123      	str	r3, [r4, #16]
 8003056:	4615      	mov	r5, r2
 8003058:	e7bc      	b.n	8002fd4 <_printf_i+0x14c>
 800305a:	682b      	ldr	r3, [r5, #0]
 800305c:	1d1a      	adds	r2, r3, #4
 800305e:	602a      	str	r2, [r5, #0]
 8003060:	681d      	ldr	r5, [r3, #0]
 8003062:	6862      	ldr	r2, [r4, #4]
 8003064:	2100      	movs	r1, #0
 8003066:	4628      	mov	r0, r5
 8003068:	f7fd f8d2 	bl	8000210 <memchr>
 800306c:	b108      	cbz	r0, 8003072 <_printf_i+0x1ea>
 800306e:	1b40      	subs	r0, r0, r5
 8003070:	6060      	str	r0, [r4, #4]
 8003072:	6863      	ldr	r3, [r4, #4]
 8003074:	6123      	str	r3, [r4, #16]
 8003076:	2300      	movs	r3, #0
 8003078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800307c:	e7aa      	b.n	8002fd4 <_printf_i+0x14c>
 800307e:	6923      	ldr	r3, [r4, #16]
 8003080:	462a      	mov	r2, r5
 8003082:	4649      	mov	r1, r9
 8003084:	4640      	mov	r0, r8
 8003086:	47d0      	blx	sl
 8003088:	3001      	adds	r0, #1
 800308a:	d0ad      	beq.n	8002fe8 <_printf_i+0x160>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	079b      	lsls	r3, r3, #30
 8003090:	d413      	bmi.n	80030ba <_printf_i+0x232>
 8003092:	68e0      	ldr	r0, [r4, #12]
 8003094:	9b03      	ldr	r3, [sp, #12]
 8003096:	4298      	cmp	r0, r3
 8003098:	bfb8      	it	lt
 800309a:	4618      	movlt	r0, r3
 800309c:	e7a6      	b.n	8002fec <_printf_i+0x164>
 800309e:	2301      	movs	r3, #1
 80030a0:	4632      	mov	r2, r6
 80030a2:	4649      	mov	r1, r9
 80030a4:	4640      	mov	r0, r8
 80030a6:	47d0      	blx	sl
 80030a8:	3001      	adds	r0, #1
 80030aa:	d09d      	beq.n	8002fe8 <_printf_i+0x160>
 80030ac:	3501      	adds	r5, #1
 80030ae:	68e3      	ldr	r3, [r4, #12]
 80030b0:	9903      	ldr	r1, [sp, #12]
 80030b2:	1a5b      	subs	r3, r3, r1
 80030b4:	42ab      	cmp	r3, r5
 80030b6:	dcf2      	bgt.n	800309e <_printf_i+0x216>
 80030b8:	e7eb      	b.n	8003092 <_printf_i+0x20a>
 80030ba:	2500      	movs	r5, #0
 80030bc:	f104 0619 	add.w	r6, r4, #25
 80030c0:	e7f5      	b.n	80030ae <_printf_i+0x226>
 80030c2:	bf00      	nop
 80030c4:	080033e1 	.word	0x080033e1
 80030c8:	080033f2 	.word	0x080033f2

080030cc <__sflush_r>:
 80030cc:	898a      	ldrh	r2, [r1, #12]
 80030ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d2:	4605      	mov	r5, r0
 80030d4:	0710      	lsls	r0, r2, #28
 80030d6:	460c      	mov	r4, r1
 80030d8:	d458      	bmi.n	800318c <__sflush_r+0xc0>
 80030da:	684b      	ldr	r3, [r1, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	dc05      	bgt.n	80030ec <__sflush_r+0x20>
 80030e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	dc02      	bgt.n	80030ec <__sflush_r+0x20>
 80030e6:	2000      	movs	r0, #0
 80030e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030ee:	2e00      	cmp	r6, #0
 80030f0:	d0f9      	beq.n	80030e6 <__sflush_r+0x1a>
 80030f2:	2300      	movs	r3, #0
 80030f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030f8:	682f      	ldr	r7, [r5, #0]
 80030fa:	6a21      	ldr	r1, [r4, #32]
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	d032      	beq.n	8003166 <__sflush_r+0x9a>
 8003100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	d505      	bpl.n	8003114 <__sflush_r+0x48>
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	1ac0      	subs	r0, r0, r3
 800310c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800310e:	b10b      	cbz	r3, 8003114 <__sflush_r+0x48>
 8003110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003112:	1ac0      	subs	r0, r0, r3
 8003114:	2300      	movs	r3, #0
 8003116:	4602      	mov	r2, r0
 8003118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800311a:	6a21      	ldr	r1, [r4, #32]
 800311c:	4628      	mov	r0, r5
 800311e:	47b0      	blx	r6
 8003120:	1c43      	adds	r3, r0, #1
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	d106      	bne.n	8003134 <__sflush_r+0x68>
 8003126:	6829      	ldr	r1, [r5, #0]
 8003128:	291d      	cmp	r1, #29
 800312a:	d82b      	bhi.n	8003184 <__sflush_r+0xb8>
 800312c:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <__sflush_r+0x108>)
 800312e:	410a      	asrs	r2, r1
 8003130:	07d6      	lsls	r6, r2, #31
 8003132:	d427      	bmi.n	8003184 <__sflush_r+0xb8>
 8003134:	2200      	movs	r2, #0
 8003136:	6062      	str	r2, [r4, #4]
 8003138:	04d9      	lsls	r1, r3, #19
 800313a:	6922      	ldr	r2, [r4, #16]
 800313c:	6022      	str	r2, [r4, #0]
 800313e:	d504      	bpl.n	800314a <__sflush_r+0x7e>
 8003140:	1c42      	adds	r2, r0, #1
 8003142:	d101      	bne.n	8003148 <__sflush_r+0x7c>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	b903      	cbnz	r3, 800314a <__sflush_r+0x7e>
 8003148:	6560      	str	r0, [r4, #84]	; 0x54
 800314a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800314c:	602f      	str	r7, [r5, #0]
 800314e:	2900      	cmp	r1, #0
 8003150:	d0c9      	beq.n	80030e6 <__sflush_r+0x1a>
 8003152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003156:	4299      	cmp	r1, r3
 8003158:	d002      	beq.n	8003160 <__sflush_r+0x94>
 800315a:	4628      	mov	r0, r5
 800315c:	f7ff fbea 	bl	8002934 <_free_r>
 8003160:	2000      	movs	r0, #0
 8003162:	6360      	str	r0, [r4, #52]	; 0x34
 8003164:	e7c0      	b.n	80030e8 <__sflush_r+0x1c>
 8003166:	2301      	movs	r3, #1
 8003168:	4628      	mov	r0, r5
 800316a:	47b0      	blx	r6
 800316c:	1c41      	adds	r1, r0, #1
 800316e:	d1c8      	bne.n	8003102 <__sflush_r+0x36>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0c5      	beq.n	8003102 <__sflush_r+0x36>
 8003176:	2b1d      	cmp	r3, #29
 8003178:	d001      	beq.n	800317e <__sflush_r+0xb2>
 800317a:	2b16      	cmp	r3, #22
 800317c:	d101      	bne.n	8003182 <__sflush_r+0xb6>
 800317e:	602f      	str	r7, [r5, #0]
 8003180:	e7b1      	b.n	80030e6 <__sflush_r+0x1a>
 8003182:	89a3      	ldrh	r3, [r4, #12]
 8003184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003188:	81a3      	strh	r3, [r4, #12]
 800318a:	e7ad      	b.n	80030e8 <__sflush_r+0x1c>
 800318c:	690f      	ldr	r7, [r1, #16]
 800318e:	2f00      	cmp	r7, #0
 8003190:	d0a9      	beq.n	80030e6 <__sflush_r+0x1a>
 8003192:	0793      	lsls	r3, r2, #30
 8003194:	680e      	ldr	r6, [r1, #0]
 8003196:	bf08      	it	eq
 8003198:	694b      	ldreq	r3, [r1, #20]
 800319a:	600f      	str	r7, [r1, #0]
 800319c:	bf18      	it	ne
 800319e:	2300      	movne	r3, #0
 80031a0:	eba6 0807 	sub.w	r8, r6, r7
 80031a4:	608b      	str	r3, [r1, #8]
 80031a6:	f1b8 0f00 	cmp.w	r8, #0
 80031aa:	dd9c      	ble.n	80030e6 <__sflush_r+0x1a>
 80031ac:	6a21      	ldr	r1, [r4, #32]
 80031ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031b0:	4643      	mov	r3, r8
 80031b2:	463a      	mov	r2, r7
 80031b4:	4628      	mov	r0, r5
 80031b6:	47b0      	blx	r6
 80031b8:	2800      	cmp	r0, #0
 80031ba:	dc06      	bgt.n	80031ca <__sflush_r+0xfe>
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	e78e      	b.n	80030e8 <__sflush_r+0x1c>
 80031ca:	4407      	add	r7, r0
 80031cc:	eba8 0800 	sub.w	r8, r8, r0
 80031d0:	e7e9      	b.n	80031a6 <__sflush_r+0xda>
 80031d2:	bf00      	nop
 80031d4:	dfbffffe 	.word	0xdfbffffe

080031d8 <_fflush_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	690b      	ldr	r3, [r1, #16]
 80031dc:	4605      	mov	r5, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	b913      	cbnz	r3, 80031e8 <_fflush_r+0x10>
 80031e2:	2500      	movs	r5, #0
 80031e4:	4628      	mov	r0, r5
 80031e6:	bd38      	pop	{r3, r4, r5, pc}
 80031e8:	b118      	cbz	r0, 80031f2 <_fflush_r+0x1a>
 80031ea:	6a03      	ldr	r3, [r0, #32]
 80031ec:	b90b      	cbnz	r3, 80031f2 <_fflush_r+0x1a>
 80031ee:	f7ff f9a9 	bl	8002544 <__sinit>
 80031f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f3      	beq.n	80031e2 <_fflush_r+0xa>
 80031fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031fc:	07d0      	lsls	r0, r2, #31
 80031fe:	d404      	bmi.n	800320a <_fflush_r+0x32>
 8003200:	0599      	lsls	r1, r3, #22
 8003202:	d402      	bmi.n	800320a <_fflush_r+0x32>
 8003204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003206:	f7ff fb92 	bl	800292e <__retarget_lock_acquire_recursive>
 800320a:	4628      	mov	r0, r5
 800320c:	4621      	mov	r1, r4
 800320e:	f7ff ff5d 	bl	80030cc <__sflush_r>
 8003212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003214:	07da      	lsls	r2, r3, #31
 8003216:	4605      	mov	r5, r0
 8003218:	d4e4      	bmi.n	80031e4 <_fflush_r+0xc>
 800321a:	89a3      	ldrh	r3, [r4, #12]
 800321c:	059b      	lsls	r3, r3, #22
 800321e:	d4e1      	bmi.n	80031e4 <_fflush_r+0xc>
 8003220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003222:	f7ff fb85 	bl	8002930 <__retarget_lock_release_recursive>
 8003226:	e7dd      	b.n	80031e4 <_fflush_r+0xc>

08003228 <__swhatbuf_r>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	460c      	mov	r4, r1
 800322c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003230:	2900      	cmp	r1, #0
 8003232:	b096      	sub	sp, #88	; 0x58
 8003234:	4615      	mov	r5, r2
 8003236:	461e      	mov	r6, r3
 8003238:	da0d      	bge.n	8003256 <__swhatbuf_r+0x2e>
 800323a:	89a3      	ldrh	r3, [r4, #12]
 800323c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003240:	f04f 0100 	mov.w	r1, #0
 8003244:	bf0c      	ite	eq
 8003246:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800324a:	2340      	movne	r3, #64	; 0x40
 800324c:	2000      	movs	r0, #0
 800324e:	6031      	str	r1, [r6, #0]
 8003250:	602b      	str	r3, [r5, #0]
 8003252:	b016      	add	sp, #88	; 0x58
 8003254:	bd70      	pop	{r4, r5, r6, pc}
 8003256:	466a      	mov	r2, sp
 8003258:	f000 f848 	bl	80032ec <_fstat_r>
 800325c:	2800      	cmp	r0, #0
 800325e:	dbec      	blt.n	800323a <__swhatbuf_r+0x12>
 8003260:	9901      	ldr	r1, [sp, #4]
 8003262:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003266:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800326a:	4259      	negs	r1, r3
 800326c:	4159      	adcs	r1, r3
 800326e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003272:	e7eb      	b.n	800324c <__swhatbuf_r+0x24>

08003274 <__smakebuf_r>:
 8003274:	898b      	ldrh	r3, [r1, #12]
 8003276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003278:	079d      	lsls	r5, r3, #30
 800327a:	4606      	mov	r6, r0
 800327c:	460c      	mov	r4, r1
 800327e:	d507      	bpl.n	8003290 <__smakebuf_r+0x1c>
 8003280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	6123      	str	r3, [r4, #16]
 8003288:	2301      	movs	r3, #1
 800328a:	6163      	str	r3, [r4, #20]
 800328c:	b002      	add	sp, #8
 800328e:	bd70      	pop	{r4, r5, r6, pc}
 8003290:	ab01      	add	r3, sp, #4
 8003292:	466a      	mov	r2, sp
 8003294:	f7ff ffc8 	bl	8003228 <__swhatbuf_r>
 8003298:	9900      	ldr	r1, [sp, #0]
 800329a:	4605      	mov	r5, r0
 800329c:	4630      	mov	r0, r6
 800329e:	f7ff fbb5 	bl	8002a0c <_malloc_r>
 80032a2:	b948      	cbnz	r0, 80032b8 <__smakebuf_r+0x44>
 80032a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a8:	059a      	lsls	r2, r3, #22
 80032aa:	d4ef      	bmi.n	800328c <__smakebuf_r+0x18>
 80032ac:	f023 0303 	bic.w	r3, r3, #3
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	81a3      	strh	r3, [r4, #12]
 80032b6:	e7e3      	b.n	8003280 <__smakebuf_r+0xc>
 80032b8:	89a3      	ldrh	r3, [r4, #12]
 80032ba:	6020      	str	r0, [r4, #0]
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	81a3      	strh	r3, [r4, #12]
 80032c2:	9b00      	ldr	r3, [sp, #0]
 80032c4:	6163      	str	r3, [r4, #20]
 80032c6:	9b01      	ldr	r3, [sp, #4]
 80032c8:	6120      	str	r0, [r4, #16]
 80032ca:	b15b      	cbz	r3, 80032e4 <__smakebuf_r+0x70>
 80032cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032d0:	4630      	mov	r0, r6
 80032d2:	f000 f81d 	bl	8003310 <_isatty_r>
 80032d6:	b128      	cbz	r0, 80032e4 <__smakebuf_r+0x70>
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	81a3      	strh	r3, [r4, #12]
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	431d      	orrs	r5, r3
 80032e8:	81a5      	strh	r5, [r4, #12]
 80032ea:	e7cf      	b.n	800328c <__smakebuf_r+0x18>

080032ec <_fstat_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4d07      	ldr	r5, [pc, #28]	; (800330c <_fstat_r+0x20>)
 80032f0:	2300      	movs	r3, #0
 80032f2:	4604      	mov	r4, r0
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	602b      	str	r3, [r5, #0]
 80032fa:	f7fd fc26 	bl	8000b4a <_fstat>
 80032fe:	1c43      	adds	r3, r0, #1
 8003300:	d102      	bne.n	8003308 <_fstat_r+0x1c>
 8003302:	682b      	ldr	r3, [r5, #0]
 8003304:	b103      	cbz	r3, 8003308 <_fstat_r+0x1c>
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	bd38      	pop	{r3, r4, r5, pc}
 800330a:	bf00      	nop
 800330c:	20000220 	.word	0x20000220

08003310 <_isatty_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4d06      	ldr	r5, [pc, #24]	; (800332c <_isatty_r+0x1c>)
 8003314:	2300      	movs	r3, #0
 8003316:	4604      	mov	r4, r0
 8003318:	4608      	mov	r0, r1
 800331a:	602b      	str	r3, [r5, #0]
 800331c:	f7fd fc25 	bl	8000b6a <_isatty>
 8003320:	1c43      	adds	r3, r0, #1
 8003322:	d102      	bne.n	800332a <_isatty_r+0x1a>
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	b103      	cbz	r3, 800332a <_isatty_r+0x1a>
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	bd38      	pop	{r3, r4, r5, pc}
 800332c:	20000220 	.word	0x20000220

08003330 <_sbrk_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	4d06      	ldr	r5, [pc, #24]	; (800334c <_sbrk_r+0x1c>)
 8003334:	2300      	movs	r3, #0
 8003336:	4604      	mov	r4, r0
 8003338:	4608      	mov	r0, r1
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	f7fd fc2e 	bl	8000b9c <_sbrk>
 8003340:	1c43      	adds	r3, r0, #1
 8003342:	d102      	bne.n	800334a <_sbrk_r+0x1a>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	b103      	cbz	r3, 800334a <_sbrk_r+0x1a>
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	20000220 	.word	0x20000220

08003350 <_init>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	bf00      	nop
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr

0800335c <_fini>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr
