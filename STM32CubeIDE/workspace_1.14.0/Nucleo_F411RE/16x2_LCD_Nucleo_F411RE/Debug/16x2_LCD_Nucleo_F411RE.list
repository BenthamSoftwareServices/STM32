
16x2_LCD_Nucleo_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003034  08003034  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800303c  0800303c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000070  080030b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080030b4  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d57  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ae  00000000  00000000  00029df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016707  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c6a  00000000  00000000  00042d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ca5  00000000  00000000  0004ca09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d36ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002558  00000000  00000000  000d3704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f48 	.word	0x08002f48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08002f48 	.word	0x08002f48

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here according to I2C port being used

#define SLAVE_ADDRESS_LCD 0x4E // change this according to your setup

void lcd_send_cmd (char cmd)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	f023 030f 	bic.w	r3, r3, #15
 80004e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	011b      	lsls	r3, r3, #4
 80004e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	f043 030c 	orr.w	r3, r3, #12
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	f043 0308 	orr.w	r3, r3, #8
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004fc:	7bbb      	ldrb	r3, [r7, #14]
 80004fe:	f043 030c 	orr.w	r3, r3, #12
 8000502:	b2db      	uxtb	r3, r3
 8000504:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000506:	7bbb      	ldrb	r3, [r7, #14]
 8000508:	f043 0308 	orr.w	r3, r3, #8
 800050c:	b2db      	uxtb	r3, r3
 800050e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000510:	f107 0208 	add.w	r2, r7, #8
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2304      	movs	r3, #4
 800051a:	214e      	movs	r1, #78	; 0x4e
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <lcd_send_cmd+0x5c>)
 800051e:	f001 f8b3 	bl	8001688 <HAL_I2C_Master_Transmit>
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000b0 	.word	0x200000b0

08000530 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af02      	add	r7, sp, #8
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	f023 030f 	bic.w	r3, r3, #15
 8000540:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f043 030d 	orr.w	r3, r3, #13
 800054e:	b2db      	uxtb	r3, r3
 8000550:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	f043 0309 	orr.w	r3, r3, #9
 8000558:	b2db      	uxtb	r3, r3
 800055a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800055c:	7bbb      	ldrb	r3, [r7, #14]
 800055e:	f043 030d 	orr.w	r3, r3, #13
 8000562:	b2db      	uxtb	r3, r3
 8000564:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	f043 0309 	orr.w	r3, r3, #9
 800056c:	b2db      	uxtb	r3, r3
 800056e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000570:	f107 0208 	add.w	r2, r7, #8
 8000574:	2364      	movs	r3, #100	; 0x64
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2304      	movs	r3, #4
 800057a:	214e      	movs	r1, #78	; 0x4e
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <lcd_send_data+0x5c>)
 800057e:	f001 f883 	bl	8001688 <HAL_I2C_Master_Transmit>
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200000b0 	.word	0x200000b0

08000590 <lcd_clear>:

void lcd_clear (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000596:	2080      	movs	r0, #128	; 0x80
 8000598:	f7ff ff9a 	bl	80004d0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	e005      	b.n	80005ae <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80005a2:	2020      	movs	r0, #32
 80005a4:	f7ff ffc4 	bl	8000530 <lcd_send_data>
	for (int i=0; i<70; i++)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3301      	adds	r3, #1
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b45      	cmp	r3, #69	; 0x45
 80005b2:	ddf6      	ble.n	80005a2 <lcd_clear+0x12>
	}
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
    switch (row)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d003      	beq.n	80005d6 <lcd_put_cur+0x18>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d005      	beq.n	80005e0 <lcd_put_cur+0x22>
 80005d4:	e009      	b.n	80005ea <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	603b      	str	r3, [r7, #0]
            break;
 80005de:	e004      	b.n	80005ea <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005e6:	603b      	str	r3, [r7, #0]
            break;
 80005e8:	bf00      	nop
    }

    lcd_send_cmd (col);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff6e 	bl	80004d0 <lcd_send_cmd>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <lcd_init>:


void lcd_init (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000600:	2032      	movs	r0, #50	; 0x32
 8000602:	f000 fc31 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000606:	2030      	movs	r0, #48	; 0x30
 8000608:	f7ff ff62 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800060c:	2005      	movs	r0, #5
 800060e:	f000 fc2b 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000612:	2030      	movs	r0, #48	; 0x30
 8000614:	f7ff ff5c 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fc25 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x30);
 800061e:	2030      	movs	r0, #48	; 0x30
 8000620:	f7ff ff56 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fc1f 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800062a:	2020      	movs	r0, #32
 800062c:	f7ff ff50 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(10);
 8000630:	200a      	movs	r0, #10
 8000632:	f000 fc19 	bl	8000e68 <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000636:	2028      	movs	r0, #40	; 0x28
 8000638:	f7ff ff4a 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fc13 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000642:	2008      	movs	r0, #8
 8000644:	f7ff ff44 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fc0d 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff ff3e 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 fc07 	bl	8000e68 <HAL_Delay>
	HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fc04 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000660:	2006      	movs	r0, #6
 8000662:	f7ff ff35 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);
 8000666:	2001      	movs	r0, #1
 8000668:	f000 fbfe 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800066c:	200c      	movs	r0, #12
 800066e:	f7ff ff2f 	bl	80004d0 <lcd_send_cmd>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}

08000676 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800067e:	e006      	b.n	800068e <lcd_send_string+0x18>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	607a      	str	r2, [r7, #4]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff51 	bl	8000530 <lcd_send_data>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1f4      	bne.n	8000680 <lcd_send_string+0xa>
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d013      	beq.n	80006e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00b      	beq.n	80006e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006c8:	e000      	b.n	80006cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80006ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d0f9      	beq.n	80006ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fb46 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f8ac 	bl	8000854 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	ITM_Port32(31) = 1;
 80006fc:	4b47      	ldr	r3, [pc, #284]	; (800081c <main+0x12c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f000 f93f 	bl	8000984 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000706:	f000 f90f 	bl	8000928 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	printf("GPIO Init Done \r\n");
 800070a:	4845      	ldr	r0, [pc, #276]	; (8000820 <main+0x130>)
 800070c:	f001 ffc4 	bl	8002698 <puts>
	ITM_Port32(31) = 2;
 8000710:	4b42      	ldr	r3, [pc, #264]	; (800081c <main+0x12c>)
 8000712:	2202      	movs	r2, #2
 8000714:	601a      	str	r2, [r3, #0]

	//lcd_send_cmd(cmd)
	HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f000 fba5 	bl	8000e68 <HAL_Delay>
	lcd_init();
 800071e:	f7ff ff6d 	bl	80005fc <lcd_init>
	HAL_Delay(500);
 8000722:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000726:	f000 fb9f 	bl	8000e68 <HAL_Delay>
	lcd_put_cur(0, 0);
 800072a:	2100      	movs	r1, #0
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff ff46 	bl	80005be <lcd_put_cur>
	HAL_Delay(500);
 8000732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000736:	f000 fb97 	bl	8000e68 <HAL_Delay>
	lcd_send_string("Setting up");
 800073a:	483a      	ldr	r0, [pc, #232]	; (8000824 <main+0x134>)
 800073c:	f7ff ff9b 	bl	8000676 <lcd_send_string>
	HAL_Delay(500);
 8000740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000744:	f000 fb90 	bl	8000e68 <HAL_Delay>
	lcd_put_cur(1, 0);
 8000748:	2100      	movs	r1, #0
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff ff37 	bl	80005be <lcd_put_cur>
	lcd_send_string("The display");
 8000750:	4835      	ldr	r0, [pc, #212]	; (8000828 <main+0x138>)
 8000752:	f7ff ff90 	bl	8000676 <lcd_send_string>
	HAL_Delay(2000);
 8000756:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800075a:	f000 fb85 	bl	8000e68 <HAL_Delay>
	lcd_clear();
 800075e:	f7ff ff17 	bl	8000590 <lcd_clear>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		printf("I'm in the main loop!\r\n");
 8000762:	4832      	ldr	r0, [pc, #200]	; (800082c <main+0x13c>)
 8000764:	f001 ff98 	bl	8002698 <puts>
		HAL_Delay(500);
 8000768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076c:	f000 fb7c 	bl	8000e68 <HAL_Delay>
		lcd_put_cur(0, 0);
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff ff23 	bl	80005be <lcd_put_cur>
		HAL_Delay(500);
 8000778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077c:	f000 fb74 	bl	8000e68 <HAL_Delay>
		lcd_send_string("Line 1 text");
 8000780:	482b      	ldr	r0, [pc, #172]	; (8000830 <main+0x140>)
 8000782:	f7ff ff78 	bl	8000676 <lcd_send_string>
		HAL_Delay(500);
 8000786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078a:	f000 fb6d 	bl	8000e68 <HAL_Delay>
		lcd_put_cur(1, 0);
 800078e:	2100      	movs	r1, #0
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ff14 	bl	80005be <lcd_put_cur>
		HAL_Delay(500);
 8000796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079a:	f000 fb65 	bl	8000e68 <HAL_Delay>
		lcd_send_string("Line 2");
 800079e:	4825      	ldr	r0, [pc, #148]	; (8000834 <main+0x144>)
 80007a0:	f7ff ff69 	bl	8000676 <lcd_send_string>
		HAL_Delay(500);
 80007a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a8:	f000 fb5e 	bl	8000e68 <HAL_Delay>
		lcd_clear();
 80007ac:	f7ff fef0 	bl	8000590 <lcd_clear>

		// Toggle onboard green LED
		HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 fb58 	bl	8000e68 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007b8:	2120      	movs	r1, #32
 80007ba:	481f      	ldr	r0, [pc, #124]	; (8000838 <main+0x148>)
 80007bc:	f000 fe05 	bl	80013ca <HAL_GPIO_TogglePin>

		a++;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <main+0x14c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <main+0x14c>)
 80007ca:	701a      	strb	r2, [r3, #0]

		tickstart = HAL_GetTick();
 80007cc:	f000 fb40 	bl	8000e50 <HAL_GetTick>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <main+0x150>)
 80007d6:	601a      	str	r2, [r3, #0]

		HAL_Delay(1000);
 80007d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007dc:	f000 fb44 	bl	8000e68 <HAL_Delay>

		tickend = HAL_GetTick();
 80007e0:	f000 fb36 	bl	8000e50 <HAL_GetTick>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <main+0x154>)
 80007ea:	601a      	str	r2, [r3, #0]

		tickdiff = tickend - tickstart;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <main+0x154>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <main+0x150>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <main+0x158>)
 80007f8:	6013      	str	r3, [r2, #0]

		HALver = HAL_GetHalVersion();
 80007fa:	f000 fb59 	bl	8000eb0 <HAL_GetHalVersion>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <main+0x15c>)
 8000804:	601a      	str	r2, [r3, #0]

		counter++;
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <main+0x160>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <main+0x160>)
 800080e:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 8000810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000814:	f000 fb28 	bl	8000e68 <HAL_Delay>
		printf("I'm in the main loop!\r\n");
 8000818:	e7a3      	b.n	8000762 <main+0x72>
 800081a:	bf00      	nop
 800081c:	e000007c 	.word	0xe000007c
 8000820:	08002f60 	.word	0x08002f60
 8000824:	08002f74 	.word	0x08002f74
 8000828:	08002f80 	.word	0x08002f80
 800082c:	08002f8c 	.word	0x08002f8c
 8000830:	08002fa4 	.word	0x08002fa4
 8000834:	08002fb0 	.word	0x08002fb0
 8000838:	40020000 	.word	0x40020000
 800083c:	20000090 	.word	0x20000090
 8000840:	20000094 	.word	0x20000094
 8000844:	20000098 	.word	0x20000098
 8000848:	2000009c 	.word	0x2000009c
 800084c:	200000a0 	.word	0x200000a0
 8000850:	2000008c 	.word	0x2000008c

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2230      	movs	r2, #48	; 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fea2 	bl	80025ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <SystemClock_Config+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a27      	ldr	r2, [pc, #156]	; (8000920 <SystemClock_Config+0xcc>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <SystemClock_Config+0xcc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <SystemClock_Config+0xd0>)
 800089e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <SystemClock_Config+0xd0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008c4:	2310      	movs	r3, #16
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f9dc 	bl	8001c98 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008e6:	f000 f8d9 	bl	8000a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2102      	movs	r1, #2
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fc3e 	bl	8002188 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000912:	f000 f8c3 	bl	8000a9c <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	; 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_I2C1_Init+0x50>)
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <MX_I2C1_Init+0x54>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_I2C1_Init+0x50>)
 8000934:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_I2C1_Init+0x58>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_I2C1_Init+0x50>)
 8000946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800094a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_I2C1_Init+0x50>)
 8000966:	f000 fd4b 	bl	8001400 <HAL_I2C_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 f894 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000b0 	.word	0x200000b0
 800097c:	40005400 	.word	0x40005400
 8000980:	000186a0 	.word	0x000186a0

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a25      	ldr	r2, [pc, #148]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <MX_GPIO_Init+0xd0>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_GPIO_Init+0xd4>)
 8000a10:	f000 fcc2 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_GPIO_Init+0xd8>)
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_GPIO_Init+0xdc>)
 8000a2a:	f000 fb31 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a2e:	2320      	movs	r3, #32
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_GPIO_Init+0xd4>)
 8000a46:	f000 fb23 	bl	8001090 <HAL_GPIO_Init>

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	10210000 	.word	0x10210000
 8000a60:	40020800 	.word	0x40020800

08000a64 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e009      	b.n	8000a8a <_write+0x26>
		ITM_SendChar(*ptr++);
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	60ba      	str	r2, [r7, #8]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe0e 	bl	80006a0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3301      	adds	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	dbf1      	blt.n	8000a76 <_write+0x12>
	}
	return len;
 8000a92:	687b      	ldr	r3, [r7, #4]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae6:	2007      	movs	r0, #7
 8000ae8:	f000 fa9e 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <HAL_I2C_MspInit+0xa4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d13b      	bne.n	8000b92 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_I2C_MspInit+0xa8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <HAL_I2C_MspInit+0xa8>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_I2C_MspInit+0xa8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b46:	2304      	movs	r3, #4
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <HAL_I2C_MspInit+0xac>)
 8000b52:	f000 fa9d 	bl	8001090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5a:	2312      	movs	r3, #18
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b66:	2304      	movs	r3, #4
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <HAL_I2C_MspInit+0xac>)
 8000b72:	f000 fa8d 	bl	8001090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_I2C_MspInit+0xa8>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_I2C_MspInit+0xa8>)
 8000b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_I2C_MspInit+0xa8>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f918 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_read>:
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	e00a      	b.n	8000c24 <_read+0x28>
 8000c0e:	f3af 8000 	nop.w
 8000c12:	4601      	mov	r1, r0
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	b2ca      	uxtb	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dbf0      	blt.n	8000c0e <_read+0x12>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_close>:
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <_fstat>:
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	2300      	movs	r3, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_isatty>:
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	2301      	movs	r3, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_lseek>:
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	2300      	movs	r3, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <_sbrk>:
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
 8000cd0:	f001 fc42 	bl	8002558 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20020000 	.word	0x20020000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	200000a4 	.word	0x200000a4
 8000d08:	20000118 	.word	0x20000118

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x12>
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1e>)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:
 8000d3e:	58d4      	ldr	r4, [r2, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:
 8000d44:	18c4      	adds	r4, r0, r3
 8000d46:	428c      	cmp	r4, r1
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x22>)
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopFillZerobss+0x26>)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:
 8000d56:	42a2      	cmp	r2, r4
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>
 8000d5a:	f7ff ffd7 	bl	8000d0c <SystemInit>
 8000d5e:	f001 fc01 	bl	8002564 <__libc_init_array>
 8000d62:	f7ff fcc5 	bl	80006f0 <main>
 8000d66:	4770      	bx	lr
 8000d68:	20020000 	.word	0x20020000
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000070 	.word	0x20000070
 8000d74:	08003044 	.word	0x08003044
 8000d78:	20000070 	.word	0x20000070
 8000d7c:	20000118 	.word	0x20000118

08000d80 <ADC_IRQHandler>:
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f93b 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fe76 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f945 	bl	8001076 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f91b 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000104 	.word	0x20000104

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000104 	.word	0x20000104

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8000eb4:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <HAL_GetHalVersion+0x10>)
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	01070c00 	.word	0x01070c00

08000ec4 <__NVIC_SetPriorityGrouping>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_SetPriority>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff47 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff5c 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffb0 	bl	8000fe4 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e159      	b.n	8001360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 8148 	bne.w	800135a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80a2 	beq.w	800135a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b57      	ldr	r3, [pc, #348]	; (8001378 <HAL_GPIO_Init+0x2e8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a56      	ldr	r2, [pc, #344]	; (8001378 <HAL_GPIO_Init+0x2e8>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b54      	ldr	r3, [pc, #336]	; (8001378 <HAL_GPIO_Init+0x2e8>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001232:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_GPIO_Init+0x2ec>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a49      	ldr	r2, [pc, #292]	; (8001380 <HAL_GPIO_Init+0x2f0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x202>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a48      	ldr	r2, [pc, #288]	; (8001384 <HAL_GPIO_Init+0x2f4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x1fe>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a47      	ldr	r2, [pc, #284]	; (8001388 <HAL_GPIO_Init+0x2f8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x1fa>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a46      	ldr	r2, [pc, #280]	; (800138c <HAL_GPIO_Init+0x2fc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x1f6>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a45      	ldr	r2, [pc, #276]	; (8001390 <HAL_GPIO_Init+0x300>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x1f2>
 800127e:	2304      	movs	r3, #4
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001282:	2307      	movs	r3, #7
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x2ec>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_GPIO_Init+0x304>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x304>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_GPIO_Init+0x304>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132a:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <HAL_GPIO_Init+0x304>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f aea2 	bls.w	80010ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013dc:	887a      	ldrh	r2, [r7, #2]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	041a      	lsls	r2, r3, #16
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	400b      	ands	r3, r1
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e12b      	b.n	800166a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fb66 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001464:	f001 f864 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8001468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a81      	ldr	r2, [pc, #516]	; (8001674 <HAL_I2C_Init+0x274>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d807      	bhi.n	8001484 <HAL_I2C_Init+0x84>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4a80      	ldr	r2, [pc, #512]	; (8001678 <HAL_I2C_Init+0x278>)
 8001478:	4293      	cmp	r3, r2
 800147a:	bf94      	ite	ls
 800147c:	2301      	movls	r3, #1
 800147e:	2300      	movhi	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	e006      	b.n	8001492 <HAL_I2C_Init+0x92>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a7d      	ldr	r2, [pc, #500]	; (800167c <HAL_I2C_Init+0x27c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	bf94      	ite	ls
 800148c:	2301      	movls	r3, #1
 800148e:	2300      	movhi	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e0e7      	b.n	800166a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4a78      	ldr	r2, [pc, #480]	; (8001680 <HAL_I2C_Init+0x280>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9b      	lsrs	r3, r3, #18
 80014a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a6a      	ldr	r2, [pc, #424]	; (8001674 <HAL_I2C_Init+0x274>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d802      	bhi.n	80014d4 <HAL_I2C_Init+0xd4>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3301      	adds	r3, #1
 80014d2:	e009      	b.n	80014e8 <HAL_I2C_Init+0xe8>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	4a69      	ldr	r2, [pc, #420]	; (8001684 <HAL_I2C_Init+0x284>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	3301      	adds	r3, #1
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	495c      	ldr	r1, [pc, #368]	; (8001674 <HAL_I2C_Init+0x274>)
 8001504:	428b      	cmp	r3, r1
 8001506:	d819      	bhi.n	800153c <HAL_I2C_Init+0x13c>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1e59      	subs	r1, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fbb1 f3f3 	udiv	r3, r1, r3
 8001516:	1c59      	adds	r1, r3, #1
 8001518:	f640 73fc 	movw	r3, #4092	; 0xffc
 800151c:	400b      	ands	r3, r1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00a      	beq.n	8001538 <HAL_I2C_Init+0x138>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1e59      	subs	r1, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	e051      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 8001538:	2304      	movs	r3, #4
 800153a:	e04f      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d111      	bne.n	8001568 <HAL_I2C_Init+0x168>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	440b      	add	r3, r1
 8001552:	fbb0 f3f3 	udiv	r3, r0, r3
 8001556:	3301      	adds	r3, #1
 8001558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	e012      	b.n	800158e <HAL_I2C_Init+0x18e>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	0099      	lsls	r1, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	fbb0 f3f3 	udiv	r3, r0, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Init+0x196>
 8001592:	2301      	movs	r3, #1
 8001594:	e022      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10e      	bne.n	80015bc <HAL_I2C_Init+0x1bc>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1e58      	subs	r0, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6859      	ldr	r1, [r3, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ba:	e00f      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	0099      	lsls	r1, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	6809      	ldr	r1, [r1, #0]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800160a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6911      	ldr	r1, [r2, #16]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68d2      	ldr	r2, [r2, #12]
 8001616:	4311      	orrs	r1, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	430b      	orrs	r3, r1
 800161e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2220      	movs	r2, #32
 8001656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	000186a0 	.word	0x000186a0
 8001678:	001e847f 	.word	0x001e847f
 800167c:	003d08ff 	.word	0x003d08ff
 8001680:	431bde83 	.word	0x431bde83
 8001684:	10624dd3 	.word	0x10624dd3

08001688 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	461a      	mov	r2, r3
 8001694:	460b      	mov	r3, r1
 8001696:	817b      	strh	r3, [r7, #10]
 8001698:	4613      	mov	r3, r2
 800169a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff fbd8 	bl	8000e50 <HAL_GetTick>
 80016a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	f040 80e0 	bne.w	8001870 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2319      	movs	r3, #25
 80016b6:	2201      	movs	r2, #1
 80016b8:	4970      	ldr	r1, [pc, #448]	; (800187c <HAL_I2C_Master_Transmit+0x1f4>)
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f964 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
 80016c8:	e0d3      	b.n	8001872 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_I2C_Master_Transmit+0x50>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e0cc      	b.n	8001872 <HAL_I2C_Master_Transmit+0x1ea>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d007      	beq.n	80016fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2221      	movs	r2, #33	; 0x21
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2210      	movs	r2, #16
 800171a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	893a      	ldrh	r2, [r7, #8]
 800172e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4a50      	ldr	r2, [pc, #320]	; (8001880 <HAL_I2C_Master_Transmit+0x1f8>)
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001740:	8979      	ldrh	r1, [r7, #10]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	6a3a      	ldr	r2, [r7, #32]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f89c 	bl	8001884 <I2C_MasterRequestWrite>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e08d      	b.n	8001872 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800176c:	e066      	b.n	800183c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	6a39      	ldr	r1, [r7, #32]
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 f9de 	bl	8001b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00d      	beq.n	800179a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	2b04      	cmp	r3, #4
 8001784:	d107      	bne.n	8001796 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001794:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06b      	b.n	8001872 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	781a      	ldrb	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d11b      	bne.n	8001810 <HAL_I2C_Master_Transmit+0x188>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d017      	beq.n	8001810 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	6a39      	ldr	r1, [r7, #32]
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f9ce 	bl	8001bb6 <I2C_WaitOnBTFFlagUntilTimeout>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00d      	beq.n	800183c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	2b04      	cmp	r3, #4
 8001826:	d107      	bne.n	8001838 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001836:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e01a      	b.n	8001872 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	d194      	bne.n	800176e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2220      	movs	r2, #32
 8001858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	e000      	b.n	8001872 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001870:	2302      	movs	r3, #2
  }
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	00100002 	.word	0x00100002
 8001880:	ffff0000 	.word	0xffff0000

08001884 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af02      	add	r7, sp, #8
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	460b      	mov	r3, r1
 8001892:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b08      	cmp	r3, #8
 800189e:	d006      	beq.n	80018ae <I2C_MasterRequestWrite+0x2a>
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d003      	beq.n	80018ae <I2C_MasterRequestWrite+0x2a>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018ac:	d108      	bne.n	80018c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e00b      	b.n	80018d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	2b12      	cmp	r3, #18
 80018c6:	d107      	bne.n	80018d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f84f 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00d      	beq.n	800190c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018fe:	d103      	bne.n	8001908 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e035      	b.n	8001978 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001914:	d108      	bne.n	8001928 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001916:	897b      	ldrh	r3, [r7, #10]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001924:	611a      	str	r2, [r3, #16]
 8001926:	e01b      	b.n	8001960 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001928:	897b      	ldrh	r3, [r7, #10]
 800192a:	11db      	asrs	r3, r3, #7
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f003 0306 	and.w	r3, r3, #6
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f063 030f 	orn	r3, r3, #15
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	490e      	ldr	r1, [pc, #56]	; (8001980 <I2C_MasterRequestWrite+0xfc>)
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f875 	bl	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e010      	b.n	8001978 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001956:	897b      	ldrh	r3, [r7, #10]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <I2C_MasterRequestWrite+0x100>)
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 f865 	bl	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	00010008 	.word	0x00010008
 8001984:	00010002 	.word	0x00010002

08001988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001998:	e025      	b.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d021      	beq.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a2:	f7ff fa55 	bl	8000e50 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d302      	bcc.n	80019b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d116      	bne.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f043 0220 	orr.w	r2, r3, #32
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e023      	b.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d10d      	bne.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0x84>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4013      	ands	r3, r2
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	e00c      	b.n	8001a26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4013      	ands	r3, r2
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d0b6      	beq.n	800199a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a44:	e051      	b.n	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a54:	d123      	bne.n	8001a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f043 0204 	orr.w	r2, r3, #4
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e046      	b.n	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d021      	beq.n	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa6:	f7ff f9d3 	bl	8000e50 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d302      	bcc.n	8001abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d116      	bne.n	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f043 0220 	orr.w	r2, r3, #32
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e020      	b.n	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d10c      	bne.n	8001b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4013      	ands	r3, r2
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bf14      	ite	ne
 8001b06:	2301      	movne	r3, #1
 8001b08:	2300      	moveq	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	e00b      	b.n	8001b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	43da      	mvns	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf14      	ite	ne
 8001b20:	2301      	movne	r3, #1
 8001b22:	2300      	moveq	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d18d      	bne.n	8001a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b40:	e02d      	b.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f878 	bl	8001c38 <I2C_IsAcknowledgeFailed>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e02d      	b.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d021      	beq.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff f979 	bl	8000e50 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d116      	bne.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f043 0220 	orr.w	r2, r3, #32
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e007      	b.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	2b80      	cmp	r3, #128	; 0x80
 8001baa:	d1ca      	bne.n	8001b42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bc2:	e02d      	b.n	8001c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f837 	bl	8001c38 <I2C_IsAcknowledgeFailed>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e02d      	b.n	8001c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bda:	d021      	beq.n	8001c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bdc:	f7ff f938 	bl	8000e50 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d302      	bcc.n	8001bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f043 0220 	orr.w	r2, r3, #32
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e007      	b.n	8001c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d1ca      	bne.n	8001bc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4e:	d11b      	bne.n	8001c88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e264      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d075      	beq.n	8001da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb6:	4ba3      	ldr	r3, [pc, #652]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d00c      	beq.n	8001cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc2:	4ba0      	ldr	r3, [pc, #640]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d112      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cce:	4b9d      	ldr	r3, [pc, #628]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cda:	d10b      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	4b99      	ldr	r3, [pc, #612]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d05b      	beq.n	8001da0 <HAL_RCC_OscConfig+0x108>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d157      	bne.n	8001da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e23f      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x74>
 8001cfe:	4b91      	ldr	r3, [pc, #580]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a90      	ldr	r2, [pc, #576]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b8b      	ldr	r3, [pc, #556]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a8a      	ldr	r2, [pc, #552]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a87      	ldr	r2, [pc, #540]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d30:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a83      	ldr	r2, [pc, #524]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a80      	ldr	r2, [pc, #512]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff f87e 	bl	8000e50 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff f87a 	bl	8000e50 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e204      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xc0>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff f86a 	bl	8000e50 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff f866 	bl	8000e50 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1f0      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0xe8>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dae:	4b65      	ldr	r3, [pc, #404]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dba:	4b62      	ldr	r3, [pc, #392]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc6:	4b5f      	ldr	r3, [pc, #380]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b5c      	ldr	r3, [pc, #368]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x152>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1c4      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b56      	ldr	r3, [pc, #344]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4952      	ldr	r1, [pc, #328]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e03a      	b.n	8001e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <HAL_RCC_OscConfig+0x2b0>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f81f 	bl	8000e50 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff f81b 	bl	8000e50 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1a5      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4940      	ldr	r1, [pc, #256]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <HAL_RCC_OscConfig+0x2b0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7fe fffe 	bl	8000e50 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e58:	f7fe fffa 	bl	8000e50 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e184      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d030      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d016      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCC_OscConfig+0x2b4>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7fe ffde 	bl	8000e50 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e98:	f7fe ffda 	bl	8000e50 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e164      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x200>
 8001eb6:	e015      	b.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_OscConfig+0x2b4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7fe ffc7 	bl	8000e50 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec6:	f7fe ffc3 	bl	8000e50 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e14d      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80a0 	beq.w	8002032 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10f      	bne.n	8001f22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_OscConfig+0x2b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d121      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_RCC_OscConfig+0x2b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_RCC_OscConfig+0x2b8>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe ff89 	bl	8000e50 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	e011      	b.n	8001f66 <HAL_RCC_OscConfig+0x2ce>
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	42470000 	.word	0x42470000
 8001f4c:	42470e80 	.word	0x42470e80
 8001f50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7fe ff7c 	bl	8000e50 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e106      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b85      	ldr	r3, [pc, #532]	; (800217c <HAL_RCC_OscConfig+0x4e4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d106      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
 8001f7a:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a80      	ldr	r2, [pc, #512]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
 8001f86:	e01c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x32a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_OscConfig+0x312>
 8001f90:	4b7b      	ldr	r3, [pc, #492]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a7a      	ldr	r2, [pc, #488]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	4b78      	ldr	r3, [pc, #480]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	4a77      	ldr	r2, [pc, #476]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x32a>
 8001faa:	4b75      	ldr	r3, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	4a74      	ldr	r2, [pc, #464]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb6:	4b72      	ldr	r3, [pc, #456]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	4a71      	ldr	r2, [pc, #452]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d015      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7fe ff41 	bl	8000e50 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe ff3d 	bl	8000e50 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0c5      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	4b65      	ldr	r3, [pc, #404]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ee      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x33a>
 8001ff4:	e014      	b.n	8002020 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe ff2b 	bl	8000e50 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe ff27 	bl	8000e50 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0af      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	4b5a      	ldr	r3, [pc, #360]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ee      	bne.n	8001ffe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b56      	ldr	r3, [pc, #344]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a55      	ldr	r2, [pc, #340]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 809b 	beq.w	8002172 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203c:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d05c      	beq.n	8002102 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d141      	bne.n	80020d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002050:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_RCC_OscConfig+0x4ec>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe fefb 	bl	8000e50 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe fef7 	bl	8000e50 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e081      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002070:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	019b      	lsls	r3, r3, #6
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	3b01      	subs	r3, #1
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	061b      	lsls	r3, r3, #24
 80020a0:	4937      	ldr	r1, [pc, #220]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a6:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_RCC_OscConfig+0x4ec>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fed0 	bl	8000e50 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fecc 	bl	8000e50 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e056      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x41c>
 80020d2:	e04e      	b.n	8002172 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_RCC_OscConfig+0x4ec>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe feb9 	bl	8000e50 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e2:	f7fe feb5 	bl	8000e50 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e03f      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0x44a>
 8002100:	e037      	b.n	8002172 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e032      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_RCC_OscConfig+0x4e8>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d028      	beq.n	800216e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d121      	bne.n	800216e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d11a      	bne.n	800216e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800213e:	4013      	ands	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002144:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002146:	4293      	cmp	r3, r2
 8002148:	d111      	bne.n	800216e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	3b01      	subs	r3, #1
 8002158:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d107      	bne.n	800216e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40007000 	.word	0x40007000
 8002180:	40023800 	.word	0x40023800
 8002184:	42470060 	.word	0x42470060

08002188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0cc      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b68      	ldr	r3, [pc, #416]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d90c      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b65      	ldr	r3, [pc, #404]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0b8      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a58      	ldr	r2, [pc, #352]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b50      	ldr	r3, [pc, #320]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	494d      	ldr	r1, [pc, #308]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d044      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d119      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e07f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d003      	beq.n	8002246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002242:	2b03      	cmp	r3, #3
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e067      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b37      	ldr	r3, [pc, #220]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4934      	ldr	r1, [pc, #208]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	4313      	orrs	r3, r2
 8002276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7fe fdea 	bl	8000e50 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7fe fde6 	bl	8000e50 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e04f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d20c      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e032      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4916      	ldr	r1, [pc, #88]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	490e      	ldr	r1, [pc, #56]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800230e:	f000 f821 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8002312:	4602      	mov	r2, r0
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	490a      	ldr	r1, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	5ccb      	ldrb	r3, [r1, r3]
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fd4a 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023c00 	.word	0x40023c00
 8002344:	40023800 	.word	0x40023800
 8002348:	08002fb8 	.word	0x08002fb8
 800234c:	20000000 	.word	0x20000000
 8002350:	20000004 	.word	0x20000004

08002354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002354:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	2300      	movs	r3, #0
 8002366:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800236c:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d00d      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x40>
 8002378:	2b08      	cmp	r3, #8
 800237a:	f200 80bd 	bhi.w	80024f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x34>
 8002382:	2b04      	cmp	r3, #4
 8002384:	d003      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x3a>
 8002386:	e0b7      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b61      	ldr	r3, [pc, #388]	; (8002510 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800238a:	60bb      	str	r3, [r7, #8]
       break;
 800238c:	e0b7      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800238e:	4b61      	ldr	r3, [pc, #388]	; (8002514 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002390:	60bb      	str	r3, [r7, #8]
      break;
 8002392:	e0b4      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002394:	4b5d      	ldr	r3, [pc, #372]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800239c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800239e:	4b5b      	ldr	r3, [pc, #364]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d04d      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023aa:	4b58      	ldr	r3, [pc, #352]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	461a      	mov	r2, r3
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	ea02 0800 	and.w	r8, r2, r0
 80023c2:	ea03 0901 	and.w	r9, r3, r1
 80023c6:	4640      	mov	r0, r8
 80023c8:	4649      	mov	r1, r9
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	014b      	lsls	r3, r1, #5
 80023d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023d8:	0142      	lsls	r2, r0, #5
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	ebb0 0008 	subs.w	r0, r0, r8
 80023e2:	eb61 0109 	sbc.w	r1, r1, r9
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	018b      	lsls	r3, r1, #6
 80023f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023f4:	0182      	lsls	r2, r0, #6
 80023f6:	1a12      	subs	r2, r2, r0
 80023f8:	eb63 0301 	sbc.w	r3, r3, r1
 80023fc:	f04f 0000 	mov.w	r0, #0
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	00d9      	lsls	r1, r3, #3
 8002406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800240a:	00d0      	lsls	r0, r2, #3
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	eb12 0208 	adds.w	r2, r2, r8
 8002414:	eb43 0309 	adc.w	r3, r3, r9
 8002418:	f04f 0000 	mov.w	r0, #0
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	0259      	lsls	r1, r3, #9
 8002422:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002426:	0250      	lsls	r0, r2, #9
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	f7fd fece 	bl	80001d8 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4613      	mov	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e04a      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002446:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	461a      	mov	r2, r3
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	ea02 0400 	and.w	r4, r2, r0
 800245e:	ea03 0501 	and.w	r5, r3, r1
 8002462:	4620      	mov	r0, r4
 8002464:	4629      	mov	r1, r5
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	014b      	lsls	r3, r1, #5
 8002470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002474:	0142      	lsls	r2, r0, #5
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	1b00      	subs	r0, r0, r4
 800247c:	eb61 0105 	sbc.w	r1, r1, r5
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	018b      	lsls	r3, r1, #6
 800248a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800248e:	0182      	lsls	r2, r0, #6
 8002490:	1a12      	subs	r2, r2, r0
 8002492:	eb63 0301 	sbc.w	r3, r3, r1
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	00d9      	lsls	r1, r3, #3
 80024a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a4:	00d0      	lsls	r0, r2, #3
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	1912      	adds	r2, r2, r4
 80024ac:	eb45 0303 	adc.w	r3, r5, r3
 80024b0:	f04f 0000 	mov.w	r0, #0
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	0299      	lsls	r1, r3, #10
 80024ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024be:	0290      	lsls	r0, r2, #10
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	f7fd fe82 	bl	80001d8 <__aeabi_uldivmod>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4613      	mov	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	3301      	adds	r3, #1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	60bb      	str	r3, [r7, #8]
      break;
 80024f6:	e002      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024fa:	60bb      	str	r3, [r7, #8]
      break;
 80024fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fe:	68bb      	ldr	r3, [r7, #8]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	00f42400 	.word	0x00f42400
 8002514:	007a1200 	.word	0x007a1200

08002518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_RCC_GetHCLKFreq+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000000 	.word	0x20000000

08002530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002534:	f7ff fff0 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	0a9b      	lsrs	r3, r3, #10
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4903      	ldr	r1, [pc, #12]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	08002fc8 	.word	0x08002fc8

08002558 <__errno>:
 8002558:	4b01      	ldr	r3, [pc, #4]	; (8002560 <__errno+0x8>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	2000000c 	.word	0x2000000c

08002564 <__libc_init_array>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	4d0d      	ldr	r5, [pc, #52]	; (800259c <__libc_init_array+0x38>)
 8002568:	4c0d      	ldr	r4, [pc, #52]	; (80025a0 <__libc_init_array+0x3c>)
 800256a:	1b64      	subs	r4, r4, r5
 800256c:	10a4      	asrs	r4, r4, #2
 800256e:	2600      	movs	r6, #0
 8002570:	42a6      	cmp	r6, r4
 8002572:	d109      	bne.n	8002588 <__libc_init_array+0x24>
 8002574:	4d0b      	ldr	r5, [pc, #44]	; (80025a4 <__libc_init_array+0x40>)
 8002576:	4c0c      	ldr	r4, [pc, #48]	; (80025a8 <__libc_init_array+0x44>)
 8002578:	f000 fce6 	bl	8002f48 <_init>
 800257c:	1b64      	subs	r4, r4, r5
 800257e:	10a4      	asrs	r4, r4, #2
 8002580:	2600      	movs	r6, #0
 8002582:	42a6      	cmp	r6, r4
 8002584:	d105      	bne.n	8002592 <__libc_init_array+0x2e>
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	f855 3b04 	ldr.w	r3, [r5], #4
 800258c:	4798      	blx	r3
 800258e:	3601      	adds	r6, #1
 8002590:	e7ee      	b.n	8002570 <__libc_init_array+0xc>
 8002592:	f855 3b04 	ldr.w	r3, [r5], #4
 8002596:	4798      	blx	r3
 8002598:	3601      	adds	r6, #1
 800259a:	e7f2      	b.n	8002582 <__libc_init_array+0x1e>
 800259c:	0800303c 	.word	0x0800303c
 80025a0:	0800303c 	.word	0x0800303c
 80025a4:	0800303c 	.word	0x0800303c
 80025a8:	08003040 	.word	0x08003040

080025ac <memset>:
 80025ac:	4402      	add	r2, r0
 80025ae:	4603      	mov	r3, r0
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d100      	bne.n	80025b6 <memset+0xa>
 80025b4:	4770      	bx	lr
 80025b6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ba:	e7f9      	b.n	80025b0 <memset+0x4>

080025bc <_puts_r>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	460e      	mov	r6, r1
 80025c0:	4605      	mov	r5, r0
 80025c2:	b118      	cbz	r0, 80025cc <_puts_r+0x10>
 80025c4:	6983      	ldr	r3, [r0, #24]
 80025c6:	b90b      	cbnz	r3, 80025cc <_puts_r+0x10>
 80025c8:	f000 fa48 	bl	8002a5c <__sinit>
 80025cc:	69ab      	ldr	r3, [r5, #24]
 80025ce:	68ac      	ldr	r4, [r5, #8]
 80025d0:	b913      	cbnz	r3, 80025d8 <_puts_r+0x1c>
 80025d2:	4628      	mov	r0, r5
 80025d4:	f000 fa42 	bl	8002a5c <__sinit>
 80025d8:	4b2c      	ldr	r3, [pc, #176]	; (800268c <_puts_r+0xd0>)
 80025da:	429c      	cmp	r4, r3
 80025dc:	d120      	bne.n	8002620 <_puts_r+0x64>
 80025de:	686c      	ldr	r4, [r5, #4]
 80025e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025e2:	07db      	lsls	r3, r3, #31
 80025e4:	d405      	bmi.n	80025f2 <_puts_r+0x36>
 80025e6:	89a3      	ldrh	r3, [r4, #12]
 80025e8:	0598      	lsls	r0, r3, #22
 80025ea:	d402      	bmi.n	80025f2 <_puts_r+0x36>
 80025ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025ee:	f000 fad3 	bl	8002b98 <__retarget_lock_acquire_recursive>
 80025f2:	89a3      	ldrh	r3, [r4, #12]
 80025f4:	0719      	lsls	r1, r3, #28
 80025f6:	d51d      	bpl.n	8002634 <_puts_r+0x78>
 80025f8:	6923      	ldr	r3, [r4, #16]
 80025fa:	b1db      	cbz	r3, 8002634 <_puts_r+0x78>
 80025fc:	3e01      	subs	r6, #1
 80025fe:	68a3      	ldr	r3, [r4, #8]
 8002600:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002604:	3b01      	subs	r3, #1
 8002606:	60a3      	str	r3, [r4, #8]
 8002608:	bb39      	cbnz	r1, 800265a <_puts_r+0x9e>
 800260a:	2b00      	cmp	r3, #0
 800260c:	da38      	bge.n	8002680 <_puts_r+0xc4>
 800260e:	4622      	mov	r2, r4
 8002610:	210a      	movs	r1, #10
 8002612:	4628      	mov	r0, r5
 8002614:	f000 f848 	bl	80026a8 <__swbuf_r>
 8002618:	3001      	adds	r0, #1
 800261a:	d011      	beq.n	8002640 <_puts_r+0x84>
 800261c:	250a      	movs	r5, #10
 800261e:	e011      	b.n	8002644 <_puts_r+0x88>
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <_puts_r+0xd4>)
 8002622:	429c      	cmp	r4, r3
 8002624:	d101      	bne.n	800262a <_puts_r+0x6e>
 8002626:	68ac      	ldr	r4, [r5, #8]
 8002628:	e7da      	b.n	80025e0 <_puts_r+0x24>
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <_puts_r+0xd8>)
 800262c:	429c      	cmp	r4, r3
 800262e:	bf08      	it	eq
 8002630:	68ec      	ldreq	r4, [r5, #12]
 8002632:	e7d5      	b.n	80025e0 <_puts_r+0x24>
 8002634:	4621      	mov	r1, r4
 8002636:	4628      	mov	r0, r5
 8002638:	f000 f888 	bl	800274c <__swsetup_r>
 800263c:	2800      	cmp	r0, #0
 800263e:	d0dd      	beq.n	80025fc <_puts_r+0x40>
 8002640:	f04f 35ff 	mov.w	r5, #4294967295
 8002644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002646:	07da      	lsls	r2, r3, #31
 8002648:	d405      	bmi.n	8002656 <_puts_r+0x9a>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	059b      	lsls	r3, r3, #22
 800264e:	d402      	bmi.n	8002656 <_puts_r+0x9a>
 8002650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002652:	f000 faa2 	bl	8002b9a <__retarget_lock_release_recursive>
 8002656:	4628      	mov	r0, r5
 8002658:	bd70      	pop	{r4, r5, r6, pc}
 800265a:	2b00      	cmp	r3, #0
 800265c:	da04      	bge.n	8002668 <_puts_r+0xac>
 800265e:	69a2      	ldr	r2, [r4, #24]
 8002660:	429a      	cmp	r2, r3
 8002662:	dc06      	bgt.n	8002672 <_puts_r+0xb6>
 8002664:	290a      	cmp	r1, #10
 8002666:	d004      	beq.n	8002672 <_puts_r+0xb6>
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	6022      	str	r2, [r4, #0]
 800266e:	7019      	strb	r1, [r3, #0]
 8002670:	e7c5      	b.n	80025fe <_puts_r+0x42>
 8002672:	4622      	mov	r2, r4
 8002674:	4628      	mov	r0, r5
 8002676:	f000 f817 	bl	80026a8 <__swbuf_r>
 800267a:	3001      	adds	r0, #1
 800267c:	d1bf      	bne.n	80025fe <_puts_r+0x42>
 800267e:	e7df      	b.n	8002640 <_puts_r+0x84>
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	250a      	movs	r5, #10
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	6022      	str	r2, [r4, #0]
 8002688:	701d      	strb	r5, [r3, #0]
 800268a:	e7db      	b.n	8002644 <_puts_r+0x88>
 800268c:	08002ff4 	.word	0x08002ff4
 8002690:	08003014 	.word	0x08003014
 8002694:	08002fd4 	.word	0x08002fd4

08002698 <puts>:
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <puts+0xc>)
 800269a:	4601      	mov	r1, r0
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	f7ff bf8d 	b.w	80025bc <_puts_r>
 80026a2:	bf00      	nop
 80026a4:	2000000c 	.word	0x2000000c

080026a8 <__swbuf_r>:
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	460e      	mov	r6, r1
 80026ac:	4614      	mov	r4, r2
 80026ae:	4605      	mov	r5, r0
 80026b0:	b118      	cbz	r0, 80026ba <__swbuf_r+0x12>
 80026b2:	6983      	ldr	r3, [r0, #24]
 80026b4:	b90b      	cbnz	r3, 80026ba <__swbuf_r+0x12>
 80026b6:	f000 f9d1 	bl	8002a5c <__sinit>
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <__swbuf_r+0x98>)
 80026bc:	429c      	cmp	r4, r3
 80026be:	d12b      	bne.n	8002718 <__swbuf_r+0x70>
 80026c0:	686c      	ldr	r4, [r5, #4]
 80026c2:	69a3      	ldr	r3, [r4, #24]
 80026c4:	60a3      	str	r3, [r4, #8]
 80026c6:	89a3      	ldrh	r3, [r4, #12]
 80026c8:	071a      	lsls	r2, r3, #28
 80026ca:	d52f      	bpl.n	800272c <__swbuf_r+0x84>
 80026cc:	6923      	ldr	r3, [r4, #16]
 80026ce:	b36b      	cbz	r3, 800272c <__swbuf_r+0x84>
 80026d0:	6923      	ldr	r3, [r4, #16]
 80026d2:	6820      	ldr	r0, [r4, #0]
 80026d4:	1ac0      	subs	r0, r0, r3
 80026d6:	6963      	ldr	r3, [r4, #20]
 80026d8:	b2f6      	uxtb	r6, r6
 80026da:	4283      	cmp	r3, r0
 80026dc:	4637      	mov	r7, r6
 80026de:	dc04      	bgt.n	80026ea <__swbuf_r+0x42>
 80026e0:	4621      	mov	r1, r4
 80026e2:	4628      	mov	r0, r5
 80026e4:	f000 f926 	bl	8002934 <_fflush_r>
 80026e8:	bb30      	cbnz	r0, 8002738 <__swbuf_r+0x90>
 80026ea:	68a3      	ldr	r3, [r4, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60a3      	str	r3, [r4, #8]
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	6022      	str	r2, [r4, #0]
 80026f6:	701e      	strb	r6, [r3, #0]
 80026f8:	6963      	ldr	r3, [r4, #20]
 80026fa:	3001      	adds	r0, #1
 80026fc:	4283      	cmp	r3, r0
 80026fe:	d004      	beq.n	800270a <__swbuf_r+0x62>
 8002700:	89a3      	ldrh	r3, [r4, #12]
 8002702:	07db      	lsls	r3, r3, #31
 8002704:	d506      	bpl.n	8002714 <__swbuf_r+0x6c>
 8002706:	2e0a      	cmp	r6, #10
 8002708:	d104      	bne.n	8002714 <__swbuf_r+0x6c>
 800270a:	4621      	mov	r1, r4
 800270c:	4628      	mov	r0, r5
 800270e:	f000 f911 	bl	8002934 <_fflush_r>
 8002712:	b988      	cbnz	r0, 8002738 <__swbuf_r+0x90>
 8002714:	4638      	mov	r0, r7
 8002716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <__swbuf_r+0x9c>)
 800271a:	429c      	cmp	r4, r3
 800271c:	d101      	bne.n	8002722 <__swbuf_r+0x7a>
 800271e:	68ac      	ldr	r4, [r5, #8]
 8002720:	e7cf      	b.n	80026c2 <__swbuf_r+0x1a>
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <__swbuf_r+0xa0>)
 8002724:	429c      	cmp	r4, r3
 8002726:	bf08      	it	eq
 8002728:	68ec      	ldreq	r4, [r5, #12]
 800272a:	e7ca      	b.n	80026c2 <__swbuf_r+0x1a>
 800272c:	4621      	mov	r1, r4
 800272e:	4628      	mov	r0, r5
 8002730:	f000 f80c 	bl	800274c <__swsetup_r>
 8002734:	2800      	cmp	r0, #0
 8002736:	d0cb      	beq.n	80026d0 <__swbuf_r+0x28>
 8002738:	f04f 37ff 	mov.w	r7, #4294967295
 800273c:	e7ea      	b.n	8002714 <__swbuf_r+0x6c>
 800273e:	bf00      	nop
 8002740:	08002ff4 	.word	0x08002ff4
 8002744:	08003014 	.word	0x08003014
 8002748:	08002fd4 	.word	0x08002fd4

0800274c <__swsetup_r>:
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <__swsetup_r+0xcc>)
 800274e:	b570      	push	{r4, r5, r6, lr}
 8002750:	681d      	ldr	r5, [r3, #0]
 8002752:	4606      	mov	r6, r0
 8002754:	460c      	mov	r4, r1
 8002756:	b125      	cbz	r5, 8002762 <__swsetup_r+0x16>
 8002758:	69ab      	ldr	r3, [r5, #24]
 800275a:	b913      	cbnz	r3, 8002762 <__swsetup_r+0x16>
 800275c:	4628      	mov	r0, r5
 800275e:	f000 f97d 	bl	8002a5c <__sinit>
 8002762:	4b2e      	ldr	r3, [pc, #184]	; (800281c <__swsetup_r+0xd0>)
 8002764:	429c      	cmp	r4, r3
 8002766:	d10f      	bne.n	8002788 <__swsetup_r+0x3c>
 8002768:	686c      	ldr	r4, [r5, #4]
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002770:	0719      	lsls	r1, r3, #28
 8002772:	d42c      	bmi.n	80027ce <__swsetup_r+0x82>
 8002774:	06dd      	lsls	r5, r3, #27
 8002776:	d411      	bmi.n	800279c <__swsetup_r+0x50>
 8002778:	2309      	movs	r3, #9
 800277a:	6033      	str	r3, [r6, #0]
 800277c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002780:	81a3      	strh	r3, [r4, #12]
 8002782:	f04f 30ff 	mov.w	r0, #4294967295
 8002786:	e03e      	b.n	8002806 <__swsetup_r+0xba>
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <__swsetup_r+0xd4>)
 800278a:	429c      	cmp	r4, r3
 800278c:	d101      	bne.n	8002792 <__swsetup_r+0x46>
 800278e:	68ac      	ldr	r4, [r5, #8]
 8002790:	e7eb      	b.n	800276a <__swsetup_r+0x1e>
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <__swsetup_r+0xd8>)
 8002794:	429c      	cmp	r4, r3
 8002796:	bf08      	it	eq
 8002798:	68ec      	ldreq	r4, [r5, #12]
 800279a:	e7e6      	b.n	800276a <__swsetup_r+0x1e>
 800279c:	0758      	lsls	r0, r3, #29
 800279e:	d512      	bpl.n	80027c6 <__swsetup_r+0x7a>
 80027a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027a2:	b141      	cbz	r1, 80027b6 <__swsetup_r+0x6a>
 80027a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027a8:	4299      	cmp	r1, r3
 80027aa:	d002      	beq.n	80027b2 <__swsetup_r+0x66>
 80027ac:	4630      	mov	r0, r6
 80027ae:	f000 fa59 	bl	8002c64 <_free_r>
 80027b2:	2300      	movs	r3, #0
 80027b4:	6363      	str	r3, [r4, #52]	; 0x34
 80027b6:	89a3      	ldrh	r3, [r4, #12]
 80027b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80027bc:	81a3      	strh	r3, [r4, #12]
 80027be:	2300      	movs	r3, #0
 80027c0:	6063      	str	r3, [r4, #4]
 80027c2:	6923      	ldr	r3, [r4, #16]
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	89a3      	ldrh	r3, [r4, #12]
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	81a3      	strh	r3, [r4, #12]
 80027ce:	6923      	ldr	r3, [r4, #16]
 80027d0:	b94b      	cbnz	r3, 80027e6 <__swsetup_r+0x9a>
 80027d2:	89a3      	ldrh	r3, [r4, #12]
 80027d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80027d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027dc:	d003      	beq.n	80027e6 <__swsetup_r+0x9a>
 80027de:	4621      	mov	r1, r4
 80027e0:	4630      	mov	r0, r6
 80027e2:	f000 f9ff 	bl	8002be4 <__smakebuf_r>
 80027e6:	89a0      	ldrh	r0, [r4, #12]
 80027e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027ec:	f010 0301 	ands.w	r3, r0, #1
 80027f0:	d00a      	beq.n	8002808 <__swsetup_r+0xbc>
 80027f2:	2300      	movs	r3, #0
 80027f4:	60a3      	str	r3, [r4, #8]
 80027f6:	6963      	ldr	r3, [r4, #20]
 80027f8:	425b      	negs	r3, r3
 80027fa:	61a3      	str	r3, [r4, #24]
 80027fc:	6923      	ldr	r3, [r4, #16]
 80027fe:	b943      	cbnz	r3, 8002812 <__swsetup_r+0xc6>
 8002800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002804:	d1ba      	bne.n	800277c <__swsetup_r+0x30>
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	0781      	lsls	r1, r0, #30
 800280a:	bf58      	it	pl
 800280c:	6963      	ldrpl	r3, [r4, #20]
 800280e:	60a3      	str	r3, [r4, #8]
 8002810:	e7f4      	b.n	80027fc <__swsetup_r+0xb0>
 8002812:	2000      	movs	r0, #0
 8002814:	e7f7      	b.n	8002806 <__swsetup_r+0xba>
 8002816:	bf00      	nop
 8002818:	2000000c 	.word	0x2000000c
 800281c:	08002ff4 	.word	0x08002ff4
 8002820:	08003014 	.word	0x08003014
 8002824:	08002fd4 	.word	0x08002fd4

08002828 <__sflush_r>:
 8002828:	898a      	ldrh	r2, [r1, #12]
 800282a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800282e:	4605      	mov	r5, r0
 8002830:	0710      	lsls	r0, r2, #28
 8002832:	460c      	mov	r4, r1
 8002834:	d458      	bmi.n	80028e8 <__sflush_r+0xc0>
 8002836:	684b      	ldr	r3, [r1, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	dc05      	bgt.n	8002848 <__sflush_r+0x20>
 800283c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	dc02      	bgt.n	8002848 <__sflush_r+0x20>
 8002842:	2000      	movs	r0, #0
 8002844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800284a:	2e00      	cmp	r6, #0
 800284c:	d0f9      	beq.n	8002842 <__sflush_r+0x1a>
 800284e:	2300      	movs	r3, #0
 8002850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002854:	682f      	ldr	r7, [r5, #0]
 8002856:	602b      	str	r3, [r5, #0]
 8002858:	d032      	beq.n	80028c0 <__sflush_r+0x98>
 800285a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800285c:	89a3      	ldrh	r3, [r4, #12]
 800285e:	075a      	lsls	r2, r3, #29
 8002860:	d505      	bpl.n	800286e <__sflush_r+0x46>
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	1ac0      	subs	r0, r0, r3
 8002866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002868:	b10b      	cbz	r3, 800286e <__sflush_r+0x46>
 800286a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800286c:	1ac0      	subs	r0, r0, r3
 800286e:	2300      	movs	r3, #0
 8002870:	4602      	mov	r2, r0
 8002872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002874:	6a21      	ldr	r1, [r4, #32]
 8002876:	4628      	mov	r0, r5
 8002878:	47b0      	blx	r6
 800287a:	1c43      	adds	r3, r0, #1
 800287c:	89a3      	ldrh	r3, [r4, #12]
 800287e:	d106      	bne.n	800288e <__sflush_r+0x66>
 8002880:	6829      	ldr	r1, [r5, #0]
 8002882:	291d      	cmp	r1, #29
 8002884:	d82c      	bhi.n	80028e0 <__sflush_r+0xb8>
 8002886:	4a2a      	ldr	r2, [pc, #168]	; (8002930 <__sflush_r+0x108>)
 8002888:	40ca      	lsrs	r2, r1
 800288a:	07d6      	lsls	r6, r2, #31
 800288c:	d528      	bpl.n	80028e0 <__sflush_r+0xb8>
 800288e:	2200      	movs	r2, #0
 8002890:	6062      	str	r2, [r4, #4]
 8002892:	04d9      	lsls	r1, r3, #19
 8002894:	6922      	ldr	r2, [r4, #16]
 8002896:	6022      	str	r2, [r4, #0]
 8002898:	d504      	bpl.n	80028a4 <__sflush_r+0x7c>
 800289a:	1c42      	adds	r2, r0, #1
 800289c:	d101      	bne.n	80028a2 <__sflush_r+0x7a>
 800289e:	682b      	ldr	r3, [r5, #0]
 80028a0:	b903      	cbnz	r3, 80028a4 <__sflush_r+0x7c>
 80028a2:	6560      	str	r0, [r4, #84]	; 0x54
 80028a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028a6:	602f      	str	r7, [r5, #0]
 80028a8:	2900      	cmp	r1, #0
 80028aa:	d0ca      	beq.n	8002842 <__sflush_r+0x1a>
 80028ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028b0:	4299      	cmp	r1, r3
 80028b2:	d002      	beq.n	80028ba <__sflush_r+0x92>
 80028b4:	4628      	mov	r0, r5
 80028b6:	f000 f9d5 	bl	8002c64 <_free_r>
 80028ba:	2000      	movs	r0, #0
 80028bc:	6360      	str	r0, [r4, #52]	; 0x34
 80028be:	e7c1      	b.n	8002844 <__sflush_r+0x1c>
 80028c0:	6a21      	ldr	r1, [r4, #32]
 80028c2:	2301      	movs	r3, #1
 80028c4:	4628      	mov	r0, r5
 80028c6:	47b0      	blx	r6
 80028c8:	1c41      	adds	r1, r0, #1
 80028ca:	d1c7      	bne.n	800285c <__sflush_r+0x34>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0c4      	beq.n	800285c <__sflush_r+0x34>
 80028d2:	2b1d      	cmp	r3, #29
 80028d4:	d001      	beq.n	80028da <__sflush_r+0xb2>
 80028d6:	2b16      	cmp	r3, #22
 80028d8:	d101      	bne.n	80028de <__sflush_r+0xb6>
 80028da:	602f      	str	r7, [r5, #0]
 80028dc:	e7b1      	b.n	8002842 <__sflush_r+0x1a>
 80028de:	89a3      	ldrh	r3, [r4, #12]
 80028e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e4:	81a3      	strh	r3, [r4, #12]
 80028e6:	e7ad      	b.n	8002844 <__sflush_r+0x1c>
 80028e8:	690f      	ldr	r7, [r1, #16]
 80028ea:	2f00      	cmp	r7, #0
 80028ec:	d0a9      	beq.n	8002842 <__sflush_r+0x1a>
 80028ee:	0793      	lsls	r3, r2, #30
 80028f0:	680e      	ldr	r6, [r1, #0]
 80028f2:	bf08      	it	eq
 80028f4:	694b      	ldreq	r3, [r1, #20]
 80028f6:	600f      	str	r7, [r1, #0]
 80028f8:	bf18      	it	ne
 80028fa:	2300      	movne	r3, #0
 80028fc:	eba6 0807 	sub.w	r8, r6, r7
 8002900:	608b      	str	r3, [r1, #8]
 8002902:	f1b8 0f00 	cmp.w	r8, #0
 8002906:	dd9c      	ble.n	8002842 <__sflush_r+0x1a>
 8002908:	6a21      	ldr	r1, [r4, #32]
 800290a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800290c:	4643      	mov	r3, r8
 800290e:	463a      	mov	r2, r7
 8002910:	4628      	mov	r0, r5
 8002912:	47b0      	blx	r6
 8002914:	2800      	cmp	r0, #0
 8002916:	dc06      	bgt.n	8002926 <__sflush_r+0xfe>
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800291e:	81a3      	strh	r3, [r4, #12]
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	e78e      	b.n	8002844 <__sflush_r+0x1c>
 8002926:	4407      	add	r7, r0
 8002928:	eba8 0800 	sub.w	r8, r8, r0
 800292c:	e7e9      	b.n	8002902 <__sflush_r+0xda>
 800292e:	bf00      	nop
 8002930:	20400001 	.word	0x20400001

08002934 <_fflush_r>:
 8002934:	b538      	push	{r3, r4, r5, lr}
 8002936:	690b      	ldr	r3, [r1, #16]
 8002938:	4605      	mov	r5, r0
 800293a:	460c      	mov	r4, r1
 800293c:	b913      	cbnz	r3, 8002944 <_fflush_r+0x10>
 800293e:	2500      	movs	r5, #0
 8002940:	4628      	mov	r0, r5
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	b118      	cbz	r0, 800294e <_fflush_r+0x1a>
 8002946:	6983      	ldr	r3, [r0, #24]
 8002948:	b90b      	cbnz	r3, 800294e <_fflush_r+0x1a>
 800294a:	f000 f887 	bl	8002a5c <__sinit>
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <_fflush_r+0x6c>)
 8002950:	429c      	cmp	r4, r3
 8002952:	d11b      	bne.n	800298c <_fflush_r+0x58>
 8002954:	686c      	ldr	r4, [r5, #4]
 8002956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0ef      	beq.n	800293e <_fflush_r+0xa>
 800295e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002960:	07d0      	lsls	r0, r2, #31
 8002962:	d404      	bmi.n	800296e <_fflush_r+0x3a>
 8002964:	0599      	lsls	r1, r3, #22
 8002966:	d402      	bmi.n	800296e <_fflush_r+0x3a>
 8002968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800296a:	f000 f915 	bl	8002b98 <__retarget_lock_acquire_recursive>
 800296e:	4628      	mov	r0, r5
 8002970:	4621      	mov	r1, r4
 8002972:	f7ff ff59 	bl	8002828 <__sflush_r>
 8002976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002978:	07da      	lsls	r2, r3, #31
 800297a:	4605      	mov	r5, r0
 800297c:	d4e0      	bmi.n	8002940 <_fflush_r+0xc>
 800297e:	89a3      	ldrh	r3, [r4, #12]
 8002980:	059b      	lsls	r3, r3, #22
 8002982:	d4dd      	bmi.n	8002940 <_fflush_r+0xc>
 8002984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002986:	f000 f908 	bl	8002b9a <__retarget_lock_release_recursive>
 800298a:	e7d9      	b.n	8002940 <_fflush_r+0xc>
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <_fflush_r+0x70>)
 800298e:	429c      	cmp	r4, r3
 8002990:	d101      	bne.n	8002996 <_fflush_r+0x62>
 8002992:	68ac      	ldr	r4, [r5, #8]
 8002994:	e7df      	b.n	8002956 <_fflush_r+0x22>
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <_fflush_r+0x74>)
 8002998:	429c      	cmp	r4, r3
 800299a:	bf08      	it	eq
 800299c:	68ec      	ldreq	r4, [r5, #12]
 800299e:	e7da      	b.n	8002956 <_fflush_r+0x22>
 80029a0:	08002ff4 	.word	0x08002ff4
 80029a4:	08003014 	.word	0x08003014
 80029a8:	08002fd4 	.word	0x08002fd4

080029ac <std>:
 80029ac:	2300      	movs	r3, #0
 80029ae:	b510      	push	{r4, lr}
 80029b0:	4604      	mov	r4, r0
 80029b2:	e9c0 3300 	strd	r3, r3, [r0]
 80029b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029ba:	6083      	str	r3, [r0, #8]
 80029bc:	8181      	strh	r1, [r0, #12]
 80029be:	6643      	str	r3, [r0, #100]	; 0x64
 80029c0:	81c2      	strh	r2, [r0, #14]
 80029c2:	6183      	str	r3, [r0, #24]
 80029c4:	4619      	mov	r1, r3
 80029c6:	2208      	movs	r2, #8
 80029c8:	305c      	adds	r0, #92	; 0x5c
 80029ca:	f7ff fdef 	bl	80025ac <memset>
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <std+0x38>)
 80029d0:	6263      	str	r3, [r4, #36]	; 0x24
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <std+0x3c>)
 80029d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <std+0x40>)
 80029d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <std+0x44>)
 80029dc:	6224      	str	r4, [r4, #32]
 80029de:	6323      	str	r3, [r4, #48]	; 0x30
 80029e0:	bd10      	pop	{r4, pc}
 80029e2:	bf00      	nop
 80029e4:	08002dd9 	.word	0x08002dd9
 80029e8:	08002dfb 	.word	0x08002dfb
 80029ec:	08002e33 	.word	0x08002e33
 80029f0:	08002e57 	.word	0x08002e57

080029f4 <_cleanup_r>:
 80029f4:	4901      	ldr	r1, [pc, #4]	; (80029fc <_cleanup_r+0x8>)
 80029f6:	f000 b8af 	b.w	8002b58 <_fwalk_reent>
 80029fa:	bf00      	nop
 80029fc:	08002935 	.word	0x08002935

08002a00 <__sfmoreglue>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	1e4a      	subs	r2, r1, #1
 8002a04:	2568      	movs	r5, #104	; 0x68
 8002a06:	4355      	muls	r5, r2
 8002a08:	460e      	mov	r6, r1
 8002a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a0e:	f000 f979 	bl	8002d04 <_malloc_r>
 8002a12:	4604      	mov	r4, r0
 8002a14:	b140      	cbz	r0, 8002a28 <__sfmoreglue+0x28>
 8002a16:	2100      	movs	r1, #0
 8002a18:	e9c0 1600 	strd	r1, r6, [r0]
 8002a1c:	300c      	adds	r0, #12
 8002a1e:	60a0      	str	r0, [r4, #8]
 8002a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a24:	f7ff fdc2 	bl	80025ac <memset>
 8002a28:	4620      	mov	r0, r4
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}

08002a2c <__sfp_lock_acquire>:
 8002a2c:	4801      	ldr	r0, [pc, #4]	; (8002a34 <__sfp_lock_acquire+0x8>)
 8002a2e:	f000 b8b3 	b.w	8002b98 <__retarget_lock_acquire_recursive>
 8002a32:	bf00      	nop
 8002a34:	20000110 	.word	0x20000110

08002a38 <__sfp_lock_release>:
 8002a38:	4801      	ldr	r0, [pc, #4]	; (8002a40 <__sfp_lock_release+0x8>)
 8002a3a:	f000 b8ae 	b.w	8002b9a <__retarget_lock_release_recursive>
 8002a3e:	bf00      	nop
 8002a40:	20000110 	.word	0x20000110

08002a44 <__sinit_lock_acquire>:
 8002a44:	4801      	ldr	r0, [pc, #4]	; (8002a4c <__sinit_lock_acquire+0x8>)
 8002a46:	f000 b8a7 	b.w	8002b98 <__retarget_lock_acquire_recursive>
 8002a4a:	bf00      	nop
 8002a4c:	2000010b 	.word	0x2000010b

08002a50 <__sinit_lock_release>:
 8002a50:	4801      	ldr	r0, [pc, #4]	; (8002a58 <__sinit_lock_release+0x8>)
 8002a52:	f000 b8a2 	b.w	8002b9a <__retarget_lock_release_recursive>
 8002a56:	bf00      	nop
 8002a58:	2000010b 	.word	0x2000010b

08002a5c <__sinit>:
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	4604      	mov	r4, r0
 8002a60:	f7ff fff0 	bl	8002a44 <__sinit_lock_acquire>
 8002a64:	69a3      	ldr	r3, [r4, #24]
 8002a66:	b11b      	cbz	r3, 8002a70 <__sinit+0x14>
 8002a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a6c:	f7ff bff0 	b.w	8002a50 <__sinit_lock_release>
 8002a70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a74:	6523      	str	r3, [r4, #80]	; 0x50
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <__sinit+0x68>)
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <__sinit+0x6c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a7e:	42a3      	cmp	r3, r4
 8002a80:	bf04      	itt	eq
 8002a82:	2301      	moveq	r3, #1
 8002a84:	61a3      	streq	r3, [r4, #24]
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 f820 	bl	8002acc <__sfp>
 8002a8c:	6060      	str	r0, [r4, #4]
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f000 f81c 	bl	8002acc <__sfp>
 8002a94:	60a0      	str	r0, [r4, #8]
 8002a96:	4620      	mov	r0, r4
 8002a98:	f000 f818 	bl	8002acc <__sfp>
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60e0      	str	r0, [r4, #12]
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	6860      	ldr	r0, [r4, #4]
 8002aa4:	f7ff ff82 	bl	80029ac <std>
 8002aa8:	68a0      	ldr	r0, [r4, #8]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	2109      	movs	r1, #9
 8002aae:	f7ff ff7d 	bl	80029ac <std>
 8002ab2:	68e0      	ldr	r0, [r4, #12]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	2112      	movs	r1, #18
 8002ab8:	f7ff ff78 	bl	80029ac <std>
 8002abc:	2301      	movs	r3, #1
 8002abe:	61a3      	str	r3, [r4, #24]
 8002ac0:	e7d2      	b.n	8002a68 <__sinit+0xc>
 8002ac2:	bf00      	nop
 8002ac4:	08002fd0 	.word	0x08002fd0
 8002ac8:	080029f5 	.word	0x080029f5

08002acc <__sfp>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	4607      	mov	r7, r0
 8002ad0:	f7ff ffac 	bl	8002a2c <__sfp_lock_acquire>
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <__sfp+0x84>)
 8002ad6:	681e      	ldr	r6, [r3, #0]
 8002ad8:	69b3      	ldr	r3, [r6, #24]
 8002ada:	b913      	cbnz	r3, 8002ae2 <__sfp+0x16>
 8002adc:	4630      	mov	r0, r6
 8002ade:	f7ff ffbd 	bl	8002a5c <__sinit>
 8002ae2:	3648      	adds	r6, #72	; 0x48
 8002ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	d503      	bpl.n	8002af4 <__sfp+0x28>
 8002aec:	6833      	ldr	r3, [r6, #0]
 8002aee:	b30b      	cbz	r3, 8002b34 <__sfp+0x68>
 8002af0:	6836      	ldr	r6, [r6, #0]
 8002af2:	e7f7      	b.n	8002ae4 <__sfp+0x18>
 8002af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002af8:	b9d5      	cbnz	r5, 8002b30 <__sfp+0x64>
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <__sfp+0x88>)
 8002afc:	60e3      	str	r3, [r4, #12]
 8002afe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b02:	6665      	str	r5, [r4, #100]	; 0x64
 8002b04:	f000 f847 	bl	8002b96 <__retarget_lock_init_recursive>
 8002b08:	f7ff ff96 	bl	8002a38 <__sfp_lock_release>
 8002b0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b14:	6025      	str	r5, [r4, #0]
 8002b16:	61a5      	str	r5, [r4, #24]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b20:	f7ff fd44 	bl	80025ac <memset>
 8002b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b30:	3468      	adds	r4, #104	; 0x68
 8002b32:	e7d9      	b.n	8002ae8 <__sfp+0x1c>
 8002b34:	2104      	movs	r1, #4
 8002b36:	4638      	mov	r0, r7
 8002b38:	f7ff ff62 	bl	8002a00 <__sfmoreglue>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	6030      	str	r0, [r6, #0]
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d1d5      	bne.n	8002af0 <__sfp+0x24>
 8002b44:	f7ff ff78 	bl	8002a38 <__sfp_lock_release>
 8002b48:	230c      	movs	r3, #12
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	e7ee      	b.n	8002b2c <__sfp+0x60>
 8002b4e:	bf00      	nop
 8002b50:	08002fd0 	.word	0x08002fd0
 8002b54:	ffff0001 	.word	0xffff0001

08002b58 <_fwalk_reent>:
 8002b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b5c:	4606      	mov	r6, r0
 8002b5e:	4688      	mov	r8, r1
 8002b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b64:	2700      	movs	r7, #0
 8002b66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b6a:	f1b9 0901 	subs.w	r9, r9, #1
 8002b6e:	d505      	bpl.n	8002b7c <_fwalk_reent+0x24>
 8002b70:	6824      	ldr	r4, [r4, #0]
 8002b72:	2c00      	cmp	r4, #0
 8002b74:	d1f7      	bne.n	8002b66 <_fwalk_reent+0xe>
 8002b76:	4638      	mov	r0, r7
 8002b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b7c:	89ab      	ldrh	r3, [r5, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d907      	bls.n	8002b92 <_fwalk_reent+0x3a>
 8002b82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b86:	3301      	adds	r3, #1
 8002b88:	d003      	beq.n	8002b92 <_fwalk_reent+0x3a>
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	47c0      	blx	r8
 8002b90:	4307      	orrs	r7, r0
 8002b92:	3568      	adds	r5, #104	; 0x68
 8002b94:	e7e9      	b.n	8002b6a <_fwalk_reent+0x12>

08002b96 <__retarget_lock_init_recursive>:
 8002b96:	4770      	bx	lr

08002b98 <__retarget_lock_acquire_recursive>:
 8002b98:	4770      	bx	lr

08002b9a <__retarget_lock_release_recursive>:
 8002b9a:	4770      	bx	lr

08002b9c <__swhatbuf_r>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	460e      	mov	r6, r1
 8002ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba4:	2900      	cmp	r1, #0
 8002ba6:	b096      	sub	sp, #88	; 0x58
 8002ba8:	4614      	mov	r4, r2
 8002baa:	461d      	mov	r5, r3
 8002bac:	da07      	bge.n	8002bbe <__swhatbuf_r+0x22>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	602b      	str	r3, [r5, #0]
 8002bb2:	89b3      	ldrh	r3, [r6, #12]
 8002bb4:	061a      	lsls	r2, r3, #24
 8002bb6:	d410      	bmi.n	8002bda <__swhatbuf_r+0x3e>
 8002bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bbc:	e00e      	b.n	8002bdc <__swhatbuf_r+0x40>
 8002bbe:	466a      	mov	r2, sp
 8002bc0:	f000 f970 	bl	8002ea4 <_fstat_r>
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	dbf2      	blt.n	8002bae <__swhatbuf_r+0x12>
 8002bc8:	9a01      	ldr	r2, [sp, #4]
 8002bca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bd2:	425a      	negs	r2, r3
 8002bd4:	415a      	adcs	r2, r3
 8002bd6:	602a      	str	r2, [r5, #0]
 8002bd8:	e7ee      	b.n	8002bb8 <__swhatbuf_r+0x1c>
 8002bda:	2340      	movs	r3, #64	; 0x40
 8002bdc:	2000      	movs	r0, #0
 8002bde:	6023      	str	r3, [r4, #0]
 8002be0:	b016      	add	sp, #88	; 0x58
 8002be2:	bd70      	pop	{r4, r5, r6, pc}

08002be4 <__smakebuf_r>:
 8002be4:	898b      	ldrh	r3, [r1, #12]
 8002be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002be8:	079d      	lsls	r5, r3, #30
 8002bea:	4606      	mov	r6, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	d507      	bpl.n	8002c00 <__smakebuf_r+0x1c>
 8002bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	6123      	str	r3, [r4, #16]
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	6163      	str	r3, [r4, #20]
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	ab01      	add	r3, sp, #4
 8002c02:	466a      	mov	r2, sp
 8002c04:	f7ff ffca 	bl	8002b9c <__swhatbuf_r>
 8002c08:	9900      	ldr	r1, [sp, #0]
 8002c0a:	4605      	mov	r5, r0
 8002c0c:	4630      	mov	r0, r6
 8002c0e:	f000 f879 	bl	8002d04 <_malloc_r>
 8002c12:	b948      	cbnz	r0, 8002c28 <__smakebuf_r+0x44>
 8002c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c18:	059a      	lsls	r2, r3, #22
 8002c1a:	d4ef      	bmi.n	8002bfc <__smakebuf_r+0x18>
 8002c1c:	f023 0303 	bic.w	r3, r3, #3
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	81a3      	strh	r3, [r4, #12]
 8002c26:	e7e3      	b.n	8002bf0 <__smakebuf_r+0xc>
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <__smakebuf_r+0x7c>)
 8002c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	6020      	str	r0, [r4, #0]
 8002c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c34:	81a3      	strh	r3, [r4, #12]
 8002c36:	9b00      	ldr	r3, [sp, #0]
 8002c38:	6163      	str	r3, [r4, #20]
 8002c3a:	9b01      	ldr	r3, [sp, #4]
 8002c3c:	6120      	str	r0, [r4, #16]
 8002c3e:	b15b      	cbz	r3, 8002c58 <__smakebuf_r+0x74>
 8002c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c44:	4630      	mov	r0, r6
 8002c46:	f000 f93f 	bl	8002ec8 <_isatty_r>
 8002c4a:	b128      	cbz	r0, 8002c58 <__smakebuf_r+0x74>
 8002c4c:	89a3      	ldrh	r3, [r4, #12]
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	81a3      	strh	r3, [r4, #12]
 8002c58:	89a0      	ldrh	r0, [r4, #12]
 8002c5a:	4305      	orrs	r5, r0
 8002c5c:	81a5      	strh	r5, [r4, #12]
 8002c5e:	e7cd      	b.n	8002bfc <__smakebuf_r+0x18>
 8002c60:	080029f5 	.word	0x080029f5

08002c64 <_free_r>:
 8002c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c66:	2900      	cmp	r1, #0
 8002c68:	d048      	beq.n	8002cfc <_free_r+0x98>
 8002c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c6e:	9001      	str	r0, [sp, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f1a1 0404 	sub.w	r4, r1, #4
 8002c76:	bfb8      	it	lt
 8002c78:	18e4      	addlt	r4, r4, r3
 8002c7a:	f000 f947 	bl	8002f0c <__malloc_lock>
 8002c7e:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <_free_r+0x9c>)
 8002c80:	9801      	ldr	r0, [sp, #4]
 8002c82:	6813      	ldr	r3, [r2, #0]
 8002c84:	4615      	mov	r5, r2
 8002c86:	b933      	cbnz	r3, 8002c96 <_free_r+0x32>
 8002c88:	6063      	str	r3, [r4, #4]
 8002c8a:	6014      	str	r4, [r2, #0]
 8002c8c:	b003      	add	sp, #12
 8002c8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c92:	f000 b941 	b.w	8002f18 <__malloc_unlock>
 8002c96:	42a3      	cmp	r3, r4
 8002c98:	d90b      	bls.n	8002cb2 <_free_r+0x4e>
 8002c9a:	6821      	ldr	r1, [r4, #0]
 8002c9c:	1862      	adds	r2, r4, r1
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bf04      	itt	eq
 8002ca2:	681a      	ldreq	r2, [r3, #0]
 8002ca4:	685b      	ldreq	r3, [r3, #4]
 8002ca6:	6063      	str	r3, [r4, #4]
 8002ca8:	bf04      	itt	eq
 8002caa:	1852      	addeq	r2, r2, r1
 8002cac:	6022      	streq	r2, [r4, #0]
 8002cae:	602c      	str	r4, [r5, #0]
 8002cb0:	e7ec      	b.n	8002c8c <_free_r+0x28>
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	b10b      	cbz	r3, 8002cbc <_free_r+0x58>
 8002cb8:	42a3      	cmp	r3, r4
 8002cba:	d9fa      	bls.n	8002cb2 <_free_r+0x4e>
 8002cbc:	6811      	ldr	r1, [r2, #0]
 8002cbe:	1855      	adds	r5, r2, r1
 8002cc0:	42a5      	cmp	r5, r4
 8002cc2:	d10b      	bne.n	8002cdc <_free_r+0x78>
 8002cc4:	6824      	ldr	r4, [r4, #0]
 8002cc6:	4421      	add	r1, r4
 8002cc8:	1854      	adds	r4, r2, r1
 8002cca:	42a3      	cmp	r3, r4
 8002ccc:	6011      	str	r1, [r2, #0]
 8002cce:	d1dd      	bne.n	8002c8c <_free_r+0x28>
 8002cd0:	681c      	ldr	r4, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	6053      	str	r3, [r2, #4]
 8002cd6:	4421      	add	r1, r4
 8002cd8:	6011      	str	r1, [r2, #0]
 8002cda:	e7d7      	b.n	8002c8c <_free_r+0x28>
 8002cdc:	d902      	bls.n	8002ce4 <_free_r+0x80>
 8002cde:	230c      	movs	r3, #12
 8002ce0:	6003      	str	r3, [r0, #0]
 8002ce2:	e7d3      	b.n	8002c8c <_free_r+0x28>
 8002ce4:	6825      	ldr	r5, [r4, #0]
 8002ce6:	1961      	adds	r1, r4, r5
 8002ce8:	428b      	cmp	r3, r1
 8002cea:	bf04      	itt	eq
 8002cec:	6819      	ldreq	r1, [r3, #0]
 8002cee:	685b      	ldreq	r3, [r3, #4]
 8002cf0:	6063      	str	r3, [r4, #4]
 8002cf2:	bf04      	itt	eq
 8002cf4:	1949      	addeq	r1, r1, r5
 8002cf6:	6021      	streq	r1, [r4, #0]
 8002cf8:	6054      	str	r4, [r2, #4]
 8002cfa:	e7c7      	b.n	8002c8c <_free_r+0x28>
 8002cfc:	b003      	add	sp, #12
 8002cfe:	bd30      	pop	{r4, r5, pc}
 8002d00:	200000a8 	.word	0x200000a8

08002d04 <_malloc_r>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	1ccd      	adds	r5, r1, #3
 8002d08:	f025 0503 	bic.w	r5, r5, #3
 8002d0c:	3508      	adds	r5, #8
 8002d0e:	2d0c      	cmp	r5, #12
 8002d10:	bf38      	it	cc
 8002d12:	250c      	movcc	r5, #12
 8002d14:	2d00      	cmp	r5, #0
 8002d16:	4606      	mov	r6, r0
 8002d18:	db01      	blt.n	8002d1e <_malloc_r+0x1a>
 8002d1a:	42a9      	cmp	r1, r5
 8002d1c:	d903      	bls.n	8002d26 <_malloc_r+0x22>
 8002d1e:	230c      	movs	r3, #12
 8002d20:	6033      	str	r3, [r6, #0]
 8002d22:	2000      	movs	r0, #0
 8002d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d26:	f000 f8f1 	bl	8002f0c <__malloc_lock>
 8002d2a:	4921      	ldr	r1, [pc, #132]	; (8002db0 <_malloc_r+0xac>)
 8002d2c:	680a      	ldr	r2, [r1, #0]
 8002d2e:	4614      	mov	r4, r2
 8002d30:	b99c      	cbnz	r4, 8002d5a <_malloc_r+0x56>
 8002d32:	4f20      	ldr	r7, [pc, #128]	; (8002db4 <_malloc_r+0xb0>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b923      	cbnz	r3, 8002d42 <_malloc_r+0x3e>
 8002d38:	4621      	mov	r1, r4
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f000 f83c 	bl	8002db8 <_sbrk_r>
 8002d40:	6038      	str	r0, [r7, #0]
 8002d42:	4629      	mov	r1, r5
 8002d44:	4630      	mov	r0, r6
 8002d46:	f000 f837 	bl	8002db8 <_sbrk_r>
 8002d4a:	1c43      	adds	r3, r0, #1
 8002d4c:	d123      	bne.n	8002d96 <_malloc_r+0x92>
 8002d4e:	230c      	movs	r3, #12
 8002d50:	6033      	str	r3, [r6, #0]
 8002d52:	4630      	mov	r0, r6
 8002d54:	f000 f8e0 	bl	8002f18 <__malloc_unlock>
 8002d58:	e7e3      	b.n	8002d22 <_malloc_r+0x1e>
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	1b5b      	subs	r3, r3, r5
 8002d5e:	d417      	bmi.n	8002d90 <_malloc_r+0x8c>
 8002d60:	2b0b      	cmp	r3, #11
 8002d62:	d903      	bls.n	8002d6c <_malloc_r+0x68>
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	441c      	add	r4, r3
 8002d68:	6025      	str	r5, [r4, #0]
 8002d6a:	e004      	b.n	8002d76 <_malloc_r+0x72>
 8002d6c:	6863      	ldr	r3, [r4, #4]
 8002d6e:	42a2      	cmp	r2, r4
 8002d70:	bf0c      	ite	eq
 8002d72:	600b      	streq	r3, [r1, #0]
 8002d74:	6053      	strne	r3, [r2, #4]
 8002d76:	4630      	mov	r0, r6
 8002d78:	f000 f8ce 	bl	8002f18 <__malloc_unlock>
 8002d7c:	f104 000b 	add.w	r0, r4, #11
 8002d80:	1d23      	adds	r3, r4, #4
 8002d82:	f020 0007 	bic.w	r0, r0, #7
 8002d86:	1ac2      	subs	r2, r0, r3
 8002d88:	d0cc      	beq.n	8002d24 <_malloc_r+0x20>
 8002d8a:	1a1b      	subs	r3, r3, r0
 8002d8c:	50a3      	str	r3, [r4, r2]
 8002d8e:	e7c9      	b.n	8002d24 <_malloc_r+0x20>
 8002d90:	4622      	mov	r2, r4
 8002d92:	6864      	ldr	r4, [r4, #4]
 8002d94:	e7cc      	b.n	8002d30 <_malloc_r+0x2c>
 8002d96:	1cc4      	adds	r4, r0, #3
 8002d98:	f024 0403 	bic.w	r4, r4, #3
 8002d9c:	42a0      	cmp	r0, r4
 8002d9e:	d0e3      	beq.n	8002d68 <_malloc_r+0x64>
 8002da0:	1a21      	subs	r1, r4, r0
 8002da2:	4630      	mov	r0, r6
 8002da4:	f000 f808 	bl	8002db8 <_sbrk_r>
 8002da8:	3001      	adds	r0, #1
 8002daa:	d1dd      	bne.n	8002d68 <_malloc_r+0x64>
 8002dac:	e7cf      	b.n	8002d4e <_malloc_r+0x4a>
 8002dae:	bf00      	nop
 8002db0:	200000a8 	.word	0x200000a8
 8002db4:	200000ac 	.word	0x200000ac

08002db8 <_sbrk_r>:
 8002db8:	b538      	push	{r3, r4, r5, lr}
 8002dba:	4d06      	ldr	r5, [pc, #24]	; (8002dd4 <_sbrk_r+0x1c>)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	602b      	str	r3, [r5, #0]
 8002dc4:	f7fd ff6c 	bl	8000ca0 <_sbrk>
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	d102      	bne.n	8002dd2 <_sbrk_r+0x1a>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	b103      	cbz	r3, 8002dd2 <_sbrk_r+0x1a>
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	bd38      	pop	{r3, r4, r5, pc}
 8002dd4:	20000114 	.word	0x20000114

08002dd8 <__sread>:
 8002dd8:	b510      	push	{r4, lr}
 8002dda:	460c      	mov	r4, r1
 8002ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de0:	f000 f8a0 	bl	8002f24 <_read_r>
 8002de4:	2800      	cmp	r0, #0
 8002de6:	bfab      	itete	ge
 8002de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002dea:	89a3      	ldrhlt	r3, [r4, #12]
 8002dec:	181b      	addge	r3, r3, r0
 8002dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002df2:	bfac      	ite	ge
 8002df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002df6:	81a3      	strhlt	r3, [r4, #12]
 8002df8:	bd10      	pop	{r4, pc}

08002dfa <__swrite>:
 8002dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfe:	461f      	mov	r7, r3
 8002e00:	898b      	ldrh	r3, [r1, #12]
 8002e02:	05db      	lsls	r3, r3, #23
 8002e04:	4605      	mov	r5, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	4616      	mov	r6, r2
 8002e0a:	d505      	bpl.n	8002e18 <__swrite+0x1e>
 8002e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e10:	2302      	movs	r3, #2
 8002e12:	2200      	movs	r2, #0
 8002e14:	f000 f868 	bl	8002ee8 <_lseek_r>
 8002e18:	89a3      	ldrh	r3, [r4, #12]
 8002e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e22:	81a3      	strh	r3, [r4, #12]
 8002e24:	4632      	mov	r2, r6
 8002e26:	463b      	mov	r3, r7
 8002e28:	4628      	mov	r0, r5
 8002e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e2e:	f000 b817 	b.w	8002e60 <_write_r>

08002e32 <__sseek>:
 8002e32:	b510      	push	{r4, lr}
 8002e34:	460c      	mov	r4, r1
 8002e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e3a:	f000 f855 	bl	8002ee8 <_lseek_r>
 8002e3e:	1c43      	adds	r3, r0, #1
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	bf15      	itete	ne
 8002e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e4e:	81a3      	strheq	r3, [r4, #12]
 8002e50:	bf18      	it	ne
 8002e52:	81a3      	strhne	r3, [r4, #12]
 8002e54:	bd10      	pop	{r4, pc}

08002e56 <__sclose>:
 8002e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e5a:	f000 b813 	b.w	8002e84 <_close_r>
	...

08002e60 <_write_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4d07      	ldr	r5, [pc, #28]	; (8002e80 <_write_r+0x20>)
 8002e64:	4604      	mov	r4, r0
 8002e66:	4608      	mov	r0, r1
 8002e68:	4611      	mov	r1, r2
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	602a      	str	r2, [r5, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f7fd fdf8 	bl	8000a64 <_write>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d102      	bne.n	8002e7e <_write_r+0x1e>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	b103      	cbz	r3, 8002e7e <_write_r+0x1e>
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	20000114 	.word	0x20000114

08002e84 <_close_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4d06      	ldr	r5, [pc, #24]	; (8002ea0 <_close_r+0x1c>)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	602b      	str	r3, [r5, #0]
 8002e90:	f7fd fed1 	bl	8000c36 <_close>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d102      	bne.n	8002e9e <_close_r+0x1a>
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	b103      	cbz	r3, 8002e9e <_close_r+0x1a>
 8002e9c:	6023      	str	r3, [r4, #0]
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ea0:	20000114 	.word	0x20000114

08002ea4 <_fstat_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4d07      	ldr	r5, [pc, #28]	; (8002ec4 <_fstat_r+0x20>)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	602b      	str	r3, [r5, #0]
 8002eb2:	f7fd fecc 	bl	8000c4e <_fstat>
 8002eb6:	1c43      	adds	r3, r0, #1
 8002eb8:	d102      	bne.n	8002ec0 <_fstat_r+0x1c>
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	b103      	cbz	r3, 8002ec0 <_fstat_r+0x1c>
 8002ebe:	6023      	str	r3, [r4, #0]
 8002ec0:	bd38      	pop	{r3, r4, r5, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000114 	.word	0x20000114

08002ec8 <_isatty_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	4d06      	ldr	r5, [pc, #24]	; (8002ee4 <_isatty_r+0x1c>)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	602b      	str	r3, [r5, #0]
 8002ed4:	f7fd fecb 	bl	8000c6e <_isatty>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d102      	bne.n	8002ee2 <_isatty_r+0x1a>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	b103      	cbz	r3, 8002ee2 <_isatty_r+0x1a>
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	20000114 	.word	0x20000114

08002ee8 <_lseek_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4d07      	ldr	r5, [pc, #28]	; (8002f08 <_lseek_r+0x20>)
 8002eec:	4604      	mov	r4, r0
 8002eee:	4608      	mov	r0, r1
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	602a      	str	r2, [r5, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f7fd fec4 	bl	8000c84 <_lseek>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_lseek_r+0x1e>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_lseek_r+0x1e>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	20000114 	.word	0x20000114

08002f0c <__malloc_lock>:
 8002f0c:	4801      	ldr	r0, [pc, #4]	; (8002f14 <__malloc_lock+0x8>)
 8002f0e:	f7ff be43 	b.w	8002b98 <__retarget_lock_acquire_recursive>
 8002f12:	bf00      	nop
 8002f14:	2000010c 	.word	0x2000010c

08002f18 <__malloc_unlock>:
 8002f18:	4801      	ldr	r0, [pc, #4]	; (8002f20 <__malloc_unlock+0x8>)
 8002f1a:	f7ff be3e 	b.w	8002b9a <__retarget_lock_release_recursive>
 8002f1e:	bf00      	nop
 8002f20:	2000010c 	.word	0x2000010c

08002f24 <_read_r>:
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	4d07      	ldr	r5, [pc, #28]	; (8002f44 <_read_r+0x20>)
 8002f28:	4604      	mov	r4, r0
 8002f2a:	4608      	mov	r0, r1
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	2200      	movs	r2, #0
 8002f30:	602a      	str	r2, [r5, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f7fd fe62 	bl	8000bfc <_read>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d102      	bne.n	8002f42 <_read_r+0x1e>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	b103      	cbz	r3, 8002f42 <_read_r+0x1e>
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	20000114 	.word	0x20000114

08002f48 <_init>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	bf00      	nop
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr

08002f54 <_fini>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr
