
Nucleo-L432KC_LED_flash_and_printing_text.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800485c  0800485c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800485c  0800485c  0000585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004864  08004864  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004864  08004864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800486c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000068  080048d4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080048d4  0000631c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eadf  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238d  00000000  00000000  00014b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00016f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3f  00000000  00000000  00017c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002168b  00000000  00000000  0001869f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b5e  00000000  00000000  00039d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3db4  00000000  00000000  0004a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e63c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  0010e680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  001125d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004694 	.word	0x08004694

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004694 	.word	0x08004694

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LED_Toggle>:
  * @brief  Toggle the LED with delay
  * @param  delay_ms: Delay in milliseconds between toggles
  * @retval None
  */
void LED_Toggle(uint32_t delay_ms)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005b4:	2108      	movs	r1, #8
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <LED_Toggle+0x20>)
 80005b8:	f000 fef8 	bl	80013ac <HAL_GPIO_TogglePin>
  HAL_Delay(delay_ms);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 fc51 	bl	8000e64 <HAL_Delay>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	48000400 	.word	0x48000400

080005d0 <LED_GetState>:
/**
  * @brief  Get the current state of the LED
  * @retval GPIO_PinState: Current LED state
  */
GPIO_PinState LED_GetState(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 80005d4:	2108      	movs	r1, #8
 80005d6:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <LED_GetState+0x14>)
 80005d8:	f000 feb8 	bl	800134c <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	48000400 	.word	0x48000400

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b598      	push	{r3, r4, r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fbc5 	bl	8000d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f82a 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f8fa 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 f8c8 	bl	800078c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005fc:	f000 f886 	bl	800070c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	UART_PrintWelcomeMessage(); //Code is in uart_control.c
 8000600:	f000 fb24 	bl	8000c4c <UART_PrintWelcomeMessage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		LED_Toggle(1000); //Toggle LD3 LED Pin, with 1 second delay. Code is in led.control.c
 8000604:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000608:	f7ff ffd0 	bl	80005ac <LED_Toggle>
		HAL_Delay(500);
 800060c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000610:	f000 fc28 	bl	8000e64 <HAL_Delay>
		UART_PrintLEDStatus(counter++, LED_GetState()); //Print LED status information. Code is in uart_control.c
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <main+0x5c>)
 8000616:	681c      	ldr	r4, [r3, #0]
 8000618:	1c63      	adds	r3, r4, #1
 800061a:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <main+0x5c>)
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	f7ff ffd7 	bl	80005d0 <LED_GetState>
 8000622:	4603      	mov	r3, r0
 8000624:	4619      	mov	r1, r3
 8000626:	4620      	mov	r0, r4
 8000628:	f000 fb38 	bl	8000c9c <UART_PrintLEDStatus>
		HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000630:	f000 fc18 	bl	8000e64 <HAL_Delay>
		UART_PrintSystemInfo(); //Print system information
 8000634:	f000 fb52 	bl	8000cdc <UART_PrintSystemInfo>
		HAL_Delay(500);
 8000638:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800063c:	f000 fc12 	bl	8000e64 <HAL_Delay>
		LED_Toggle(1000); //Toggle LD3 LED Pin, with 1 second delay. Code is in led.control.c
 8000640:	bf00      	nop
 8000642:	e7df      	b.n	8000604 <main+0x1c>
 8000644:	20000160 	.word	0x20000160

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	@ 0x58
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2244      	movs	r2, #68	@ 0x44
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f003 f8e4 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800066e:	f001 f807 	bl	8001680 <HAL_PWREx_ControlVoltageScaling>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000678:	f000 f902 	bl	8000880 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800067c:	f000 ffe2 	bl	8001644 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000680:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <SystemClock_Config+0xc0>)
 8000682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000686:	4a20      	ldr	r2, [pc, #128]	@ (8000708 <SystemClock_Config+0xc0>)
 8000688:	f023 0318 	bic.w	r3, r3, #24
 800068c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000690:	2314      	movs	r3, #20
 8000692:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a0:	2360      	movs	r3, #96	@ 0x60
 80006a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a8:	2301      	movs	r3, #1
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006b0:	2310      	movs	r3, #16
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f831 	bl	800172c <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006d0:	f000 f8d6 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2303      	movs	r3, #3
 80006da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	2101      	movs	r1, #1
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fc31 	bl	8001f54 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006f8:	f000 f8c2 	bl	8000880 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006fc:	f002 f844 	bl	8002788 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000700:	bf00      	nop
 8000702:	3758      	adds	r7, #88	@ 0x58
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <MX_I2C1_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000718:	4a1b      	ldr	r2, [pc, #108]	@ (8000788 <MX_I2C1_Init+0x7c>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000724:	2201      	movs	r2, #1
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000746:	480e      	ldr	r0, [pc, #56]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000748:	f000 fe4a 	bl	80013e0 <HAL_I2C_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000752:	f000 f895 	bl	8000880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	4809      	ldr	r0, [pc, #36]	@ (8000780 <MX_I2C1_Init+0x74>)
 800075a:	f000 fedc 	bl	8001516 <HAL_I2CEx_ConfigAnalogFilter>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000764:	f000 f88c 	bl	8000880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_I2C1_Init+0x74>)
 800076c:	f000 ff1e 	bl	80015ac <HAL_I2CEx_ConfigDigitalFilter>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 f883 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000084 	.word	0x20000084
 8000784:	40005400 	.word	0x40005400
 8000788:	00b07cb4 	.word	0x00b07cb4

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	@ (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007d0:	f002 f8dc 	bl	800298c <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f851 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000d8 	.word	0x200000d8
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MX_GPIO_Init+0x8c>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a1c      	ldr	r2, [pc, #112]	@ (8000878 <MX_GPIO_Init+0x8c>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_GPIO_Init+0x8c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_GPIO_Init+0x8c>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a16      	ldr	r2, [pc, #88]	@ (8000878 <MX_GPIO_Init+0x8c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_GPIO_Init+0x8c>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_GPIO_Init+0x8c>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <MX_GPIO_Init+0x8c>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_GPIO_Init+0x8c>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	480b      	ldr	r0, [pc, #44]	@ (800087c <MX_GPIO_Init+0x90>)
 8000850:	f000 fd94 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000854:	2308      	movs	r3, #8
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4619      	mov	r1, r3
 800086a:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_GPIO_Init+0x90>)
 800086c:	f000 fc04 	bl	8001078 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	48000400 	.word	0x48000400

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <Error_Handler+0x8>

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6613      	str	r3, [r2, #96]	@ 0x60
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09e      	sub	sp, #120	@ 0x78
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2254      	movs	r2, #84	@ 0x54
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 ff95 	bl	8003824 <memset>
  if(hi2c->Instance==I2C1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a1f      	ldr	r2, [pc, #124]	@ (800097c <HAL_I2C_MspInit+0xa8>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d137      	bne.n	8000974 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000908:	2300      	movs	r3, #0
 800090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fd43 	bl	800239c <HAL_RCCEx_PeriphCLKConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800091c:	f7ff ffb0 	bl	8000880 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_I2C_MspInit+0xac>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000924:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_I2C_MspInit+0xac>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_I2C_MspInit+0xac>)
 800092e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000938:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800093c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093e:	2312      	movs	r3, #18
 8000940:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094a:	2304      	movs	r3, #4
 800094c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000958:	f000 fb8e 	bl	8001078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HAL_I2C_MspInit+0xac>)
 800095e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000960:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <HAL_I2C_MspInit+0xac>)
 8000962:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000966:	6593      	str	r3, [r2, #88]	@ 0x58
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <HAL_I2C_MspInit+0xac>)
 800096a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000974:	bf00      	nop
 8000976:	3778      	adds	r7, #120	@ 0x78
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40005400 	.word	0x40005400
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	@ 0x78
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	2254      	movs	r2, #84	@ 0x54
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 ff3d 	bl	8003824 <memset>
  if(huart->Instance==USART2)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a28      	ldr	r2, [pc, #160]	@ (8000a50 <HAL_UART_MspInit+0xcc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d148      	bne.n	8000a46 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fceb 	bl	800239c <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009cc:	f7ff ff58 	bl	8000880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d0:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009da:	6593      	str	r3, [r2, #88]	@ 0x58
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	4a19      	ldr	r2, [pc, #100]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a00:	2304      	movs	r3, #4
 8000a02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a10:	2307      	movs	r3, #7
 8000a12:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f000 fb2b 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a26:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a34:	2303      	movs	r3, #3
 8000a36:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a42:	f000 fb19 	bl	8001078 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a46:	bf00      	nop
 8000a48:	3778      	adds	r7, #120	@ 0x78
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40004400 	.word	0x40004400
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <NMI_Handler+0x4>

08000a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aae:	f000 f9b9 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e00a      	b.n	8000ade <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac8:	f3af 8000 	nop.w
 8000acc:	4601      	mov	r1, r0
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	60ba      	str	r2, [r7, #8]
 8000ad4:	b2ca      	uxtb	r2, r1
 8000ad6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3301      	adds	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	dbf0      	blt.n	8000ac8 <_read+0x12>
  }

  return len;
 8000ae6:	687b      	ldr	r3, [r7, #4]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e009      	b.n	8000b16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	60ba      	str	r2, [r7, #8]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f8fa 	bl	8000d04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf1      	blt.n	8000b02 <_write+0x12>
  }
  return len;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_close>:

int _close(int file)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b50:	605a      	str	r2, [r3, #4]
  return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_isatty>:

int _isatty(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f002 fe7e 	bl	80038c0 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000c000 	.word	0x2000c000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000164 	.word	0x20000164
 8000bf8:	20000320 	.word	0x20000320

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <print_message>:
  * @brief  Print a message via UART
  * @param  msg: String to be printed
  * @retval None
  */
void print_message(const char* msg)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fad1 	bl	80001d0 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <print_message+0x28>)
 8000c3a:	f001 fef5 	bl	8002a28 <HAL_UART_Transmit>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000d8 	.word	0x200000d8

08000c4c <UART_PrintWelcomeMessage>:
/**
  * @brief  Print a welcome message
  * @retval None
  */
void UART_PrintWelcomeMessage(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  print_message("\r\n\r\n");
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <UART_PrintWelcomeMessage+0x34>)
 8000c52:	f7ff ffe5 	bl	8000c20 <print_message>
  print_message("*********************************\r\n");
 8000c56:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <UART_PrintWelcomeMessage+0x38>)
 8000c58:	f7ff ffe2 	bl	8000c20 <print_message>
  print_message("* Nucleo L432KC UART Test       *\r\n");
 8000c5c:	480a      	ldr	r0, [pc, #40]	@ (8000c88 <UART_PrintWelcomeMessage+0x3c>)
 8000c5e:	f7ff ffdf 	bl	8000c20 <print_message>
  print_message("* System initialised            *\r\n");
 8000c62:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <UART_PrintWelcomeMessage+0x40>)
 8000c64:	f7ff ffdc 	bl	8000c20 <print_message>
  print_message("*********************************\r\n\r\n");
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <UART_PrintWelcomeMessage+0x44>)
 8000c6a:	f7ff ffd9 	bl	8000c20 <print_message>

  printf("Printf is working via __io_putchar redirection\r\n");
 8000c6e:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <UART_PrintWelcomeMessage+0x48>)
 8000c70:	f002 fcd6 	bl	8003620 <puts>
  printf("Starting main loop now...\r\n\r\n");
 8000c74:	4808      	ldr	r0, [pc, #32]	@ (8000c98 <UART_PrintWelcomeMessage+0x4c>)
 8000c76:	f002 fcd3 	bl	8003620 <puts>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	080046ac 	.word	0x080046ac
 8000c84:	080046b4 	.word	0x080046b4
 8000c88:	080046d8 	.word	0x080046d8
 8000c8c:	080046fc 	.word	0x080046fc
 8000c90:	08004720 	.word	0x08004720
 8000c94:	08004748 	.word	0x08004748
 8000c98:	08004778 	.word	0x08004778

08000c9c <UART_PrintLEDStatus>:
  * @param  counter: Toggle counter
  * @param  ledState: Current state of the LED
  * @retval None
  */
void UART_PrintLEDStatus(uint32_t counter, GPIO_PinState ledState)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
  sprintf(message, "Toggle #%lu - LED is now %s\r\n",
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d101      	bne.n	8000cb2 <UART_PrintLEDStatus+0x16>
 8000cae:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <UART_PrintLEDStatus+0x30>)
 8000cb0:	e000      	b.n	8000cb4 <UART_PrintLEDStatus+0x18>
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <UART_PrintLEDStatus+0x34>)
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	4907      	ldr	r1, [pc, #28]	@ (8000cd4 <UART_PrintLEDStatus+0x38>)
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <UART_PrintLEDStatus+0x3c>)
 8000cba:	f002 fcb9 	bl	8003630 <siprintf>
          counter,
          ledState == GPIO_PIN_SET ? "ON" : "OFF");
  print_message(message);
 8000cbe:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <UART_PrintLEDStatus+0x3c>)
 8000cc0:	f7ff ffae 	bl	8000c20 <print_message>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	08004798 	.word	0x08004798
 8000cd0:	0800479c 	.word	0x0800479c
 8000cd4:	080047a0 	.word	0x080047a0
 8000cd8:	20000168 	.word	0x20000168

08000cdc <UART_PrintSystemInfo>:
/**
  * @brief  Print system information
  * @retval None
  */
void UART_PrintSystemInfo(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  printf("System uptime: %lu seconds\r\n\r\n", HAL_GetTick() / 1000);
 8000ce0:	f000 f8b4 	bl	8000e4c <HAL_GetTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <UART_PrintSystemInfo+0x20>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	099b      	lsrs	r3, r3, #6
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <UART_PrintSystemInfo+0x24>)
 8000cf2:	f002 fc2d 	bl	8003550 <iprintf>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	10624dd3 	.word	0x10624dd3
 8000d00:	080047c0 	.word	0x080047c0

08000d04 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d0c:	1d39      	adds	r1, r7, #4
 8000d0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d12:	2201      	movs	r2, #1
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <__io_putchar+0x20>)
 8000d16:	f001 fe87 	bl	8002a28 <HAL_UART_Transmit>
  return ch;
 8000d1a:	687b      	ldr	r3, [r7, #4]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200000d8 	.word	0x200000d8

08000d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff ff66 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	@ (8000d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	@ (8000d6c <LoopForever+0xe>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	@ (8000d74 <LoopForever+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f002 fdb9 	bl	80038cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5a:	f7ff fc45 	bl	80005e8 <main>

08000d5e <LoopForever>:

LoopForever:
    b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d60:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d6c:	0800486c 	.word	0x0800486c
  ldr r2, =_sbss
 8000d70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d74:	2000031c 	.word	0x2000031c

08000d78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_IRQHandler>

08000d7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f943 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f80e 	bl	8000dac <HAL_InitTick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	e001      	b.n	8000da0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9c:	f7ff fd76 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_InitTick+0x6c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d023      	beq.n	8000e08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <HAL_InitTick+0x70>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <HAL_InitTick+0x6c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f941 	bl	800105e <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10f      	bne.n	8000e02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d809      	bhi.n	8000dfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f919 	bl	8001026 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <HAL_InitTick+0x74>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e007      	b.n	8000e0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e004      	b.n	8000e0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e001      	b.n	8000e0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	200001cc 	.word	0x200001cc

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200001cc 	.word	0x200001cc

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	@ (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff47 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff5c 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffb0 	bl	8000fcc <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e148      	b.n	800131a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 813a 	beq.w	8001314 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d005      	beq.n	80010b8 <HAL_GPIO_Init+0x40>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	f003 0201 	and.w	r2, r3, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b03      	cmp	r3, #3
 8001124:	d017      	beq.n	8001156 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d123      	bne.n	80011aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	6939      	ldr	r1, [r7, #16]
 80011a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0203 	and.w	r2, r3, #3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8094 	beq.w	8001314 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	4b52      	ldr	r3, [pc, #328]	@ (8001338 <HAL_GPIO_Init+0x2c0>)
 80011ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f0:	4a51      	ldr	r2, [pc, #324]	@ (8001338 <HAL_GPIO_Init+0x2c0>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80011f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001338 <HAL_GPIO_Init+0x2c0>)
 80011fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001204:	4a4d      	ldr	r2, [pc, #308]	@ (800133c <HAL_GPIO_Init+0x2c4>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800122e:	d00d      	beq.n	800124c <HAL_GPIO_Init+0x1d4>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a43      	ldr	r2, [pc, #268]	@ (8001340 <HAL_GPIO_Init+0x2c8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0x1d0>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a42      	ldr	r2, [pc, #264]	@ (8001344 <HAL_GPIO_Init+0x2cc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d101      	bne.n	8001244 <HAL_GPIO_Init+0x1cc>
 8001240:	2302      	movs	r3, #2
 8001242:	e004      	b.n	800124e <HAL_GPIO_Init+0x1d6>
 8001244:	2307      	movs	r3, #7
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0x1d6>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_GPIO_Init+0x1d6>
 800124c:	2300      	movs	r3, #0
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	f002 0203 	and.w	r2, r2, #3
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	4093      	lsls	r3, r2
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800125e:	4937      	ldr	r1, [pc, #220]	@ (800133c <HAL_GPIO_Init+0x2c4>)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800126c:	4b36      	ldr	r3, [pc, #216]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001290:	4a2d      	ldr	r2, [pc, #180]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001296:	4b2c      	ldr	r3, [pc, #176]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ba:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012e4:	4a18      	ldr	r2, [pc, #96]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800130e:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	f47f aeaf 	bne.w	8001088 <HAL_GPIO_Init+0x10>
  }
}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000
 8001340:	48000400 	.word	0x48000400
 8001344:	48000800 	.word	0x48000800
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e001      	b.n	800136e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43d9      	mvns	r1, r3
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	400b      	ands	r3, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e08d      	b.n	800150e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fa64 	bl	80008d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2224      	movs	r2, #36	@ 0x24
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	e006      	b.n	8001468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d108      	bne.n	8001482 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	e007      	b.n	8001492 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001490:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69d9      	ldr	r1, [r3, #28]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1a      	ldr	r2, [r3, #32]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2220      	movs	r2, #32
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b20      	cmp	r3, #32
 800152a:	d138      	bne.n	800159e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001536:	2302      	movs	r3, #2
 8001538:	e032      	b.n	80015a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2224      	movs	r2, #36	@ 0x24
 8001546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0201 	bic.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001568:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0201 	orr.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2220      	movs	r2, #32
 800158e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800159e:	2302      	movs	r3, #2
  }
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b20      	cmp	r3, #32
 80015c0:	d139      	bne.n	8001636 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e033      	b.n	8001638 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2224      	movs	r2, #36	@ 0x24
 80015dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0201 	orr.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001636:	2302      	movs	r3, #2
  }
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40007000 	.word	0x40007000

08001664 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <HAL_PWREx_GetVoltageRange+0x18>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40007000 	.word	0x40007000

08001680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800168e:	d130      	bne.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001690:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800169c:	d038      	beq.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2232      	movs	r2, #50	@ 0x32
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c4:	e002      	b.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016d8:	d102      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f2      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016ec:	d110      	bne.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e00f      	b.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016fe:	d007      	beq.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001708:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800170e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40007000 	.word	0x40007000
 8001724:	20000000 	.word	0x20000000
 8001728:	431bde83 	.word	0x431bde83

0800172c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	f000 bc02 	b.w	8001f44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001740:	4b96      	ldr	r3, [pc, #600]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174a:	4b94      	ldr	r3, [pc, #592]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80e4 	beq.w	800192a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_RCC_OscConfig+0x4c>
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	f040 808b 	bne.w	8001886 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b01      	cmp	r3, #1
 8001774:	f040 8087 	bne.w	8001886 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001778:	4b88      	ldr	r3, [pc, #544]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_OscConfig+0x64>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e3d9      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	4b81      	ldr	r3, [pc, #516]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_RCC_OscConfig+0x7e>
 80017a0:	4b7e      	ldr	r3, [pc, #504]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017a8:	e005      	b.n	80017b6 <HAL_RCC_OscConfig+0x8a>
 80017aa:	4b7c      	ldr	r3, [pc, #496]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d223      	bcs.n	8001802 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fd8c 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e3ba      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ce:	4b73      	ldr	r3, [pc, #460]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a72      	ldr	r2, [pc, #456]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b70      	ldr	r3, [pc, #448]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	496d      	ldr	r1, [pc, #436]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ec:	4b6b      	ldr	r3, [pc, #428]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	4968      	ldr	r1, [pc, #416]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
 8001800:	e025      	b.n	800184e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001802:	4b66      	ldr	r3, [pc, #408]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a65      	ldr	r2, [pc, #404]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b63      	ldr	r3, [pc, #396]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4960      	ldr	r1, [pc, #384]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001820:	4b5e      	ldr	r3, [pc, #376]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	495b      	ldr	r1, [pc, #364]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fd4c 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e37a      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800184e:	f000 fc81 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b51      	ldr	r3, [pc, #324]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	4950      	ldr	r1, [pc, #320]	@ (80019a0 <HAL_RCC_OscConfig+0x274>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a4e      	ldr	r2, [pc, #312]	@ (80019a4 <HAL_RCC_OscConfig+0x278>)
 800186c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800186e:	4b4e      	ldr	r3, [pc, #312]	@ (80019a8 <HAL_RCC_OscConfig+0x27c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fa9a 	bl	8000dac <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d052      	beq.n	8001928 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	e35e      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d032      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800188e:	4b43      	ldr	r3, [pc, #268]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a42      	ldr	r2, [pc, #264]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189a:	f7ff fad7 	bl	8000e4c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a2:	f7ff fad3 	bl	8000e4c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e347      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b4:	4b39      	ldr	r3, [pc, #228]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c0:	4b36      	ldr	r3, [pc, #216]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a35      	ldr	r2, [pc, #212]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b33      	ldr	r3, [pc, #204]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4930      	ldr	r1, [pc, #192]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018de:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	492b      	ldr	r1, [pc, #172]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
 80018f2:	e01a      	b.n	800192a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018f4:	4b29      	ldr	r3, [pc, #164]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a28      	ldr	r2, [pc, #160]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001900:	f7ff faa4 	bl	8000e4c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001908:	f7ff faa0 	bl	8000e4c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e314      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800191a:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1dc>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d073      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d005      	beq.n	8001948 <HAL_RCC_OscConfig+0x21c>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d10e      	bne.n	8001960 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d063      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2f0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d15f      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e2f1      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x24c>
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a0b      	ldr	r2, [pc, #44]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e025      	b.n	80019c4 <HAL_RCC_OscConfig+0x298>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001980:	d114      	bne.n	80019ac <HAL_RCC_OscConfig+0x280>
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a02      	ldr	r2, [pc, #8]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e013      	b.n	80019c4 <HAL_RCC_OscConfig+0x298>
 800199c:	40021000 	.word	0x40021000
 80019a0:	080047e0 	.word	0x080047e0
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000004 	.word	0x20000004
 80019ac:	4ba0      	ldr	r3, [pc, #640]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a9f      	ldr	r2, [pc, #636]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 80019b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b9d      	ldr	r3, [pc, #628]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a9c      	ldr	r2, [pc, #624]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fa3e 	bl	8000e4c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fa3a 	bl	8000e4c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	@ 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e2ae      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e6:	4b92      	ldr	r3, [pc, #584]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2a8>
 80019f2:	e014      	b.n	8001a1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fa2a 	bl	8000e4c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fa26 	bl	8000e4c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	@ 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e29a      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0e:	4b88      	ldr	r3, [pc, #544]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x2d0>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d060      	beq.n	8001aec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x310>
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d119      	bne.n	8001a6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d116      	bne.n	8001a6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a3c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_OscConfig+0x328>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e277      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b76      	ldr	r3, [pc, #472]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	4973      	ldr	r1, [pc, #460]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a68:	e040      	b.n	8001aec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d023      	beq.n	8001aba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a72:	4b6f      	ldr	r3, [pc, #444]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a6e      	ldr	r2, [pc, #440]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f9e5 	bl	8000e4c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff f9e1 	bl	8000e4c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e255      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a98:	4b65      	ldr	r3, [pc, #404]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b62      	ldr	r3, [pc, #392]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	495f      	ldr	r1, [pc, #380]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	e018      	b.n	8001aec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b5d      	ldr	r3, [pc, #372]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5c      	ldr	r2, [pc, #368]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f9c1 	bl	8000e4c <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff f9bd 	bl	8000e4c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e231      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae0:	4b53      	ldr	r3, [pc, #332]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d03c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b00:	4b4b      	ldr	r3, [pc, #300]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b06:	4a4a      	ldr	r2, [pc, #296]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff f99c 	bl	8000e4c <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff f998 	bl	8000e4c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e20c      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2a:	4b41      	ldr	r3, [pc, #260]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ef      	beq.n	8001b18 <HAL_RCC_OscConfig+0x3ec>
 8001b38:	e01b      	b.n	8001b72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b40:	4a3b      	ldr	r2, [pc, #236]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f97f 	bl	8000e4c <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff f97b 	bl	8000e4c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1ef      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b64:	4b32      	ldr	r3, [pc, #200]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ef      	bne.n	8001b52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80a6 	beq.w	8001ccc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b84:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	4b27      	ldr	r3, [pc, #156]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	4a26      	ldr	r2, [pc, #152]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b9c:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bac:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <HAL_RCC_OscConfig+0x508>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d118      	bne.n	8001bea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c34 <HAL_RCC_OscConfig+0x508>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c34 <HAL_RCC_OscConfig+0x508>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f942 	bl	8000e4c <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7ff f93e 	bl	8000e4c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1b2      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_RCC_OscConfig+0x508>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4d8>
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c02:	e029      	b.n	8001c58 <HAL_RCC_OscConfig+0x52c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d115      	bne.n	8001c38 <HAL_RCC_OscConfig+0x50c>
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c12:	4a07      	ldr	r2, [pc, #28]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c22:	4a03      	ldr	r2, [pc, #12]	@ (8001c30 <HAL_RCC_OscConfig+0x504>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c2c:	e014      	b.n	8001c58 <HAL_RCC_OscConfig+0x52c>
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40007000 	.word	0x40007000
 8001c38:	4b9a      	ldr	r3, [pc, #616]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3e:	4a99      	ldr	r2, [pc, #612]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c48:	4b96      	ldr	r3, [pc, #600]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4e:	4a95      	ldr	r2, [pc, #596]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001c50:	f023 0304 	bic.w	r3, r3, #4
 8001c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d016      	beq.n	8001c8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f8f4 	bl	8000e4c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff f8f0 	bl	8000e4c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e162      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c7e:	4b89      	ldr	r3, [pc, #548]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ed      	beq.n	8001c68 <HAL_RCC_OscConfig+0x53c>
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f8dd 	bl	8000e4c <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff f8d9 	bl	8000e4c <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e14b      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cac:	4b7d      	ldr	r3, [pc, #500]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ed      	bne.n	8001c96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4b78      	ldr	r3, [pc, #480]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	4a77      	ldr	r2, [pc, #476]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ce0:	4b70      	ldr	r3, [pc, #448]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ce6:	4a6f      	ldr	r2, [pc, #444]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f8ac 	bl	8000e4c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cf8:	f7ff f8a8 	bl	8000e4c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e11c      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d0a:	4b66      	ldr	r3, [pc, #408]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ef      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x5cc>
 8001d18:	e01b      	b.n	8001d52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d1a:	4b62      	ldr	r3, [pc, #392]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d20:	4a60      	ldr	r2, [pc, #384]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f88f 	bl	8000e4c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d32:	f7ff f88b 	bl	8000e4c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0ff      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d44:	4b57      	ldr	r3, [pc, #348]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ef      	bne.n	8001d32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80f3 	beq.w	8001f42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	f040 80c9 	bne.w	8001ef8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d66:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0203 	and.w	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d12c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	3b01      	subs	r3, #1
 8001d86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d123      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d113      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db6:	085b      	lsrs	r3, r3, #1
 8001db8:	3b01      	subs	r3, #1
 8001dba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d109      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d06b      	beq.n	8001eac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d062      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dda:	4b32      	ldr	r3, [pc, #200]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0ac      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001df0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001df4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df6:	f7ff f829 	bl	8000e4c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff f825 	bl	8000e4c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e099      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <HAL_RCC_OscConfig+0x77c>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	4311      	orrs	r1, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e36:	0212      	lsls	r2, r2, #8
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0552      	lsls	r2, r2, #21
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e4a:	0852      	lsrs	r2, r2, #1
 8001e4c:	3a01      	subs	r2, #1
 8001e4e:	0652      	lsls	r2, r2, #25
 8001e50:	4311      	orrs	r1, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e56:	06d2      	lsls	r2, r2, #27
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	4912      	ldr	r1, [pc, #72]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e78:	f7fe ffe8 	bl	8000e4c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7fe ffe4 	bl	8000e4c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e058      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <HAL_RCC_OscConfig+0x778>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9e:	e050      	b.n	8001f42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e04f      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eac:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d144      	bne.n	8001f42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eb8:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a23      	ldr	r2, [pc, #140]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec4:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a20      	ldr	r2, [pc, #128]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ece:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ed0:	f7fe ffbc 	bl	8000e4c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe ffb8 	bl	8000e4c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e02c      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x7ac>
 8001ef6:	e024      	b.n	8001f42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d01f      	beq.n	8001f3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7fe ff9f 	bl	8000e4c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f12:	f7fe ff9b 	bl	8000e4c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e00f      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	4905      	ldr	r1, [pc, #20]	@ (8001f4c <HAL_RCC_OscConfig+0x820>)
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_RCC_OscConfig+0x824>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
 8001f3c:	e001      	b.n	8001f42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	feeefffc 	.word	0xfeeefffc

08001f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0e7      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f68:	4b75      	ldr	r3, [pc, #468]	@ (8002140 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d910      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b72      	ldr	r3, [pc, #456]	@ (8002140 <HAL_RCC_ClockConfig+0x1ec>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 0207 	bic.w	r2, r3, #7
 8001f7e:	4970      	ldr	r1, [pc, #448]	@ (8002140 <HAL_RCC_ClockConfig+0x1ec>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b6e      	ldr	r3, [pc, #440]	@ (8002140 <HAL_RCC_ClockConfig+0x1ec>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0cf      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d010      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4b66      	ldr	r3, [pc, #408]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d908      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b63      	ldr	r3, [pc, #396]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4960      	ldr	r1, [pc, #384]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d04c      	beq.n	800206c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fda:	4b5a      	ldr	r3, [pc, #360]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d121      	bne.n	800202a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0a6      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff2:	4b54      	ldr	r3, [pc, #336]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d115      	bne.n	800202a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e09a      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800200a:	4b4e      	ldr	r3, [pc, #312]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e08e      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201a:	4b4a      	ldr	r3, [pc, #296]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e086      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b46      	ldr	r3, [pc, #280]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4943      	ldr	r1, [pc, #268]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800203c:	f7fe ff06 	bl	8000e4c <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7fe ff02 	bl	8000e4c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e06e      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b3a      	ldr	r3, [pc, #232]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4b31      	ldr	r3, [pc, #196]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002084:	429a      	cmp	r2, r3
 8002086:	d208      	bcs.n	800209a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	492b      	ldr	r1, [pc, #172]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800209a:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <HAL_RCC_ClockConfig+0x1ec>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d210      	bcs.n	80020ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a8:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <HAL_RCC_ClockConfig+0x1ec>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 0207 	bic.w	r2, r3, #7
 80020b0:	4923      	ldr	r1, [pc, #140]	@ (8002140 <HAL_RCC_ClockConfig+0x1ec>)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b8:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCC_ClockConfig+0x1ec>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e036      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4918      	ldr	r1, [pc, #96]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4910      	ldr	r1, [pc, #64]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002108:	f000 f824 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 800210c:	4602      	mov	r2, r0
 800210e:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	490b      	ldr	r1, [pc, #44]	@ (8002148 <HAL_RCC_ClockConfig+0x1f4>)
 800211a:	5ccb      	ldrb	r3, [r1, r3]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	4a09      	ldr	r2, [pc, #36]	@ (800214c <HAL_RCC_ClockConfig+0x1f8>)
 8002126:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_ClockConfig+0x1fc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fe3d 	bl	8000dac <HAL_InitTick>
 8002132:	4603      	mov	r3, r0
 8002134:	72fb      	strb	r3, [r7, #11]

  return status;
 8002136:	7afb      	ldrb	r3, [r7, #11]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40022000 	.word	0x40022000
 8002144:	40021000 	.word	0x40021000
 8002148:	080047e0 	.word	0x080047e0
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	@ 0x24
 8002158:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002162:	4b3e      	ldr	r3, [pc, #248]	@ (800225c <HAL_RCC_GetSysClockFreq+0x108>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216c:	4b3b      	ldr	r3, [pc, #236]	@ (800225c <HAL_RCC_GetSysClockFreq+0x108>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x34>
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d121      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d11e      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002188:	4b34      	ldr	r3, [pc, #208]	@ (800225c <HAL_RCC_GetSysClockFreq+0x108>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002194:	4b31      	ldr	r3, [pc, #196]	@ (800225c <HAL_RCC_GetSysClockFreq+0x108>)
 8002196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e005      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021a4:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <HAL_RCC_GetSysClockFreq+0x108>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10d      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021cc:	4b25      	ldr	r3, [pc, #148]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	e004      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d8:	4b23      	ldr	r3, [pc, #140]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x114>)
 80021da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d134      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e2:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <HAL_RCC_GetSysClockFreq+0x108>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0xa6>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d003      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0xac>
 80021f8:	e005      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x110>)
 80021fc:	617b      	str	r3, [r7, #20]
      break;
 80021fe:	e005      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x114>)
 8002202:	617b      	str	r3, [r7, #20]
      break;
 8002204:	e002      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	617b      	str	r3, [r7, #20]
      break;
 800220a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <HAL_RCC_GetSysClockFreq+0x108>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	3301      	adds	r3, #1
 8002218:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <HAL_RCC_GetSysClockFreq+0x108>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	fb03 f202 	mul.w	r2, r3, r2
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	0e5b      	lsrs	r3, r3, #25
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	3301      	adds	r3, #1
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800224c:	69bb      	ldr	r3, [r7, #24]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	@ 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	080047f8 	.word	0x080047f8
 8002264:	00f42400 	.word	0x00f42400
 8002268:	007a1200 	.word	0x007a1200

0800226c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <HAL_RCC_GetHCLKFreq+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000000 	.word	0x20000000

08002284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002288:	f7ff fff0 	bl	800226c <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4904      	ldr	r1, [pc, #16]	@ (80022ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080047f0 	.word	0x080047f0

080022b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022b4:	f7ff ffda 	bl	800226c <HAL_RCC_GetHCLKFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	0adb      	lsrs	r3, r3, #11
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	4904      	ldr	r1, [pc, #16]	@ (80022d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022c6:	5ccb      	ldrb	r3, [r1, r3]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	080047f0 	.word	0x080047f0

080022dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022f4:	f7ff f9b6 	bl	8001664 <HAL_PWREx_GetVoltageRange>
 80022f8:	6178      	str	r0, [r7, #20]
 80022fa:	e014      	b.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b25      	ldr	r3, [pc, #148]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	4a24      	ldr	r2, [pc, #144]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002306:	6593      	str	r3, [r2, #88]	@ 0x58
 8002308:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002314:	f7ff f9a6 	bl	8001664 <HAL_PWREx_GetVoltageRange>
 8002318:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b1e      	ldr	r3, [pc, #120]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	4a1d      	ldr	r2, [pc, #116]	@ (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002324:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800232c:	d10b      	bne.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	@ 0x80
 8002332:	d919      	bls.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2ba0      	cmp	r3, #160	@ 0xa0
 8002338:	d902      	bls.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800233a:	2302      	movs	r3, #2
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e013      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e010      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b80      	cmp	r3, #128	@ 0x80
 800234a:	d902      	bls.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800234c:	2303      	movs	r3, #3
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e00a      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b80      	cmp	r3, #128	@ 0x80
 8002356:	d102      	bne.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002358:	2302      	movs	r3, #2
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	e004      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b70      	cmp	r3, #112	@ 0x70
 8002362:	d101      	bne.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002364:	2301      	movs	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 0207 	bic.w	r2, r3, #7
 8002370:	4909      	ldr	r1, [pc, #36]	@ (8002398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002378:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	40022000 	.word	0x40022000

0800239c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a4:	2300      	movs	r3, #0
 80023a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a8:	2300      	movs	r3, #0
 80023aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d031      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023c0:	d01a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80023c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023c6:	d814      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023d0:	d10f      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023de:	e00c      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f9de 	bl	80027a8 <RCCEx_PLLSAI1_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023f0:	e003      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	74fb      	strb	r3, [r7, #19]
      break;
 80023f6:	e000      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80023f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002400:	4b51      	ldr	r3, [pc, #324]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002406:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240e:	494e      	ldr	r1, [pc, #312]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002416:	e001      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 809e 	beq.w	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800242e:	4b46      	ldr	r3, [pc, #280]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b40      	ldr	r3, [pc, #256]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	4a3f      	ldr	r2, [pc, #252]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002450:	4b3d      	ldr	r3, [pc, #244]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002460:	4b3a      	ldr	r3, [pc, #232]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a39      	ldr	r2, [pc, #228]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800246c:	f7fe fcee 	bl	8000e4c <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002472:	e009      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fcea 	bl	8000e4c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d902      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	74fb      	strb	r3, [r7, #19]
        break;
 8002486:	e005      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002488:	4b30      	ldr	r3, [pc, #192]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d15a      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800249a:	4b2b      	ldr	r3, [pc, #172]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01e      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d019      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b6:	4b24      	ldr	r3, [pc, #144]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c2:	4b21      	ldr	r3, [pc, #132]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024e2:	4a19      	ldr	r2, [pc, #100]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d016      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fcaa 	bl	8000e4c <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fa:	e00b      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe fca6 	bl	8000e4c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d902      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	74fb      	strb	r3, [r7, #19]
            break;
 8002512:	e006      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0ec      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002528:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002536:	4904      	ldr	r1, [pc, #16]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800253e:	e009      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	74bb      	strb	r3, [r7, #18]
 8002544:	e006      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002554:	7c7b      	ldrb	r3, [r7, #17]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d105      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255a:	4b8a      	ldr	r3, [pc, #552]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255e:	4a89      	ldr	r2, [pc, #548]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002564:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002572:	4b84      	ldr	r3, [pc, #528]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002578:	f023 0203 	bic.w	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4980      	ldr	r1, [pc, #512]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002594:	4b7b      	ldr	r3, [pc, #492]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259a:	f023 020c 	bic.w	r2, r3, #12
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	4978      	ldr	r1, [pc, #480]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b6:	4b73      	ldr	r3, [pc, #460]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	496f      	ldr	r1, [pc, #444]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e6:	4967      	ldr	r1, [pc, #412]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025fa:	4b62      	ldr	r3, [pc, #392]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002600:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002608:	495e      	ldr	r1, [pc, #376]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800261c:	4b59      	ldr	r3, [pc, #356]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002622:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262a:	4956      	ldr	r1, [pc, #344]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800263e:	4b51      	ldr	r3, [pc, #324]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002644:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	494d      	ldr	r1, [pc, #308]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d028      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002660:	4b48      	ldr	r3, [pc, #288]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	4945      	ldr	r1, [pc, #276]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800267e:	d106      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002680:	4b40      	ldr	r3, [pc, #256]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a3f      	ldr	r2, [pc, #252]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800268a:	60d3      	str	r3, [r2, #12]
 800268c:	e011      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002696:	d10c      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f882 	bl	80027a8 <RCCEx_PLLSAI1_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d028      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026be:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	492d      	ldr	r1, [pc, #180]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026dc:	d106      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026de:	4b29      	ldr	r3, [pc, #164]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4a28      	ldr	r2, [pc, #160]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e8:	60d3      	str	r3, [r2, #12]
 80026ea:	e011      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f853 	bl	80027a8 <RCCEx_PLLSAI1_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01c      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800271c:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002722:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272a:	4916      	ldr	r1, [pc, #88]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800273a:	d10c      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2102      	movs	r1, #2
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f830 	bl	80027a8 <RCCEx_PLLSAI1_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002768:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002770:	4904      	ldr	r1, [pc, #16]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002778:	7cbb      	ldrb	r3, [r7, #18]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800278c:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000

080027a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027b6:	4b74      	ldr	r3, [pc, #464]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d018      	beq.n	80027f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027c2:	4b71      	ldr	r3, [pc, #452]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0203 	and.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d10d      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
       ||
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027da:	4b6b      	ldr	r3, [pc, #428]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
       ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d047      	beq.n	800287e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e044      	b.n	800287e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d018      	beq.n	800282e <RCCEx_PLLSAI1_Config+0x86>
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d825      	bhi.n	800284c <RCCEx_PLLSAI1_Config+0xa4>
 8002800:	2b01      	cmp	r3, #1
 8002802:	d002      	beq.n	800280a <RCCEx_PLLSAI1_Config+0x62>
 8002804:	2b02      	cmp	r3, #2
 8002806:	d009      	beq.n	800281c <RCCEx_PLLSAI1_Config+0x74>
 8002808:	e020      	b.n	800284c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800280a:	4b5f      	ldr	r3, [pc, #380]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11d      	bne.n	8002852 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281a:	e01a      	b.n	8002852 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800281c:	4b5a      	ldr	r3, [pc, #360]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d116      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282c:	e013      	b.n	8002856 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800282e:	4b56      	ldr	r3, [pc, #344]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800283a:	4b53      	ldr	r3, [pc, #332]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800284a:	e006      	b.n	800285a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      break;
 8002850:	e004      	b.n	800285c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002852:	bf00      	nop
 8002854:	e002      	b.n	800285c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002856:	bf00      	nop
 8002858:	e000      	b.n	800285c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285a:	bf00      	nop
    }

    if(status == HAL_OK)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002862:	4b49      	ldr	r3, [pc, #292]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	430b      	orrs	r3, r1
 8002878:	4943      	ldr	r1, [pc, #268]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287a:	4313      	orrs	r3, r2
 800287c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d17c      	bne.n	800297e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002884:	4b40      	ldr	r3, [pc, #256]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3f      	ldr	r2, [pc, #252]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800288e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002890:	f7fe fadc 	bl	8000e4c <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002896:	e009      	b.n	80028ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002898:	f7fe fad8 	bl	8000e4c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	73fb      	strb	r3, [r7, #15]
        break;
 80028aa:	e005      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028ac:	4b36      	ldr	r3, [pc, #216]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ef      	bne.n	8002898 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d15f      	bne.n	800297e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d110      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c4:	4b30      	ldr	r3, [pc, #192]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80028cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6892      	ldr	r2, [r2, #8]
 80028d4:	0211      	lsls	r1, r2, #8
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	06d2      	lsls	r2, r2, #27
 80028dc:	430a      	orrs	r2, r1
 80028de:	492a      	ldr	r1, [pc, #168]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	610b      	str	r3, [r1, #16]
 80028e4:	e027      	b.n	8002936 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d112      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ec:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	0211      	lsls	r1, r2, #8
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6912      	ldr	r2, [r2, #16]
 8002902:	0852      	lsrs	r2, r2, #1
 8002904:	3a01      	subs	r2, #1
 8002906:	0552      	lsls	r2, r2, #21
 8002908:	430a      	orrs	r2, r1
 800290a:	491f      	ldr	r1, [pc, #124]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	610b      	str	r3, [r1, #16]
 8002910:	e011      	b.n	8002936 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002912:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800291a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6892      	ldr	r2, [r2, #8]
 8002922:	0211      	lsls	r1, r2, #8
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6952      	ldr	r2, [r2, #20]
 8002928:	0852      	lsrs	r2, r2, #1
 800292a:	3a01      	subs	r2, #1
 800292c:	0652      	lsls	r2, r2, #25
 800292e:	430a      	orrs	r2, r1
 8002930:	4915      	ldr	r1, [pc, #84]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002932:	4313      	orrs	r3, r2
 8002934:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002936:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a13      	ldr	r2, [pc, #76]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800293c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002940:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe fa83 	bl	8000e4c <HAL_GetTick>
 8002946:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002948:	e009      	b.n	800295e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800294a:	f7fe fa7f 	bl	8000e4c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d902      	bls.n	800295e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	73fb      	strb	r3, [r7, #15]
          break;
 800295c:	e005      	b.n	800296a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0ef      	beq.n	800294a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002970:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4903      	ldr	r1, [pc, #12]	@ (8002988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297a:	4313      	orrs	r3, r2
 800297c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000

0800298c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e040      	b.n	8002a20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fd ffe8 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	@ 0x24
 80029b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fade 	bl	8002f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f8af 	bl	8002b3c <UART_SetConfig>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e01b      	b.n	8002a20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fb5d 	bl	80030d8 <UART_CheckIdleState>
 8002a1e:	4603      	mov	r3, r0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	@ 0x28
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d177      	bne.n	8002b30 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_UART_Transmit+0x24>
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e070      	b.n	8002b32 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2221      	movs	r2, #33	@ 0x21
 8002a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe f9f5 	bl	8000e4c <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	88fa      	ldrh	r2, [r7, #6]
 8002a70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7c:	d108      	bne.n	8002a90 <HAL_UART_Transmit+0x68>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d104      	bne.n	8002a90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	e003      	b.n	8002a98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a98:	e02f      	b.n	8002afa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2180      	movs	r1, #128	@ 0x80
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fbbf 	bl	8003228 <UART_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e03b      	b.n	8002b32 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002acc:	b292      	uxth	r2, r2
 8002ace:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e007      	b.n	8002ae8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1c9      	bne.n	8002a9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2140      	movs	r1, #64	@ 0x40
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fb89 	bl	8003228 <UART_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e005      	b.n	8002b32 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b08a      	sub	sp, #40	@ 0x28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4bb4      	ldr	r3, [pc, #720]	@ (8002e3c <UART_SetConfig+0x300>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4aa9      	ldr	r2, [pc, #676]	@ (8002e40 <UART_SetConfig+0x304>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4aa0      	ldr	r2, [pc, #640]	@ (8002e44 <UART_SetConfig+0x308>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d126      	bne.n	8002c14 <UART_SetConfig+0xd8>
 8002bc6:	4ba0      	ldr	r3, [pc, #640]	@ (8002e48 <UART_SetConfig+0x30c>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d81b      	bhi.n	8002c0c <UART_SetConfig+0xd0>
 8002bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <UART_SetConfig+0xa0>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bfd 	.word	0x08002bfd
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c05 	.word	0x08002c05
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bf2:	e080      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bfa:	e07c      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c02:	e078      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002c04:	2308      	movs	r3, #8
 8002c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c0a:	e074      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c12:	e070      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a8c      	ldr	r2, [pc, #560]	@ (8002e4c <UART_SetConfig+0x310>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d138      	bne.n	8002c90 <UART_SetConfig+0x154>
 8002c1e:	4b8a      	ldr	r3, [pc, #552]	@ (8002e48 <UART_SetConfig+0x30c>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d82d      	bhi.n	8002c88 <UART_SetConfig+0x14c>
 8002c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c34 <UART_SetConfig+0xf8>)
 8002c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c32:	bf00      	nop
 8002c34:	08002c69 	.word	0x08002c69
 8002c38:	08002c89 	.word	0x08002c89
 8002c3c:	08002c89 	.word	0x08002c89
 8002c40:	08002c89 	.word	0x08002c89
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002c89 	.word	0x08002c89
 8002c4c:	08002c89 	.word	0x08002c89
 8002c50:	08002c89 	.word	0x08002c89
 8002c54:	08002c71 	.word	0x08002c71
 8002c58:	08002c89 	.word	0x08002c89
 8002c5c:	08002c89 	.word	0x08002c89
 8002c60:	08002c89 	.word	0x08002c89
 8002c64:	08002c81 	.word	0x08002c81
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c6e:	e042      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002c70:	2302      	movs	r3, #2
 8002c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c76:	e03e      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c7e:	e03a      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002c80:	2308      	movs	r3, #8
 8002c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c86:	e036      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c8e:	e032      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6a      	ldr	r2, [pc, #424]	@ (8002e40 <UART_SetConfig+0x304>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d12a      	bne.n	8002cf0 <UART_SetConfig+0x1b4>
 8002c9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002e48 <UART_SetConfig+0x30c>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ca8:	d01a      	beq.n	8002ce0 <UART_SetConfig+0x1a4>
 8002caa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002cae:	d81b      	bhi.n	8002ce8 <UART_SetConfig+0x1ac>
 8002cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cb4:	d00c      	beq.n	8002cd0 <UART_SetConfig+0x194>
 8002cb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cba:	d815      	bhi.n	8002ce8 <UART_SetConfig+0x1ac>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <UART_SetConfig+0x18c>
 8002cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc4:	d008      	beq.n	8002cd8 <UART_SetConfig+0x19c>
 8002cc6:	e00f      	b.n	8002ce8 <UART_SetConfig+0x1ac>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cce:	e012      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd6:	e00e      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cde:	e00a      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce6:	e006      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002ce8:	2310      	movs	r3, #16
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cee:	e002      	b.n	8002cf6 <UART_SetConfig+0x1ba>
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a51      	ldr	r2, [pc, #324]	@ (8002e40 <UART_SetConfig+0x304>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d17a      	bne.n	8002df6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d824      	bhi.n	8002d52 <UART_SetConfig+0x216>
 8002d08:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <UART_SetConfig+0x1d4>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d53 	.word	0x08002d53
 8002d18:	08002d3d 	.word	0x08002d3d
 8002d1c:	08002d53 	.word	0x08002d53
 8002d20:	08002d43 	.word	0x08002d43
 8002d24:	08002d53 	.word	0x08002d53
 8002d28:	08002d53 	.word	0x08002d53
 8002d2c:	08002d53 	.word	0x08002d53
 8002d30:	08002d4b 	.word	0x08002d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d34:	f7ff faa6 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8002d38:	61f8      	str	r0, [r7, #28]
        break;
 8002d3a:	e010      	b.n	8002d5e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d3c:	4b44      	ldr	r3, [pc, #272]	@ (8002e50 <UART_SetConfig+0x314>)
 8002d3e:	61fb      	str	r3, [r7, #28]
        break;
 8002d40:	e00d      	b.n	8002d5e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d42:	f7ff fa07 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002d46:	61f8      	str	r0, [r7, #28]
        break;
 8002d48:	e009      	b.n	8002d5e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d4e:	61fb      	str	r3, [r7, #28]
        break;
 8002d50:	e005      	b.n	8002d5e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8107 	beq.w	8002f74 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d305      	bcc.n	8002d82 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d903      	bls.n	8002d8a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d88:	e0f4      	b.n	8002f74 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	461c      	mov	r4, r3
 8002d90:	4615      	mov	r5, r2
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	022b      	lsls	r3, r5, #8
 8002d9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002da0:	0222      	lsls	r2, r4, #8
 8002da2:	68f9      	ldr	r1, [r7, #12]
 8002da4:	6849      	ldr	r1, [r1, #4]
 8002da6:	0849      	lsrs	r1, r1, #1
 8002da8:	2000      	movs	r0, #0
 8002daa:	4688      	mov	r8, r1
 8002dac:	4681      	mov	r9, r0
 8002dae:	eb12 0a08 	adds.w	sl, r2, r8
 8002db2:	eb43 0b09 	adc.w	fp, r3, r9
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dc4:	4650      	mov	r0, sl
 8002dc6:	4659      	mov	r1, fp
 8002dc8:	f7fd fa5a 	bl	8000280 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dda:	d308      	bcc.n	8002dee <UART_SetConfig+0x2b2>
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002de2:	d204      	bcs.n	8002dee <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	e0c2      	b.n	8002f74 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002df4:	e0be      	b.n	8002f74 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dfe:	d16a      	bne.n	8002ed6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002e00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d834      	bhi.n	8002e72 <UART_SetConfig+0x336>
 8002e08:	a201      	add	r2, pc, #4	@ (adr r2, 8002e10 <UART_SetConfig+0x2d4>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e55 	.word	0x08002e55
 8002e18:	08002e5d 	.word	0x08002e5d
 8002e1c:	08002e73 	.word	0x08002e73
 8002e20:	08002e63 	.word	0x08002e63
 8002e24:	08002e73 	.word	0x08002e73
 8002e28:	08002e73 	.word	0x08002e73
 8002e2c:	08002e73 	.word	0x08002e73
 8002e30:	08002e6b 	.word	0x08002e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e34:	f7ff fa26 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8002e38:	61f8      	str	r0, [r7, #28]
        break;
 8002e3a:	e020      	b.n	8002e7e <UART_SetConfig+0x342>
 8002e3c:	efff69f3 	.word	0xefff69f3
 8002e40:	40008000 	.word	0x40008000
 8002e44:	40013800 	.word	0x40013800
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40004400 	.word	0x40004400
 8002e50:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e54:	f7ff fa2c 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 8002e58:	61f8      	str	r0, [r7, #28]
        break;
 8002e5a:	e010      	b.n	8002e7e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8002f90 <UART_SetConfig+0x454>)
 8002e5e:	61fb      	str	r3, [r7, #28]
        break;
 8002e60:	e00d      	b.n	8002e7e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e62:	f7ff f977 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002e66:	61f8      	str	r0, [r7, #28]
        break;
 8002e68:	e009      	b.n	8002e7e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e6e:	61fb      	str	r3, [r7, #28]
        break;
 8002e70:	e005      	b.n	8002e7e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d077      	beq.n	8002f74 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005a      	lsls	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	441a      	add	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b0f      	cmp	r3, #15
 8002e9e:	d916      	bls.n	8002ece <UART_SetConfig+0x392>
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea6:	d212      	bcs.n	8002ece <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f023 030f 	bic.w	r3, r3, #15
 8002eb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	8afb      	ldrh	r3, [r7, #22]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	8afa      	ldrh	r2, [r7, #22]
 8002eca:	60da      	str	r2, [r3, #12]
 8002ecc:	e052      	b.n	8002f74 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ed4:	e04e      	b.n	8002f74 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d827      	bhi.n	8002f2e <UART_SetConfig+0x3f2>
 8002ede:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee4 <UART_SetConfig+0x3a8>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f11 	.word	0x08002f11
 8002eec:	08002f19 	.word	0x08002f19
 8002ef0:	08002f2f 	.word	0x08002f2f
 8002ef4:	08002f1f 	.word	0x08002f1f
 8002ef8:	08002f2f 	.word	0x08002f2f
 8002efc:	08002f2f 	.word	0x08002f2f
 8002f00:	08002f2f 	.word	0x08002f2f
 8002f04:	08002f27 	.word	0x08002f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f08:	f7ff f9bc 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8002f0c:	61f8      	str	r0, [r7, #28]
        break;
 8002f0e:	e014      	b.n	8002f3a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f10:	f7ff f9ce 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 8002f14:	61f8      	str	r0, [r7, #28]
        break;
 8002f16:	e010      	b.n	8002f3a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f18:	4b1d      	ldr	r3, [pc, #116]	@ (8002f90 <UART_SetConfig+0x454>)
 8002f1a:	61fb      	str	r3, [r7, #28]
        break;
 8002f1c:	e00d      	b.n	8002f3a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1e:	f7ff f919 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002f22:	61f8      	str	r0, [r7, #28]
        break;
 8002f24:	e009      	b.n	8002f3a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f2a:	61fb      	str	r3, [r7, #28]
        break;
 8002f2c:	e005      	b.n	8002f3a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f38:	bf00      	nop
    }

    if (pclk != 0U)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d019      	beq.n	8002f74 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	085a      	lsrs	r2, r3, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	441a      	add	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b0f      	cmp	r3, #15
 8002f58:	d909      	bls.n	8002f6e <UART_SetConfig+0x432>
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f60:	d205      	bcs.n	8002f6e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	e002      	b.n	8002f74 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002f80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3728      	adds	r7, #40	@ 0x28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f8e:	bf00      	nop
 8002f90:	00f42400 	.word	0x00f42400

08002f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01a      	beq.n	80030aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003092:	d10a      	bne.n	80030aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b098      	sub	sp, #96	@ 0x60
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030e8:	f7fd feb0 	bl	8000e4c <HAL_GetTick>
 80030ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d12e      	bne.n	800315a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003104:	2200      	movs	r2, #0
 8003106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f88c 	bl	8003228 <UART_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d021      	beq.n	800315a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800312a:	653b      	str	r3, [r7, #80]	@ 0x50
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003134:	647b      	str	r3, [r7, #68]	@ 0x44
 8003136:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800313a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800313c:	e841 2300 	strex	r3, r2, [r1]
 8003140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e6      	bne.n	8003116 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e062      	b.n	8003220 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b04      	cmp	r3, #4
 8003166:	d149      	bne.n	80031fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f856 	bl	8003228 <UART_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d03c      	beq.n	80031fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	623b      	str	r3, [r7, #32]
   return(result);
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e6      	bne.n	8003182 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3308      	adds	r3, #8
 80031ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3308      	adds	r3, #8
 80031d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031d4:	61fa      	str	r2, [r7, #28]
 80031d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	69b9      	ldr	r1, [r7, #24]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	617b      	str	r3, [r7, #20]
   return(result);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e5      	bne.n	80031b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e011      	b.n	8003220 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3758      	adds	r7, #88	@ 0x58
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003238:	e04f      	b.n	80032da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d04b      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003242:	f7fd fe03 	bl	8000e4c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <UART_WaitOnFlagUntilTimeout+0x30>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e04e      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d037      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0xb2>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b80      	cmp	r3, #128	@ 0x80
 800326e:	d034      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0xb2>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b40      	cmp	r3, #64	@ 0x40
 8003274:	d031      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d110      	bne.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2208      	movs	r2, #8
 800328a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f838 	bl	8003302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2208      	movs	r2, #8
 8003296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e029      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032b4:	d111      	bne.n	80032da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f81e 	bl	8003302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d0a0      	beq.n	800323a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003302:	b480      	push	{r7}
 8003304:	b095      	sub	sp, #84	@ 0x54
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800331e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003328:	643b      	str	r3, [r7, #64]	@ 0x40
 800332a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800332e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e6      	bne.n	800330a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	61fb      	str	r3, [r7, #28]
   return(result);
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3308      	adds	r3, #8
 800335a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800335c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800335e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e5      	bne.n	800333c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003374:	2b01      	cmp	r3, #1
 8003376:	d118      	bne.n	80033aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	60bb      	str	r3, [r7, #8]
   return(result);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f023 0310 	bic.w	r3, r3, #16
 800338c:	647b      	str	r3, [r7, #68]	@ 0x44
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	613b      	str	r3, [r7, #16]
   return(result);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e6      	bne.n	8003378 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80033be:	bf00      	nop
 80033c0:	3754      	adds	r7, #84	@ 0x54
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <std>:
 80033cc:	2300      	movs	r3, #0
 80033ce:	b510      	push	{r4, lr}
 80033d0:	4604      	mov	r4, r0
 80033d2:	e9c0 3300 	strd	r3, r3, [r0]
 80033d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033da:	6083      	str	r3, [r0, #8]
 80033dc:	8181      	strh	r1, [r0, #12]
 80033de:	6643      	str	r3, [r0, #100]	@ 0x64
 80033e0:	81c2      	strh	r2, [r0, #14]
 80033e2:	6183      	str	r3, [r0, #24]
 80033e4:	4619      	mov	r1, r3
 80033e6:	2208      	movs	r2, #8
 80033e8:	305c      	adds	r0, #92	@ 0x5c
 80033ea:	f000 fa1b 	bl	8003824 <memset>
 80033ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <std+0x58>)
 80033f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <std+0x5c>)
 80033f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <std+0x60>)
 80033f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <std+0x64>)
 80033fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <std+0x68>)
 8003400:	6224      	str	r4, [r4, #32]
 8003402:	429c      	cmp	r4, r3
 8003404:	d006      	beq.n	8003414 <std+0x48>
 8003406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800340a:	4294      	cmp	r4, r2
 800340c:	d002      	beq.n	8003414 <std+0x48>
 800340e:	33d0      	adds	r3, #208	@ 0xd0
 8003410:	429c      	cmp	r4, r3
 8003412:	d105      	bne.n	8003420 <std+0x54>
 8003414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	f000 ba7a 	b.w	8003914 <__retarget_lock_init_recursive>
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	08003675 	.word	0x08003675
 8003428:	08003697 	.word	0x08003697
 800342c:	080036cf 	.word	0x080036cf
 8003430:	080036f3 	.word	0x080036f3
 8003434:	200001d0 	.word	0x200001d0

08003438 <stdio_exit_handler>:
 8003438:	4a02      	ldr	r2, [pc, #8]	@ (8003444 <stdio_exit_handler+0xc>)
 800343a:	4903      	ldr	r1, [pc, #12]	@ (8003448 <stdio_exit_handler+0x10>)
 800343c:	4803      	ldr	r0, [pc, #12]	@ (800344c <stdio_exit_handler+0x14>)
 800343e:	f000 b869 	b.w	8003514 <_fwalk_sglue>
 8003442:	bf00      	nop
 8003444:	2000000c 	.word	0x2000000c
 8003448:	08004461 	.word	0x08004461
 800344c:	2000001c 	.word	0x2000001c

08003450 <cleanup_stdio>:
 8003450:	6841      	ldr	r1, [r0, #4]
 8003452:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <cleanup_stdio+0x34>)
 8003454:	4299      	cmp	r1, r3
 8003456:	b510      	push	{r4, lr}
 8003458:	4604      	mov	r4, r0
 800345a:	d001      	beq.n	8003460 <cleanup_stdio+0x10>
 800345c:	f001 f800 	bl	8004460 <_fflush_r>
 8003460:	68a1      	ldr	r1, [r4, #8]
 8003462:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <cleanup_stdio+0x38>)
 8003464:	4299      	cmp	r1, r3
 8003466:	d002      	beq.n	800346e <cleanup_stdio+0x1e>
 8003468:	4620      	mov	r0, r4
 800346a:	f000 fff9 	bl	8004460 <_fflush_r>
 800346e:	68e1      	ldr	r1, [r4, #12]
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <cleanup_stdio+0x3c>)
 8003472:	4299      	cmp	r1, r3
 8003474:	d004      	beq.n	8003480 <cleanup_stdio+0x30>
 8003476:	4620      	mov	r0, r4
 8003478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800347c:	f000 bff0 	b.w	8004460 <_fflush_r>
 8003480:	bd10      	pop	{r4, pc}
 8003482:	bf00      	nop
 8003484:	200001d0 	.word	0x200001d0
 8003488:	20000238 	.word	0x20000238
 800348c:	200002a0 	.word	0x200002a0

08003490 <global_stdio_init.part.0>:
 8003490:	b510      	push	{r4, lr}
 8003492:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <global_stdio_init.part.0+0x30>)
 8003494:	4c0b      	ldr	r4, [pc, #44]	@ (80034c4 <global_stdio_init.part.0+0x34>)
 8003496:	4a0c      	ldr	r2, [pc, #48]	@ (80034c8 <global_stdio_init.part.0+0x38>)
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	4620      	mov	r0, r4
 800349c:	2200      	movs	r2, #0
 800349e:	2104      	movs	r1, #4
 80034a0:	f7ff ff94 	bl	80033cc <std>
 80034a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034a8:	2201      	movs	r2, #1
 80034aa:	2109      	movs	r1, #9
 80034ac:	f7ff ff8e 	bl	80033cc <std>
 80034b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80034b4:	2202      	movs	r2, #2
 80034b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ba:	2112      	movs	r1, #18
 80034bc:	f7ff bf86 	b.w	80033cc <std>
 80034c0:	20000308 	.word	0x20000308
 80034c4:	200001d0 	.word	0x200001d0
 80034c8:	08003439 	.word	0x08003439

080034cc <__sfp_lock_acquire>:
 80034cc:	4801      	ldr	r0, [pc, #4]	@ (80034d4 <__sfp_lock_acquire+0x8>)
 80034ce:	f000 ba22 	b.w	8003916 <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	20000311 	.word	0x20000311

080034d8 <__sfp_lock_release>:
 80034d8:	4801      	ldr	r0, [pc, #4]	@ (80034e0 <__sfp_lock_release+0x8>)
 80034da:	f000 ba1d 	b.w	8003918 <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	20000311 	.word	0x20000311

080034e4 <__sinit>:
 80034e4:	b510      	push	{r4, lr}
 80034e6:	4604      	mov	r4, r0
 80034e8:	f7ff fff0 	bl	80034cc <__sfp_lock_acquire>
 80034ec:	6a23      	ldr	r3, [r4, #32]
 80034ee:	b11b      	cbz	r3, 80034f8 <__sinit+0x14>
 80034f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034f4:	f7ff bff0 	b.w	80034d8 <__sfp_lock_release>
 80034f8:	4b04      	ldr	r3, [pc, #16]	@ (800350c <__sinit+0x28>)
 80034fa:	6223      	str	r3, [r4, #32]
 80034fc:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <__sinit+0x2c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f5      	bne.n	80034f0 <__sinit+0xc>
 8003504:	f7ff ffc4 	bl	8003490 <global_stdio_init.part.0>
 8003508:	e7f2      	b.n	80034f0 <__sinit+0xc>
 800350a:	bf00      	nop
 800350c:	08003451 	.word	0x08003451
 8003510:	20000308 	.word	0x20000308

08003514 <_fwalk_sglue>:
 8003514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003518:	4607      	mov	r7, r0
 800351a:	4688      	mov	r8, r1
 800351c:	4614      	mov	r4, r2
 800351e:	2600      	movs	r6, #0
 8003520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003524:	f1b9 0901 	subs.w	r9, r9, #1
 8003528:	d505      	bpl.n	8003536 <_fwalk_sglue+0x22>
 800352a:	6824      	ldr	r4, [r4, #0]
 800352c:	2c00      	cmp	r4, #0
 800352e:	d1f7      	bne.n	8003520 <_fwalk_sglue+0xc>
 8003530:	4630      	mov	r0, r6
 8003532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003536:	89ab      	ldrh	r3, [r5, #12]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d907      	bls.n	800354c <_fwalk_sglue+0x38>
 800353c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003540:	3301      	adds	r3, #1
 8003542:	d003      	beq.n	800354c <_fwalk_sglue+0x38>
 8003544:	4629      	mov	r1, r5
 8003546:	4638      	mov	r0, r7
 8003548:	47c0      	blx	r8
 800354a:	4306      	orrs	r6, r0
 800354c:	3568      	adds	r5, #104	@ 0x68
 800354e:	e7e9      	b.n	8003524 <_fwalk_sglue+0x10>

08003550 <iprintf>:
 8003550:	b40f      	push	{r0, r1, r2, r3}
 8003552:	b507      	push	{r0, r1, r2, lr}
 8003554:	4906      	ldr	r1, [pc, #24]	@ (8003570 <iprintf+0x20>)
 8003556:	ab04      	add	r3, sp, #16
 8003558:	6808      	ldr	r0, [r1, #0]
 800355a:	f853 2b04 	ldr.w	r2, [r3], #4
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	f000 fc55 	bl	8003e10 <_vfiprintf_r>
 8003566:	b003      	add	sp, #12
 8003568:	f85d eb04 	ldr.w	lr, [sp], #4
 800356c:	b004      	add	sp, #16
 800356e:	4770      	bx	lr
 8003570:	20000018 	.word	0x20000018

08003574 <_puts_r>:
 8003574:	6a03      	ldr	r3, [r0, #32]
 8003576:	b570      	push	{r4, r5, r6, lr}
 8003578:	6884      	ldr	r4, [r0, #8]
 800357a:	4605      	mov	r5, r0
 800357c:	460e      	mov	r6, r1
 800357e:	b90b      	cbnz	r3, 8003584 <_puts_r+0x10>
 8003580:	f7ff ffb0 	bl	80034e4 <__sinit>
 8003584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003586:	07db      	lsls	r3, r3, #31
 8003588:	d405      	bmi.n	8003596 <_puts_r+0x22>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	0598      	lsls	r0, r3, #22
 800358e:	d402      	bmi.n	8003596 <_puts_r+0x22>
 8003590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003592:	f000 f9c0 	bl	8003916 <__retarget_lock_acquire_recursive>
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	0719      	lsls	r1, r3, #28
 800359a:	d502      	bpl.n	80035a2 <_puts_r+0x2e>
 800359c:	6923      	ldr	r3, [r4, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d135      	bne.n	800360e <_puts_r+0x9a>
 80035a2:	4621      	mov	r1, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	f000 f8e7 	bl	8003778 <__swsetup_r>
 80035aa:	b380      	cbz	r0, 800360e <_puts_r+0x9a>
 80035ac:	f04f 35ff 	mov.w	r5, #4294967295
 80035b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035b2:	07da      	lsls	r2, r3, #31
 80035b4:	d405      	bmi.n	80035c2 <_puts_r+0x4e>
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	059b      	lsls	r3, r3, #22
 80035ba:	d402      	bmi.n	80035c2 <_puts_r+0x4e>
 80035bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035be:	f000 f9ab 	bl	8003918 <__retarget_lock_release_recursive>
 80035c2:	4628      	mov	r0, r5
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da04      	bge.n	80035d4 <_puts_r+0x60>
 80035ca:	69a2      	ldr	r2, [r4, #24]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	dc17      	bgt.n	8003600 <_puts_r+0x8c>
 80035d0:	290a      	cmp	r1, #10
 80035d2:	d015      	beq.n	8003600 <_puts_r+0x8c>
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	6022      	str	r2, [r4, #0]
 80035da:	7019      	strb	r1, [r3, #0]
 80035dc:	68a3      	ldr	r3, [r4, #8]
 80035de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035e2:	3b01      	subs	r3, #1
 80035e4:	60a3      	str	r3, [r4, #8]
 80035e6:	2900      	cmp	r1, #0
 80035e8:	d1ed      	bne.n	80035c6 <_puts_r+0x52>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da11      	bge.n	8003612 <_puts_r+0x9e>
 80035ee:	4622      	mov	r2, r4
 80035f0:	210a      	movs	r1, #10
 80035f2:	4628      	mov	r0, r5
 80035f4:	f000 f881 	bl	80036fa <__swbuf_r>
 80035f8:	3001      	adds	r0, #1
 80035fa:	d0d7      	beq.n	80035ac <_puts_r+0x38>
 80035fc:	250a      	movs	r5, #10
 80035fe:	e7d7      	b.n	80035b0 <_puts_r+0x3c>
 8003600:	4622      	mov	r2, r4
 8003602:	4628      	mov	r0, r5
 8003604:	f000 f879 	bl	80036fa <__swbuf_r>
 8003608:	3001      	adds	r0, #1
 800360a:	d1e7      	bne.n	80035dc <_puts_r+0x68>
 800360c:	e7ce      	b.n	80035ac <_puts_r+0x38>
 800360e:	3e01      	subs	r6, #1
 8003610:	e7e4      	b.n	80035dc <_puts_r+0x68>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	6022      	str	r2, [r4, #0]
 8003618:	220a      	movs	r2, #10
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e7ee      	b.n	80035fc <_puts_r+0x88>
	...

08003620 <puts>:
 8003620:	4b02      	ldr	r3, [pc, #8]	@ (800362c <puts+0xc>)
 8003622:	4601      	mov	r1, r0
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	f7ff bfa5 	b.w	8003574 <_puts_r>
 800362a:	bf00      	nop
 800362c:	20000018 	.word	0x20000018

08003630 <siprintf>:
 8003630:	b40e      	push	{r1, r2, r3}
 8003632:	b510      	push	{r4, lr}
 8003634:	b09d      	sub	sp, #116	@ 0x74
 8003636:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003638:	9002      	str	r0, [sp, #8]
 800363a:	9006      	str	r0, [sp, #24]
 800363c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003640:	480a      	ldr	r0, [pc, #40]	@ (800366c <siprintf+0x3c>)
 8003642:	9107      	str	r1, [sp, #28]
 8003644:	9104      	str	r1, [sp, #16]
 8003646:	490a      	ldr	r1, [pc, #40]	@ (8003670 <siprintf+0x40>)
 8003648:	f853 2b04 	ldr.w	r2, [r3], #4
 800364c:	9105      	str	r1, [sp, #20]
 800364e:	2400      	movs	r4, #0
 8003650:	a902      	add	r1, sp, #8
 8003652:	6800      	ldr	r0, [r0, #0]
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003658:	f000 fab4 	bl	8003bc4 <_svfiprintf_r>
 800365c:	9b02      	ldr	r3, [sp, #8]
 800365e:	701c      	strb	r4, [r3, #0]
 8003660:	b01d      	add	sp, #116	@ 0x74
 8003662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003666:	b003      	add	sp, #12
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000018 	.word	0x20000018
 8003670:	ffff0208 	.word	0xffff0208

08003674 <__sread>:
 8003674:	b510      	push	{r4, lr}
 8003676:	460c      	mov	r4, r1
 8003678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800367c:	f000 f8fc 	bl	8003878 <_read_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	bfab      	itete	ge
 8003684:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003686:	89a3      	ldrhlt	r3, [r4, #12]
 8003688:	181b      	addge	r3, r3, r0
 800368a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800368e:	bfac      	ite	ge
 8003690:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003692:	81a3      	strhlt	r3, [r4, #12]
 8003694:	bd10      	pop	{r4, pc}

08003696 <__swrite>:
 8003696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369a:	461f      	mov	r7, r3
 800369c:	898b      	ldrh	r3, [r1, #12]
 800369e:	05db      	lsls	r3, r3, #23
 80036a0:	4605      	mov	r5, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	4616      	mov	r6, r2
 80036a6:	d505      	bpl.n	80036b4 <__swrite+0x1e>
 80036a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ac:	2302      	movs	r3, #2
 80036ae:	2200      	movs	r2, #0
 80036b0:	f000 f8d0 	bl	8003854 <_lseek_r>
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036be:	81a3      	strh	r3, [r4, #12]
 80036c0:	4632      	mov	r2, r6
 80036c2:	463b      	mov	r3, r7
 80036c4:	4628      	mov	r0, r5
 80036c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ca:	f000 b8e7 	b.w	800389c <_write_r>

080036ce <__sseek>:
 80036ce:	b510      	push	{r4, lr}
 80036d0:	460c      	mov	r4, r1
 80036d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d6:	f000 f8bd 	bl	8003854 <_lseek_r>
 80036da:	1c43      	adds	r3, r0, #1
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	bf15      	itete	ne
 80036e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80036e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80036e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80036ea:	81a3      	strheq	r3, [r4, #12]
 80036ec:	bf18      	it	ne
 80036ee:	81a3      	strhne	r3, [r4, #12]
 80036f0:	bd10      	pop	{r4, pc}

080036f2 <__sclose>:
 80036f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f6:	f000 b89d 	b.w	8003834 <_close_r>

080036fa <__swbuf_r>:
 80036fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fc:	460e      	mov	r6, r1
 80036fe:	4614      	mov	r4, r2
 8003700:	4605      	mov	r5, r0
 8003702:	b118      	cbz	r0, 800370c <__swbuf_r+0x12>
 8003704:	6a03      	ldr	r3, [r0, #32]
 8003706:	b90b      	cbnz	r3, 800370c <__swbuf_r+0x12>
 8003708:	f7ff feec 	bl	80034e4 <__sinit>
 800370c:	69a3      	ldr	r3, [r4, #24]
 800370e:	60a3      	str	r3, [r4, #8]
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	071a      	lsls	r2, r3, #28
 8003714:	d501      	bpl.n	800371a <__swbuf_r+0x20>
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	b943      	cbnz	r3, 800372c <__swbuf_r+0x32>
 800371a:	4621      	mov	r1, r4
 800371c:	4628      	mov	r0, r5
 800371e:	f000 f82b 	bl	8003778 <__swsetup_r>
 8003722:	b118      	cbz	r0, 800372c <__swbuf_r+0x32>
 8003724:	f04f 37ff 	mov.w	r7, #4294967295
 8003728:	4638      	mov	r0, r7
 800372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	6922      	ldr	r2, [r4, #16]
 8003730:	1a98      	subs	r0, r3, r2
 8003732:	6963      	ldr	r3, [r4, #20]
 8003734:	b2f6      	uxtb	r6, r6
 8003736:	4283      	cmp	r3, r0
 8003738:	4637      	mov	r7, r6
 800373a:	dc05      	bgt.n	8003748 <__swbuf_r+0x4e>
 800373c:	4621      	mov	r1, r4
 800373e:	4628      	mov	r0, r5
 8003740:	f000 fe8e 	bl	8004460 <_fflush_r>
 8003744:	2800      	cmp	r0, #0
 8003746:	d1ed      	bne.n	8003724 <__swbuf_r+0x2a>
 8003748:	68a3      	ldr	r3, [r4, #8]
 800374a:	3b01      	subs	r3, #1
 800374c:	60a3      	str	r3, [r4, #8]
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	701e      	strb	r6, [r3, #0]
 8003756:	6962      	ldr	r2, [r4, #20]
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	429a      	cmp	r2, r3
 800375c:	d004      	beq.n	8003768 <__swbuf_r+0x6e>
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	07db      	lsls	r3, r3, #31
 8003762:	d5e1      	bpl.n	8003728 <__swbuf_r+0x2e>
 8003764:	2e0a      	cmp	r6, #10
 8003766:	d1df      	bne.n	8003728 <__swbuf_r+0x2e>
 8003768:	4621      	mov	r1, r4
 800376a:	4628      	mov	r0, r5
 800376c:	f000 fe78 	bl	8004460 <_fflush_r>
 8003770:	2800      	cmp	r0, #0
 8003772:	d0d9      	beq.n	8003728 <__swbuf_r+0x2e>
 8003774:	e7d6      	b.n	8003724 <__swbuf_r+0x2a>
	...

08003778 <__swsetup_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4b29      	ldr	r3, [pc, #164]	@ (8003820 <__swsetup_r+0xa8>)
 800377c:	4605      	mov	r5, r0
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	460c      	mov	r4, r1
 8003782:	b118      	cbz	r0, 800378c <__swsetup_r+0x14>
 8003784:	6a03      	ldr	r3, [r0, #32]
 8003786:	b90b      	cbnz	r3, 800378c <__swsetup_r+0x14>
 8003788:	f7ff feac 	bl	80034e4 <__sinit>
 800378c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003790:	0719      	lsls	r1, r3, #28
 8003792:	d422      	bmi.n	80037da <__swsetup_r+0x62>
 8003794:	06da      	lsls	r2, r3, #27
 8003796:	d407      	bmi.n	80037a8 <__swsetup_r+0x30>
 8003798:	2209      	movs	r2, #9
 800379a:	602a      	str	r2, [r5, #0]
 800379c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037a0:	81a3      	strh	r3, [r4, #12]
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295
 80037a6:	e033      	b.n	8003810 <__swsetup_r+0x98>
 80037a8:	0758      	lsls	r0, r3, #29
 80037aa:	d512      	bpl.n	80037d2 <__swsetup_r+0x5a>
 80037ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037ae:	b141      	cbz	r1, 80037c2 <__swsetup_r+0x4a>
 80037b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037b4:	4299      	cmp	r1, r3
 80037b6:	d002      	beq.n	80037be <__swsetup_r+0x46>
 80037b8:	4628      	mov	r0, r5
 80037ba:	f000 f8af 	bl	800391c <_free_r>
 80037be:	2300      	movs	r3, #0
 80037c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	2300      	movs	r3, #0
 80037cc:	6063      	str	r3, [r4, #4]
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	81a3      	strh	r3, [r4, #12]
 80037da:	6923      	ldr	r3, [r4, #16]
 80037dc:	b94b      	cbnz	r3, 80037f2 <__swsetup_r+0x7a>
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037e8:	d003      	beq.n	80037f2 <__swsetup_r+0x7a>
 80037ea:	4621      	mov	r1, r4
 80037ec:	4628      	mov	r0, r5
 80037ee:	f000 fe85 	bl	80044fc <__smakebuf_r>
 80037f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f6:	f013 0201 	ands.w	r2, r3, #1
 80037fa:	d00a      	beq.n	8003812 <__swsetup_r+0x9a>
 80037fc:	2200      	movs	r2, #0
 80037fe:	60a2      	str	r2, [r4, #8]
 8003800:	6962      	ldr	r2, [r4, #20]
 8003802:	4252      	negs	r2, r2
 8003804:	61a2      	str	r2, [r4, #24]
 8003806:	6922      	ldr	r2, [r4, #16]
 8003808:	b942      	cbnz	r2, 800381c <__swsetup_r+0xa4>
 800380a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800380e:	d1c5      	bne.n	800379c <__swsetup_r+0x24>
 8003810:	bd38      	pop	{r3, r4, r5, pc}
 8003812:	0799      	lsls	r1, r3, #30
 8003814:	bf58      	it	pl
 8003816:	6962      	ldrpl	r2, [r4, #20]
 8003818:	60a2      	str	r2, [r4, #8]
 800381a:	e7f4      	b.n	8003806 <__swsetup_r+0x8e>
 800381c:	2000      	movs	r0, #0
 800381e:	e7f7      	b.n	8003810 <__swsetup_r+0x98>
 8003820:	20000018 	.word	0x20000018

08003824 <memset>:
 8003824:	4402      	add	r2, r0
 8003826:	4603      	mov	r3, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	f803 1b01 	strb.w	r1, [r3], #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <_close_r>:
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	4d06      	ldr	r5, [pc, #24]	@ (8003850 <_close_r+0x1c>)
 8003838:	2300      	movs	r3, #0
 800383a:	4604      	mov	r4, r0
 800383c:	4608      	mov	r0, r1
 800383e:	602b      	str	r3, [r5, #0]
 8003840:	f7fd f972 	bl	8000b28 <_close>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_close_r+0x1a>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_close_r+0x1a>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	2000030c 	.word	0x2000030c

08003854 <_lseek_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4d07      	ldr	r5, [pc, #28]	@ (8003874 <_lseek_r+0x20>)
 8003858:	4604      	mov	r4, r0
 800385a:	4608      	mov	r0, r1
 800385c:	4611      	mov	r1, r2
 800385e:	2200      	movs	r2, #0
 8003860:	602a      	str	r2, [r5, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f7fd f987 	bl	8000b76 <_lseek>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <_lseek_r+0x1e>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	b103      	cbz	r3, 8003872 <_lseek_r+0x1e>
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	bd38      	pop	{r3, r4, r5, pc}
 8003874:	2000030c 	.word	0x2000030c

08003878 <_read_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4d07      	ldr	r5, [pc, #28]	@ (8003898 <_read_r+0x20>)
 800387c:	4604      	mov	r4, r0
 800387e:	4608      	mov	r0, r1
 8003880:	4611      	mov	r1, r2
 8003882:	2200      	movs	r2, #0
 8003884:	602a      	str	r2, [r5, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	f7fd f915 	bl	8000ab6 <_read>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_read_r+0x1e>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_read_r+0x1e>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	2000030c 	.word	0x2000030c

0800389c <_write_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d07      	ldr	r5, [pc, #28]	@ (80038bc <_write_r+0x20>)
 80038a0:	4604      	mov	r4, r0
 80038a2:	4608      	mov	r0, r1
 80038a4:	4611      	mov	r1, r2
 80038a6:	2200      	movs	r2, #0
 80038a8:	602a      	str	r2, [r5, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f7fd f920 	bl	8000af0 <_write>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d102      	bne.n	80038ba <_write_r+0x1e>
 80038b4:	682b      	ldr	r3, [r5, #0]
 80038b6:	b103      	cbz	r3, 80038ba <_write_r+0x1e>
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	2000030c 	.word	0x2000030c

080038c0 <__errno>:
 80038c0:	4b01      	ldr	r3, [pc, #4]	@ (80038c8 <__errno+0x8>)
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000018 	.word	0x20000018

080038cc <__libc_init_array>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003904 <__libc_init_array+0x38>)
 80038d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003908 <__libc_init_array+0x3c>)
 80038d2:	1b64      	subs	r4, r4, r5
 80038d4:	10a4      	asrs	r4, r4, #2
 80038d6:	2600      	movs	r6, #0
 80038d8:	42a6      	cmp	r6, r4
 80038da:	d109      	bne.n	80038f0 <__libc_init_array+0x24>
 80038dc:	4d0b      	ldr	r5, [pc, #44]	@ (800390c <__libc_init_array+0x40>)
 80038de:	4c0c      	ldr	r4, [pc, #48]	@ (8003910 <__libc_init_array+0x44>)
 80038e0:	f000 fed8 	bl	8004694 <_init>
 80038e4:	1b64      	subs	r4, r4, r5
 80038e6:	10a4      	asrs	r4, r4, #2
 80038e8:	2600      	movs	r6, #0
 80038ea:	42a6      	cmp	r6, r4
 80038ec:	d105      	bne.n	80038fa <__libc_init_array+0x2e>
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f4:	4798      	blx	r3
 80038f6:	3601      	adds	r6, #1
 80038f8:	e7ee      	b.n	80038d8 <__libc_init_array+0xc>
 80038fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fe:	4798      	blx	r3
 8003900:	3601      	adds	r6, #1
 8003902:	e7f2      	b.n	80038ea <__libc_init_array+0x1e>
 8003904:	08004864 	.word	0x08004864
 8003908:	08004864 	.word	0x08004864
 800390c:	08004864 	.word	0x08004864
 8003910:	08004868 	.word	0x08004868

08003914 <__retarget_lock_init_recursive>:
 8003914:	4770      	bx	lr

08003916 <__retarget_lock_acquire_recursive>:
 8003916:	4770      	bx	lr

08003918 <__retarget_lock_release_recursive>:
 8003918:	4770      	bx	lr
	...

0800391c <_free_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4605      	mov	r5, r0
 8003920:	2900      	cmp	r1, #0
 8003922:	d041      	beq.n	80039a8 <_free_r+0x8c>
 8003924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003928:	1f0c      	subs	r4, r1, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	bfb8      	it	lt
 800392e:	18e4      	addlt	r4, r4, r3
 8003930:	f000 f8e0 	bl	8003af4 <__malloc_lock>
 8003934:	4a1d      	ldr	r2, [pc, #116]	@ (80039ac <_free_r+0x90>)
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	b933      	cbnz	r3, 8003948 <_free_r+0x2c>
 800393a:	6063      	str	r3, [r4, #4]
 800393c:	6014      	str	r4, [r2, #0]
 800393e:	4628      	mov	r0, r5
 8003940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003944:	f000 b8dc 	b.w	8003b00 <__malloc_unlock>
 8003948:	42a3      	cmp	r3, r4
 800394a:	d908      	bls.n	800395e <_free_r+0x42>
 800394c:	6820      	ldr	r0, [r4, #0]
 800394e:	1821      	adds	r1, r4, r0
 8003950:	428b      	cmp	r3, r1
 8003952:	bf01      	itttt	eq
 8003954:	6819      	ldreq	r1, [r3, #0]
 8003956:	685b      	ldreq	r3, [r3, #4]
 8003958:	1809      	addeq	r1, r1, r0
 800395a:	6021      	streq	r1, [r4, #0]
 800395c:	e7ed      	b.n	800393a <_free_r+0x1e>
 800395e:	461a      	mov	r2, r3
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b10b      	cbz	r3, 8003968 <_free_r+0x4c>
 8003964:	42a3      	cmp	r3, r4
 8003966:	d9fa      	bls.n	800395e <_free_r+0x42>
 8003968:	6811      	ldr	r1, [r2, #0]
 800396a:	1850      	adds	r0, r2, r1
 800396c:	42a0      	cmp	r0, r4
 800396e:	d10b      	bne.n	8003988 <_free_r+0x6c>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	4401      	add	r1, r0
 8003974:	1850      	adds	r0, r2, r1
 8003976:	4283      	cmp	r3, r0
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	d1e0      	bne.n	800393e <_free_r+0x22>
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	6053      	str	r3, [r2, #4]
 8003982:	4408      	add	r0, r1
 8003984:	6010      	str	r0, [r2, #0]
 8003986:	e7da      	b.n	800393e <_free_r+0x22>
 8003988:	d902      	bls.n	8003990 <_free_r+0x74>
 800398a:	230c      	movs	r3, #12
 800398c:	602b      	str	r3, [r5, #0]
 800398e:	e7d6      	b.n	800393e <_free_r+0x22>
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	1821      	adds	r1, r4, r0
 8003994:	428b      	cmp	r3, r1
 8003996:	bf04      	itt	eq
 8003998:	6819      	ldreq	r1, [r3, #0]
 800399a:	685b      	ldreq	r3, [r3, #4]
 800399c:	6063      	str	r3, [r4, #4]
 800399e:	bf04      	itt	eq
 80039a0:	1809      	addeq	r1, r1, r0
 80039a2:	6021      	streq	r1, [r4, #0]
 80039a4:	6054      	str	r4, [r2, #4]
 80039a6:	e7ca      	b.n	800393e <_free_r+0x22>
 80039a8:	bd38      	pop	{r3, r4, r5, pc}
 80039aa:	bf00      	nop
 80039ac:	20000318 	.word	0x20000318

080039b0 <sbrk_aligned>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	4e0f      	ldr	r6, [pc, #60]	@ (80039f0 <sbrk_aligned+0x40>)
 80039b4:	460c      	mov	r4, r1
 80039b6:	6831      	ldr	r1, [r6, #0]
 80039b8:	4605      	mov	r5, r0
 80039ba:	b911      	cbnz	r1, 80039c2 <sbrk_aligned+0x12>
 80039bc:	f000 fe16 	bl	80045ec <_sbrk_r>
 80039c0:	6030      	str	r0, [r6, #0]
 80039c2:	4621      	mov	r1, r4
 80039c4:	4628      	mov	r0, r5
 80039c6:	f000 fe11 	bl	80045ec <_sbrk_r>
 80039ca:	1c43      	adds	r3, r0, #1
 80039cc:	d103      	bne.n	80039d6 <sbrk_aligned+0x26>
 80039ce:	f04f 34ff 	mov.w	r4, #4294967295
 80039d2:	4620      	mov	r0, r4
 80039d4:	bd70      	pop	{r4, r5, r6, pc}
 80039d6:	1cc4      	adds	r4, r0, #3
 80039d8:	f024 0403 	bic.w	r4, r4, #3
 80039dc:	42a0      	cmp	r0, r4
 80039de:	d0f8      	beq.n	80039d2 <sbrk_aligned+0x22>
 80039e0:	1a21      	subs	r1, r4, r0
 80039e2:	4628      	mov	r0, r5
 80039e4:	f000 fe02 	bl	80045ec <_sbrk_r>
 80039e8:	3001      	adds	r0, #1
 80039ea:	d1f2      	bne.n	80039d2 <sbrk_aligned+0x22>
 80039ec:	e7ef      	b.n	80039ce <sbrk_aligned+0x1e>
 80039ee:	bf00      	nop
 80039f0:	20000314 	.word	0x20000314

080039f4 <_malloc_r>:
 80039f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f8:	1ccd      	adds	r5, r1, #3
 80039fa:	f025 0503 	bic.w	r5, r5, #3
 80039fe:	3508      	adds	r5, #8
 8003a00:	2d0c      	cmp	r5, #12
 8003a02:	bf38      	it	cc
 8003a04:	250c      	movcc	r5, #12
 8003a06:	2d00      	cmp	r5, #0
 8003a08:	4606      	mov	r6, r0
 8003a0a:	db01      	blt.n	8003a10 <_malloc_r+0x1c>
 8003a0c:	42a9      	cmp	r1, r5
 8003a0e:	d904      	bls.n	8003a1a <_malloc_r+0x26>
 8003a10:	230c      	movs	r3, #12
 8003a12:	6033      	str	r3, [r6, #0]
 8003a14:	2000      	movs	r0, #0
 8003a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003af0 <_malloc_r+0xfc>
 8003a1e:	f000 f869 	bl	8003af4 <__malloc_lock>
 8003a22:	f8d8 3000 	ldr.w	r3, [r8]
 8003a26:	461c      	mov	r4, r3
 8003a28:	bb44      	cbnz	r4, 8003a7c <_malloc_r+0x88>
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	f7ff ffbf 	bl	80039b0 <sbrk_aligned>
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	4604      	mov	r4, r0
 8003a36:	d158      	bne.n	8003aea <_malloc_r+0xf6>
 8003a38:	f8d8 4000 	ldr.w	r4, [r8]
 8003a3c:	4627      	mov	r7, r4
 8003a3e:	2f00      	cmp	r7, #0
 8003a40:	d143      	bne.n	8003aca <_malloc_r+0xd6>
 8003a42:	2c00      	cmp	r4, #0
 8003a44:	d04b      	beq.n	8003ade <_malloc_r+0xea>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	4639      	mov	r1, r7
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	eb04 0903 	add.w	r9, r4, r3
 8003a50:	f000 fdcc 	bl	80045ec <_sbrk_r>
 8003a54:	4581      	cmp	r9, r0
 8003a56:	d142      	bne.n	8003ade <_malloc_r+0xea>
 8003a58:	6821      	ldr	r1, [r4, #0]
 8003a5a:	1a6d      	subs	r5, r5, r1
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f7ff ffa6 	bl	80039b0 <sbrk_aligned>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d03a      	beq.n	8003ade <_malloc_r+0xea>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	442b      	add	r3, r5
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	bb62      	cbnz	r2, 8003ad0 <_malloc_r+0xdc>
 8003a76:	f8c8 7000 	str.w	r7, [r8]
 8003a7a:	e00f      	b.n	8003a9c <_malloc_r+0xa8>
 8003a7c:	6822      	ldr	r2, [r4, #0]
 8003a7e:	1b52      	subs	r2, r2, r5
 8003a80:	d420      	bmi.n	8003ac4 <_malloc_r+0xd0>
 8003a82:	2a0b      	cmp	r2, #11
 8003a84:	d917      	bls.n	8003ab6 <_malloc_r+0xc2>
 8003a86:	1961      	adds	r1, r4, r5
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	6025      	str	r5, [r4, #0]
 8003a8c:	bf18      	it	ne
 8003a8e:	6059      	strne	r1, [r3, #4]
 8003a90:	6863      	ldr	r3, [r4, #4]
 8003a92:	bf08      	it	eq
 8003a94:	f8c8 1000 	streq.w	r1, [r8]
 8003a98:	5162      	str	r2, [r4, r5]
 8003a9a:	604b      	str	r3, [r1, #4]
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f000 f82f 	bl	8003b00 <__malloc_unlock>
 8003aa2:	f104 000b 	add.w	r0, r4, #11
 8003aa6:	1d23      	adds	r3, r4, #4
 8003aa8:	f020 0007 	bic.w	r0, r0, #7
 8003aac:	1ac2      	subs	r2, r0, r3
 8003aae:	bf1c      	itt	ne
 8003ab0:	1a1b      	subne	r3, r3, r0
 8003ab2:	50a3      	strne	r3, [r4, r2]
 8003ab4:	e7af      	b.n	8003a16 <_malloc_r+0x22>
 8003ab6:	6862      	ldr	r2, [r4, #4]
 8003ab8:	42a3      	cmp	r3, r4
 8003aba:	bf0c      	ite	eq
 8003abc:	f8c8 2000 	streq.w	r2, [r8]
 8003ac0:	605a      	strne	r2, [r3, #4]
 8003ac2:	e7eb      	b.n	8003a9c <_malloc_r+0xa8>
 8003ac4:	4623      	mov	r3, r4
 8003ac6:	6864      	ldr	r4, [r4, #4]
 8003ac8:	e7ae      	b.n	8003a28 <_malloc_r+0x34>
 8003aca:	463c      	mov	r4, r7
 8003acc:	687f      	ldr	r7, [r7, #4]
 8003ace:	e7b6      	b.n	8003a3e <_malloc_r+0x4a>
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	d1fb      	bne.n	8003ad0 <_malloc_r+0xdc>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6053      	str	r3, [r2, #4]
 8003adc:	e7de      	b.n	8003a9c <_malloc_r+0xa8>
 8003ade:	230c      	movs	r3, #12
 8003ae0:	6033      	str	r3, [r6, #0]
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f000 f80c 	bl	8003b00 <__malloc_unlock>
 8003ae8:	e794      	b.n	8003a14 <_malloc_r+0x20>
 8003aea:	6005      	str	r5, [r0, #0]
 8003aec:	e7d6      	b.n	8003a9c <_malloc_r+0xa8>
 8003aee:	bf00      	nop
 8003af0:	20000318 	.word	0x20000318

08003af4 <__malloc_lock>:
 8003af4:	4801      	ldr	r0, [pc, #4]	@ (8003afc <__malloc_lock+0x8>)
 8003af6:	f7ff bf0e 	b.w	8003916 <__retarget_lock_acquire_recursive>
 8003afa:	bf00      	nop
 8003afc:	20000310 	.word	0x20000310

08003b00 <__malloc_unlock>:
 8003b00:	4801      	ldr	r0, [pc, #4]	@ (8003b08 <__malloc_unlock+0x8>)
 8003b02:	f7ff bf09 	b.w	8003918 <__retarget_lock_release_recursive>
 8003b06:	bf00      	nop
 8003b08:	20000310 	.word	0x20000310

08003b0c <__ssputs_r>:
 8003b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b10:	688e      	ldr	r6, [r1, #8]
 8003b12:	461f      	mov	r7, r3
 8003b14:	42be      	cmp	r6, r7
 8003b16:	680b      	ldr	r3, [r1, #0]
 8003b18:	4682      	mov	sl, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	4690      	mov	r8, r2
 8003b1e:	d82d      	bhi.n	8003b7c <__ssputs_r+0x70>
 8003b20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b28:	d026      	beq.n	8003b78 <__ssputs_r+0x6c>
 8003b2a:	6965      	ldr	r5, [r4, #20]
 8003b2c:	6909      	ldr	r1, [r1, #16]
 8003b2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b32:	eba3 0901 	sub.w	r9, r3, r1
 8003b36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b3a:	1c7b      	adds	r3, r7, #1
 8003b3c:	444b      	add	r3, r9
 8003b3e:	106d      	asrs	r5, r5, #1
 8003b40:	429d      	cmp	r5, r3
 8003b42:	bf38      	it	cc
 8003b44:	461d      	movcc	r5, r3
 8003b46:	0553      	lsls	r3, r2, #21
 8003b48:	d527      	bpl.n	8003b9a <__ssputs_r+0x8e>
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	f7ff ff52 	bl	80039f4 <_malloc_r>
 8003b50:	4606      	mov	r6, r0
 8003b52:	b360      	cbz	r0, 8003bae <__ssputs_r+0xa2>
 8003b54:	6921      	ldr	r1, [r4, #16]
 8003b56:	464a      	mov	r2, r9
 8003b58:	f000 fd58 	bl	800460c <memcpy>
 8003b5c:	89a3      	ldrh	r3, [r4, #12]
 8003b5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b66:	81a3      	strh	r3, [r4, #12]
 8003b68:	6126      	str	r6, [r4, #16]
 8003b6a:	6165      	str	r5, [r4, #20]
 8003b6c:	444e      	add	r6, r9
 8003b6e:	eba5 0509 	sub.w	r5, r5, r9
 8003b72:	6026      	str	r6, [r4, #0]
 8003b74:	60a5      	str	r5, [r4, #8]
 8003b76:	463e      	mov	r6, r7
 8003b78:	42be      	cmp	r6, r7
 8003b7a:	d900      	bls.n	8003b7e <__ssputs_r+0x72>
 8003b7c:	463e      	mov	r6, r7
 8003b7e:	6820      	ldr	r0, [r4, #0]
 8003b80:	4632      	mov	r2, r6
 8003b82:	4641      	mov	r1, r8
 8003b84:	f000 fcf6 	bl	8004574 <memmove>
 8003b88:	68a3      	ldr	r3, [r4, #8]
 8003b8a:	1b9b      	subs	r3, r3, r6
 8003b8c:	60a3      	str	r3, [r4, #8]
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	4433      	add	r3, r6
 8003b92:	6023      	str	r3, [r4, #0]
 8003b94:	2000      	movs	r0, #0
 8003b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9a:	462a      	mov	r2, r5
 8003b9c:	f000 fd44 	bl	8004628 <_realloc_r>
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d1e0      	bne.n	8003b68 <__ssputs_r+0x5c>
 8003ba6:	6921      	ldr	r1, [r4, #16]
 8003ba8:	4650      	mov	r0, sl
 8003baa:	f7ff feb7 	bl	800391c <_free_r>
 8003bae:	230c      	movs	r3, #12
 8003bb0:	f8ca 3000 	str.w	r3, [sl]
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bba:	81a3      	strh	r3, [r4, #12]
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	e7e9      	b.n	8003b96 <__ssputs_r+0x8a>
	...

08003bc4 <_svfiprintf_r>:
 8003bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc8:	4698      	mov	r8, r3
 8003bca:	898b      	ldrh	r3, [r1, #12]
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	b09d      	sub	sp, #116	@ 0x74
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	460d      	mov	r5, r1
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	d510      	bpl.n	8003bfa <_svfiprintf_r+0x36>
 8003bd8:	690b      	ldr	r3, [r1, #16]
 8003bda:	b973      	cbnz	r3, 8003bfa <_svfiprintf_r+0x36>
 8003bdc:	2140      	movs	r1, #64	@ 0x40
 8003bde:	f7ff ff09 	bl	80039f4 <_malloc_r>
 8003be2:	6028      	str	r0, [r5, #0]
 8003be4:	6128      	str	r0, [r5, #16]
 8003be6:	b930      	cbnz	r0, 8003bf6 <_svfiprintf_r+0x32>
 8003be8:	230c      	movs	r3, #12
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	b01d      	add	sp, #116	@ 0x74
 8003bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf6:	2340      	movs	r3, #64	@ 0x40
 8003bf8:	616b      	str	r3, [r5, #20]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bfe:	2320      	movs	r3, #32
 8003c00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c08:	2330      	movs	r3, #48	@ 0x30
 8003c0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003da8 <_svfiprintf_r+0x1e4>
 8003c0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c12:	f04f 0901 	mov.w	r9, #1
 8003c16:	4623      	mov	r3, r4
 8003c18:	469a      	mov	sl, r3
 8003c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c1e:	b10a      	cbz	r2, 8003c24 <_svfiprintf_r+0x60>
 8003c20:	2a25      	cmp	r2, #37	@ 0x25
 8003c22:	d1f9      	bne.n	8003c18 <_svfiprintf_r+0x54>
 8003c24:	ebba 0b04 	subs.w	fp, sl, r4
 8003c28:	d00b      	beq.n	8003c42 <_svfiprintf_r+0x7e>
 8003c2a:	465b      	mov	r3, fp
 8003c2c:	4622      	mov	r2, r4
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4638      	mov	r0, r7
 8003c32:	f7ff ff6b 	bl	8003b0c <__ssputs_r>
 8003c36:	3001      	adds	r0, #1
 8003c38:	f000 80a7 	beq.w	8003d8a <_svfiprintf_r+0x1c6>
 8003c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c3e:	445a      	add	r2, fp
 8003c40:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c42:	f89a 3000 	ldrb.w	r3, [sl]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 809f 	beq.w	8003d8a <_svfiprintf_r+0x1c6>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c56:	f10a 0a01 	add.w	sl, sl, #1
 8003c5a:	9304      	str	r3, [sp, #16]
 8003c5c:	9307      	str	r3, [sp, #28]
 8003c5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c62:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c64:	4654      	mov	r4, sl
 8003c66:	2205      	movs	r2, #5
 8003c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c6c:	484e      	ldr	r0, [pc, #312]	@ (8003da8 <_svfiprintf_r+0x1e4>)
 8003c6e:	f7fc fab7 	bl	80001e0 <memchr>
 8003c72:	9a04      	ldr	r2, [sp, #16]
 8003c74:	b9d8      	cbnz	r0, 8003cae <_svfiprintf_r+0xea>
 8003c76:	06d0      	lsls	r0, r2, #27
 8003c78:	bf44      	itt	mi
 8003c7a:	2320      	movmi	r3, #32
 8003c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c80:	0711      	lsls	r1, r2, #28
 8003c82:	bf44      	itt	mi
 8003c84:	232b      	movmi	r3, #43	@ 0x2b
 8003c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c90:	d015      	beq.n	8003cbe <_svfiprintf_r+0xfa>
 8003c92:	9a07      	ldr	r2, [sp, #28]
 8003c94:	4654      	mov	r4, sl
 8003c96:	2000      	movs	r0, #0
 8003c98:	f04f 0c0a 	mov.w	ip, #10
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ca2:	3b30      	subs	r3, #48	@ 0x30
 8003ca4:	2b09      	cmp	r3, #9
 8003ca6:	d94b      	bls.n	8003d40 <_svfiprintf_r+0x17c>
 8003ca8:	b1b0      	cbz	r0, 8003cd8 <_svfiprintf_r+0x114>
 8003caa:	9207      	str	r2, [sp, #28]
 8003cac:	e014      	b.n	8003cd8 <_svfiprintf_r+0x114>
 8003cae:	eba0 0308 	sub.w	r3, r0, r8
 8003cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	9304      	str	r3, [sp, #16]
 8003cba:	46a2      	mov	sl, r4
 8003cbc:	e7d2      	b.n	8003c64 <_svfiprintf_r+0xa0>
 8003cbe:	9b03      	ldr	r3, [sp, #12]
 8003cc0:	1d19      	adds	r1, r3, #4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	9103      	str	r1, [sp, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bfbb      	ittet	lt
 8003cca:	425b      	neglt	r3, r3
 8003ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8003cd0:	9307      	strge	r3, [sp, #28]
 8003cd2:	9307      	strlt	r3, [sp, #28]
 8003cd4:	bfb8      	it	lt
 8003cd6:	9204      	strlt	r2, [sp, #16]
 8003cd8:	7823      	ldrb	r3, [r4, #0]
 8003cda:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cdc:	d10a      	bne.n	8003cf4 <_svfiprintf_r+0x130>
 8003cde:	7863      	ldrb	r3, [r4, #1]
 8003ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ce2:	d132      	bne.n	8003d4a <_svfiprintf_r+0x186>
 8003ce4:	9b03      	ldr	r3, [sp, #12]
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	9203      	str	r2, [sp, #12]
 8003cec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cf0:	3402      	adds	r4, #2
 8003cf2:	9305      	str	r3, [sp, #20]
 8003cf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003db8 <_svfiprintf_r+0x1f4>
 8003cf8:	7821      	ldrb	r1, [r4, #0]
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	4650      	mov	r0, sl
 8003cfe:	f7fc fa6f 	bl	80001e0 <memchr>
 8003d02:	b138      	cbz	r0, 8003d14 <_svfiprintf_r+0x150>
 8003d04:	9b04      	ldr	r3, [sp, #16]
 8003d06:	eba0 000a 	sub.w	r0, r0, sl
 8003d0a:	2240      	movs	r2, #64	@ 0x40
 8003d0c:	4082      	lsls	r2, r0
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	3401      	adds	r4, #1
 8003d12:	9304      	str	r3, [sp, #16]
 8003d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d18:	4824      	ldr	r0, [pc, #144]	@ (8003dac <_svfiprintf_r+0x1e8>)
 8003d1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d1e:	2206      	movs	r2, #6
 8003d20:	f7fc fa5e 	bl	80001e0 <memchr>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d036      	beq.n	8003d96 <_svfiprintf_r+0x1d2>
 8003d28:	4b21      	ldr	r3, [pc, #132]	@ (8003db0 <_svfiprintf_r+0x1ec>)
 8003d2a:	bb1b      	cbnz	r3, 8003d74 <_svfiprintf_r+0x1b0>
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	3307      	adds	r3, #7
 8003d30:	f023 0307 	bic.w	r3, r3, #7
 8003d34:	3308      	adds	r3, #8
 8003d36:	9303      	str	r3, [sp, #12]
 8003d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d3a:	4433      	add	r3, r6
 8003d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d3e:	e76a      	b.n	8003c16 <_svfiprintf_r+0x52>
 8003d40:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d44:	460c      	mov	r4, r1
 8003d46:	2001      	movs	r0, #1
 8003d48:	e7a8      	b.n	8003c9c <_svfiprintf_r+0xd8>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	3401      	adds	r4, #1
 8003d4e:	9305      	str	r3, [sp, #20]
 8003d50:	4619      	mov	r1, r3
 8003d52:	f04f 0c0a 	mov.w	ip, #10
 8003d56:	4620      	mov	r0, r4
 8003d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d5c:	3a30      	subs	r2, #48	@ 0x30
 8003d5e:	2a09      	cmp	r2, #9
 8003d60:	d903      	bls.n	8003d6a <_svfiprintf_r+0x1a6>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0c6      	beq.n	8003cf4 <_svfiprintf_r+0x130>
 8003d66:	9105      	str	r1, [sp, #20]
 8003d68:	e7c4      	b.n	8003cf4 <_svfiprintf_r+0x130>
 8003d6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d6e:	4604      	mov	r4, r0
 8003d70:	2301      	movs	r3, #1
 8003d72:	e7f0      	b.n	8003d56 <_svfiprintf_r+0x192>
 8003d74:	ab03      	add	r3, sp, #12
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	462a      	mov	r2, r5
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003db4 <_svfiprintf_r+0x1f0>)
 8003d7c:	a904      	add	r1, sp, #16
 8003d7e:	4638      	mov	r0, r7
 8003d80:	f3af 8000 	nop.w
 8003d84:	1c42      	adds	r2, r0, #1
 8003d86:	4606      	mov	r6, r0
 8003d88:	d1d6      	bne.n	8003d38 <_svfiprintf_r+0x174>
 8003d8a:	89ab      	ldrh	r3, [r5, #12]
 8003d8c:	065b      	lsls	r3, r3, #25
 8003d8e:	f53f af2d 	bmi.w	8003bec <_svfiprintf_r+0x28>
 8003d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d94:	e72c      	b.n	8003bf0 <_svfiprintf_r+0x2c>
 8003d96:	ab03      	add	r3, sp, #12
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	462a      	mov	r2, r5
 8003d9c:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <_svfiprintf_r+0x1f0>)
 8003d9e:	a904      	add	r1, sp, #16
 8003da0:	4638      	mov	r0, r7
 8003da2:	f000 f9bb 	bl	800411c <_printf_i>
 8003da6:	e7ed      	b.n	8003d84 <_svfiprintf_r+0x1c0>
 8003da8:	08004828 	.word	0x08004828
 8003dac:	08004832 	.word	0x08004832
 8003db0:	00000000 	.word	0x00000000
 8003db4:	08003b0d 	.word	0x08003b0d
 8003db8:	0800482e 	.word	0x0800482e

08003dbc <__sfputc_r>:
 8003dbc:	6893      	ldr	r3, [r2, #8]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	b410      	push	{r4}
 8003dc4:	6093      	str	r3, [r2, #8]
 8003dc6:	da08      	bge.n	8003dda <__sfputc_r+0x1e>
 8003dc8:	6994      	ldr	r4, [r2, #24]
 8003dca:	42a3      	cmp	r3, r4
 8003dcc:	db01      	blt.n	8003dd2 <__sfputc_r+0x16>
 8003dce:	290a      	cmp	r1, #10
 8003dd0:	d103      	bne.n	8003dda <__sfputc_r+0x1e>
 8003dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dd6:	f7ff bc90 	b.w	80036fa <__swbuf_r>
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	1c58      	adds	r0, r3, #1
 8003dde:	6010      	str	r0, [r2, #0]
 8003de0:	7019      	strb	r1, [r3, #0]
 8003de2:	4608      	mov	r0, r1
 8003de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <__sfputs_r>:
 8003dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dec:	4606      	mov	r6, r0
 8003dee:	460f      	mov	r7, r1
 8003df0:	4614      	mov	r4, r2
 8003df2:	18d5      	adds	r5, r2, r3
 8003df4:	42ac      	cmp	r4, r5
 8003df6:	d101      	bne.n	8003dfc <__sfputs_r+0x12>
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e007      	b.n	8003e0c <__sfputs_r+0x22>
 8003dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e00:	463a      	mov	r2, r7
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7ff ffda 	bl	8003dbc <__sfputc_r>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d1f3      	bne.n	8003df4 <__sfputs_r+0xa>
 8003e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e10 <_vfiprintf_r>:
 8003e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e14:	460d      	mov	r5, r1
 8003e16:	b09d      	sub	sp, #116	@ 0x74
 8003e18:	4614      	mov	r4, r2
 8003e1a:	4698      	mov	r8, r3
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	b118      	cbz	r0, 8003e28 <_vfiprintf_r+0x18>
 8003e20:	6a03      	ldr	r3, [r0, #32]
 8003e22:	b90b      	cbnz	r3, 8003e28 <_vfiprintf_r+0x18>
 8003e24:	f7ff fb5e 	bl	80034e4 <__sinit>
 8003e28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e2a:	07d9      	lsls	r1, r3, #31
 8003e2c:	d405      	bmi.n	8003e3a <_vfiprintf_r+0x2a>
 8003e2e:	89ab      	ldrh	r3, [r5, #12]
 8003e30:	059a      	lsls	r2, r3, #22
 8003e32:	d402      	bmi.n	8003e3a <_vfiprintf_r+0x2a>
 8003e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e36:	f7ff fd6e 	bl	8003916 <__retarget_lock_acquire_recursive>
 8003e3a:	89ab      	ldrh	r3, [r5, #12]
 8003e3c:	071b      	lsls	r3, r3, #28
 8003e3e:	d501      	bpl.n	8003e44 <_vfiprintf_r+0x34>
 8003e40:	692b      	ldr	r3, [r5, #16]
 8003e42:	b99b      	cbnz	r3, 8003e6c <_vfiprintf_r+0x5c>
 8003e44:	4629      	mov	r1, r5
 8003e46:	4630      	mov	r0, r6
 8003e48:	f7ff fc96 	bl	8003778 <__swsetup_r>
 8003e4c:	b170      	cbz	r0, 8003e6c <_vfiprintf_r+0x5c>
 8003e4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e50:	07dc      	lsls	r4, r3, #31
 8003e52:	d504      	bpl.n	8003e5e <_vfiprintf_r+0x4e>
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	b01d      	add	sp, #116	@ 0x74
 8003e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5e:	89ab      	ldrh	r3, [r5, #12]
 8003e60:	0598      	lsls	r0, r3, #22
 8003e62:	d4f7      	bmi.n	8003e54 <_vfiprintf_r+0x44>
 8003e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e66:	f7ff fd57 	bl	8003918 <__retarget_lock_release_recursive>
 8003e6a:	e7f3      	b.n	8003e54 <_vfiprintf_r+0x44>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e70:	2320      	movs	r3, #32
 8003e72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e7a:	2330      	movs	r3, #48	@ 0x30
 8003e7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800402c <_vfiprintf_r+0x21c>
 8003e80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e84:	f04f 0901 	mov.w	r9, #1
 8003e88:	4623      	mov	r3, r4
 8003e8a:	469a      	mov	sl, r3
 8003e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e90:	b10a      	cbz	r2, 8003e96 <_vfiprintf_r+0x86>
 8003e92:	2a25      	cmp	r2, #37	@ 0x25
 8003e94:	d1f9      	bne.n	8003e8a <_vfiprintf_r+0x7a>
 8003e96:	ebba 0b04 	subs.w	fp, sl, r4
 8003e9a:	d00b      	beq.n	8003eb4 <_vfiprintf_r+0xa4>
 8003e9c:	465b      	mov	r3, fp
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f7ff ffa1 	bl	8003dea <__sfputs_r>
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	f000 80a7 	beq.w	8003ffc <_vfiprintf_r+0x1ec>
 8003eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eb0:	445a      	add	r2, fp
 8003eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 809f 	beq.w	8003ffc <_vfiprintf_r+0x1ec>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ec8:	f10a 0a01 	add.w	sl, sl, #1
 8003ecc:	9304      	str	r3, [sp, #16]
 8003ece:	9307      	str	r3, [sp, #28]
 8003ed0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ed4:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ed6:	4654      	mov	r4, sl
 8003ed8:	2205      	movs	r2, #5
 8003eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ede:	4853      	ldr	r0, [pc, #332]	@ (800402c <_vfiprintf_r+0x21c>)
 8003ee0:	f7fc f97e 	bl	80001e0 <memchr>
 8003ee4:	9a04      	ldr	r2, [sp, #16]
 8003ee6:	b9d8      	cbnz	r0, 8003f20 <_vfiprintf_r+0x110>
 8003ee8:	06d1      	lsls	r1, r2, #27
 8003eea:	bf44      	itt	mi
 8003eec:	2320      	movmi	r3, #32
 8003eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ef2:	0713      	lsls	r3, r2, #28
 8003ef4:	bf44      	itt	mi
 8003ef6:	232b      	movmi	r3, #43	@ 0x2b
 8003ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003efc:	f89a 3000 	ldrb.w	r3, [sl]
 8003f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f02:	d015      	beq.n	8003f30 <_vfiprintf_r+0x120>
 8003f04:	9a07      	ldr	r2, [sp, #28]
 8003f06:	4654      	mov	r4, sl
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f04f 0c0a 	mov.w	ip, #10
 8003f0e:	4621      	mov	r1, r4
 8003f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f14:	3b30      	subs	r3, #48	@ 0x30
 8003f16:	2b09      	cmp	r3, #9
 8003f18:	d94b      	bls.n	8003fb2 <_vfiprintf_r+0x1a2>
 8003f1a:	b1b0      	cbz	r0, 8003f4a <_vfiprintf_r+0x13a>
 8003f1c:	9207      	str	r2, [sp, #28]
 8003f1e:	e014      	b.n	8003f4a <_vfiprintf_r+0x13a>
 8003f20:	eba0 0308 	sub.w	r3, r0, r8
 8003f24:	fa09 f303 	lsl.w	r3, r9, r3
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	9304      	str	r3, [sp, #16]
 8003f2c:	46a2      	mov	sl, r4
 8003f2e:	e7d2      	b.n	8003ed6 <_vfiprintf_r+0xc6>
 8003f30:	9b03      	ldr	r3, [sp, #12]
 8003f32:	1d19      	adds	r1, r3, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	9103      	str	r1, [sp, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bfbb      	ittet	lt
 8003f3c:	425b      	neglt	r3, r3
 8003f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f42:	9307      	strge	r3, [sp, #28]
 8003f44:	9307      	strlt	r3, [sp, #28]
 8003f46:	bfb8      	it	lt
 8003f48:	9204      	strlt	r2, [sp, #16]
 8003f4a:	7823      	ldrb	r3, [r4, #0]
 8003f4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f4e:	d10a      	bne.n	8003f66 <_vfiprintf_r+0x156>
 8003f50:	7863      	ldrb	r3, [r4, #1]
 8003f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f54:	d132      	bne.n	8003fbc <_vfiprintf_r+0x1ac>
 8003f56:	9b03      	ldr	r3, [sp, #12]
 8003f58:	1d1a      	adds	r2, r3, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	9203      	str	r2, [sp, #12]
 8003f5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f62:	3402      	adds	r4, #2
 8003f64:	9305      	str	r3, [sp, #20]
 8003f66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800403c <_vfiprintf_r+0x22c>
 8003f6a:	7821      	ldrb	r1, [r4, #0]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	4650      	mov	r0, sl
 8003f70:	f7fc f936 	bl	80001e0 <memchr>
 8003f74:	b138      	cbz	r0, 8003f86 <_vfiprintf_r+0x176>
 8003f76:	9b04      	ldr	r3, [sp, #16]
 8003f78:	eba0 000a 	sub.w	r0, r0, sl
 8003f7c:	2240      	movs	r2, #64	@ 0x40
 8003f7e:	4082      	lsls	r2, r0
 8003f80:	4313      	orrs	r3, r2
 8003f82:	3401      	adds	r4, #1
 8003f84:	9304      	str	r3, [sp, #16]
 8003f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f8a:	4829      	ldr	r0, [pc, #164]	@ (8004030 <_vfiprintf_r+0x220>)
 8003f8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f90:	2206      	movs	r2, #6
 8003f92:	f7fc f925 	bl	80001e0 <memchr>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d03f      	beq.n	800401a <_vfiprintf_r+0x20a>
 8003f9a:	4b26      	ldr	r3, [pc, #152]	@ (8004034 <_vfiprintf_r+0x224>)
 8003f9c:	bb1b      	cbnz	r3, 8003fe6 <_vfiprintf_r+0x1d6>
 8003f9e:	9b03      	ldr	r3, [sp, #12]
 8003fa0:	3307      	adds	r3, #7
 8003fa2:	f023 0307 	bic.w	r3, r3, #7
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	9303      	str	r3, [sp, #12]
 8003faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fac:	443b      	add	r3, r7
 8003fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fb0:	e76a      	b.n	8003e88 <_vfiprintf_r+0x78>
 8003fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	2001      	movs	r0, #1
 8003fba:	e7a8      	b.n	8003f0e <_vfiprintf_r+0xfe>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	3401      	adds	r4, #1
 8003fc0:	9305      	str	r3, [sp, #20]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f04f 0c0a 	mov.w	ip, #10
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fce:	3a30      	subs	r2, #48	@ 0x30
 8003fd0:	2a09      	cmp	r2, #9
 8003fd2:	d903      	bls.n	8003fdc <_vfiprintf_r+0x1cc>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0c6      	beq.n	8003f66 <_vfiprintf_r+0x156>
 8003fd8:	9105      	str	r1, [sp, #20]
 8003fda:	e7c4      	b.n	8003f66 <_vfiprintf_r+0x156>
 8003fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e7f0      	b.n	8003fc8 <_vfiprintf_r+0x1b8>
 8003fe6:	ab03      	add	r3, sp, #12
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	462a      	mov	r2, r5
 8003fec:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <_vfiprintf_r+0x228>)
 8003fee:	a904      	add	r1, sp, #16
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	f3af 8000 	nop.w
 8003ff6:	4607      	mov	r7, r0
 8003ff8:	1c78      	adds	r0, r7, #1
 8003ffa:	d1d6      	bne.n	8003faa <_vfiprintf_r+0x19a>
 8003ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ffe:	07d9      	lsls	r1, r3, #31
 8004000:	d405      	bmi.n	800400e <_vfiprintf_r+0x1fe>
 8004002:	89ab      	ldrh	r3, [r5, #12]
 8004004:	059a      	lsls	r2, r3, #22
 8004006:	d402      	bmi.n	800400e <_vfiprintf_r+0x1fe>
 8004008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800400a:	f7ff fc85 	bl	8003918 <__retarget_lock_release_recursive>
 800400e:	89ab      	ldrh	r3, [r5, #12]
 8004010:	065b      	lsls	r3, r3, #25
 8004012:	f53f af1f 	bmi.w	8003e54 <_vfiprintf_r+0x44>
 8004016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004018:	e71e      	b.n	8003e58 <_vfiprintf_r+0x48>
 800401a:	ab03      	add	r3, sp, #12
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	462a      	mov	r2, r5
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <_vfiprintf_r+0x228>)
 8004022:	a904      	add	r1, sp, #16
 8004024:	4630      	mov	r0, r6
 8004026:	f000 f879 	bl	800411c <_printf_i>
 800402a:	e7e4      	b.n	8003ff6 <_vfiprintf_r+0x1e6>
 800402c:	08004828 	.word	0x08004828
 8004030:	08004832 	.word	0x08004832
 8004034:	00000000 	.word	0x00000000
 8004038:	08003deb 	.word	0x08003deb
 800403c:	0800482e 	.word	0x0800482e

08004040 <_printf_common>:
 8004040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004044:	4616      	mov	r6, r2
 8004046:	4698      	mov	r8, r3
 8004048:	688a      	ldr	r2, [r1, #8]
 800404a:	690b      	ldr	r3, [r1, #16]
 800404c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004050:	4293      	cmp	r3, r2
 8004052:	bfb8      	it	lt
 8004054:	4613      	movlt	r3, r2
 8004056:	6033      	str	r3, [r6, #0]
 8004058:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800405c:	4607      	mov	r7, r0
 800405e:	460c      	mov	r4, r1
 8004060:	b10a      	cbz	r2, 8004066 <_printf_common+0x26>
 8004062:	3301      	adds	r3, #1
 8004064:	6033      	str	r3, [r6, #0]
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	0699      	lsls	r1, r3, #26
 800406a:	bf42      	ittt	mi
 800406c:	6833      	ldrmi	r3, [r6, #0]
 800406e:	3302      	addmi	r3, #2
 8004070:	6033      	strmi	r3, [r6, #0]
 8004072:	6825      	ldr	r5, [r4, #0]
 8004074:	f015 0506 	ands.w	r5, r5, #6
 8004078:	d106      	bne.n	8004088 <_printf_common+0x48>
 800407a:	f104 0a19 	add.w	sl, r4, #25
 800407e:	68e3      	ldr	r3, [r4, #12]
 8004080:	6832      	ldr	r2, [r6, #0]
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	42ab      	cmp	r3, r5
 8004086:	dc26      	bgt.n	80040d6 <_printf_common+0x96>
 8004088:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800408c:	6822      	ldr	r2, [r4, #0]
 800408e:	3b00      	subs	r3, #0
 8004090:	bf18      	it	ne
 8004092:	2301      	movne	r3, #1
 8004094:	0692      	lsls	r2, r2, #26
 8004096:	d42b      	bmi.n	80040f0 <_printf_common+0xb0>
 8004098:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800409c:	4641      	mov	r1, r8
 800409e:	4638      	mov	r0, r7
 80040a0:	47c8      	blx	r9
 80040a2:	3001      	adds	r0, #1
 80040a4:	d01e      	beq.n	80040e4 <_printf_common+0xa4>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	6922      	ldr	r2, [r4, #16]
 80040aa:	f003 0306 	and.w	r3, r3, #6
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	bf02      	ittt	eq
 80040b2:	68e5      	ldreq	r5, [r4, #12]
 80040b4:	6833      	ldreq	r3, [r6, #0]
 80040b6:	1aed      	subeq	r5, r5, r3
 80040b8:	68a3      	ldr	r3, [r4, #8]
 80040ba:	bf0c      	ite	eq
 80040bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c0:	2500      	movne	r5, #0
 80040c2:	4293      	cmp	r3, r2
 80040c4:	bfc4      	itt	gt
 80040c6:	1a9b      	subgt	r3, r3, r2
 80040c8:	18ed      	addgt	r5, r5, r3
 80040ca:	2600      	movs	r6, #0
 80040cc:	341a      	adds	r4, #26
 80040ce:	42b5      	cmp	r5, r6
 80040d0:	d11a      	bne.n	8004108 <_printf_common+0xc8>
 80040d2:	2000      	movs	r0, #0
 80040d4:	e008      	b.n	80040e8 <_printf_common+0xa8>
 80040d6:	2301      	movs	r3, #1
 80040d8:	4652      	mov	r2, sl
 80040da:	4641      	mov	r1, r8
 80040dc:	4638      	mov	r0, r7
 80040de:	47c8      	blx	r9
 80040e0:	3001      	adds	r0, #1
 80040e2:	d103      	bne.n	80040ec <_printf_common+0xac>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ec:	3501      	adds	r5, #1
 80040ee:	e7c6      	b.n	800407e <_printf_common+0x3e>
 80040f0:	18e1      	adds	r1, r4, r3
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	2030      	movs	r0, #48	@ 0x30
 80040f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040fa:	4422      	add	r2, r4
 80040fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004100:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004104:	3302      	adds	r3, #2
 8004106:	e7c7      	b.n	8004098 <_printf_common+0x58>
 8004108:	2301      	movs	r3, #1
 800410a:	4622      	mov	r2, r4
 800410c:	4641      	mov	r1, r8
 800410e:	4638      	mov	r0, r7
 8004110:	47c8      	blx	r9
 8004112:	3001      	adds	r0, #1
 8004114:	d0e6      	beq.n	80040e4 <_printf_common+0xa4>
 8004116:	3601      	adds	r6, #1
 8004118:	e7d9      	b.n	80040ce <_printf_common+0x8e>
	...

0800411c <_printf_i>:
 800411c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	7e0f      	ldrb	r7, [r1, #24]
 8004122:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004124:	2f78      	cmp	r7, #120	@ 0x78
 8004126:	4691      	mov	r9, r2
 8004128:	4680      	mov	r8, r0
 800412a:	460c      	mov	r4, r1
 800412c:	469a      	mov	sl, r3
 800412e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004132:	d807      	bhi.n	8004144 <_printf_i+0x28>
 8004134:	2f62      	cmp	r7, #98	@ 0x62
 8004136:	d80a      	bhi.n	800414e <_printf_i+0x32>
 8004138:	2f00      	cmp	r7, #0
 800413a:	f000 80d1 	beq.w	80042e0 <_printf_i+0x1c4>
 800413e:	2f58      	cmp	r7, #88	@ 0x58
 8004140:	f000 80b8 	beq.w	80042b4 <_printf_i+0x198>
 8004144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004148:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800414c:	e03a      	b.n	80041c4 <_printf_i+0xa8>
 800414e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004152:	2b15      	cmp	r3, #21
 8004154:	d8f6      	bhi.n	8004144 <_printf_i+0x28>
 8004156:	a101      	add	r1, pc, #4	@ (adr r1, 800415c <_printf_i+0x40>)
 8004158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041c9 	.word	0x080041c9
 8004164:	08004145 	.word	0x08004145
 8004168:	08004145 	.word	0x08004145
 800416c:	08004145 	.word	0x08004145
 8004170:	08004145 	.word	0x08004145
 8004174:	080041c9 	.word	0x080041c9
 8004178:	08004145 	.word	0x08004145
 800417c:	08004145 	.word	0x08004145
 8004180:	08004145 	.word	0x08004145
 8004184:	08004145 	.word	0x08004145
 8004188:	080042c7 	.word	0x080042c7
 800418c:	080041f3 	.word	0x080041f3
 8004190:	08004281 	.word	0x08004281
 8004194:	08004145 	.word	0x08004145
 8004198:	08004145 	.word	0x08004145
 800419c:	080042e9 	.word	0x080042e9
 80041a0:	08004145 	.word	0x08004145
 80041a4:	080041f3 	.word	0x080041f3
 80041a8:	08004145 	.word	0x08004145
 80041ac:	08004145 	.word	0x08004145
 80041b0:	08004289 	.word	0x08004289
 80041b4:	6833      	ldr	r3, [r6, #0]
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6032      	str	r2, [r6, #0]
 80041bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041c4:	2301      	movs	r3, #1
 80041c6:	e09c      	b.n	8004302 <_printf_i+0x1e6>
 80041c8:	6833      	ldr	r3, [r6, #0]
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	1d19      	adds	r1, r3, #4
 80041ce:	6031      	str	r1, [r6, #0]
 80041d0:	0606      	lsls	r6, r0, #24
 80041d2:	d501      	bpl.n	80041d8 <_printf_i+0xbc>
 80041d4:	681d      	ldr	r5, [r3, #0]
 80041d6:	e003      	b.n	80041e0 <_printf_i+0xc4>
 80041d8:	0645      	lsls	r5, r0, #25
 80041da:	d5fb      	bpl.n	80041d4 <_printf_i+0xb8>
 80041dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	da03      	bge.n	80041ec <_printf_i+0xd0>
 80041e4:	232d      	movs	r3, #45	@ 0x2d
 80041e6:	426d      	negs	r5, r5
 80041e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ec:	4858      	ldr	r0, [pc, #352]	@ (8004350 <_printf_i+0x234>)
 80041ee:	230a      	movs	r3, #10
 80041f0:	e011      	b.n	8004216 <_printf_i+0xfa>
 80041f2:	6821      	ldr	r1, [r4, #0]
 80041f4:	6833      	ldr	r3, [r6, #0]
 80041f6:	0608      	lsls	r0, r1, #24
 80041f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80041fc:	d402      	bmi.n	8004204 <_printf_i+0xe8>
 80041fe:	0649      	lsls	r1, r1, #25
 8004200:	bf48      	it	mi
 8004202:	b2ad      	uxthmi	r5, r5
 8004204:	2f6f      	cmp	r7, #111	@ 0x6f
 8004206:	4852      	ldr	r0, [pc, #328]	@ (8004350 <_printf_i+0x234>)
 8004208:	6033      	str	r3, [r6, #0]
 800420a:	bf14      	ite	ne
 800420c:	230a      	movne	r3, #10
 800420e:	2308      	moveq	r3, #8
 8004210:	2100      	movs	r1, #0
 8004212:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004216:	6866      	ldr	r6, [r4, #4]
 8004218:	60a6      	str	r6, [r4, #8]
 800421a:	2e00      	cmp	r6, #0
 800421c:	db05      	blt.n	800422a <_printf_i+0x10e>
 800421e:	6821      	ldr	r1, [r4, #0]
 8004220:	432e      	orrs	r6, r5
 8004222:	f021 0104 	bic.w	r1, r1, #4
 8004226:	6021      	str	r1, [r4, #0]
 8004228:	d04b      	beq.n	80042c2 <_printf_i+0x1a6>
 800422a:	4616      	mov	r6, r2
 800422c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004230:	fb03 5711 	mls	r7, r3, r1, r5
 8004234:	5dc7      	ldrb	r7, [r0, r7]
 8004236:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800423a:	462f      	mov	r7, r5
 800423c:	42bb      	cmp	r3, r7
 800423e:	460d      	mov	r5, r1
 8004240:	d9f4      	bls.n	800422c <_printf_i+0x110>
 8004242:	2b08      	cmp	r3, #8
 8004244:	d10b      	bne.n	800425e <_printf_i+0x142>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	07df      	lsls	r7, r3, #31
 800424a:	d508      	bpl.n	800425e <_printf_i+0x142>
 800424c:	6923      	ldr	r3, [r4, #16]
 800424e:	6861      	ldr	r1, [r4, #4]
 8004250:	4299      	cmp	r1, r3
 8004252:	bfde      	ittt	le
 8004254:	2330      	movle	r3, #48	@ 0x30
 8004256:	f806 3c01 	strble.w	r3, [r6, #-1]
 800425a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800425e:	1b92      	subs	r2, r2, r6
 8004260:	6122      	str	r2, [r4, #16]
 8004262:	f8cd a000 	str.w	sl, [sp]
 8004266:	464b      	mov	r3, r9
 8004268:	aa03      	add	r2, sp, #12
 800426a:	4621      	mov	r1, r4
 800426c:	4640      	mov	r0, r8
 800426e:	f7ff fee7 	bl	8004040 <_printf_common>
 8004272:	3001      	adds	r0, #1
 8004274:	d14a      	bne.n	800430c <_printf_i+0x1f0>
 8004276:	f04f 30ff 	mov.w	r0, #4294967295
 800427a:	b004      	add	sp, #16
 800427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	f043 0320 	orr.w	r3, r3, #32
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	4832      	ldr	r0, [pc, #200]	@ (8004354 <_printf_i+0x238>)
 800428a:	2778      	movs	r7, #120	@ 0x78
 800428c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	6831      	ldr	r1, [r6, #0]
 8004294:	061f      	lsls	r7, r3, #24
 8004296:	f851 5b04 	ldr.w	r5, [r1], #4
 800429a:	d402      	bmi.n	80042a2 <_printf_i+0x186>
 800429c:	065f      	lsls	r7, r3, #25
 800429e:	bf48      	it	mi
 80042a0:	b2ad      	uxthmi	r5, r5
 80042a2:	6031      	str	r1, [r6, #0]
 80042a4:	07d9      	lsls	r1, r3, #31
 80042a6:	bf44      	itt	mi
 80042a8:	f043 0320 	orrmi.w	r3, r3, #32
 80042ac:	6023      	strmi	r3, [r4, #0]
 80042ae:	b11d      	cbz	r5, 80042b8 <_printf_i+0x19c>
 80042b0:	2310      	movs	r3, #16
 80042b2:	e7ad      	b.n	8004210 <_printf_i+0xf4>
 80042b4:	4826      	ldr	r0, [pc, #152]	@ (8004350 <_printf_i+0x234>)
 80042b6:	e7e9      	b.n	800428c <_printf_i+0x170>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	f023 0320 	bic.w	r3, r3, #32
 80042be:	6023      	str	r3, [r4, #0]
 80042c0:	e7f6      	b.n	80042b0 <_printf_i+0x194>
 80042c2:	4616      	mov	r6, r2
 80042c4:	e7bd      	b.n	8004242 <_printf_i+0x126>
 80042c6:	6833      	ldr	r3, [r6, #0]
 80042c8:	6825      	ldr	r5, [r4, #0]
 80042ca:	6961      	ldr	r1, [r4, #20]
 80042cc:	1d18      	adds	r0, r3, #4
 80042ce:	6030      	str	r0, [r6, #0]
 80042d0:	062e      	lsls	r6, r5, #24
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	d501      	bpl.n	80042da <_printf_i+0x1be>
 80042d6:	6019      	str	r1, [r3, #0]
 80042d8:	e002      	b.n	80042e0 <_printf_i+0x1c4>
 80042da:	0668      	lsls	r0, r5, #25
 80042dc:	d5fb      	bpl.n	80042d6 <_printf_i+0x1ba>
 80042de:	8019      	strh	r1, [r3, #0]
 80042e0:	2300      	movs	r3, #0
 80042e2:	6123      	str	r3, [r4, #16]
 80042e4:	4616      	mov	r6, r2
 80042e6:	e7bc      	b.n	8004262 <_printf_i+0x146>
 80042e8:	6833      	ldr	r3, [r6, #0]
 80042ea:	1d1a      	adds	r2, r3, #4
 80042ec:	6032      	str	r2, [r6, #0]
 80042ee:	681e      	ldr	r6, [r3, #0]
 80042f0:	6862      	ldr	r2, [r4, #4]
 80042f2:	2100      	movs	r1, #0
 80042f4:	4630      	mov	r0, r6
 80042f6:	f7fb ff73 	bl	80001e0 <memchr>
 80042fa:	b108      	cbz	r0, 8004300 <_printf_i+0x1e4>
 80042fc:	1b80      	subs	r0, r0, r6
 80042fe:	6060      	str	r0, [r4, #4]
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	6123      	str	r3, [r4, #16]
 8004304:	2300      	movs	r3, #0
 8004306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800430a:	e7aa      	b.n	8004262 <_printf_i+0x146>
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	4632      	mov	r2, r6
 8004310:	4649      	mov	r1, r9
 8004312:	4640      	mov	r0, r8
 8004314:	47d0      	blx	sl
 8004316:	3001      	adds	r0, #1
 8004318:	d0ad      	beq.n	8004276 <_printf_i+0x15a>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	079b      	lsls	r3, r3, #30
 800431e:	d413      	bmi.n	8004348 <_printf_i+0x22c>
 8004320:	68e0      	ldr	r0, [r4, #12]
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	4298      	cmp	r0, r3
 8004326:	bfb8      	it	lt
 8004328:	4618      	movlt	r0, r3
 800432a:	e7a6      	b.n	800427a <_printf_i+0x15e>
 800432c:	2301      	movs	r3, #1
 800432e:	4632      	mov	r2, r6
 8004330:	4649      	mov	r1, r9
 8004332:	4640      	mov	r0, r8
 8004334:	47d0      	blx	sl
 8004336:	3001      	adds	r0, #1
 8004338:	d09d      	beq.n	8004276 <_printf_i+0x15a>
 800433a:	3501      	adds	r5, #1
 800433c:	68e3      	ldr	r3, [r4, #12]
 800433e:	9903      	ldr	r1, [sp, #12]
 8004340:	1a5b      	subs	r3, r3, r1
 8004342:	42ab      	cmp	r3, r5
 8004344:	dcf2      	bgt.n	800432c <_printf_i+0x210>
 8004346:	e7eb      	b.n	8004320 <_printf_i+0x204>
 8004348:	2500      	movs	r5, #0
 800434a:	f104 0619 	add.w	r6, r4, #25
 800434e:	e7f5      	b.n	800433c <_printf_i+0x220>
 8004350:	08004839 	.word	0x08004839
 8004354:	0800484a 	.word	0x0800484a

08004358 <__sflush_r>:
 8004358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800435c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004360:	0716      	lsls	r6, r2, #28
 8004362:	4605      	mov	r5, r0
 8004364:	460c      	mov	r4, r1
 8004366:	d454      	bmi.n	8004412 <__sflush_r+0xba>
 8004368:	684b      	ldr	r3, [r1, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	dc02      	bgt.n	8004374 <__sflush_r+0x1c>
 800436e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	dd48      	ble.n	8004406 <__sflush_r+0xae>
 8004374:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004376:	2e00      	cmp	r6, #0
 8004378:	d045      	beq.n	8004406 <__sflush_r+0xae>
 800437a:	2300      	movs	r3, #0
 800437c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004380:	682f      	ldr	r7, [r5, #0]
 8004382:	6a21      	ldr	r1, [r4, #32]
 8004384:	602b      	str	r3, [r5, #0]
 8004386:	d030      	beq.n	80043ea <__sflush_r+0x92>
 8004388:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	0759      	lsls	r1, r3, #29
 800438e:	d505      	bpl.n	800439c <__sflush_r+0x44>
 8004390:	6863      	ldr	r3, [r4, #4]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004396:	b10b      	cbz	r3, 800439c <__sflush_r+0x44>
 8004398:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800439a:	1ad2      	subs	r2, r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043a0:	6a21      	ldr	r1, [r4, #32]
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b0      	blx	r6
 80043a6:	1c43      	adds	r3, r0, #1
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	d106      	bne.n	80043ba <__sflush_r+0x62>
 80043ac:	6829      	ldr	r1, [r5, #0]
 80043ae:	291d      	cmp	r1, #29
 80043b0:	d82b      	bhi.n	800440a <__sflush_r+0xb2>
 80043b2:	4a2a      	ldr	r2, [pc, #168]	@ (800445c <__sflush_r+0x104>)
 80043b4:	40ca      	lsrs	r2, r1
 80043b6:	07d6      	lsls	r6, r2, #31
 80043b8:	d527      	bpl.n	800440a <__sflush_r+0xb2>
 80043ba:	2200      	movs	r2, #0
 80043bc:	6062      	str	r2, [r4, #4]
 80043be:	04d9      	lsls	r1, r3, #19
 80043c0:	6922      	ldr	r2, [r4, #16]
 80043c2:	6022      	str	r2, [r4, #0]
 80043c4:	d504      	bpl.n	80043d0 <__sflush_r+0x78>
 80043c6:	1c42      	adds	r2, r0, #1
 80043c8:	d101      	bne.n	80043ce <__sflush_r+0x76>
 80043ca:	682b      	ldr	r3, [r5, #0]
 80043cc:	b903      	cbnz	r3, 80043d0 <__sflush_r+0x78>
 80043ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80043d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043d2:	602f      	str	r7, [r5, #0]
 80043d4:	b1b9      	cbz	r1, 8004406 <__sflush_r+0xae>
 80043d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043da:	4299      	cmp	r1, r3
 80043dc:	d002      	beq.n	80043e4 <__sflush_r+0x8c>
 80043de:	4628      	mov	r0, r5
 80043e0:	f7ff fa9c 	bl	800391c <_free_r>
 80043e4:	2300      	movs	r3, #0
 80043e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80043e8:	e00d      	b.n	8004406 <__sflush_r+0xae>
 80043ea:	2301      	movs	r3, #1
 80043ec:	4628      	mov	r0, r5
 80043ee:	47b0      	blx	r6
 80043f0:	4602      	mov	r2, r0
 80043f2:	1c50      	adds	r0, r2, #1
 80043f4:	d1c9      	bne.n	800438a <__sflush_r+0x32>
 80043f6:	682b      	ldr	r3, [r5, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0c6      	beq.n	800438a <__sflush_r+0x32>
 80043fc:	2b1d      	cmp	r3, #29
 80043fe:	d001      	beq.n	8004404 <__sflush_r+0xac>
 8004400:	2b16      	cmp	r3, #22
 8004402:	d11e      	bne.n	8004442 <__sflush_r+0xea>
 8004404:	602f      	str	r7, [r5, #0]
 8004406:	2000      	movs	r0, #0
 8004408:	e022      	b.n	8004450 <__sflush_r+0xf8>
 800440a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800440e:	b21b      	sxth	r3, r3
 8004410:	e01b      	b.n	800444a <__sflush_r+0xf2>
 8004412:	690f      	ldr	r7, [r1, #16]
 8004414:	2f00      	cmp	r7, #0
 8004416:	d0f6      	beq.n	8004406 <__sflush_r+0xae>
 8004418:	0793      	lsls	r3, r2, #30
 800441a:	680e      	ldr	r6, [r1, #0]
 800441c:	bf08      	it	eq
 800441e:	694b      	ldreq	r3, [r1, #20]
 8004420:	600f      	str	r7, [r1, #0]
 8004422:	bf18      	it	ne
 8004424:	2300      	movne	r3, #0
 8004426:	eba6 0807 	sub.w	r8, r6, r7
 800442a:	608b      	str	r3, [r1, #8]
 800442c:	f1b8 0f00 	cmp.w	r8, #0
 8004430:	dde9      	ble.n	8004406 <__sflush_r+0xae>
 8004432:	6a21      	ldr	r1, [r4, #32]
 8004434:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004436:	4643      	mov	r3, r8
 8004438:	463a      	mov	r2, r7
 800443a:	4628      	mov	r0, r5
 800443c:	47b0      	blx	r6
 800443e:	2800      	cmp	r0, #0
 8004440:	dc08      	bgt.n	8004454 <__sflush_r+0xfc>
 8004442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800444a:	81a3      	strh	r3, [r4, #12]
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004454:	4407      	add	r7, r0
 8004456:	eba8 0800 	sub.w	r8, r8, r0
 800445a:	e7e7      	b.n	800442c <__sflush_r+0xd4>
 800445c:	20400001 	.word	0x20400001

08004460 <_fflush_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	690b      	ldr	r3, [r1, #16]
 8004464:	4605      	mov	r5, r0
 8004466:	460c      	mov	r4, r1
 8004468:	b913      	cbnz	r3, 8004470 <_fflush_r+0x10>
 800446a:	2500      	movs	r5, #0
 800446c:	4628      	mov	r0, r5
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	b118      	cbz	r0, 800447a <_fflush_r+0x1a>
 8004472:	6a03      	ldr	r3, [r0, #32]
 8004474:	b90b      	cbnz	r3, 800447a <_fflush_r+0x1a>
 8004476:	f7ff f835 	bl	80034e4 <__sinit>
 800447a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f3      	beq.n	800446a <_fflush_r+0xa>
 8004482:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004484:	07d0      	lsls	r0, r2, #31
 8004486:	d404      	bmi.n	8004492 <_fflush_r+0x32>
 8004488:	0599      	lsls	r1, r3, #22
 800448a:	d402      	bmi.n	8004492 <_fflush_r+0x32>
 800448c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800448e:	f7ff fa42 	bl	8003916 <__retarget_lock_acquire_recursive>
 8004492:	4628      	mov	r0, r5
 8004494:	4621      	mov	r1, r4
 8004496:	f7ff ff5f 	bl	8004358 <__sflush_r>
 800449a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800449c:	07da      	lsls	r2, r3, #31
 800449e:	4605      	mov	r5, r0
 80044a0:	d4e4      	bmi.n	800446c <_fflush_r+0xc>
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	059b      	lsls	r3, r3, #22
 80044a6:	d4e1      	bmi.n	800446c <_fflush_r+0xc>
 80044a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044aa:	f7ff fa35 	bl	8003918 <__retarget_lock_release_recursive>
 80044ae:	e7dd      	b.n	800446c <_fflush_r+0xc>

080044b0 <__swhatbuf_r>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	460c      	mov	r4, r1
 80044b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b8:	2900      	cmp	r1, #0
 80044ba:	b096      	sub	sp, #88	@ 0x58
 80044bc:	4615      	mov	r5, r2
 80044be:	461e      	mov	r6, r3
 80044c0:	da0d      	bge.n	80044de <__swhatbuf_r+0x2e>
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044c8:	f04f 0100 	mov.w	r1, #0
 80044cc:	bf14      	ite	ne
 80044ce:	2340      	movne	r3, #64	@ 0x40
 80044d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80044d4:	2000      	movs	r0, #0
 80044d6:	6031      	str	r1, [r6, #0]
 80044d8:	602b      	str	r3, [r5, #0]
 80044da:	b016      	add	sp, #88	@ 0x58
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
 80044de:	466a      	mov	r2, sp
 80044e0:	f000 f862 	bl	80045a8 <_fstat_r>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	dbec      	blt.n	80044c2 <__swhatbuf_r+0x12>
 80044e8:	9901      	ldr	r1, [sp, #4]
 80044ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80044ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80044f2:	4259      	negs	r1, r3
 80044f4:	4159      	adcs	r1, r3
 80044f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044fa:	e7eb      	b.n	80044d4 <__swhatbuf_r+0x24>

080044fc <__smakebuf_r>:
 80044fc:	898b      	ldrh	r3, [r1, #12]
 80044fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004500:	079d      	lsls	r5, r3, #30
 8004502:	4606      	mov	r6, r0
 8004504:	460c      	mov	r4, r1
 8004506:	d507      	bpl.n	8004518 <__smakebuf_r+0x1c>
 8004508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	6123      	str	r3, [r4, #16]
 8004510:	2301      	movs	r3, #1
 8004512:	6163      	str	r3, [r4, #20]
 8004514:	b003      	add	sp, #12
 8004516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004518:	ab01      	add	r3, sp, #4
 800451a:	466a      	mov	r2, sp
 800451c:	f7ff ffc8 	bl	80044b0 <__swhatbuf_r>
 8004520:	9f00      	ldr	r7, [sp, #0]
 8004522:	4605      	mov	r5, r0
 8004524:	4639      	mov	r1, r7
 8004526:	4630      	mov	r0, r6
 8004528:	f7ff fa64 	bl	80039f4 <_malloc_r>
 800452c:	b948      	cbnz	r0, 8004542 <__smakebuf_r+0x46>
 800452e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004532:	059a      	lsls	r2, r3, #22
 8004534:	d4ee      	bmi.n	8004514 <__smakebuf_r+0x18>
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	f043 0302 	orr.w	r3, r3, #2
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	e7e2      	b.n	8004508 <__smakebuf_r+0xc>
 8004542:	89a3      	ldrh	r3, [r4, #12]
 8004544:	6020      	str	r0, [r4, #0]
 8004546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800454a:	81a3      	strh	r3, [r4, #12]
 800454c:	9b01      	ldr	r3, [sp, #4]
 800454e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004552:	b15b      	cbz	r3, 800456c <__smakebuf_r+0x70>
 8004554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004558:	4630      	mov	r0, r6
 800455a:	f000 f837 	bl	80045cc <_isatty_r>
 800455e:	b128      	cbz	r0, 800456c <__smakebuf_r+0x70>
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	81a3      	strh	r3, [r4, #12]
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	431d      	orrs	r5, r3
 8004570:	81a5      	strh	r5, [r4, #12]
 8004572:	e7cf      	b.n	8004514 <__smakebuf_r+0x18>

08004574 <memmove>:
 8004574:	4288      	cmp	r0, r1
 8004576:	b510      	push	{r4, lr}
 8004578:	eb01 0402 	add.w	r4, r1, r2
 800457c:	d902      	bls.n	8004584 <memmove+0x10>
 800457e:	4284      	cmp	r4, r0
 8004580:	4623      	mov	r3, r4
 8004582:	d807      	bhi.n	8004594 <memmove+0x20>
 8004584:	1e43      	subs	r3, r0, #1
 8004586:	42a1      	cmp	r1, r4
 8004588:	d008      	beq.n	800459c <memmove+0x28>
 800458a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800458e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004592:	e7f8      	b.n	8004586 <memmove+0x12>
 8004594:	4402      	add	r2, r0
 8004596:	4601      	mov	r1, r0
 8004598:	428a      	cmp	r2, r1
 800459a:	d100      	bne.n	800459e <memmove+0x2a>
 800459c:	bd10      	pop	{r4, pc}
 800459e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045a6:	e7f7      	b.n	8004598 <memmove+0x24>

080045a8 <_fstat_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	4d07      	ldr	r5, [pc, #28]	@ (80045c8 <_fstat_r+0x20>)
 80045ac:	2300      	movs	r3, #0
 80045ae:	4604      	mov	r4, r0
 80045b0:	4608      	mov	r0, r1
 80045b2:	4611      	mov	r1, r2
 80045b4:	602b      	str	r3, [r5, #0]
 80045b6:	f7fc fac3 	bl	8000b40 <_fstat>
 80045ba:	1c43      	adds	r3, r0, #1
 80045bc:	d102      	bne.n	80045c4 <_fstat_r+0x1c>
 80045be:	682b      	ldr	r3, [r5, #0]
 80045c0:	b103      	cbz	r3, 80045c4 <_fstat_r+0x1c>
 80045c2:	6023      	str	r3, [r4, #0]
 80045c4:	bd38      	pop	{r3, r4, r5, pc}
 80045c6:	bf00      	nop
 80045c8:	2000030c 	.word	0x2000030c

080045cc <_isatty_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4d06      	ldr	r5, [pc, #24]	@ (80045e8 <_isatty_r+0x1c>)
 80045d0:	2300      	movs	r3, #0
 80045d2:	4604      	mov	r4, r0
 80045d4:	4608      	mov	r0, r1
 80045d6:	602b      	str	r3, [r5, #0]
 80045d8:	f7fc fac2 	bl	8000b60 <_isatty>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_isatty_r+0x1a>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_isatty_r+0x1a>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	2000030c 	.word	0x2000030c

080045ec <_sbrk_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d06      	ldr	r5, [pc, #24]	@ (8004608 <_sbrk_r+0x1c>)
 80045f0:	2300      	movs	r3, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	f7fc faca 	bl	8000b90 <_sbrk>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_sbrk_r+0x1a>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_sbrk_r+0x1a>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	2000030c 	.word	0x2000030c

0800460c <memcpy>:
 800460c:	440a      	add	r2, r1
 800460e:	4291      	cmp	r1, r2
 8004610:	f100 33ff 	add.w	r3, r0, #4294967295
 8004614:	d100      	bne.n	8004618 <memcpy+0xc>
 8004616:	4770      	bx	lr
 8004618:	b510      	push	{r4, lr}
 800461a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800461e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004622:	4291      	cmp	r1, r2
 8004624:	d1f9      	bne.n	800461a <memcpy+0xe>
 8004626:	bd10      	pop	{r4, pc}

08004628 <_realloc_r>:
 8004628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800462c:	4607      	mov	r7, r0
 800462e:	4614      	mov	r4, r2
 8004630:	460d      	mov	r5, r1
 8004632:	b921      	cbnz	r1, 800463e <_realloc_r+0x16>
 8004634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004638:	4611      	mov	r1, r2
 800463a:	f7ff b9db 	b.w	80039f4 <_malloc_r>
 800463e:	b92a      	cbnz	r2, 800464c <_realloc_r+0x24>
 8004640:	f7ff f96c 	bl	800391c <_free_r>
 8004644:	4625      	mov	r5, r4
 8004646:	4628      	mov	r0, r5
 8004648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800464c:	f000 f81a 	bl	8004684 <_malloc_usable_size_r>
 8004650:	4284      	cmp	r4, r0
 8004652:	4606      	mov	r6, r0
 8004654:	d802      	bhi.n	800465c <_realloc_r+0x34>
 8004656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800465a:	d8f4      	bhi.n	8004646 <_realloc_r+0x1e>
 800465c:	4621      	mov	r1, r4
 800465e:	4638      	mov	r0, r7
 8004660:	f7ff f9c8 	bl	80039f4 <_malloc_r>
 8004664:	4680      	mov	r8, r0
 8004666:	b908      	cbnz	r0, 800466c <_realloc_r+0x44>
 8004668:	4645      	mov	r5, r8
 800466a:	e7ec      	b.n	8004646 <_realloc_r+0x1e>
 800466c:	42b4      	cmp	r4, r6
 800466e:	4622      	mov	r2, r4
 8004670:	4629      	mov	r1, r5
 8004672:	bf28      	it	cs
 8004674:	4632      	movcs	r2, r6
 8004676:	f7ff ffc9 	bl	800460c <memcpy>
 800467a:	4629      	mov	r1, r5
 800467c:	4638      	mov	r0, r7
 800467e:	f7ff f94d 	bl	800391c <_free_r>
 8004682:	e7f1      	b.n	8004668 <_realloc_r+0x40>

08004684 <_malloc_usable_size_r>:
 8004684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004688:	1f18      	subs	r0, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	bfbc      	itt	lt
 800468e:	580b      	ldrlt	r3, [r1, r0]
 8004690:	18c0      	addlt	r0, r0, r3
 8004692:	4770      	bx	lr

08004694 <_init>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	bf00      	nop
 8004698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469a:	bc08      	pop	{r3}
 800469c:	469e      	mov	lr, r3
 800469e:	4770      	bx	lr

080046a0 <_fini>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	bf00      	nop
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr
