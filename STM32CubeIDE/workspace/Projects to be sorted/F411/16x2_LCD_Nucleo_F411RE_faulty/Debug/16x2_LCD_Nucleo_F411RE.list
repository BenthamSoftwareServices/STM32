
16x2_LCD_Nucleo_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e0c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002fa4  08002fa4  00003fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003014  08003014  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003014  08003014  00004014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800301c  0800301c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800301c  0800301c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003020  08003020  00004020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003024  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000068  0800308c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  0800308c  00005244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000791e  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b8  00000000  00000000  0000c9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0000e170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fd  00000000  00000000  0000e958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165aa  00000000  00000000  0000ef55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a361  00000000  00000000  000254ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087997  00000000  00000000  0002f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b71f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c8  00000000  00000000  000b723c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  000b9804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f8c 	.word	0x08002f8c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08002f8c 	.word	0x08002f8c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <lcd_send_cmd>:
#include "i2c-lcd.h"
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd(char cmd) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af02      	add	r7, sp, #8
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	f023 030f 	bic.w	r3, r3, #15
 8000514:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	f043 030c 	orr.w	r3, r3, #12
 8000522:	b2db      	uxtb	r3, r3
 8000524:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	b2db      	uxtb	r3, r3
 800052e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000530:	7bbb      	ldrb	r3, [r7, #14]
 8000532:	f043 030c 	orr.w	r3, r3, #12
 8000536:	b2db      	uxtb	r3, r3
 8000538:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	b2db      	uxtb	r3, r3
 8000542:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8000544:	f107 0208 	add.w	r2, r7, #8
 8000548:	2364      	movs	r3, #100	@ 0x64
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2304      	movs	r3, #4
 800054e:	214e      	movs	r1, #78	@ 0x4e
 8000550:	4803      	ldr	r0, [pc, #12]	@ (8000560 <lcd_send_cmd+0x5c>)
 8000552:	f001 f891 	bl	8001678 <HAL_I2C_Master_Transmit>
			100);
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000084 	.word	0x20000084

08000564 <lcd_send_data>:

void lcd_send_data(char data) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f023 030f 	bic.w	r3, r3, #15
 8000574:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=0
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	f043 030d 	orr.w	r3, r3, #13
 8000582:	b2db      	uxtb	r3, r3
 8000584:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=0
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	f043 0309 	orr.w	r3, r3, #9
 800058c:	b2db      	uxtb	r3, r3
 800058e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=0
 8000590:	7bbb      	ldrb	r3, [r7, #14]
 8000592:	f043 030d 	orr.w	r3, r3, #13
 8000596:	b2db      	uxtb	r3, r3
 8000598:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=0
 800059a:	7bbb      	ldrb	r3, [r7, #14]
 800059c:	f043 0309 	orr.w	r3, r3, #9
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80005a4:	f107 0208 	add.w	r2, r7, #8
 80005a8:	2364      	movs	r3, #100	@ 0x64
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2304      	movs	r3, #4
 80005ae:	214e      	movs	r1, #78	@ 0x4e
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <lcd_send_data+0x5c>)
 80005b2:	f001 f861 	bl	8001678 <HAL_I2C_Master_Transmit>
			100);
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000084 	.word	0x20000084

080005c4 <lcd_clear>:

void lcd_clear(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 80005ca:	2080      	movs	r0, #128	@ 0x80
 80005cc:	f7ff ff9a 	bl	8000504 <lcd_send_cmd>
	for (int i = 0; i < 70; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	e005      	b.n	80005e2 <lcd_clear+0x1e>
		lcd_send_data(' ');
 80005d6:	2020      	movs	r0, #32
 80005d8:	f7ff ffc4 	bl	8000564 <lcd_send_data>
	for (int i = 0; i < 70; i++) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b45      	cmp	r3, #69	@ 0x45
 80005e6:	ddf6      	ble.n	80005d6 <lcd_clear+0x12>
	}
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
	switch (row) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <lcd_put_cur+0x18>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d005      	beq.n	8000614 <lcd_put_cur+0x22>
 8000608:	e009      	b.n	800061e <lcd_put_cur+0x2c>
	case 0:
		col |= 0x80;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000610:	603b      	str	r3, [r7, #0]
		break;
 8000612:	e004      	b.n	800061e <lcd_put_cur+0x2c>
	case 1:
		col |= 0xC0;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800061a:	603b      	str	r3, [r7, #0]
		break;
 800061c:	bf00      	nop
	}

	lcd_send_cmd(col);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff6e 	bl	8000504 <lcd_send_cmd>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <lcd_init>:

void lcd_init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000634:	2032      	movs	r0, #50	@ 0x32
 8000636:	f000 fc29 	bl	8000e8c <HAL_Delay>
	lcd_send_cmd(0x30);
 800063a:	2030      	movs	r0, #48	@ 0x30
 800063c:	f7ff ff62 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000640:	2005      	movs	r0, #5
 8000642:	f000 fc23 	bl	8000e8c <HAL_Delay>
	lcd_send_cmd(0x30);
 8000646:	2030      	movs	r0, #48	@ 0x30
 8000648:	f7ff ff5c 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fc1d 	bl	8000e8c <HAL_Delay>
	lcd_send_cmd(0x30);
 8000652:	2030      	movs	r0, #48	@ 0x30
 8000654:	f7ff ff56 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(10);
 8000658:	200a      	movs	r0, #10
 800065a:	f000 fc17 	bl	8000e8c <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 800065e:	2020      	movs	r0, #32
 8000660:	f7ff ff50 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f000 fc11 	bl	8000e8c <HAL_Delay>

	// display initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800066a:	2028      	movs	r0, #40	@ 0x28
 800066c:	f7ff ff4a 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 fc0b 	bl	8000e8c <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000676:	2008      	movs	r0, #8
 8000678:	f7ff ff44 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fc05 	bl	8000e8c <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff3e 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fbff 	bl	8000e8c <HAL_Delay>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 fbfc 	bl	8000e8c <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000694:	2006      	movs	r0, #6
 8000696:	f7ff ff35 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fbf6 	bl	8000e8c <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006a0:	200c      	movs	r0, #12
 80006a2:	f7ff ff2f 	bl	8000504 <lcd_send_cmd>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}

080006aa <lcd_send_string>:

void lcd_send_string(char *str) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	while (*str)
 80006b2:	e006      	b.n	80006c2 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	607a      	str	r2, [r7, #4]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff51 	bl	8000564 <lcd_send_data>
	while (*str)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f4      	bne.n	80006b4 <lcd_send_string+0xa>
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d013      	beq.n	8000714 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80006f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006fc:	e000      	b.n	8000700 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000700:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0f9      	beq.n	80006fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800070a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000714:	687b      	ldr	r3, [r7, #4]
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f000 fb3e 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f8a6 	bl	800087c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	ITM_Port32(31) = 1; //send the value 1 to port 31 of ITM and view using SWV Trace Log
 8000730:	4b45      	ldr	r3, [pc, #276]	@ (8000848 <main+0x124>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000736:	f000 f939 	bl	80009ac <MX_GPIO_Init>
  MX_I2C1_Init();
 800073a:	f000 f909 	bl	8000950 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	printf("GPIO Init Done \r\n");
 800073e:	4843      	ldr	r0, [pc, #268]	@ (800084c <main+0x128>)
 8000740:	f002 f890 	bl	8002864 <puts>
	ITM_Port32(31) = 2; //send the value 2 to port 31 of ITM and view using SWV Trace Log
 8000744:	4b40      	ldr	r3, [pc, #256]	@ (8000848 <main+0x124>)
 8000746:	2202      	movs	r2, #2
 8000748:	601a      	str	r2, [r3, #0]

	//lcd_send_cmd(cmd)
	HAL_Delay(500);
 800074a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800074e:	f000 fb9d 	bl	8000e8c <HAL_Delay>
	lcd_init();
 8000752:	f7ff ff6d 	bl	8000630 <lcd_init>
	HAL_Delay(500);
 8000756:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800075a:	f000 fb97 	bl	8000e8c <HAL_Delay>
	lcd_put_cur(0, 0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff46 	bl	80005f2 <lcd_put_cur>
	HAL_Delay(500);
 8000766:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800076a:	f000 fb8f 	bl	8000e8c <HAL_Delay>
	lcd_send_string("Setting up");
 800076e:	4838      	ldr	r0, [pc, #224]	@ (8000850 <main+0x12c>)
 8000770:	f7ff ff9b 	bl	80006aa <lcd_send_string>
	HAL_Delay(500);
 8000774:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000778:	f000 fb88 	bl	8000e8c <HAL_Delay>
	lcd_put_cur(1, 0);
 800077c:	2100      	movs	r1, #0
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff ff37 	bl	80005f2 <lcd_put_cur>
	lcd_send_string("The display");
 8000784:	4833      	ldr	r0, [pc, #204]	@ (8000854 <main+0x130>)
 8000786:	f7ff ff90 	bl	80006aa <lcd_send_string>
	HAL_Delay(2000);
 800078a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800078e:	f000 fb7d 	bl	8000e8c <HAL_Delay>
	lcd_clear();
 8000792:	f7ff ff17 	bl	80005c4 <lcd_clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(500);
 8000796:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800079a:	f000 fb77 	bl	8000e8c <HAL_Delay>
		lcd_put_cur(0, 0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ff26 	bl	80005f2 <lcd_put_cur>
		HAL_Delay(500);
 80007a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007aa:	f000 fb6f 	bl	8000e8c <HAL_Delay>
		lcd_send_string("Line 1 text");
 80007ae:	482a      	ldr	r0, [pc, #168]	@ (8000858 <main+0x134>)
 80007b0:	f7ff ff7b 	bl	80006aa <lcd_send_string>
		HAL_Delay(500);
 80007b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007b8:	f000 fb68 	bl	8000e8c <HAL_Delay>
		lcd_put_cur(1, 0);
 80007bc:	2100      	movs	r1, #0
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff17 	bl	80005f2 <lcd_put_cur>
		HAL_Delay(500);
 80007c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c8:	f000 fb60 	bl	8000e8c <HAL_Delay>
		lcd_send_string("Line 2");
 80007cc:	4823      	ldr	r0, [pc, #140]	@ (800085c <main+0x138>)
 80007ce:	f7ff ff6c 	bl	80006aa <lcd_send_string>
		HAL_Delay(500);
 80007d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d6:	f000 fb59 	bl	8000e8c <HAL_Delay>
		lcd_clear();
 80007da:	f7ff fef3 	bl	80005c4 <lcd_clear>

		// Toggle onboard yellow LED
		HAL_Delay(1000);
 80007de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e2:	f000 fb53 	bl	8000e8c <HAL_Delay>
		//		HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);

		a++;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <main+0x13c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <main+0x13c>)
 80007f0:	701a      	strb	r2, [r3, #0]

		tickstart = HAL_GetTick();
 80007f2:	f000 fb3f 	bl	8000e74 <HAL_GetTick>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <main+0x140>)
 80007fc:	601a      	str	r2, [r3, #0]

		HAL_Delay(1000);
 80007fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000802:	f000 fb43 	bl	8000e8c <HAL_Delay>

		tickend = HAL_GetTick();
 8000806:	f000 fb35 	bl	8000e74 <HAL_GetTick>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <main+0x144>)
 8000810:	601a      	str	r2, [r3, #0]

		tickdiff = tickend - tickstart;
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <main+0x144>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <main+0x140>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	4a13      	ldr	r2, [pc, #76]	@ (800086c <main+0x148>)
 800081e:	6013      	str	r3, [r2, #0]

		HALver = HAL_GetHalVersion();
 8000820:	f000 fb58 	bl	8000ed4 <HAL_GetHalVersion>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <main+0x14c>)
 800082a:	601a      	str	r2, [r3, #0]

		counter++;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <main+0x150>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <main+0x150>)
 8000834:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 8000836:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800083a:	f000 fb27 	bl	8000e8c <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("I'm in the main loop!\r\n");
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <main+0x154>)
 8000840:	f002 f810 	bl	8002864 <puts>
		HAL_Delay(500);
 8000844:	bf00      	nop
 8000846:	e7a6      	b.n	8000796 <main+0x72>
 8000848:	e000007c 	.word	0xe000007c
 800084c:	08002fa4 	.word	0x08002fa4
 8000850:	08002fb8 	.word	0x08002fb8
 8000854:	08002fc4 	.word	0x08002fc4
 8000858:	08002fd0 	.word	0x08002fd0
 800085c:	08002fdc 	.word	0x08002fdc
 8000860:	200000dc 	.word	0x200000dc
 8000864:	200000e0 	.word	0x200000e0
 8000868:	200000e4 	.word	0x200000e4
 800086c:	200000e8 	.word	0x200000e8
 8000870:	200000ec 	.word	0x200000ec
 8000874:	200000d8 	.word	0x200000d8
 8000878:	08002fe4 	.word	0x08002fe4

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	@ 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2230      	movs	r2, #48	@ 0x30
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f002 f8ca 	bl	8002a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	4b28      	ldr	r3, [pc, #160]	@ (8000948 <SystemClock_Config+0xcc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a27      	ldr	r2, [pc, #156]	@ (8000948 <SystemClock_Config+0xcc>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b0:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <SystemClock_Config+0xcc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <SystemClock_Config+0xd0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a21      	ldr	r2, [pc, #132]	@ (800094c <SystemClock_Config+0xd0>)
 80008c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <SystemClock_Config+0xd0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e0:	2310      	movs	r3, #16
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008ec:	2310      	movs	r3, #16
 80008ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008f6:	2304      	movs	r3, #4
 80008f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fa12 	bl	8001d2c <HAL_RCC_OscConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800090e:	f000 f8e3 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000912:	230f      	movs	r3, #15
 8000914:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	2302      	movs	r3, #2
 8000918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2102      	movs	r1, #2
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fc74 	bl	800221c <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800093a:	f000 f8cd 	bl	8000ad8 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	@ 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <MX_I2C1_Init+0x54>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800095c:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <MX_I2C1_Init+0x58>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800096e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_I2C1_Init+0x50>)
 800098e:	f000 fd2f 	bl	80013f0 <HAL_I2C_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000998:	f000 f89e 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000084 	.word	0x20000084
 80009a4:	40005400 	.word	0x40005400
 80009a8:	000186a0 	.word	0x000186a0

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a32      	ldr	r2, [pc, #200]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a24      	ldr	r2, [pc, #144]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2120      	movs	r1, #32
 8000a36:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <MX_GPIO_Init+0xec>)
 8000a38:	f000 fcc0 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a42:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4812      	ldr	r0, [pc, #72]	@ (8000a9c <MX_GPIO_Init+0xf0>)
 8000a54:	f000 fb2e 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480b      	ldr	r0, [pc, #44]	@ (8000a98 <MX_GPIO_Init+0xec>)
 8000a6c:	f000 fb22 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a70:	2320      	movs	r3, #32
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0xec>)
 8000a88:	f000 fb14 	bl	80010b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e009      	b.n	8000ac6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	60ba      	str	r2, [r7, #8]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fe0a 	bl	80006d4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dbf1      	blt.n	8000ab2 <_write+0x12>
	}
	return len;
 8000ace:	687b      	ldr	r3, [r7, #4]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <Error_Handler+0x8>

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	4a08      	ldr	r2, [pc, #32]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b22:	2007      	movs	r0, #7
 8000b24:	f000 fa92 	bl	800104c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800

08000b34 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	@ 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a19      	ldr	r2, [pc, #100]	@ (8000bb8 <HAL_I2C_MspInit+0x84>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d12b      	bne.n	8000bae <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a17      	ldr	r2, [pc, #92]	@ (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b72:	23c0      	movs	r3, #192	@ 0xc0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b76:	2312      	movs	r3, #18
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b82:	2304      	movs	r3, #4
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <HAL_I2C_MspInit+0x8c>)
 8000b8e:	f000 fa91 	bl	80010b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_I2C_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	@ 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1a:	f000 f917 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e00a      	b.n	8000c4a <_read+0x28>
		*ptr++ = __io_getchar();
 8000c34:	f3af 8000 	nop.w
 8000c38:	4601      	mov	r1, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	60ba      	str	r2, [r7, #8]
 8000c40:	b2ca      	uxtb	r2, r1
 8000c42:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbf0      	blt.n	8000c34 <_read+0x12>
	}

	return len;
 8000c52:	687b      	ldr	r3, [r7, #4]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	return -1;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_fstat>:

int _fstat(int file, struct stat *st) {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c84:	605a      	str	r2, [r3, #4]
	return 0;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_isatty>:

int _isatty(int file) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	return 1;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
	return 0;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f001 fee4 	bl	8002ac0 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	200000f0 	.word	0x200000f0
 8000d2c:	20000248 	.word	0x20000248

08000d30 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d5a:	e003      	b.n	8000d64 <LoopCopyDataInit>

08000d5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d62:	3104      	adds	r1, #4

08000d64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d64:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d6c:	d3f6      	bcc.n	8000d5c <CopyDataInit>
  ldr  r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d70:	e002      	b.n	8000d78 <LoopFillZerobss>

08000d72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d74:	f842 3b04 	str.w	r3, [r2], #4

08000d78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d7c:	d3f9      	bcc.n	8000d72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f001 fea3 	bl	8002acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fccd 	bl	8000724 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d90:	08003024 	.word	0x08003024
  ldr  r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d98:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8000d9c:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8000da0:	20000244 	.word	0x20000244

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f93b 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fe82 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f945 	bl	800109a <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 f91b 	bl	8001062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	@ (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	200000f4 	.word	0x200000f4

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200000f4 	.word	0x200000f4

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff ffee 	bl	8000e74 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffde 	bl	8000e74 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	@ (8000ee4 <HAL_GetHalVersion+0x10>)
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	01080300 	.word	0x01080300

08000ee8 <__NVIC_SetPriorityGrouping>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_SetPriority>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	@ (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	@ (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff47 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff5c 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffb0 	bl	8001008 <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e159      	b.n	8001384 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 8148 	bne.w	800137e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d005      	beq.n	8001106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001102:	2b02      	cmp	r3, #2
 8001104:	d130      	bne.n	8001168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 0201 	and.w	r2, r3, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b03      	cmp	r3, #3
 8001172:	d017      	beq.n	80011a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d123      	bne.n	80011f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80a2 	beq.w	800137e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b57      	ldr	r3, [pc, #348]	@ (800139c <HAL_GPIO_Init+0x2e8>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a56      	ldr	r2, [pc, #344]	@ (800139c <HAL_GPIO_Init+0x2e8>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b54      	ldr	r3, [pc, #336]	@ (800139c <HAL_GPIO_Init+0x2e8>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001256:	4a52      	ldr	r2, [pc, #328]	@ (80013a0 <HAL_GPIO_Init+0x2ec>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a49      	ldr	r2, [pc, #292]	@ (80013a4 <HAL_GPIO_Init+0x2f0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0x202>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a48      	ldr	r2, [pc, #288]	@ (80013a8 <HAL_GPIO_Init+0x2f4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x1fe>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a47      	ldr	r2, [pc, #284]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x1fa>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a46      	ldr	r2, [pc, #280]	@ (80013b0 <HAL_GPIO_Init+0x2fc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x1f6>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a45      	ldr	r2, [pc, #276]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x1f2>
 80012a2:	2304      	movs	r3, #4
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012a6:	2307      	movs	r3, #7
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012b6:	2300      	movs	r3, #0
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	f002 0203 	and.w	r2, r2, #3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4093      	lsls	r3, r2
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c8:	4935      	ldr	r1, [pc, #212]	@ (80013a0 <HAL_GPIO_Init+0x2ec>)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a2f      	ldr	r2, [pc, #188]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a24      	ldr	r2, [pc, #144]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132a:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134e:	4a1a      	ldr	r2, [pc, #104]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001378:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	f67f aea2 	bls.w	80010d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3724      	adds	r7, #36	@ 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40013800 	.word	0x40013800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e12b      	b.n	800165a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fb8c 	bl	8000b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2224      	movs	r2, #36	@ 0x24
 8001420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001454:	f001 f8da 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8001458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a81      	ldr	r2, [pc, #516]	@ (8001664 <HAL_I2C_Init+0x274>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d807      	bhi.n	8001474 <HAL_I2C_Init+0x84>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4a80      	ldr	r2, [pc, #512]	@ (8001668 <HAL_I2C_Init+0x278>)
 8001468:	4293      	cmp	r3, r2
 800146a:	bf94      	ite	ls
 800146c:	2301      	movls	r3, #1
 800146e:	2300      	movhi	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	e006      	b.n	8001482 <HAL_I2C_Init+0x92>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4a7d      	ldr	r2, [pc, #500]	@ (800166c <HAL_I2C_Init+0x27c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	bf94      	ite	ls
 800147c:	2301      	movls	r3, #1
 800147e:	2300      	movhi	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0e7      	b.n	800165a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4a78      	ldr	r2, [pc, #480]	@ (8001670 <HAL_I2C_Init+0x280>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	0c9b      	lsrs	r3, r3, #18
 8001494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001664 <HAL_I2C_Init+0x274>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d802      	bhi.n	80014c4 <HAL_I2C_Init+0xd4>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3301      	adds	r3, #1
 80014c2:	e009      	b.n	80014d8 <HAL_I2C_Init+0xe8>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	4a69      	ldr	r2, [pc, #420]	@ (8001674 <HAL_I2C_Init+0x284>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	3301      	adds	r3, #1
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	430b      	orrs	r3, r1
 80014de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	495c      	ldr	r1, [pc, #368]	@ (8001664 <HAL_I2C_Init+0x274>)
 80014f4:	428b      	cmp	r3, r1
 80014f6:	d819      	bhi.n	800152c <HAL_I2C_Init+0x13c>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1e59      	subs	r1, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fbb1 f3f3 	udiv	r3, r1, r3
 8001506:	1c59      	adds	r1, r3, #1
 8001508:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800150c:	400b      	ands	r3, r1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00a      	beq.n	8001528 <HAL_I2C_Init+0x138>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1e59      	subs	r1, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001520:	3301      	adds	r3, #1
 8001522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001526:	e051      	b.n	80015cc <HAL_I2C_Init+0x1dc>
 8001528:	2304      	movs	r3, #4
 800152a:	e04f      	b.n	80015cc <HAL_I2C_Init+0x1dc>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d111      	bne.n	8001558 <HAL_I2C_Init+0x168>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e58      	subs	r0, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	440b      	add	r3, r1
 8001542:	fbb0 f3f3 	udiv	r3, r0, r3
 8001546:	3301      	adds	r3, #1
 8001548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	e012      	b.n	800157e <HAL_I2C_Init+0x18e>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e58      	subs	r0, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	0099      	lsls	r1, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	fbb0 f3f3 	udiv	r3, r0, r3
 800156e:	3301      	adds	r3, #1
 8001570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Init+0x196>
 8001582:	2301      	movs	r3, #1
 8001584:	e022      	b.n	80015cc <HAL_I2C_Init+0x1dc>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10e      	bne.n	80015ac <HAL_I2C_Init+0x1bc>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1e58      	subs	r0, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6859      	ldr	r1, [r3, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	440b      	add	r3, r1
 800159c:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a0:	3301      	adds	r3, #1
 80015a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015aa:	e00f      	b.n	80015cc <HAL_I2C_Init+0x1dc>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1e58      	subs	r0, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	0099      	lsls	r1, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c2:	3301      	adds	r3, #1
 80015c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	6809      	ldr	r1, [r1, #0]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6911      	ldr	r1, [r2, #16]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68d2      	ldr	r2, [r2, #12]
 8001606:	4311      	orrs	r1, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	430b      	orrs	r3, r1
 800160e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	000186a0 	.word	0x000186a0
 8001668:	001e847f 	.word	0x001e847f
 800166c:	003d08ff 	.word	0x003d08ff
 8001670:	431bde83 	.word	0x431bde83
 8001674:	10624dd3 	.word	0x10624dd3

08001678 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af02      	add	r7, sp, #8
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	461a      	mov	r2, r3
 8001684:	460b      	mov	r3, r1
 8001686:	817b      	strh	r3, [r7, #10]
 8001688:	4613      	mov	r3, r2
 800168a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff fbf2 	bl	8000e74 <HAL_GetTick>
 8001690:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b20      	cmp	r3, #32
 800169c:	f040 80e0 	bne.w	8001860 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2319      	movs	r3, #25
 80016a6:	2201      	movs	r2, #1
 80016a8:	4970      	ldr	r1, [pc, #448]	@ (800186c <HAL_I2C_Master_Transmit+0x1f4>)
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f964 	bl	8001978 <I2C_WaitOnFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016b6:	2302      	movs	r3, #2
 80016b8:	e0d3      	b.n	8001862 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_I2C_Master_Transmit+0x50>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e0cc      	b.n	8001862 <HAL_I2C_Master_Transmit+0x1ea>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d007      	beq.n	80016ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0201 	orr.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2221      	movs	r2, #33	@ 0x21
 8001702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2210      	movs	r2, #16
 800170a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	893a      	ldrh	r2, [r7, #8]
 800171e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4a50      	ldr	r2, [pc, #320]	@ (8001870 <HAL_I2C_Master_Transmit+0x1f8>)
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001730:	8979      	ldrh	r1, [r7, #10]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	6a3a      	ldr	r2, [r7, #32]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 f89c 	bl	8001874 <I2C_MasterRequestWrite>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e08d      	b.n	8001862 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800175c:	e066      	b.n	800182c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	6a39      	ldr	r1, [r7, #32]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fa22 	bl	8001bac <I2C_WaitOnTXEFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00d      	beq.n	800178a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	2b04      	cmp	r3, #4
 8001774:	d107      	bne.n	8001786 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001784:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06b      	b.n	8001862 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d11b      	bne.n	8001800 <HAL_I2C_Master_Transmit+0x188>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d017      	beq.n	8001800 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	6a39      	ldr	r1, [r7, #32]
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 fa19 	bl	8001c3c <I2C_WaitOnBTFFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00d      	beq.n	800182c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	2b04      	cmp	r3, #4
 8001816:	d107      	bne.n	8001828 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001826:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e01a      	b.n	8001862 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	d194      	bne.n	800175e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2220      	movs	r2, #32
 8001848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	e000      	b.n	8001862 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001860:	2302      	movs	r3, #2
  }
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	00100002 	.word	0x00100002
 8001870:	ffff0000 	.word	0xffff0000

08001874 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af02      	add	r7, sp, #8
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	460b      	mov	r3, r1
 8001882:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001888:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d006      	beq.n	800189e <I2C_MasterRequestWrite+0x2a>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d003      	beq.n	800189e <I2C_MasterRequestWrite+0x2a>
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800189c:	d108      	bne.n	80018b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e00b      	b.n	80018c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	2b12      	cmp	r3, #18
 80018b6:	d107      	bne.n	80018c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f84f 	bl	8001978 <I2C_WaitOnFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00d      	beq.n	80018fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018ee:	d103      	bne.n	80018f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e035      	b.n	8001968 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001904:	d108      	bne.n	8001918 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	e01b      	b.n	8001950 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001918:	897b      	ldrh	r3, [r7, #10]
 800191a:	11db      	asrs	r3, r3, #7
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f003 0306 	and.w	r3, r3, #6
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f063 030f 	orn	r3, r3, #15
 8001928:	b2da      	uxtb	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	490e      	ldr	r1, [pc, #56]	@ (8001970 <I2C_MasterRequestWrite+0xfc>)
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f898 	bl	8001a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e010      	b.n	8001968 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4907      	ldr	r1, [pc, #28]	@ (8001974 <I2C_MasterRequestWrite+0x100>)
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f888 	bl	8001a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	00010008 	.word	0x00010008
 8001974:	00010002 	.word	0x00010002

08001978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001988:	e048      	b.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d044      	beq.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001992:	f7ff fa6f 	bl	8000e74 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d302      	bcc.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d139      	bne.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	0c1b      	lsrs	r3, r3, #16
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d10d      	bne.n	80019ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4013      	ands	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	e00c      	b.n	80019e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	43da      	mvns	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	4013      	ands	r3, r2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d116      	bne.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f043 0220 	orr.w	r2, r3, #32
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e023      	b.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10d      	bne.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	4013      	ands	r3, r2
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	e00c      	b.n	8001a5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d093      	beq.n	800198a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a7a:	e071      	b.n	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a8a:	d123      	bne.n	8001ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001aa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	f043 0204 	orr.w	r2, r3, #4
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e067      	b.n	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ada:	d041      	beq.n	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001adc:	f7ff f9ca 	bl	8000e74 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d302      	bcc.n	8001af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d136      	bne.n	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d10c      	bne.n	8001b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4013      	ands	r3, r2
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	e00b      	b.n	8001b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	4013      	ands	r3, r2
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d016      	beq.n	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	f043 0220 	orr.w	r2, r3, #32
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e021      	b.n	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d10c      	bne.n	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	43da      	mvns	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4013      	ands	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	e00b      	b.n	8001b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	2300      	moveq	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f47f af6d 	bne.w	8001a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb8:	e034      	b.n	8001c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f886 	bl	8001ccc <I2C_IsAcknowledgeFailed>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e034      	b.n	8001c34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d028      	beq.n	8001c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd2:	f7ff f94f 	bl	8000e74 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d302      	bcc.n	8001be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d11d      	bne.n	8001c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf2:	2b80      	cmp	r3, #128	@ 0x80
 8001bf4:	d016      	beq.n	8001c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e007      	b.n	8001c34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2e:	2b80      	cmp	r3, #128	@ 0x80
 8001c30:	d1c3      	bne.n	8001bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c48:	e034      	b.n	8001cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f83e 	bl	8001ccc <I2C_IsAcknowledgeFailed>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e034      	b.n	8001cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d028      	beq.n	8001cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c62:	f7ff f907 	bl	8000e74 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d302      	bcc.n	8001c78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11d      	bne.n	8001cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d016      	beq.n	8001cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	f043 0220 	orr.w	r2, r3, #32
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e007      	b.n	8001cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d1c3      	bne.n	8001c4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce2:	d11b      	bne.n	8001d1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	f043 0204 	orr.w	r2, r3, #4
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e267      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d075      	beq.n	8001e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d4a:	4b88      	ldr	r3, [pc, #544]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d00c      	beq.n	8001d70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4b85      	ldr	r3, [pc, #532]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d112      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4b82      	ldr	r3, [pc, #520]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	4b7e      	ldr	r3, [pc, #504]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05b      	beq.n	8001e34 <HAL_RCC_OscConfig+0x108>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d157      	bne.n	8001e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e242      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d90:	d106      	bne.n	8001da0 <HAL_RCC_OscConfig+0x74>
 8001d92:	4b76      	ldr	r3, [pc, #472]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a75      	ldr	r2, [pc, #468]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e01d      	b.n	8001ddc <HAL_RCC_OscConfig+0xb0>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x98>
 8001daa:	4b70      	ldr	r3, [pc, #448]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6f      	ldr	r2, [pc, #444]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a6c      	ldr	r2, [pc, #432]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xb0>
 8001dc4:	4b69      	ldr	r3, [pc, #420]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a68      	ldr	r2, [pc, #416]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b66      	ldr	r3, [pc, #408]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a65      	ldr	r2, [pc, #404]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff f846 	bl	8000e74 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff f842 	bl	8000e74 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e207      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xc0>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f832 	bl	8000e74 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff f82e 	bl	8000e74 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	@ 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1f3      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	4b51      	ldr	r3, [pc, #324]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0xe8>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d063      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e42:	4b4a      	ldr	r3, [pc, #296]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b47      	ldr	r3, [pc, #284]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d11c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5a:	4b44      	ldr	r3, [pc, #272]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d116      	bne.n	8001e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	4b41      	ldr	r3, [pc, #260]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_RCC_OscConfig+0x152>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e1c7      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4937      	ldr	r1, [pc, #220]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	e03a      	b.n	8001f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d020      	beq.n	8001ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e9c:	4b34      	ldr	r3, [pc, #208]	@ (8001f70 <HAL_RCC_OscConfig+0x244>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7fe ffe7 	bl	8000e74 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7fe ffe3 	bl	8000e74 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e1a8      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec8:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4925      	ldr	r1, [pc, #148]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	e015      	b.n	8001f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ede:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <HAL_RCC_OscConfig+0x244>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ffc6 	bl	8000e74 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eec:	f7fe ffc2 	bl	8000e74 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e187      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d036      	beq.n	8001f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_RCC_OscConfig+0x248>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7fe ffa6 	bl	8000e74 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7fe ffa2 	bl	8000e74 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e167      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_RCC_OscConfig+0x240>)
 8001f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x200>
 8001f4a:	e01b      	b.n	8001f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4c:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <HAL_RCC_OscConfig+0x248>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7fe ff8f 	bl	8000e74 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	e00e      	b.n	8001f78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7fe ff8b 	bl	8000e74 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d907      	bls.n	8001f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e150      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	42470000 	.word	0x42470000
 8001f74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	4b88      	ldr	r3, [pc, #544]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ea      	bne.n	8001f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8097 	beq.w	80020c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f96:	4b81      	ldr	r3, [pc, #516]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	4b7d      	ldr	r3, [pc, #500]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a7c      	ldr	r2, [pc, #496]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb2:	4b7a      	ldr	r3, [pc, #488]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b77      	ldr	r3, [pc, #476]	@ (80021a0 <HAL_RCC_OscConfig+0x474>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d118      	bne.n	8002000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	4b74      	ldr	r3, [pc, #464]	@ (80021a0 <HAL_RCC_OscConfig+0x474>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a73      	ldr	r2, [pc, #460]	@ (80021a0 <HAL_RCC_OscConfig+0x474>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fda:	f7fe ff4b 	bl	8000e74 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7fe ff47 	bl	8000e74 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e10c      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80021a0 <HAL_RCC_OscConfig+0x474>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x2ea>
 8002008:	4b64      	ldr	r3, [pc, #400]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200c:	4a63      	ldr	r2, [pc, #396]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6713      	str	r3, [r2, #112]	@ 0x70
 8002014:	e01c      	b.n	8002050 <HAL_RCC_OscConfig+0x324>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b05      	cmp	r3, #5
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x30c>
 800201e:	4b5f      	ldr	r3, [pc, #380]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002022:	4a5e      	ldr	r2, [pc, #376]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6713      	str	r3, [r2, #112]	@ 0x70
 800202a:	4b5c      	ldr	r3, [pc, #368]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202e:	4a5b      	ldr	r2, [pc, #364]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6713      	str	r3, [r2, #112]	@ 0x70
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0x324>
 8002038:	4b58      	ldr	r3, [pc, #352]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203c:	4a57      	ldr	r2, [pc, #348]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6713      	str	r3, [r2, #112]	@ 0x70
 8002044:	4b55      	ldr	r3, [pc, #340]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	4a54      	ldr	r2, [pc, #336]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 800204a:	f023 0304 	bic.w	r3, r3, #4
 800204e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002058:	f7fe ff0c 	bl	8000e74 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7fe ff08 	bl	8000e74 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0cb      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	4b49      	ldr	r3, [pc, #292]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0ee      	beq.n	8002060 <HAL_RCC_OscConfig+0x334>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7fe fef6 	bl	8000e74 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7fe fef2 	bl	8000e74 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0b5      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a2:	4b3e      	ldr	r3, [pc, #248]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ee      	bne.n	800208c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b4:	4b39      	ldr	r3, [pc, #228]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	4a38      	ldr	r2, [pc, #224]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 80020ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a1 	beq.w	800220c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ca:	4b34      	ldr	r3, [pc, #208]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d05c      	beq.n	8002190 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d141      	bne.n	8002162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b31      	ldr	r3, [pc, #196]	@ (80021a4 <HAL_RCC_OscConfig+0x478>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe fec6 	bl	8000e74 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7fe fec2 	bl	8000e74 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e087      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fe:	4b27      	ldr	r3, [pc, #156]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	019b      	lsls	r3, r3, #6
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	085b      	lsrs	r3, r3, #1
 8002122:	3b01      	subs	r3, #1
 8002124:	041b      	lsls	r3, r3, #16
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	061b      	lsls	r3, r3, #24
 800212e:	491b      	ldr	r1, [pc, #108]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <HAL_RCC_OscConfig+0x478>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7fe fe9b 	bl	8000e74 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe fe97 	bl	8000e74 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e05c      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x416>
 8002160:	e054      	b.n	800220c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <HAL_RCC_OscConfig+0x478>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe fe84 	bl	8000e74 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7fe fe80 	bl	8000e74 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e045      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_RCC_OscConfig+0x470>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x444>
 800218e:	e03d      	b.n	800220c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d107      	bne.n	80021a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e038      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
 800219c:	40023800 	.word	0x40023800
 80021a0:	40007000 	.word	0x40007000
 80021a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <HAL_RCC_OscConfig+0x4ec>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d028      	beq.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d121      	bne.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d11a      	bne.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d111      	bne.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	3b01      	subs	r3, #1
 80021f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800

0800221c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0cc      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b68      	ldr	r3, [pc, #416]	@ (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d90c      	bls.n	8002258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b65      	ldr	r3, [pc, #404]	@ (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b63      	ldr	r3, [pc, #396]	@ (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0b8      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002270:	4b59      	ldr	r3, [pc, #356]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a58      	ldr	r2, [pc, #352]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800227a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002288:	4b53      	ldr	r3, [pc, #332]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4a52      	ldr	r2, [pc, #328]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b50      	ldr	r3, [pc, #320]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	494d      	ldr	r1, [pc, #308]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d044      	beq.n	800233c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b47      	ldr	r3, [pc, #284]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d119      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d003      	beq.n	80022da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b3f      	ldr	r3, [pc, #252]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e06f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	4b3b      	ldr	r3, [pc, #236]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e067      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b37      	ldr	r3, [pc, #220]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4934      	ldr	r1, [pc, #208]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7fe fdb2 	bl	8000e74 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe fdae 	bl	8000e74 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e04f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2b      	ldr	r3, [pc, #172]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b25      	ldr	r3, [pc, #148]	@ (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d20c      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b20      	ldr	r3, [pc, #128]	@ (80023d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e032      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4916      	ldr	r1, [pc, #88]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238e:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	490e      	ldr	r1, [pc, #56]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023a2:	f000 f821 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	490a      	ldr	r1, [pc, #40]	@ (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	4a09      	ldr	r2, [pc, #36]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fd12 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08002ffc 	.word	0x08002ffc
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ec:	b094      	sub	sp, #80	@ 0x50
 80023ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002400:	4b79      	ldr	r3, [pc, #484]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d00d      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x40>
 800240c:	2b08      	cmp	r3, #8
 800240e:	f200 80e1 	bhi.w	80025d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x34>
 8002416:	2b04      	cmp	r3, #4
 8002418:	d003      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x3a>
 800241a:	e0db      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b73      	ldr	r3, [pc, #460]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x204>)
 800241e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002420:	e0db      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002422:	4b73      	ldr	r3, [pc, #460]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002424:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002426:	e0d8      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002428:	4b6f      	ldr	r3, [pc, #444]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002430:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002432:	4b6d      	ldr	r3, [pc, #436]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243e:	4b6a      	ldr	r3, [pc, #424]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	2200      	movs	r2, #0
 8002446:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002448:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800244a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002450:	633b      	str	r3, [r7, #48]	@ 0x30
 8002452:	2300      	movs	r3, #0
 8002454:	637b      	str	r3, [r7, #52]	@ 0x34
 8002456:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800245a:	4622      	mov	r2, r4
 800245c:	462b      	mov	r3, r5
 800245e:	f04f 0000 	mov.w	r0, #0
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	0159      	lsls	r1, r3, #5
 8002468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800246c:	0150      	lsls	r0, r2, #5
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4621      	mov	r1, r4
 8002474:	1a51      	subs	r1, r2, r1
 8002476:	6139      	str	r1, [r7, #16]
 8002478:	4629      	mov	r1, r5
 800247a:	eb63 0301 	sbc.w	r3, r3, r1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800248c:	4659      	mov	r1, fp
 800248e:	018b      	lsls	r3, r1, #6
 8002490:	4651      	mov	r1, sl
 8002492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002496:	4651      	mov	r1, sl
 8002498:	018a      	lsls	r2, r1, #6
 800249a:	4651      	mov	r1, sl
 800249c:	ebb2 0801 	subs.w	r8, r2, r1
 80024a0:	4659      	mov	r1, fp
 80024a2:	eb63 0901 	sbc.w	r9, r3, r1
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ba:	4690      	mov	r8, r2
 80024bc:	4699      	mov	r9, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	eb18 0303 	adds.w	r3, r8, r3
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	462b      	mov	r3, r5
 80024c8:	eb49 0303 	adc.w	r3, r9, r3
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024da:	4629      	mov	r1, r5
 80024dc:	024b      	lsls	r3, r1, #9
 80024de:	4621      	mov	r1, r4
 80024e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024e4:	4621      	mov	r1, r4
 80024e6:	024a      	lsls	r2, r1, #9
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ee:	2200      	movs	r2, #0
 80024f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024f8:	f7fd fe6e 	bl	80001d8 <__aeabi_uldivmod>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4613      	mov	r3, r2
 8002502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002504:	e058      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002506:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	2200      	movs	r2, #0
 800250e:	4618      	mov	r0, r3
 8002510:	4611      	mov	r1, r2
 8002512:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
 800251c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002520:	4642      	mov	r2, r8
 8002522:	464b      	mov	r3, r9
 8002524:	f04f 0000 	mov.w	r0, #0
 8002528:	f04f 0100 	mov.w	r1, #0
 800252c:	0159      	lsls	r1, r3, #5
 800252e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002532:	0150      	lsls	r0, r2, #5
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4641      	mov	r1, r8
 800253a:	ebb2 0a01 	subs.w	sl, r2, r1
 800253e:	4649      	mov	r1, r9
 8002540:	eb63 0b01 	sbc.w	fp, r3, r1
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002550:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002554:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002558:	ebb2 040a 	subs.w	r4, r2, sl
 800255c:	eb63 050b 	sbc.w	r5, r3, fp
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	00eb      	lsls	r3, r5, #3
 800256a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800256e:	00e2      	lsls	r2, r4, #3
 8002570:	4614      	mov	r4, r2
 8002572:	461d      	mov	r5, r3
 8002574:	4643      	mov	r3, r8
 8002576:	18e3      	adds	r3, r4, r3
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	464b      	mov	r3, r9
 800257c:	eb45 0303 	adc.w	r3, r5, r3
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800258e:	4629      	mov	r1, r5
 8002590:	028b      	lsls	r3, r1, #10
 8002592:	4621      	mov	r1, r4
 8002594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002598:	4621      	mov	r1, r4
 800259a:	028a      	lsls	r2, r1, #10
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025a2:	2200      	movs	r2, #0
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	61fa      	str	r2, [r7, #28]
 80025a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ac:	f7fd fe14 	bl	80001d8 <__aeabi_uldivmod>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4613      	mov	r3, r2
 80025b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	3301      	adds	r3, #1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x204>)
 80025d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3750      	adds	r7, #80	@ 0x50
 80025e0:	46bd      	mov	sp, r7
 80025e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	00f42400 	.word	0x00f42400
 80025f0:	007a1200 	.word	0x007a1200

080025f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <HAL_RCC_GetHCLKFreq+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000000 	.word	0x20000000

0800260c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002610:	f7ff fff0 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b05      	ldr	r3, [pc, #20]	@ (800262c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0a9b      	lsrs	r3, r3, #10
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4903      	ldr	r1, [pc, #12]	@ (8002630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40023800 	.word	0x40023800
 8002630:	0800300c 	.word	0x0800300c

08002634 <std>:
 8002634:	2300      	movs	r3, #0
 8002636:	b510      	push	{r4, lr}
 8002638:	4604      	mov	r4, r0
 800263a:	e9c0 3300 	strd	r3, r3, [r0]
 800263e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002642:	6083      	str	r3, [r0, #8]
 8002644:	8181      	strh	r1, [r0, #12]
 8002646:	6643      	str	r3, [r0, #100]	@ 0x64
 8002648:	81c2      	strh	r2, [r0, #14]
 800264a:	6183      	str	r3, [r0, #24]
 800264c:	4619      	mov	r1, r3
 800264e:	2208      	movs	r2, #8
 8002650:	305c      	adds	r0, #92	@ 0x5c
 8002652:	f000 f9e7 	bl	8002a24 <memset>
 8002656:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <std+0x58>)
 8002658:	6263      	str	r3, [r4, #36]	@ 0x24
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <std+0x5c>)
 800265c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <std+0x60>)
 8002660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002662:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <std+0x64>)
 8002664:	6323      	str	r3, [r4, #48]	@ 0x30
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <std+0x68>)
 8002668:	6224      	str	r4, [r4, #32]
 800266a:	429c      	cmp	r4, r3
 800266c:	d006      	beq.n	800267c <std+0x48>
 800266e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002672:	4294      	cmp	r4, r2
 8002674:	d002      	beq.n	800267c <std+0x48>
 8002676:	33d0      	adds	r3, #208	@ 0xd0
 8002678:	429c      	cmp	r4, r3
 800267a:	d105      	bne.n	8002688 <std+0x54>
 800267c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002684:	f000 ba46 	b.w	8002b14 <__retarget_lock_init_recursive>
 8002688:	bd10      	pop	{r4, pc}
 800268a:	bf00      	nop
 800268c:	08002875 	.word	0x08002875
 8002690:	08002897 	.word	0x08002897
 8002694:	080028cf 	.word	0x080028cf
 8002698:	080028f3 	.word	0x080028f3
 800269c:	200000f8 	.word	0x200000f8

080026a0 <stdio_exit_handler>:
 80026a0:	4a02      	ldr	r2, [pc, #8]	@ (80026ac <stdio_exit_handler+0xc>)
 80026a2:	4903      	ldr	r1, [pc, #12]	@ (80026b0 <stdio_exit_handler+0x10>)
 80026a4:	4803      	ldr	r0, [pc, #12]	@ (80026b4 <stdio_exit_handler+0x14>)
 80026a6:	f000 b869 	b.w	800277c <_fwalk_sglue>
 80026aa:	bf00      	nop
 80026ac:	2000000c 	.word	0x2000000c
 80026b0:	08002e15 	.word	0x08002e15
 80026b4:	2000001c 	.word	0x2000001c

080026b8 <cleanup_stdio>:
 80026b8:	6841      	ldr	r1, [r0, #4]
 80026ba:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <cleanup_stdio+0x34>)
 80026bc:	4299      	cmp	r1, r3
 80026be:	b510      	push	{r4, lr}
 80026c0:	4604      	mov	r4, r0
 80026c2:	d001      	beq.n	80026c8 <cleanup_stdio+0x10>
 80026c4:	f000 fba6 	bl	8002e14 <_fflush_r>
 80026c8:	68a1      	ldr	r1, [r4, #8]
 80026ca:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <cleanup_stdio+0x38>)
 80026cc:	4299      	cmp	r1, r3
 80026ce:	d002      	beq.n	80026d6 <cleanup_stdio+0x1e>
 80026d0:	4620      	mov	r0, r4
 80026d2:	f000 fb9f 	bl	8002e14 <_fflush_r>
 80026d6:	68e1      	ldr	r1, [r4, #12]
 80026d8:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <cleanup_stdio+0x3c>)
 80026da:	4299      	cmp	r1, r3
 80026dc:	d004      	beq.n	80026e8 <cleanup_stdio+0x30>
 80026de:	4620      	mov	r0, r4
 80026e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e4:	f000 bb96 	b.w	8002e14 <_fflush_r>
 80026e8:	bd10      	pop	{r4, pc}
 80026ea:	bf00      	nop
 80026ec:	200000f8 	.word	0x200000f8
 80026f0:	20000160 	.word	0x20000160
 80026f4:	200001c8 	.word	0x200001c8

080026f8 <global_stdio_init.part.0>:
 80026f8:	b510      	push	{r4, lr}
 80026fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <global_stdio_init.part.0+0x30>)
 80026fc:	4c0b      	ldr	r4, [pc, #44]	@ (800272c <global_stdio_init.part.0+0x34>)
 80026fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002730 <global_stdio_init.part.0+0x38>)
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	4620      	mov	r0, r4
 8002704:	2200      	movs	r2, #0
 8002706:	2104      	movs	r1, #4
 8002708:	f7ff ff94 	bl	8002634 <std>
 800270c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002710:	2201      	movs	r2, #1
 8002712:	2109      	movs	r1, #9
 8002714:	f7ff ff8e 	bl	8002634 <std>
 8002718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800271c:	2202      	movs	r2, #2
 800271e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002722:	2112      	movs	r1, #18
 8002724:	f7ff bf86 	b.w	8002634 <std>
 8002728:	20000230 	.word	0x20000230
 800272c:	200000f8 	.word	0x200000f8
 8002730:	080026a1 	.word	0x080026a1

08002734 <__sfp_lock_acquire>:
 8002734:	4801      	ldr	r0, [pc, #4]	@ (800273c <__sfp_lock_acquire+0x8>)
 8002736:	f000 b9ee 	b.w	8002b16 <__retarget_lock_acquire_recursive>
 800273a:	bf00      	nop
 800273c:	20000239 	.word	0x20000239

08002740 <__sfp_lock_release>:
 8002740:	4801      	ldr	r0, [pc, #4]	@ (8002748 <__sfp_lock_release+0x8>)
 8002742:	f000 b9e9 	b.w	8002b18 <__retarget_lock_release_recursive>
 8002746:	bf00      	nop
 8002748:	20000239 	.word	0x20000239

0800274c <__sinit>:
 800274c:	b510      	push	{r4, lr}
 800274e:	4604      	mov	r4, r0
 8002750:	f7ff fff0 	bl	8002734 <__sfp_lock_acquire>
 8002754:	6a23      	ldr	r3, [r4, #32]
 8002756:	b11b      	cbz	r3, 8002760 <__sinit+0x14>
 8002758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800275c:	f7ff bff0 	b.w	8002740 <__sfp_lock_release>
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <__sinit+0x28>)
 8002762:	6223      	str	r3, [r4, #32]
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <__sinit+0x2c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f5      	bne.n	8002758 <__sinit+0xc>
 800276c:	f7ff ffc4 	bl	80026f8 <global_stdio_init.part.0>
 8002770:	e7f2      	b.n	8002758 <__sinit+0xc>
 8002772:	bf00      	nop
 8002774:	080026b9 	.word	0x080026b9
 8002778:	20000230 	.word	0x20000230

0800277c <_fwalk_sglue>:
 800277c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002780:	4607      	mov	r7, r0
 8002782:	4688      	mov	r8, r1
 8002784:	4614      	mov	r4, r2
 8002786:	2600      	movs	r6, #0
 8002788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800278c:	f1b9 0901 	subs.w	r9, r9, #1
 8002790:	d505      	bpl.n	800279e <_fwalk_sglue+0x22>
 8002792:	6824      	ldr	r4, [r4, #0]
 8002794:	2c00      	cmp	r4, #0
 8002796:	d1f7      	bne.n	8002788 <_fwalk_sglue+0xc>
 8002798:	4630      	mov	r0, r6
 800279a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800279e:	89ab      	ldrh	r3, [r5, #12]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d907      	bls.n	80027b4 <_fwalk_sglue+0x38>
 80027a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027a8:	3301      	adds	r3, #1
 80027aa:	d003      	beq.n	80027b4 <_fwalk_sglue+0x38>
 80027ac:	4629      	mov	r1, r5
 80027ae:	4638      	mov	r0, r7
 80027b0:	47c0      	blx	r8
 80027b2:	4306      	orrs	r6, r0
 80027b4:	3568      	adds	r5, #104	@ 0x68
 80027b6:	e7e9      	b.n	800278c <_fwalk_sglue+0x10>

080027b8 <_puts_r>:
 80027b8:	6a03      	ldr	r3, [r0, #32]
 80027ba:	b570      	push	{r4, r5, r6, lr}
 80027bc:	6884      	ldr	r4, [r0, #8]
 80027be:	4605      	mov	r5, r0
 80027c0:	460e      	mov	r6, r1
 80027c2:	b90b      	cbnz	r3, 80027c8 <_puts_r+0x10>
 80027c4:	f7ff ffc2 	bl	800274c <__sinit>
 80027c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027ca:	07db      	lsls	r3, r3, #31
 80027cc:	d405      	bmi.n	80027da <_puts_r+0x22>
 80027ce:	89a3      	ldrh	r3, [r4, #12]
 80027d0:	0598      	lsls	r0, r3, #22
 80027d2:	d402      	bmi.n	80027da <_puts_r+0x22>
 80027d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027d6:	f000 f99e 	bl	8002b16 <__retarget_lock_acquire_recursive>
 80027da:	89a3      	ldrh	r3, [r4, #12]
 80027dc:	0719      	lsls	r1, r3, #28
 80027de:	d502      	bpl.n	80027e6 <_puts_r+0x2e>
 80027e0:	6923      	ldr	r3, [r4, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d135      	bne.n	8002852 <_puts_r+0x9a>
 80027e6:	4621      	mov	r1, r4
 80027e8:	4628      	mov	r0, r5
 80027ea:	f000 f8c5 	bl	8002978 <__swsetup_r>
 80027ee:	b380      	cbz	r0, 8002852 <_puts_r+0x9a>
 80027f0:	f04f 35ff 	mov.w	r5, #4294967295
 80027f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027f6:	07da      	lsls	r2, r3, #31
 80027f8:	d405      	bmi.n	8002806 <_puts_r+0x4e>
 80027fa:	89a3      	ldrh	r3, [r4, #12]
 80027fc:	059b      	lsls	r3, r3, #22
 80027fe:	d402      	bmi.n	8002806 <_puts_r+0x4e>
 8002800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002802:	f000 f989 	bl	8002b18 <__retarget_lock_release_recursive>
 8002806:	4628      	mov	r0, r5
 8002808:	bd70      	pop	{r4, r5, r6, pc}
 800280a:	2b00      	cmp	r3, #0
 800280c:	da04      	bge.n	8002818 <_puts_r+0x60>
 800280e:	69a2      	ldr	r2, [r4, #24]
 8002810:	429a      	cmp	r2, r3
 8002812:	dc17      	bgt.n	8002844 <_puts_r+0x8c>
 8002814:	290a      	cmp	r1, #10
 8002816:	d015      	beq.n	8002844 <_puts_r+0x8c>
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	6022      	str	r2, [r4, #0]
 800281e:	7019      	strb	r1, [r3, #0]
 8002820:	68a3      	ldr	r3, [r4, #8]
 8002822:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002826:	3b01      	subs	r3, #1
 8002828:	60a3      	str	r3, [r4, #8]
 800282a:	2900      	cmp	r1, #0
 800282c:	d1ed      	bne.n	800280a <_puts_r+0x52>
 800282e:	2b00      	cmp	r3, #0
 8002830:	da11      	bge.n	8002856 <_puts_r+0x9e>
 8002832:	4622      	mov	r2, r4
 8002834:	210a      	movs	r1, #10
 8002836:	4628      	mov	r0, r5
 8002838:	f000 f85f 	bl	80028fa <__swbuf_r>
 800283c:	3001      	adds	r0, #1
 800283e:	d0d7      	beq.n	80027f0 <_puts_r+0x38>
 8002840:	250a      	movs	r5, #10
 8002842:	e7d7      	b.n	80027f4 <_puts_r+0x3c>
 8002844:	4622      	mov	r2, r4
 8002846:	4628      	mov	r0, r5
 8002848:	f000 f857 	bl	80028fa <__swbuf_r>
 800284c:	3001      	adds	r0, #1
 800284e:	d1e7      	bne.n	8002820 <_puts_r+0x68>
 8002850:	e7ce      	b.n	80027f0 <_puts_r+0x38>
 8002852:	3e01      	subs	r6, #1
 8002854:	e7e4      	b.n	8002820 <_puts_r+0x68>
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	6022      	str	r2, [r4, #0]
 800285c:	220a      	movs	r2, #10
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e7ee      	b.n	8002840 <_puts_r+0x88>
	...

08002864 <puts>:
 8002864:	4b02      	ldr	r3, [pc, #8]	@ (8002870 <puts+0xc>)
 8002866:	4601      	mov	r1, r0
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	f7ff bfa5 	b.w	80027b8 <_puts_r>
 800286e:	bf00      	nop
 8002870:	20000018 	.word	0x20000018

08002874 <__sread>:
 8002874:	b510      	push	{r4, lr}
 8002876:	460c      	mov	r4, r1
 8002878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800287c:	f000 f8fc 	bl	8002a78 <_read_r>
 8002880:	2800      	cmp	r0, #0
 8002882:	bfab      	itete	ge
 8002884:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002886:	89a3      	ldrhlt	r3, [r4, #12]
 8002888:	181b      	addge	r3, r3, r0
 800288a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800288e:	bfac      	ite	ge
 8002890:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002892:	81a3      	strhlt	r3, [r4, #12]
 8002894:	bd10      	pop	{r4, pc}

08002896 <__swrite>:
 8002896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289a:	461f      	mov	r7, r3
 800289c:	898b      	ldrh	r3, [r1, #12]
 800289e:	05db      	lsls	r3, r3, #23
 80028a0:	4605      	mov	r5, r0
 80028a2:	460c      	mov	r4, r1
 80028a4:	4616      	mov	r6, r2
 80028a6:	d505      	bpl.n	80028b4 <__swrite+0x1e>
 80028a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028ac:	2302      	movs	r3, #2
 80028ae:	2200      	movs	r2, #0
 80028b0:	f000 f8d0 	bl	8002a54 <_lseek_r>
 80028b4:	89a3      	ldrh	r3, [r4, #12]
 80028b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028be:	81a3      	strh	r3, [r4, #12]
 80028c0:	4632      	mov	r2, r6
 80028c2:	463b      	mov	r3, r7
 80028c4:	4628      	mov	r0, r5
 80028c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028ca:	f000 b8e7 	b.w	8002a9c <_write_r>

080028ce <__sseek>:
 80028ce:	b510      	push	{r4, lr}
 80028d0:	460c      	mov	r4, r1
 80028d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d6:	f000 f8bd 	bl	8002a54 <_lseek_r>
 80028da:	1c43      	adds	r3, r0, #1
 80028dc:	89a3      	ldrh	r3, [r4, #12]
 80028de:	bf15      	itete	ne
 80028e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80028e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80028e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80028ea:	81a3      	strheq	r3, [r4, #12]
 80028ec:	bf18      	it	ne
 80028ee:	81a3      	strhne	r3, [r4, #12]
 80028f0:	bd10      	pop	{r4, pc}

080028f2 <__sclose>:
 80028f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028f6:	f000 b89d 	b.w	8002a34 <_close_r>

080028fa <__swbuf_r>:
 80028fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fc:	460e      	mov	r6, r1
 80028fe:	4614      	mov	r4, r2
 8002900:	4605      	mov	r5, r0
 8002902:	b118      	cbz	r0, 800290c <__swbuf_r+0x12>
 8002904:	6a03      	ldr	r3, [r0, #32]
 8002906:	b90b      	cbnz	r3, 800290c <__swbuf_r+0x12>
 8002908:	f7ff ff20 	bl	800274c <__sinit>
 800290c:	69a3      	ldr	r3, [r4, #24]
 800290e:	60a3      	str	r3, [r4, #8]
 8002910:	89a3      	ldrh	r3, [r4, #12]
 8002912:	071a      	lsls	r2, r3, #28
 8002914:	d501      	bpl.n	800291a <__swbuf_r+0x20>
 8002916:	6923      	ldr	r3, [r4, #16]
 8002918:	b943      	cbnz	r3, 800292c <__swbuf_r+0x32>
 800291a:	4621      	mov	r1, r4
 800291c:	4628      	mov	r0, r5
 800291e:	f000 f82b 	bl	8002978 <__swsetup_r>
 8002922:	b118      	cbz	r0, 800292c <__swbuf_r+0x32>
 8002924:	f04f 37ff 	mov.w	r7, #4294967295
 8002928:	4638      	mov	r0, r7
 800292a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	6922      	ldr	r2, [r4, #16]
 8002930:	1a98      	subs	r0, r3, r2
 8002932:	6963      	ldr	r3, [r4, #20]
 8002934:	b2f6      	uxtb	r6, r6
 8002936:	4283      	cmp	r3, r0
 8002938:	4637      	mov	r7, r6
 800293a:	dc05      	bgt.n	8002948 <__swbuf_r+0x4e>
 800293c:	4621      	mov	r1, r4
 800293e:	4628      	mov	r0, r5
 8002940:	f000 fa68 	bl	8002e14 <_fflush_r>
 8002944:	2800      	cmp	r0, #0
 8002946:	d1ed      	bne.n	8002924 <__swbuf_r+0x2a>
 8002948:	68a3      	ldr	r3, [r4, #8]
 800294a:	3b01      	subs	r3, #1
 800294c:	60a3      	str	r3, [r4, #8]
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	6022      	str	r2, [r4, #0]
 8002954:	701e      	strb	r6, [r3, #0]
 8002956:	6962      	ldr	r2, [r4, #20]
 8002958:	1c43      	adds	r3, r0, #1
 800295a:	429a      	cmp	r2, r3
 800295c:	d004      	beq.n	8002968 <__swbuf_r+0x6e>
 800295e:	89a3      	ldrh	r3, [r4, #12]
 8002960:	07db      	lsls	r3, r3, #31
 8002962:	d5e1      	bpl.n	8002928 <__swbuf_r+0x2e>
 8002964:	2e0a      	cmp	r6, #10
 8002966:	d1df      	bne.n	8002928 <__swbuf_r+0x2e>
 8002968:	4621      	mov	r1, r4
 800296a:	4628      	mov	r0, r5
 800296c:	f000 fa52 	bl	8002e14 <_fflush_r>
 8002970:	2800      	cmp	r0, #0
 8002972:	d0d9      	beq.n	8002928 <__swbuf_r+0x2e>
 8002974:	e7d6      	b.n	8002924 <__swbuf_r+0x2a>
	...

08002978 <__swsetup_r>:
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4b29      	ldr	r3, [pc, #164]	@ (8002a20 <__swsetup_r+0xa8>)
 800297c:	4605      	mov	r5, r0
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	460c      	mov	r4, r1
 8002982:	b118      	cbz	r0, 800298c <__swsetup_r+0x14>
 8002984:	6a03      	ldr	r3, [r0, #32]
 8002986:	b90b      	cbnz	r3, 800298c <__swsetup_r+0x14>
 8002988:	f7ff fee0 	bl	800274c <__sinit>
 800298c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002990:	0719      	lsls	r1, r3, #28
 8002992:	d422      	bmi.n	80029da <__swsetup_r+0x62>
 8002994:	06da      	lsls	r2, r3, #27
 8002996:	d407      	bmi.n	80029a8 <__swsetup_r+0x30>
 8002998:	2209      	movs	r2, #9
 800299a:	602a      	str	r2, [r5, #0]
 800299c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a0:	81a3      	strh	r3, [r4, #12]
 80029a2:	f04f 30ff 	mov.w	r0, #4294967295
 80029a6:	e033      	b.n	8002a10 <__swsetup_r+0x98>
 80029a8:	0758      	lsls	r0, r3, #29
 80029aa:	d512      	bpl.n	80029d2 <__swsetup_r+0x5a>
 80029ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80029ae:	b141      	cbz	r1, 80029c2 <__swsetup_r+0x4a>
 80029b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80029b4:	4299      	cmp	r1, r3
 80029b6:	d002      	beq.n	80029be <__swsetup_r+0x46>
 80029b8:	4628      	mov	r0, r5
 80029ba:	f000 f8af 	bl	8002b1c <_free_r>
 80029be:	2300      	movs	r3, #0
 80029c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80029c2:	89a3      	ldrh	r3, [r4, #12]
 80029c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80029c8:	81a3      	strh	r3, [r4, #12]
 80029ca:	2300      	movs	r3, #0
 80029cc:	6063      	str	r3, [r4, #4]
 80029ce:	6923      	ldr	r3, [r4, #16]
 80029d0:	6023      	str	r3, [r4, #0]
 80029d2:	89a3      	ldrh	r3, [r4, #12]
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	81a3      	strh	r3, [r4, #12]
 80029da:	6923      	ldr	r3, [r4, #16]
 80029dc:	b94b      	cbnz	r3, 80029f2 <__swsetup_r+0x7a>
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80029e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029e8:	d003      	beq.n	80029f2 <__swsetup_r+0x7a>
 80029ea:	4621      	mov	r1, r4
 80029ec:	4628      	mov	r0, r5
 80029ee:	f000 fa5f 	bl	8002eb0 <__smakebuf_r>
 80029f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029f6:	f013 0201 	ands.w	r2, r3, #1
 80029fa:	d00a      	beq.n	8002a12 <__swsetup_r+0x9a>
 80029fc:	2200      	movs	r2, #0
 80029fe:	60a2      	str	r2, [r4, #8]
 8002a00:	6962      	ldr	r2, [r4, #20]
 8002a02:	4252      	negs	r2, r2
 8002a04:	61a2      	str	r2, [r4, #24]
 8002a06:	6922      	ldr	r2, [r4, #16]
 8002a08:	b942      	cbnz	r2, 8002a1c <__swsetup_r+0xa4>
 8002a0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002a0e:	d1c5      	bne.n	800299c <__swsetup_r+0x24>
 8002a10:	bd38      	pop	{r3, r4, r5, pc}
 8002a12:	0799      	lsls	r1, r3, #30
 8002a14:	bf58      	it	pl
 8002a16:	6962      	ldrpl	r2, [r4, #20]
 8002a18:	60a2      	str	r2, [r4, #8]
 8002a1a:	e7f4      	b.n	8002a06 <__swsetup_r+0x8e>
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	e7f7      	b.n	8002a10 <__swsetup_r+0x98>
 8002a20:	20000018 	.word	0x20000018

08002a24 <memset>:
 8002a24:	4402      	add	r2, r0
 8002a26:	4603      	mov	r3, r0
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <memset+0xa>
 8002a2c:	4770      	bx	lr
 8002a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a32:	e7f9      	b.n	8002a28 <memset+0x4>

08002a34 <_close_r>:
 8002a34:	b538      	push	{r3, r4, r5, lr}
 8002a36:	4d06      	ldr	r5, [pc, #24]	@ (8002a50 <_close_r+0x1c>)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	602b      	str	r3, [r5, #0]
 8002a40:	f7fe f90c 	bl	8000c5c <_close>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d102      	bne.n	8002a4e <_close_r+0x1a>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	b103      	cbz	r3, 8002a4e <_close_r+0x1a>
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	20000234 	.word	0x20000234

08002a54 <_lseek_r>:
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	4d07      	ldr	r5, [pc, #28]	@ (8002a74 <_lseek_r+0x20>)
 8002a58:	4604      	mov	r4, r0
 8002a5a:	4608      	mov	r0, r1
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	2200      	movs	r2, #0
 8002a60:	602a      	str	r2, [r5, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f7fe f921 	bl	8000caa <_lseek>
 8002a68:	1c43      	adds	r3, r0, #1
 8002a6a:	d102      	bne.n	8002a72 <_lseek_r+0x1e>
 8002a6c:	682b      	ldr	r3, [r5, #0]
 8002a6e:	b103      	cbz	r3, 8002a72 <_lseek_r+0x1e>
 8002a70:	6023      	str	r3, [r4, #0]
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	20000234 	.word	0x20000234

08002a78 <_read_r>:
 8002a78:	b538      	push	{r3, r4, r5, lr}
 8002a7a:	4d07      	ldr	r5, [pc, #28]	@ (8002a98 <_read_r+0x20>)
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	4608      	mov	r0, r1
 8002a80:	4611      	mov	r1, r2
 8002a82:	2200      	movs	r2, #0
 8002a84:	602a      	str	r2, [r5, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f7fe f8cb 	bl	8000c22 <_read>
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	d102      	bne.n	8002a96 <_read_r+0x1e>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	b103      	cbz	r3, 8002a96 <_read_r+0x1e>
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	bd38      	pop	{r3, r4, r5, pc}
 8002a98:	20000234 	.word	0x20000234

08002a9c <_write_r>:
 8002a9c:	b538      	push	{r3, r4, r5, lr}
 8002a9e:	4d07      	ldr	r5, [pc, #28]	@ (8002abc <_write_r+0x20>)
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	4608      	mov	r0, r1
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	602a      	str	r2, [r5, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f7fd fff8 	bl	8000aa0 <_write>
 8002ab0:	1c43      	adds	r3, r0, #1
 8002ab2:	d102      	bne.n	8002aba <_write_r+0x1e>
 8002ab4:	682b      	ldr	r3, [r5, #0]
 8002ab6:	b103      	cbz	r3, 8002aba <_write_r+0x1e>
 8002ab8:	6023      	str	r3, [r4, #0]
 8002aba:	bd38      	pop	{r3, r4, r5, pc}
 8002abc:	20000234 	.word	0x20000234

08002ac0 <__errno>:
 8002ac0:	4b01      	ldr	r3, [pc, #4]	@ (8002ac8 <__errno+0x8>)
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000018 	.word	0x20000018

08002acc <__libc_init_array>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	4d0d      	ldr	r5, [pc, #52]	@ (8002b04 <__libc_init_array+0x38>)
 8002ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8002b08 <__libc_init_array+0x3c>)
 8002ad2:	1b64      	subs	r4, r4, r5
 8002ad4:	10a4      	asrs	r4, r4, #2
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	42a6      	cmp	r6, r4
 8002ada:	d109      	bne.n	8002af0 <__libc_init_array+0x24>
 8002adc:	4d0b      	ldr	r5, [pc, #44]	@ (8002b0c <__libc_init_array+0x40>)
 8002ade:	4c0c      	ldr	r4, [pc, #48]	@ (8002b10 <__libc_init_array+0x44>)
 8002ae0:	f000 fa54 	bl	8002f8c <_init>
 8002ae4:	1b64      	subs	r4, r4, r5
 8002ae6:	10a4      	asrs	r4, r4, #2
 8002ae8:	2600      	movs	r6, #0
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d105      	bne.n	8002afa <__libc_init_array+0x2e>
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af4:	4798      	blx	r3
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7ee      	b.n	8002ad8 <__libc_init_array+0xc>
 8002afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afe:	4798      	blx	r3
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7f2      	b.n	8002aea <__libc_init_array+0x1e>
 8002b04:	0800301c 	.word	0x0800301c
 8002b08:	0800301c 	.word	0x0800301c
 8002b0c:	0800301c 	.word	0x0800301c
 8002b10:	08003020 	.word	0x08003020

08002b14 <__retarget_lock_init_recursive>:
 8002b14:	4770      	bx	lr

08002b16 <__retarget_lock_acquire_recursive>:
 8002b16:	4770      	bx	lr

08002b18 <__retarget_lock_release_recursive>:
 8002b18:	4770      	bx	lr
	...

08002b1c <_free_r>:
 8002b1c:	b538      	push	{r3, r4, r5, lr}
 8002b1e:	4605      	mov	r5, r0
 8002b20:	2900      	cmp	r1, #0
 8002b22:	d041      	beq.n	8002ba8 <_free_r+0x8c>
 8002b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b28:	1f0c      	subs	r4, r1, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bfb8      	it	lt
 8002b2e:	18e4      	addlt	r4, r4, r3
 8002b30:	f000 f8e0 	bl	8002cf4 <__malloc_lock>
 8002b34:	4a1d      	ldr	r2, [pc, #116]	@ (8002bac <_free_r+0x90>)
 8002b36:	6813      	ldr	r3, [r2, #0]
 8002b38:	b933      	cbnz	r3, 8002b48 <_free_r+0x2c>
 8002b3a:	6063      	str	r3, [r4, #4]
 8002b3c:	6014      	str	r4, [r2, #0]
 8002b3e:	4628      	mov	r0, r5
 8002b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b44:	f000 b8dc 	b.w	8002d00 <__malloc_unlock>
 8002b48:	42a3      	cmp	r3, r4
 8002b4a:	d908      	bls.n	8002b5e <_free_r+0x42>
 8002b4c:	6820      	ldr	r0, [r4, #0]
 8002b4e:	1821      	adds	r1, r4, r0
 8002b50:	428b      	cmp	r3, r1
 8002b52:	bf01      	itttt	eq
 8002b54:	6819      	ldreq	r1, [r3, #0]
 8002b56:	685b      	ldreq	r3, [r3, #4]
 8002b58:	1809      	addeq	r1, r1, r0
 8002b5a:	6021      	streq	r1, [r4, #0]
 8002b5c:	e7ed      	b.n	8002b3a <_free_r+0x1e>
 8002b5e:	461a      	mov	r2, r3
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	b10b      	cbz	r3, 8002b68 <_free_r+0x4c>
 8002b64:	42a3      	cmp	r3, r4
 8002b66:	d9fa      	bls.n	8002b5e <_free_r+0x42>
 8002b68:	6811      	ldr	r1, [r2, #0]
 8002b6a:	1850      	adds	r0, r2, r1
 8002b6c:	42a0      	cmp	r0, r4
 8002b6e:	d10b      	bne.n	8002b88 <_free_r+0x6c>
 8002b70:	6820      	ldr	r0, [r4, #0]
 8002b72:	4401      	add	r1, r0
 8002b74:	1850      	adds	r0, r2, r1
 8002b76:	4283      	cmp	r3, r0
 8002b78:	6011      	str	r1, [r2, #0]
 8002b7a:	d1e0      	bne.n	8002b3e <_free_r+0x22>
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	6053      	str	r3, [r2, #4]
 8002b82:	4408      	add	r0, r1
 8002b84:	6010      	str	r0, [r2, #0]
 8002b86:	e7da      	b.n	8002b3e <_free_r+0x22>
 8002b88:	d902      	bls.n	8002b90 <_free_r+0x74>
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	602b      	str	r3, [r5, #0]
 8002b8e:	e7d6      	b.n	8002b3e <_free_r+0x22>
 8002b90:	6820      	ldr	r0, [r4, #0]
 8002b92:	1821      	adds	r1, r4, r0
 8002b94:	428b      	cmp	r3, r1
 8002b96:	bf04      	itt	eq
 8002b98:	6819      	ldreq	r1, [r3, #0]
 8002b9a:	685b      	ldreq	r3, [r3, #4]
 8002b9c:	6063      	str	r3, [r4, #4]
 8002b9e:	bf04      	itt	eq
 8002ba0:	1809      	addeq	r1, r1, r0
 8002ba2:	6021      	streq	r1, [r4, #0]
 8002ba4:	6054      	str	r4, [r2, #4]
 8002ba6:	e7ca      	b.n	8002b3e <_free_r+0x22>
 8002ba8:	bd38      	pop	{r3, r4, r5, pc}
 8002baa:	bf00      	nop
 8002bac:	20000240 	.word	0x20000240

08002bb0 <sbrk_aligned>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	4e0f      	ldr	r6, [pc, #60]	@ (8002bf0 <sbrk_aligned+0x40>)
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	6831      	ldr	r1, [r6, #0]
 8002bb8:	4605      	mov	r5, r0
 8002bba:	b911      	cbnz	r1, 8002bc2 <sbrk_aligned+0x12>
 8002bbc:	f000 f9d6 	bl	8002f6c <_sbrk_r>
 8002bc0:	6030      	str	r0, [r6, #0]
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	f000 f9d1 	bl	8002f6c <_sbrk_r>
 8002bca:	1c43      	adds	r3, r0, #1
 8002bcc:	d103      	bne.n	8002bd6 <sbrk_aligned+0x26>
 8002bce:	f04f 34ff 	mov.w	r4, #4294967295
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	bd70      	pop	{r4, r5, r6, pc}
 8002bd6:	1cc4      	adds	r4, r0, #3
 8002bd8:	f024 0403 	bic.w	r4, r4, #3
 8002bdc:	42a0      	cmp	r0, r4
 8002bde:	d0f8      	beq.n	8002bd2 <sbrk_aligned+0x22>
 8002be0:	1a21      	subs	r1, r4, r0
 8002be2:	4628      	mov	r0, r5
 8002be4:	f000 f9c2 	bl	8002f6c <_sbrk_r>
 8002be8:	3001      	adds	r0, #1
 8002bea:	d1f2      	bne.n	8002bd2 <sbrk_aligned+0x22>
 8002bec:	e7ef      	b.n	8002bce <sbrk_aligned+0x1e>
 8002bee:	bf00      	nop
 8002bf0:	2000023c 	.word	0x2000023c

08002bf4 <_malloc_r>:
 8002bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf8:	1ccd      	adds	r5, r1, #3
 8002bfa:	f025 0503 	bic.w	r5, r5, #3
 8002bfe:	3508      	adds	r5, #8
 8002c00:	2d0c      	cmp	r5, #12
 8002c02:	bf38      	it	cc
 8002c04:	250c      	movcc	r5, #12
 8002c06:	2d00      	cmp	r5, #0
 8002c08:	4606      	mov	r6, r0
 8002c0a:	db01      	blt.n	8002c10 <_malloc_r+0x1c>
 8002c0c:	42a9      	cmp	r1, r5
 8002c0e:	d904      	bls.n	8002c1a <_malloc_r+0x26>
 8002c10:	230c      	movs	r3, #12
 8002c12:	6033      	str	r3, [r6, #0]
 8002c14:	2000      	movs	r0, #0
 8002c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002cf0 <_malloc_r+0xfc>
 8002c1e:	f000 f869 	bl	8002cf4 <__malloc_lock>
 8002c22:	f8d8 3000 	ldr.w	r3, [r8]
 8002c26:	461c      	mov	r4, r3
 8002c28:	bb44      	cbnz	r4, 8002c7c <_malloc_r+0x88>
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	f7ff ffbf 	bl	8002bb0 <sbrk_aligned>
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	4604      	mov	r4, r0
 8002c36:	d158      	bne.n	8002cea <_malloc_r+0xf6>
 8002c38:	f8d8 4000 	ldr.w	r4, [r8]
 8002c3c:	4627      	mov	r7, r4
 8002c3e:	2f00      	cmp	r7, #0
 8002c40:	d143      	bne.n	8002cca <_malloc_r+0xd6>
 8002c42:	2c00      	cmp	r4, #0
 8002c44:	d04b      	beq.n	8002cde <_malloc_r+0xea>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	4639      	mov	r1, r7
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	eb04 0903 	add.w	r9, r4, r3
 8002c50:	f000 f98c 	bl	8002f6c <_sbrk_r>
 8002c54:	4581      	cmp	r9, r0
 8002c56:	d142      	bne.n	8002cde <_malloc_r+0xea>
 8002c58:	6821      	ldr	r1, [r4, #0]
 8002c5a:	1a6d      	subs	r5, r5, r1
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f7ff ffa6 	bl	8002bb0 <sbrk_aligned>
 8002c64:	3001      	adds	r0, #1
 8002c66:	d03a      	beq.n	8002cde <_malloc_r+0xea>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	442b      	add	r3, r5
 8002c6c:	6023      	str	r3, [r4, #0]
 8002c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	bb62      	cbnz	r2, 8002cd0 <_malloc_r+0xdc>
 8002c76:	f8c8 7000 	str.w	r7, [r8]
 8002c7a:	e00f      	b.n	8002c9c <_malloc_r+0xa8>
 8002c7c:	6822      	ldr	r2, [r4, #0]
 8002c7e:	1b52      	subs	r2, r2, r5
 8002c80:	d420      	bmi.n	8002cc4 <_malloc_r+0xd0>
 8002c82:	2a0b      	cmp	r2, #11
 8002c84:	d917      	bls.n	8002cb6 <_malloc_r+0xc2>
 8002c86:	1961      	adds	r1, r4, r5
 8002c88:	42a3      	cmp	r3, r4
 8002c8a:	6025      	str	r5, [r4, #0]
 8002c8c:	bf18      	it	ne
 8002c8e:	6059      	strne	r1, [r3, #4]
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	bf08      	it	eq
 8002c94:	f8c8 1000 	streq.w	r1, [r8]
 8002c98:	5162      	str	r2, [r4, r5]
 8002c9a:	604b      	str	r3, [r1, #4]
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	f000 f82f 	bl	8002d00 <__malloc_unlock>
 8002ca2:	f104 000b 	add.w	r0, r4, #11
 8002ca6:	1d23      	adds	r3, r4, #4
 8002ca8:	f020 0007 	bic.w	r0, r0, #7
 8002cac:	1ac2      	subs	r2, r0, r3
 8002cae:	bf1c      	itt	ne
 8002cb0:	1a1b      	subne	r3, r3, r0
 8002cb2:	50a3      	strne	r3, [r4, r2]
 8002cb4:	e7af      	b.n	8002c16 <_malloc_r+0x22>
 8002cb6:	6862      	ldr	r2, [r4, #4]
 8002cb8:	42a3      	cmp	r3, r4
 8002cba:	bf0c      	ite	eq
 8002cbc:	f8c8 2000 	streq.w	r2, [r8]
 8002cc0:	605a      	strne	r2, [r3, #4]
 8002cc2:	e7eb      	b.n	8002c9c <_malloc_r+0xa8>
 8002cc4:	4623      	mov	r3, r4
 8002cc6:	6864      	ldr	r4, [r4, #4]
 8002cc8:	e7ae      	b.n	8002c28 <_malloc_r+0x34>
 8002cca:	463c      	mov	r4, r7
 8002ccc:	687f      	ldr	r7, [r7, #4]
 8002cce:	e7b6      	b.n	8002c3e <_malloc_r+0x4a>
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	42a3      	cmp	r3, r4
 8002cd6:	d1fb      	bne.n	8002cd0 <_malloc_r+0xdc>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6053      	str	r3, [r2, #4]
 8002cdc:	e7de      	b.n	8002c9c <_malloc_r+0xa8>
 8002cde:	230c      	movs	r3, #12
 8002ce0:	6033      	str	r3, [r6, #0]
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	f000 f80c 	bl	8002d00 <__malloc_unlock>
 8002ce8:	e794      	b.n	8002c14 <_malloc_r+0x20>
 8002cea:	6005      	str	r5, [r0, #0]
 8002cec:	e7d6      	b.n	8002c9c <_malloc_r+0xa8>
 8002cee:	bf00      	nop
 8002cf0:	20000240 	.word	0x20000240

08002cf4 <__malloc_lock>:
 8002cf4:	4801      	ldr	r0, [pc, #4]	@ (8002cfc <__malloc_lock+0x8>)
 8002cf6:	f7ff bf0e 	b.w	8002b16 <__retarget_lock_acquire_recursive>
 8002cfa:	bf00      	nop
 8002cfc:	20000238 	.word	0x20000238

08002d00 <__malloc_unlock>:
 8002d00:	4801      	ldr	r0, [pc, #4]	@ (8002d08 <__malloc_unlock+0x8>)
 8002d02:	f7ff bf09 	b.w	8002b18 <__retarget_lock_release_recursive>
 8002d06:	bf00      	nop
 8002d08:	20000238 	.word	0x20000238

08002d0c <__sflush_r>:
 8002d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d14:	0716      	lsls	r6, r2, #28
 8002d16:	4605      	mov	r5, r0
 8002d18:	460c      	mov	r4, r1
 8002d1a:	d454      	bmi.n	8002dc6 <__sflush_r+0xba>
 8002d1c:	684b      	ldr	r3, [r1, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	dc02      	bgt.n	8002d28 <__sflush_r+0x1c>
 8002d22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	dd48      	ble.n	8002dba <__sflush_r+0xae>
 8002d28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d2a:	2e00      	cmp	r6, #0
 8002d2c:	d045      	beq.n	8002dba <__sflush_r+0xae>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d34:	682f      	ldr	r7, [r5, #0]
 8002d36:	6a21      	ldr	r1, [r4, #32]
 8002d38:	602b      	str	r3, [r5, #0]
 8002d3a:	d030      	beq.n	8002d9e <__sflush_r+0x92>
 8002d3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d3e:	89a3      	ldrh	r3, [r4, #12]
 8002d40:	0759      	lsls	r1, r3, #29
 8002d42:	d505      	bpl.n	8002d50 <__sflush_r+0x44>
 8002d44:	6863      	ldr	r3, [r4, #4]
 8002d46:	1ad2      	subs	r2, r2, r3
 8002d48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d4a:	b10b      	cbz	r3, 8002d50 <__sflush_r+0x44>
 8002d4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d4e:	1ad2      	subs	r2, r2, r3
 8002d50:	2300      	movs	r3, #0
 8002d52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d54:	6a21      	ldr	r1, [r4, #32]
 8002d56:	4628      	mov	r0, r5
 8002d58:	47b0      	blx	r6
 8002d5a:	1c43      	adds	r3, r0, #1
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	d106      	bne.n	8002d6e <__sflush_r+0x62>
 8002d60:	6829      	ldr	r1, [r5, #0]
 8002d62:	291d      	cmp	r1, #29
 8002d64:	d82b      	bhi.n	8002dbe <__sflush_r+0xb2>
 8002d66:	4a2a      	ldr	r2, [pc, #168]	@ (8002e10 <__sflush_r+0x104>)
 8002d68:	40ca      	lsrs	r2, r1
 8002d6a:	07d6      	lsls	r6, r2, #31
 8002d6c:	d527      	bpl.n	8002dbe <__sflush_r+0xb2>
 8002d6e:	2200      	movs	r2, #0
 8002d70:	6062      	str	r2, [r4, #4]
 8002d72:	04d9      	lsls	r1, r3, #19
 8002d74:	6922      	ldr	r2, [r4, #16]
 8002d76:	6022      	str	r2, [r4, #0]
 8002d78:	d504      	bpl.n	8002d84 <__sflush_r+0x78>
 8002d7a:	1c42      	adds	r2, r0, #1
 8002d7c:	d101      	bne.n	8002d82 <__sflush_r+0x76>
 8002d7e:	682b      	ldr	r3, [r5, #0]
 8002d80:	b903      	cbnz	r3, 8002d84 <__sflush_r+0x78>
 8002d82:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d86:	602f      	str	r7, [r5, #0]
 8002d88:	b1b9      	cbz	r1, 8002dba <__sflush_r+0xae>
 8002d8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d8e:	4299      	cmp	r1, r3
 8002d90:	d002      	beq.n	8002d98 <__sflush_r+0x8c>
 8002d92:	4628      	mov	r0, r5
 8002d94:	f7ff fec2 	bl	8002b1c <_free_r>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d9c:	e00d      	b.n	8002dba <__sflush_r+0xae>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	4628      	mov	r0, r5
 8002da2:	47b0      	blx	r6
 8002da4:	4602      	mov	r2, r0
 8002da6:	1c50      	adds	r0, r2, #1
 8002da8:	d1c9      	bne.n	8002d3e <__sflush_r+0x32>
 8002daa:	682b      	ldr	r3, [r5, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0c6      	beq.n	8002d3e <__sflush_r+0x32>
 8002db0:	2b1d      	cmp	r3, #29
 8002db2:	d001      	beq.n	8002db8 <__sflush_r+0xac>
 8002db4:	2b16      	cmp	r3, #22
 8002db6:	d11e      	bne.n	8002df6 <__sflush_r+0xea>
 8002db8:	602f      	str	r7, [r5, #0]
 8002dba:	2000      	movs	r0, #0
 8002dbc:	e022      	b.n	8002e04 <__sflush_r+0xf8>
 8002dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	e01b      	b.n	8002dfe <__sflush_r+0xf2>
 8002dc6:	690f      	ldr	r7, [r1, #16]
 8002dc8:	2f00      	cmp	r7, #0
 8002dca:	d0f6      	beq.n	8002dba <__sflush_r+0xae>
 8002dcc:	0793      	lsls	r3, r2, #30
 8002dce:	680e      	ldr	r6, [r1, #0]
 8002dd0:	bf08      	it	eq
 8002dd2:	694b      	ldreq	r3, [r1, #20]
 8002dd4:	600f      	str	r7, [r1, #0]
 8002dd6:	bf18      	it	ne
 8002dd8:	2300      	movne	r3, #0
 8002dda:	eba6 0807 	sub.w	r8, r6, r7
 8002dde:	608b      	str	r3, [r1, #8]
 8002de0:	f1b8 0f00 	cmp.w	r8, #0
 8002de4:	dde9      	ble.n	8002dba <__sflush_r+0xae>
 8002de6:	6a21      	ldr	r1, [r4, #32]
 8002de8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002dea:	4643      	mov	r3, r8
 8002dec:	463a      	mov	r2, r7
 8002dee:	4628      	mov	r0, r5
 8002df0:	47b0      	blx	r6
 8002df2:	2800      	cmp	r0, #0
 8002df4:	dc08      	bgt.n	8002e08 <__sflush_r+0xfc>
 8002df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dfe:	81a3      	strh	r3, [r4, #12]
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e08:	4407      	add	r7, r0
 8002e0a:	eba8 0800 	sub.w	r8, r8, r0
 8002e0e:	e7e7      	b.n	8002de0 <__sflush_r+0xd4>
 8002e10:	20400001 	.word	0x20400001

08002e14 <_fflush_r>:
 8002e14:	b538      	push	{r3, r4, r5, lr}
 8002e16:	690b      	ldr	r3, [r1, #16]
 8002e18:	4605      	mov	r5, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	b913      	cbnz	r3, 8002e24 <_fflush_r+0x10>
 8002e1e:	2500      	movs	r5, #0
 8002e20:	4628      	mov	r0, r5
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	b118      	cbz	r0, 8002e2e <_fflush_r+0x1a>
 8002e26:	6a03      	ldr	r3, [r0, #32]
 8002e28:	b90b      	cbnz	r3, 8002e2e <_fflush_r+0x1a>
 8002e2a:	f7ff fc8f 	bl	800274c <__sinit>
 8002e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f3      	beq.n	8002e1e <_fflush_r+0xa>
 8002e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e38:	07d0      	lsls	r0, r2, #31
 8002e3a:	d404      	bmi.n	8002e46 <_fflush_r+0x32>
 8002e3c:	0599      	lsls	r1, r3, #22
 8002e3e:	d402      	bmi.n	8002e46 <_fflush_r+0x32>
 8002e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e42:	f7ff fe68 	bl	8002b16 <__retarget_lock_acquire_recursive>
 8002e46:	4628      	mov	r0, r5
 8002e48:	4621      	mov	r1, r4
 8002e4a:	f7ff ff5f 	bl	8002d0c <__sflush_r>
 8002e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e50:	07da      	lsls	r2, r3, #31
 8002e52:	4605      	mov	r5, r0
 8002e54:	d4e4      	bmi.n	8002e20 <_fflush_r+0xc>
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	059b      	lsls	r3, r3, #22
 8002e5a:	d4e1      	bmi.n	8002e20 <_fflush_r+0xc>
 8002e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e5e:	f7ff fe5b 	bl	8002b18 <__retarget_lock_release_recursive>
 8002e62:	e7dd      	b.n	8002e20 <_fflush_r+0xc>

08002e64 <__swhatbuf_r>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	460c      	mov	r4, r1
 8002e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e6c:	2900      	cmp	r1, #0
 8002e6e:	b096      	sub	sp, #88	@ 0x58
 8002e70:	4615      	mov	r5, r2
 8002e72:	461e      	mov	r6, r3
 8002e74:	da0d      	bge.n	8002e92 <__swhatbuf_r+0x2e>
 8002e76:	89a3      	ldrh	r3, [r4, #12]
 8002e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2340      	movne	r3, #64	@ 0x40
 8002e84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002e88:	2000      	movs	r0, #0
 8002e8a:	6031      	str	r1, [r6, #0]
 8002e8c:	602b      	str	r3, [r5, #0]
 8002e8e:	b016      	add	sp, #88	@ 0x58
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
 8002e92:	466a      	mov	r2, sp
 8002e94:	f000 f848 	bl	8002f28 <_fstat_r>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	dbec      	blt.n	8002e76 <__swhatbuf_r+0x12>
 8002e9c:	9901      	ldr	r1, [sp, #4]
 8002e9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002ea2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002ea6:	4259      	negs	r1, r3
 8002ea8:	4159      	adcs	r1, r3
 8002eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eae:	e7eb      	b.n	8002e88 <__swhatbuf_r+0x24>

08002eb0 <__smakebuf_r>:
 8002eb0:	898b      	ldrh	r3, [r1, #12]
 8002eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eb4:	079d      	lsls	r5, r3, #30
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	460c      	mov	r4, r1
 8002eba:	d507      	bpl.n	8002ecc <__smakebuf_r+0x1c>
 8002ebc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	6123      	str	r3, [r4, #16]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	6163      	str	r3, [r4, #20]
 8002ec8:	b003      	add	sp, #12
 8002eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ecc:	ab01      	add	r3, sp, #4
 8002ece:	466a      	mov	r2, sp
 8002ed0:	f7ff ffc8 	bl	8002e64 <__swhatbuf_r>
 8002ed4:	9f00      	ldr	r7, [sp, #0]
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	4639      	mov	r1, r7
 8002eda:	4630      	mov	r0, r6
 8002edc:	f7ff fe8a 	bl	8002bf4 <_malloc_r>
 8002ee0:	b948      	cbnz	r0, 8002ef6 <__smakebuf_r+0x46>
 8002ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee6:	059a      	lsls	r2, r3, #22
 8002ee8:	d4ee      	bmi.n	8002ec8 <__smakebuf_r+0x18>
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	81a3      	strh	r3, [r4, #12]
 8002ef4:	e7e2      	b.n	8002ebc <__smakebuf_r+0xc>
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	6020      	str	r0, [r4, #0]
 8002efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002efe:	81a3      	strh	r3, [r4, #12]
 8002f00:	9b01      	ldr	r3, [sp, #4]
 8002f02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002f06:	b15b      	cbz	r3, 8002f20 <__smakebuf_r+0x70>
 8002f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f000 f81d 	bl	8002f4c <_isatty_r>
 8002f12:	b128      	cbz	r0, 8002f20 <__smakebuf_r+0x70>
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	f023 0303 	bic.w	r3, r3, #3
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	81a3      	strh	r3, [r4, #12]
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	431d      	orrs	r5, r3
 8002f24:	81a5      	strh	r5, [r4, #12]
 8002f26:	e7cf      	b.n	8002ec8 <__smakebuf_r+0x18>

08002f28 <_fstat_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	4d07      	ldr	r5, [pc, #28]	@ (8002f48 <_fstat_r+0x20>)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	4604      	mov	r4, r0
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	f7fd fe9d 	bl	8000c74 <_fstat>
 8002f3a:	1c43      	adds	r3, r0, #1
 8002f3c:	d102      	bne.n	8002f44 <_fstat_r+0x1c>
 8002f3e:	682b      	ldr	r3, [r5, #0]
 8002f40:	b103      	cbz	r3, 8002f44 <_fstat_r+0x1c>
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
 8002f46:	bf00      	nop
 8002f48:	20000234 	.word	0x20000234

08002f4c <_isatty_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4d06      	ldr	r5, [pc, #24]	@ (8002f68 <_isatty_r+0x1c>)
 8002f50:	2300      	movs	r3, #0
 8002f52:	4604      	mov	r4, r0
 8002f54:	4608      	mov	r0, r1
 8002f56:	602b      	str	r3, [r5, #0]
 8002f58:	f7fd fe9c 	bl	8000c94 <_isatty>
 8002f5c:	1c43      	adds	r3, r0, #1
 8002f5e:	d102      	bne.n	8002f66 <_isatty_r+0x1a>
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	b103      	cbz	r3, 8002f66 <_isatty_r+0x1a>
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
 8002f68:	20000234 	.word	0x20000234

08002f6c <_sbrk_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4d06      	ldr	r5, [pc, #24]	@ (8002f88 <_sbrk_r+0x1c>)
 8002f70:	2300      	movs	r3, #0
 8002f72:	4604      	mov	r4, r0
 8002f74:	4608      	mov	r0, r1
 8002f76:	602b      	str	r3, [r5, #0]
 8002f78:	f7fd fea4 	bl	8000cc4 <_sbrk>
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	d102      	bne.n	8002f86 <_sbrk_r+0x1a>
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	b103      	cbz	r3, 8002f86 <_sbrk_r+0x1a>
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	20000234 	.word	0x20000234

08002f8c <_init>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr

08002f98 <_fini>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr
