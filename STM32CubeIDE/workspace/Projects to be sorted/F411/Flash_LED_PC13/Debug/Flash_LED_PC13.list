
Flash_LED_PC13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001554  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080016ec  080016ec  000026ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016fc  080016fc  00003014  2**0
                  CONTENTS
  4 .ARM          00000008  080016fc  080016fc  000026fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001704  08001704  00003014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001704  08001704  00002704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001708  08001708  00002708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800170c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000014  08001720  00003014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001720  00003038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003557  00000000  00000000  00003044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e68  00000000  00000000  0000659b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  00007408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002d2  00000000  00000000  000077f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000142de  00000000  00000000  00007aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004d77  00000000  00000000  0001bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e9c3  00000000  00000000  00020b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f4e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e28  00000000  00000000  0009f528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000a0350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080016d4 	.word	0x080016d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080016d4 	.word	0x080016d4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	@ (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f931 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f001 f824 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f93b 	bl	80007a6 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f911 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	@ (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000010 	.word	0x20000010
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000030 	.word	0x20000030

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	@ (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000030 	.word	0x20000030

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <HAL_Delay+0x44>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000004 	.word	0x20000004

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	@ (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	@ 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	@ 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff47 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff5c 	bl	800063c <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffb0 	bl	8000714 <SysTick_Config>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	@ 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
 80007da:	e159      	b.n	8000a90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007dc:	2201      	movs	r2, #1
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	4013      	ands	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	f040 8148 	bne.w	8000a8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f003 0303 	and.w	r3, r3, #3
 8000802:	2b01      	cmp	r3, #1
 8000804:	d005      	beq.n	8000812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800080e:	2b02      	cmp	r3, #2
 8000810:	d130      	bne.n	8000874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	2203      	movs	r2, #3
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4013      	ands	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	68da      	ldr	r2, [r3, #12]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	4313      	orrs	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000848:	2201      	movs	r2, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	f003 0201 	and.w	r2, r3, #1
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4313      	orrs	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	2b03      	cmp	r3, #3
 800087e:	d017      	beq.n	80008b0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	2203      	movs	r2, #3
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4013      	ands	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d123      	bne.n	8000904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	08da      	lsrs	r2, r3, #3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3208      	adds	r2, #8
 80008c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	220f      	movs	r2, #15
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	691a      	ldr	r2, [r3, #16]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	08da      	lsrs	r2, r3, #3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3208      	adds	r2, #8
 80008fe:	69b9      	ldr	r1, [r7, #24]
 8000900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f003 0203 	and.w	r2, r3, #3
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4313      	orrs	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000940:	2b00      	cmp	r3, #0
 8000942:	f000 80a2 	beq.w	8000a8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b57      	ldr	r3, [pc, #348]	@ (8000aa8 <HAL_GPIO_Init+0x2e8>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a56      	ldr	r2, [pc, #344]	@ (8000aa8 <HAL_GPIO_Init+0x2e8>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b54      	ldr	r3, [pc, #336]	@ (8000aa8 <HAL_GPIO_Init+0x2e8>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000962:	4a52      	ldr	r2, [pc, #328]	@ (8000aac <HAL_GPIO_Init+0x2ec>)
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3302      	adds	r3, #2
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4013      	ands	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a49      	ldr	r2, [pc, #292]	@ (8000ab0 <HAL_GPIO_Init+0x2f0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d019      	beq.n	80009c2 <HAL_GPIO_Init+0x202>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a48      	ldr	r2, [pc, #288]	@ (8000ab4 <HAL_GPIO_Init+0x2f4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d013      	beq.n	80009be <HAL_GPIO_Init+0x1fe>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a47      	ldr	r2, [pc, #284]	@ (8000ab8 <HAL_GPIO_Init+0x2f8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d00d      	beq.n	80009ba <HAL_GPIO_Init+0x1fa>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a46      	ldr	r2, [pc, #280]	@ (8000abc <HAL_GPIO_Init+0x2fc>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d007      	beq.n	80009b6 <HAL_GPIO_Init+0x1f6>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a45      	ldr	r2, [pc, #276]	@ (8000ac0 <HAL_GPIO_Init+0x300>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d101      	bne.n	80009b2 <HAL_GPIO_Init+0x1f2>
 80009ae:	2304      	movs	r3, #4
 80009b0:	e008      	b.n	80009c4 <HAL_GPIO_Init+0x204>
 80009b2:	2307      	movs	r3, #7
 80009b4:	e006      	b.n	80009c4 <HAL_GPIO_Init+0x204>
 80009b6:	2303      	movs	r3, #3
 80009b8:	e004      	b.n	80009c4 <HAL_GPIO_Init+0x204>
 80009ba:	2302      	movs	r3, #2
 80009bc:	e002      	b.n	80009c4 <HAL_GPIO_Init+0x204>
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <HAL_GPIO_Init+0x204>
 80009c2:	2300      	movs	r3, #0
 80009c4:	69fa      	ldr	r2, [r7, #28]
 80009c6:	f002 0203 	and.w	r2, r2, #3
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	4093      	lsls	r3, r2
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009d4:	4935      	ldr	r1, [pc, #212]	@ (8000aac <HAL_GPIO_Init+0x2ec>)
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	3302      	adds	r3, #2
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009e2:	4b38      	ldr	r3, [pc, #224]	@ (8000ac4 <HAL_GPIO_Init+0x304>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a06:	4a2f      	ldr	r2, [pc, #188]	@ (8000ac4 <HAL_GPIO_Init+0x304>)
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <HAL_GPIO_Init+0x304>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a30:	4a24      	ldr	r2, [pc, #144]	@ (8000ac4 <HAL_GPIO_Init+0x304>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a36:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <HAL_GPIO_Init+0x304>)
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	4013      	ands	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac4 <HAL_GPIO_Init+0x304>)
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_GPIO_Init+0x304>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac4 <HAL_GPIO_Init+0x304>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	2b0f      	cmp	r3, #15
 8000a94:	f67f aea2 	bls.w	80007dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3724      	adds	r7, #36	@ 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40013c00 	.word	0x40013c00

08000ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad8:	787b      	ldrb	r3, [r7, #1]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ae4:	e003      	b.n	8000aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	041a      	lsls	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	619a      	str	r2, [r3, #24]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	041a      	lsls	r2, r3, #16
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	619a      	str	r2, [r3, #24]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e267      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d075      	beq.n	8000c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b4e:	4b88      	ldr	r3, [pc, #544]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d00c      	beq.n	8000b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b5a:	4b85      	ldr	r3, [pc, #532]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d112      	bne.n	8000b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b66:	4b82      	ldr	r3, [pc, #520]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000b72:	d10b      	bne.n	8000b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b74:	4b7e      	ldr	r3, [pc, #504]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d05b      	beq.n	8000c38 <HAL_RCC_OscConfig+0x108>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d157      	bne.n	8000c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e242      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b94:	d106      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x74>
 8000b96:	4b76      	ldr	r3, [pc, #472]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a75      	ldr	r2, [pc, #468]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e01d      	b.n	8000be0 <HAL_RCC_OscConfig+0xb0>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bac:	d10c      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x98>
 8000bae:	4b70      	ldr	r3, [pc, #448]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	4b6d      	ldr	r3, [pc, #436]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a6c      	ldr	r2, [pc, #432]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e00b      	b.n	8000be0 <HAL_RCC_OscConfig+0xb0>
 8000bc8:	4b69      	ldr	r3, [pc, #420]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a68      	ldr	r2, [pc, #416]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b66      	ldr	r3, [pc, #408]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a65      	ldr	r2, [pc, #404]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d013      	beq.n	8000c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fcd4 	bl	8000594 <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fcd0 	bl	8000594 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b64      	cmp	r3, #100	@ 0x64
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e207      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c02:	4b5b      	ldr	r3, [pc, #364]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f0      	beq.n	8000bf0 <HAL_RCC_OscConfig+0xc0>
 8000c0e:	e014      	b.n	8000c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff fcc0 	bl	8000594 <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c18:	f7ff fcbc 	bl	8000594 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b64      	cmp	r3, #100	@ 0x64
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e1f3      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c2a:	4b51      	ldr	r3, [pc, #324]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f0      	bne.n	8000c18 <HAL_RCC_OscConfig+0xe8>
 8000c36:	e000      	b.n	8000c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d063      	beq.n	8000d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c46:	4b4a      	ldr	r3, [pc, #296]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00b      	beq.n	8000c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c52:	4b47      	ldr	r3, [pc, #284]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d11c      	bne.n	8000c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c5e:	4b44      	ldr	r3, [pc, #272]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d116      	bne.n	8000c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c6a:	4b41      	ldr	r3, [pc, #260]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <HAL_RCC_OscConfig+0x152>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d001      	beq.n	8000c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e1c7      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c82:	4b3b      	ldr	r3, [pc, #236]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	4937      	ldr	r1, [pc, #220]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000c92:	4313      	orrs	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c96:	e03a      	b.n	8000d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d020      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca0:	4b34      	ldr	r3, [pc, #208]	@ (8000d74 <HAL_RCC_OscConfig+0x244>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca6:	f7ff fc75 	bl	8000594 <HAL_GetTick>
 8000caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cac:	e008      	b.n	8000cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cae:	f7ff fc71 	bl	8000594 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e1a8      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0f0      	beq.n	8000cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ccc:	4b28      	ldr	r3, [pc, #160]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	4925      	ldr	r1, [pc, #148]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	600b      	str	r3, [r1, #0]
 8000ce0:	e015      	b.n	8000d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ce2:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <HAL_RCC_OscConfig+0x244>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fc54 	bl	8000594 <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf0:	f7ff fc50 	bl	8000594 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e187      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d02:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f0      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d036      	beq.n	8000d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d016      	beq.n	8000d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <HAL_RCC_OscConfig+0x248>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d28:	f7ff fc34 	bl	8000594 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d30:	f7ff fc30 	bl	8000594 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e167      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <HAL_RCC_OscConfig+0x240>)
 8000d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f0      	beq.n	8000d30 <HAL_RCC_OscConfig+0x200>
 8000d4e:	e01b      	b.n	8000d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <HAL_RCC_OscConfig+0x248>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d56:	f7ff fc1d 	bl	8000594 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5c:	e00e      	b.n	8000d7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fc19 	bl	8000594 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d907      	bls.n	8000d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e150      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
 8000d70:	40023800 	.word	0x40023800
 8000d74:	42470000 	.word	0x42470000
 8000d78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d7c:	4b88      	ldr	r3, [pc, #544]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1ea      	bne.n	8000d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 8097 	beq.w	8000ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d9a:	4b81      	ldr	r3, [pc, #516]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10f      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	4b7d      	ldr	r3, [pc, #500]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a7c      	ldr	r2, [pc, #496]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b7a      	ldr	r3, [pc, #488]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc6:	4b77      	ldr	r3, [pc, #476]	@ (8000fa4 <HAL_RCC_OscConfig+0x474>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d118      	bne.n	8000e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dd2:	4b74      	ldr	r3, [pc, #464]	@ (8000fa4 <HAL_RCC_OscConfig+0x474>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a73      	ldr	r2, [pc, #460]	@ (8000fa4 <HAL_RCC_OscConfig+0x474>)
 8000dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dde:	f7ff fbd9 	bl	8000594 <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de6:	f7ff fbd5 	bl	8000594 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e10c      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df8:	4b6a      	ldr	r3, [pc, #424]	@ (8000fa4 <HAL_RCC_OscConfig+0x474>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0f0      	beq.n	8000de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d106      	bne.n	8000e1a <HAL_RCC_OscConfig+0x2ea>
 8000e0c:	4b64      	ldr	r3, [pc, #400]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e10:	4a63      	ldr	r2, [pc, #396]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e18:	e01c      	b.n	8000e54 <HAL_RCC_OscConfig+0x324>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b05      	cmp	r3, #5
 8000e20:	d10c      	bne.n	8000e3c <HAL_RCC_OscConfig+0x30c>
 8000e22:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e26:	4a5e      	ldr	r2, [pc, #376]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e32:	4a5b      	ldr	r2, [pc, #364]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e3a:	e00b      	b.n	8000e54 <HAL_RCC_OscConfig+0x324>
 8000e3c:	4b58      	ldr	r3, [pc, #352]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e40:	4a57      	ldr	r2, [pc, #348]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e42:	f023 0301 	bic.w	r3, r3, #1
 8000e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e48:	4b55      	ldr	r3, [pc, #340]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e4c:	4a54      	ldr	r2, [pc, #336]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e4e:	f023 0304 	bic.w	r3, r3, #4
 8000e52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d015      	beq.n	8000e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fb9a 	bl	8000594 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e62:	e00a      	b.n	8000e7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e64:	f7ff fb96 	bl	8000594 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e0cb      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7a:	4b49      	ldr	r3, [pc, #292]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0ee      	beq.n	8000e64 <HAL_RCC_OscConfig+0x334>
 8000e86:	e014      	b.n	8000eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e88:	f7ff fb84 	bl	8000594 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8e:	e00a      	b.n	8000ea6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e90:	f7ff fb80 	bl	8000594 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e0b5      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1ee      	bne.n	8000e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d105      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb8:	4b39      	ldr	r3, [pc, #228]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	4a38      	ldr	r2, [pc, #224]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80a1 	beq.w	8001010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ece:	4b34      	ldr	r3, [pc, #208]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d05c      	beq.n	8000f94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d141      	bne.n	8000f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee2:	4b31      	ldr	r3, [pc, #196]	@ (8000fa8 <HAL_RCC_OscConfig+0x478>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fb54 	bl	8000594 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef0:	f7ff fb50 	bl	8000594 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e087      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69da      	ldr	r2, [r3, #28]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f24:	085b      	lsrs	r3, r3, #1
 8000f26:	3b01      	subs	r3, #1
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f30:	061b      	lsls	r3, r3, #24
 8000f32:	491b      	ldr	r1, [pc, #108]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_RCC_OscConfig+0x478>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3e:	f7ff fb29 	bl	8000594 <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f46:	f7ff fb25 	bl	8000594 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e05c      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f0      	beq.n	8000f46 <HAL_RCC_OscConfig+0x416>
 8000f64:	e054      	b.n	8001010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_RCC_OscConfig+0x478>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fb12 	bl	8000594 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f74:	f7ff fb0e 	bl	8000594 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e045      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_RCC_OscConfig+0x470>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f0      	bne.n	8000f74 <HAL_RCC_OscConfig+0x444>
 8000f92:	e03d      	b.n	8001010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d107      	bne.n	8000fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e038      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000
 8000fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <HAL_RCC_OscConfig+0x4ec>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d028      	beq.n	800100c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d121      	bne.n	800100c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d11a      	bne.n	800100c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8000fdc:	4013      	ands	r3, r2
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d111      	bne.n	800100c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff2:	085b      	lsrs	r3, r3, #1
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d107      	bne.n	800100c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001008:	429a      	cmp	r2, r3
 800100a:	d001      	beq.n	8001010 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e0cc      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001034:	4b68      	ldr	r3, [pc, #416]	@ (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d90c      	bls.n	800105c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	4b65      	ldr	r3, [pc, #404]	@ (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b63      	ldr	r3, [pc, #396]	@ (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0b8      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d020      	beq.n	80010aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001074:	4b59      	ldr	r3, [pc, #356]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a58      	ldr	r2, [pc, #352]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800107e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800108c:	4b53      	ldr	r3, [pc, #332]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4a52      	ldr	r2, [pc, #328]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001098:	4b50      	ldr	r3, [pc, #320]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	494d      	ldr	r1, [pc, #308]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d044      	beq.n	8001140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d107      	bne.n	80010ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b47      	ldr	r3, [pc, #284]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d119      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e07f      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d003      	beq.n	80010de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d107      	bne.n	80010ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010de:	4b3f      	ldr	r3, [pc, #252]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e06f      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ee:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e067      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010fe:	4b37      	ldr	r3, [pc, #220]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f023 0203 	bic.w	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4934      	ldr	r1, [pc, #208]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	4313      	orrs	r3, r2
 800110e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001110:	f7ff fa40 	bl	8000594 <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	e00a      	b.n	800112e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001118:	f7ff fa3c 	bl	8000594 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001126:	4293      	cmp	r3, r2
 8001128:	d901      	bls.n	800112e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e04f      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112e:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 020c 	and.w	r2, r3, #12
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	429a      	cmp	r2, r3
 800113e:	d1eb      	bne.n	8001118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001140:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d20c      	bcs.n	8001168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114e:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001156:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d001      	beq.n	8001168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e032      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001174:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4916      	ldr	r1, [pc, #88]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d009      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001192:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	490e      	ldr	r1, [pc, #56]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a6:	f000 f821 	bl	80011ec <HAL_RCC_GetSysClockFreq>
 80011aa:	4602      	mov	r2, r0
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	490a      	ldr	r1, [pc, #40]	@ (80011e0 <HAL_RCC_ClockConfig+0x1c0>)
 80011b8:	5ccb      	ldrb	r3, [r1, r3]
 80011ba:	fa22 f303 	lsr.w	r3, r2, r3
 80011be:	4a09      	ldr	r2, [pc, #36]	@ (80011e4 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_RCC_ClockConfig+0x1c8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f9a0 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00
 80011dc:	40023800 	.word	0x40023800
 80011e0:	080016ec 	.word	0x080016ec
 80011e4:	20000010 	.word	0x20000010
 80011e8:	20000000 	.word	0x20000000

080011ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f0:	b090      	sub	sp, #64	@ 0x40
 80011f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80011f8:	2300      	movs	r3, #0
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001204:	4b59      	ldr	r3, [pc, #356]	@ (800136c <HAL_RCC_GetSysClockFreq+0x180>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b08      	cmp	r3, #8
 800120e:	d00d      	beq.n	800122c <HAL_RCC_GetSysClockFreq+0x40>
 8001210:	2b08      	cmp	r3, #8
 8001212:	f200 80a1 	bhi.w	8001358 <HAL_RCC_GetSysClockFreq+0x16c>
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <HAL_RCC_GetSysClockFreq+0x34>
 800121a:	2b04      	cmp	r3, #4
 800121c:	d003      	beq.n	8001226 <HAL_RCC_GetSysClockFreq+0x3a>
 800121e:	e09b      	b.n	8001358 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001220:	4b53      	ldr	r3, [pc, #332]	@ (8001370 <HAL_RCC_GetSysClockFreq+0x184>)
 8001222:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001224:	e09b      	b.n	800135e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001226:	4b53      	ldr	r3, [pc, #332]	@ (8001374 <HAL_RCC_GetSysClockFreq+0x188>)
 8001228:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800122a:	e098      	b.n	800135e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800122c:	4b4f      	ldr	r3, [pc, #316]	@ (800136c <HAL_RCC_GetSysClockFreq+0x180>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001236:	4b4d      	ldr	r3, [pc, #308]	@ (800136c <HAL_RCC_GetSysClockFreq+0x180>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d028      	beq.n	8001294 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001242:	4b4a      	ldr	r3, [pc, #296]	@ (800136c <HAL_RCC_GetSysClockFreq+0x180>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	099b      	lsrs	r3, r3, #6
 8001248:	2200      	movs	r2, #0
 800124a:	623b      	str	r3, [r7, #32]
 800124c:	627a      	str	r2, [r7, #36]	@ 0x24
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001254:	2100      	movs	r1, #0
 8001256:	4b47      	ldr	r3, [pc, #284]	@ (8001374 <HAL_RCC_GetSysClockFreq+0x188>)
 8001258:	fb03 f201 	mul.w	r2, r3, r1
 800125c:	2300      	movs	r3, #0
 800125e:	fb00 f303 	mul.w	r3, r0, r3
 8001262:	4413      	add	r3, r2
 8001264:	4a43      	ldr	r2, [pc, #268]	@ (8001374 <HAL_RCC_GetSysClockFreq+0x188>)
 8001266:	fba0 1202 	umull	r1, r2, r0, r2
 800126a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800126c:	460a      	mov	r2, r1
 800126e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001272:	4413      	add	r3, r2
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001278:	2200      	movs	r2, #0
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	61fa      	str	r2, [r7, #28]
 800127e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001282:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001286:	f7fe ffa7 	bl	80001d8 <__aeabi_uldivmod>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4613      	mov	r3, r2
 8001290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001292:	e053      	b.n	800133c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001294:	4b35      	ldr	r3, [pc, #212]	@ (800136c <HAL_RCC_GetSysClockFreq+0x180>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	2200      	movs	r2, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	617a      	str	r2, [r7, #20]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80012a6:	f04f 0b00 	mov.w	fp, #0
 80012aa:	4652      	mov	r2, sl
 80012ac:	465b      	mov	r3, fp
 80012ae:	f04f 0000 	mov.w	r0, #0
 80012b2:	f04f 0100 	mov.w	r1, #0
 80012b6:	0159      	lsls	r1, r3, #5
 80012b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012bc:	0150      	lsls	r0, r2, #5
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	ebb2 080a 	subs.w	r8, r2, sl
 80012c6:	eb63 090b 	sbc.w	r9, r3, fp
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012de:	ebb2 0408 	subs.w	r4, r2, r8
 80012e2:	eb63 0509 	sbc.w	r5, r3, r9
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	00eb      	lsls	r3, r5, #3
 80012f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012f4:	00e2      	lsls	r2, r4, #3
 80012f6:	4614      	mov	r4, r2
 80012f8:	461d      	mov	r5, r3
 80012fa:	eb14 030a 	adds.w	r3, r4, sl
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	eb45 030b 	adc.w	r3, r5, fp
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001312:	4629      	mov	r1, r5
 8001314:	028b      	lsls	r3, r1, #10
 8001316:	4621      	mov	r1, r4
 8001318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800131c:	4621      	mov	r1, r4
 800131e:	028a      	lsls	r2, r1, #10
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001326:	2200      	movs	r2, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	60fa      	str	r2, [r7, #12]
 800132c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001330:	f7fe ff52 	bl	80001d8 <__aeabi_uldivmod>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4613      	mov	r3, r2
 800133a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <HAL_RCC_GetSysClockFreq+0x180>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	3301      	adds	r3, #1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800134c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800134e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001356:	e002      	b.n	800135e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_RCC_GetSysClockFreq+0x184>)
 800135a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800135c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800135e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001360:	4618      	mov	r0, r3
 8001362:	3740      	adds	r7, #64	@ 0x40
 8001364:	46bd      	mov	sp, r7
 8001366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	00f42400 	.word	0x00f42400
 8001374:	017d7840 	.word	0x017d7840

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f7ff f8a4 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f820 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f000 f886 	bl	8001494 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  result = float1 * float2;
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <main+0x3c>)
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <main+0x40>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <main+0x44>)
 800139a:	edc3 7a00 	vstr	s15, [r3]

	  HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 800139e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a2:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <main+0x48>)
 80013a4:	f7ff fba9 	bl	8000afa <HAL_GPIO_TogglePin>
	  HAL_Delay(1000); //Delay 1 Seconds
 80013a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ac:	f7ff f8fe 	bl	80005ac <HAL_Delay>
	  result = float1 * float2;
 80013b0:	bf00      	nop
 80013b2:	e7e9      	b.n	8001388 <main+0x10>
 80013b4:	20000008 	.word	0x20000008
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	20000034 	.word	0x20000034
 80013c0:	40020800 	.word	0x40020800

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	@ 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	2230      	movs	r2, #48	@ 0x30
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f951 	bl	800167a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <SystemClock_Config+0xc8>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	4a26      	ldr	r2, [pc, #152]	@ (800148c <SystemClock_Config+0xc8>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <SystemClock_Config+0xc8>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <SystemClock_Config+0xcc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a20      	ldr	r2, [pc, #128]	@ (8001490 <SystemClock_Config+0xcc>)
 800140e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <SystemClock_Config+0xcc>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	2302      	movs	r3, #2
 800142c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001434:	230c      	movs	r3, #12
 8001436:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001438:	2360      	movs	r3, #96	@ 0x60
 800143a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800143c:	2302      	movs	r3, #2
 800143e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001440:	2304      	movs	r3, #4
 8001442:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fb71 	bl	8000b30 <HAL_RCC_OscConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001454:	f000 f870 	bl	8001538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001458:	230f      	movs	r3, #15
 800145a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145c:	2302      	movs	r3, #2
 800145e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001468:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2103      	movs	r1, #3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fdd3 	bl	8001020 <HAL_RCC_ClockConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001480:	f000 f85a 	bl	8001538 <Error_Handler>
  }
}
 8001484:	bf00      	nop
 8001486:	3750      	adds	r7, #80	@ 0x50
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <MX_GPIO_Init+0x9c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001530 <MX_GPIO_Init+0x9c>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_GPIO_Init+0x9c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <MX_GPIO_Init+0x9c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <MX_GPIO_Init+0x9c>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <MX_GPIO_Init+0x9c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <MX_GPIO_Init+0x9c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <MX_GPIO_Init+0x9c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_GPIO_Init+0x9c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001504:	480b      	ldr	r0, [pc, #44]	@ (8001534 <MX_GPIO_Init+0xa0>)
 8001506:	f7ff fadf 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_LED_Pin */
  GPIO_InitStruct.Pin = Blue_LED_Pin;
 800150a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800150e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Blue_LED_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	4804      	ldr	r0, [pc, #16]	@ (8001534 <MX_GPIO_Init+0xa0>)
 8001524:	f7ff f94c 	bl	80007c0 <HAL_GPIO_Init>

}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	4a0f      	ldr	r2, [pc, #60]	@ (8001594 <HAL_MspInit+0x4c>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800155c:	6453      	str	r3, [r2, #68]	@ 0x44
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <HAL_MspInit+0x4c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	bf00      	nop
 80015ac:	e7fd      	b.n	80015aa <HardFault_Handler+0x4>

080015ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b2:	bf00      	nop
 80015b4:	e7fd      	b.n	80015b2 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	bf00      	nop
 80015bc:	e7fd      	b.n	80015ba <BusFault_Handler+0x4>

080015be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c2:	bf00      	nop
 80015c4:	e7fd      	b.n	80015c2 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f7fe ffba 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <SystemInit+0x28>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001606:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <SystemInit+0x28>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <SystemInit+0x28>)
 8001612:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001616:	609a      	str	r2, [r3, #8]
#endif
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001660 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800162c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800162e:	e003      	b.n	8001638 <LoopCopyDataInit>

08001630 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001632:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001634:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001636:	3104      	adds	r1, #4

08001638 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001638:	480b      	ldr	r0, [pc, #44]	@ (8001668 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800163c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800163e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001640:	d3f6      	bcc.n	8001630 <CopyDataInit>
  ldr  r2, =_sbss
 8001642:	4a0b      	ldr	r2, [pc, #44]	@ (8001670 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001644:	e002      	b.n	800164c <LoopFillZerobss>

08001646 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001646:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001648:	f842 3b04 	str.w	r3, [r2], #4

0800164c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800164e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001650:	d3f9      	bcc.n	8001646 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001652:	f7ff ffd3 	bl	80015fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001656:	f000 f819 	bl	800168c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff fe8d 	bl	8001378 <main>
  bx  lr    
 800165e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001660:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001664:	0800170c 	.word	0x0800170c
  ldr  r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800166c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001670:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001674:	20000038 	.word	0x20000038

08001678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC_IRQHandler>

0800167a <memset>:
 800167a:	4402      	add	r2, r0
 800167c:	4603      	mov	r3, r0
 800167e:	4293      	cmp	r3, r2
 8001680:	d100      	bne.n	8001684 <memset+0xa>
 8001682:	4770      	bx	lr
 8001684:	f803 1b01 	strb.w	r1, [r3], #1
 8001688:	e7f9      	b.n	800167e <memset+0x4>
	...

0800168c <__libc_init_array>:
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	4d0d      	ldr	r5, [pc, #52]	@ (80016c4 <__libc_init_array+0x38>)
 8001690:	4c0d      	ldr	r4, [pc, #52]	@ (80016c8 <__libc_init_array+0x3c>)
 8001692:	1b64      	subs	r4, r4, r5
 8001694:	10a4      	asrs	r4, r4, #2
 8001696:	2600      	movs	r6, #0
 8001698:	42a6      	cmp	r6, r4
 800169a:	d109      	bne.n	80016b0 <__libc_init_array+0x24>
 800169c:	4d0b      	ldr	r5, [pc, #44]	@ (80016cc <__libc_init_array+0x40>)
 800169e:	4c0c      	ldr	r4, [pc, #48]	@ (80016d0 <__libc_init_array+0x44>)
 80016a0:	f000 f818 	bl	80016d4 <_init>
 80016a4:	1b64      	subs	r4, r4, r5
 80016a6:	10a4      	asrs	r4, r4, #2
 80016a8:	2600      	movs	r6, #0
 80016aa:	42a6      	cmp	r6, r4
 80016ac:	d105      	bne.n	80016ba <__libc_init_array+0x2e>
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b4:	4798      	blx	r3
 80016b6:	3601      	adds	r6, #1
 80016b8:	e7ee      	b.n	8001698 <__libc_init_array+0xc>
 80016ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80016be:	4798      	blx	r3
 80016c0:	3601      	adds	r6, #1
 80016c2:	e7f2      	b.n	80016aa <__libc_init_array+0x1e>
 80016c4:	08001704 	.word	0x08001704
 80016c8:	08001704 	.word	0x08001704
 80016cc:	08001704 	.word	0x08001704
 80016d0:	08001708 	.word	0x08001708

080016d4 <_init>:
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	bf00      	nop
 80016d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016da:	bc08      	pop	{r3}
 80016dc:	469e      	mov	lr, r3
 80016de:	4770      	bx	lr

080016e0 <_fini>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	bf00      	nop
 80016e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e6:	bc08      	pop	{r3}
 80016e8:	469e      	mov	lr, r3
 80016ea:	4770      	bx	lr
