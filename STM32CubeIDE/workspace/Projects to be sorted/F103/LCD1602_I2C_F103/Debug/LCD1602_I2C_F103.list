
LCD1602_I2C_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08005118  08005118  00006118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054cc  080054cc  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d4  080054d4  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d4  080054d4  000064d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054d8  080054d8  000064d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080054dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001d4  080056b0  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080056b0  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006822  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001658  00000000  00000000  0000da1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0000f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c3  00000000  00000000  0000f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a02  00000000  00000000  0000fddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d5e  00000000  00000000  000277dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ea8  00000000  00000000  0003153b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b53e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ddc  00000000  00000000  000b5428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000b8204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005100 	.word	0x08005100

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005100 	.word	0x08005100

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f023 030f 	bic.w	r3, r3, #15
 8000a98:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	f043 030c 	orr.w	r3, r3, #12
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000ab4:	7bbb      	ldrb	r3, [r7, #14]
 8000ab6:	f043 030c 	orr.w	r3, r3, #12
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ac8:	f107 0208 	add.w	r2, r7, #8
 8000acc:	2364      	movs	r3, #100	@ 0x64
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	214e      	movs	r1, #78	@ 0x4e
 8000ad4:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <lcd_send_cmd+0x5c>)
 8000ad6:	f000 ff31 	bl	800193c <HAL_I2C_Master_Transmit>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001f0 	.word	0x200001f0

08000ae8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f023 030f 	bic.w	r3, r3, #15
 8000af8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	f043 030d 	orr.w	r3, r3, #13
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	f043 0309 	orr.w	r3, r3, #9
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	f043 030d 	orr.w	r3, r3, #13
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	f043 0309 	orr.w	r3, r3, #9
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b28:	f107 0208 	add.w	r2, r7, #8
 8000b2c:	2364      	movs	r3, #100	@ 0x64
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2304      	movs	r3, #4
 8000b32:	214e      	movs	r1, #78	@ 0x4e
 8000b34:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <lcd_send_data+0x5c>)
 8000b36:	f000 ff01 	bl	800193c <HAL_I2C_Master_Transmit>
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200001f0 	.word	0x200001f0

08000b48 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
    switch (row)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <lcd_put_cur+0x18>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <lcd_put_cur+0x22>
 8000b5e:	e009      	b.n	8000b74 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b66:	603b      	str	r3, [r7, #0]
            break;
 8000b68:	e004      	b.n	8000b74 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000b70:	603b      	str	r3, [r7, #0]
            break;
 8000b72:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff85 	bl	8000a88 <lcd_send_cmd>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <lcd_init>:


void lcd_init (void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000b8a:	2032      	movs	r0, #50	@ 0x32
 8000b8c:	f000 fb06 	bl	800119c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b90:	2030      	movs	r0, #48	@ 0x30
 8000b92:	f7ff ff79 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000b96:	2005      	movs	r0, #5
 8000b98:	f000 fb00 	bl	800119c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b9c:	2030      	movs	r0, #48	@ 0x30
 8000b9e:	f7ff ff73 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f000 fafa 	bl	800119c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ba8:	2030      	movs	r0, #48	@ 0x30
 8000baa:	f7ff ff6d 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(10);
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f000 faf4 	bl	800119c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000bb4:	2020      	movs	r0, #32
 8000bb6:	f7ff ff67 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(10);
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f000 faee 	bl	800119c <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000bc0:	2028      	movs	r0, #40	@ 0x28
 8000bc2:	f7ff ff61 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f000 fae8 	bl	800119c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bcc:	2008      	movs	r0, #8
 8000bce:	f7ff ff5b 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f000 fae2 	bl	800119c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff ff55 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 fadc 	bl	800119c <HAL_Delay>
	HAL_Delay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 fad9 	bl	800119c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000bea:	2006      	movs	r0, #6
 8000bec:	f7ff ff4c 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fad3 	bl	800119c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000bf6:	200c      	movs	r0, #12
 8000bf8:	f7ff ff46 	bl	8000a88 <lcd_send_cmd>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000c08:	e006      	b.n	8000c18 <lcd_send_string+0x18>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff68 	bl	8000ae8 <lcd_send_data>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f4      	bne.n	8000c0a <lcd_send_string+0xa>
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 fa52 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f81e 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 f890 	bl	8000d5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c3c:	f000 f860 	bl	8000d00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c44:	f000 faaa 	bl	800119c <HAL_Delay>
// Display Strings
  lcd_init ();
 8000c48:	f7ff ff9d 	bl	8000b86 <lcd_init>
  lcd_put_cur(0, 0);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff ff7a 	bl	8000b48 <lcd_put_cur>
  lcd_send_string ("HELLO WORLD");
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <main+0x40>)
 8000c56:	f7ff ffd3 	bl	8000c00 <lcd_send_string>
  lcd_put_cur(1, 0);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f7ff ff73 	bl	8000b48 <lcd_put_cur>
  lcd_send_string("from CTECH");
 8000c62:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <main+0x44>)
 8000c64:	f7ff ffcc 	bl	8000c00 <lcd_send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <main+0x3c>
 8000c6c:	08005118 	.word	0x08005118
 8000c70:	08005124 	.word	0x08005124

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	@ 0x40
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	2228      	movs	r2, #40	@ 0x28
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fb0d 	bl	80032a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 f995 	bl	8001fec <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cc8:	f000 f876 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fc02 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cf2:	f000 f861 	bl	8000db8 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3740      	adds	r7, #64	@ 0x40
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <MX_I2C1_Init+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <MX_I2C1_Init+0x58>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d3e:	f000 fcb9 	bl	80016b4 <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 f836 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200001f0 	.word	0x200001f0
 8000d54:	40005400 	.word	0x40005400
 8000d58:	000186a0 	.word	0x000186a0

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_GPIO_Init+0x58>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a13      	ldr	r2, [pc, #76]	@ (8000db4 <MX_GPIO_Init+0x58>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_GPIO_Init+0x58>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_GPIO_Init+0x58>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <MX_GPIO_Init+0x58>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_GPIO_Init+0x58>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_GPIO_Init+0x58>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a07      	ldr	r2, [pc, #28]	@ (8000db4 <MX_GPIO_Init+0x58>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <MX_GPIO_Init+0x58>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40021000 	.word	0x40021000

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dec:	61d3      	str	r3, [r2, #28]
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_MspInit+0x60>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_MspInit+0x60>)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000

08000e28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a15      	ldr	r2, [pc, #84]	@ (8000e98 <HAL_I2C_MspInit+0x70>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d123      	bne.n	8000e90 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <HAL_I2C_MspInit+0x74>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a13      	ldr	r2, [pc, #76]	@ (8000e9c <HAL_I2C_MspInit+0x74>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_I2C_MspInit+0x74>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e60:	23c0      	movs	r3, #192	@ 0xc0
 8000e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e64:	2312      	movs	r3, #18
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	480b      	ldr	r0, [pc, #44]	@ (8000ea0 <HAL_I2C_MspInit+0x78>)
 8000e74:	f000 fa9a 	bl	80013ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_I2C_MspInit+0x74>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_I2C_MspInit+0x74>)
 8000e7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e82:	61d3      	str	r3, [r2, #28]
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <HAL_I2C_MspInit+0x74>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010c00 	.word	0x40010c00

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f936 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return 1;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <_kill>:

int _kill(int pid, int sig)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f14:	f002 fa18 	bl	8003348 <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2216      	movs	r2, #22
 8000f1c:	601a      	str	r2, [r3, #0]
  return -1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_exit>:

void _exit (int status)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f32:	f04f 31ff 	mov.w	r1, #4294967295
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffe7 	bl	8000f0a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <_exit+0x12>

08000f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	e00a      	b.n	8000f68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f52:	f3af 8000 	nop.w
 8000f56:	4601      	mov	r1, r0
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	b2ca      	uxtb	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf0      	blt.n	8000f52 <_read+0x12>
  }

  return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e009      	b.n	8000fa0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf1      	blt.n	8000f8c <_write+0x12>
  }
  return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_close>:

int _close(int file)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fd8:	605a      	str	r2, [r3, #4]
  return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <_isatty>:

int _isatty(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
	...

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f002 f980 	bl	8003348 <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20005000 	.word	0x20005000
 8001074:	00000400 	.word	0x00000400
 8001078:	20000244 	.word	0x20000244
 800107c:	20000398 	.word	0x20000398

08001080 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800108c:	f7ff fff8 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001092:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001094:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a09      	ldr	r2, [pc, #36]	@ (80010cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a8:	4c09      	ldr	r4, [pc, #36]	@ (80010d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b6:	f002 f94d 	bl	8003354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ba:	f7ff fdb7 	bl	8000c2c <main>
  bx lr
 80010be:	4770      	bx	lr
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80010c8:	080054dc 	.word	0x080054dc
  ldr r2, =_sbss
 80010cc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80010d0:	20000398 	.word	0x20000398

080010d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_2_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_Init+0x28>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <HAL_Init+0x28>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f92b 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fe66 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40022000 	.word	0x40022000

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f935 	bl	8001392 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f90b 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000000 	.word	0x20000000
 800115c:	20000008 	.word	0x20000008
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <HAL_IncTick+0x20>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000008 	.word	0x20000008
 8001184:	20000248 	.word	0x20000248

08001188 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	@ (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000248 	.word	0x20000248

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff0 	bl	8001188 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffe0 	bl	8001188 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	@ (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	@ (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	@ 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff90 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff49 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff5e 	bl	800122c <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb0 	bl	8001300 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b08b      	sub	sp, #44	@ 0x2c
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	e169      	b.n	8001694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c0:	2201      	movs	r2, #1
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	429a      	cmp	r2, r3
 80013da:	f040 8158 	bne.w	800168e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4a9a      	ldr	r2, [pc, #616]	@ (800164c <HAL_GPIO_Init+0x2a0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d05e      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 80013e8:	4a98      	ldr	r2, [pc, #608]	@ (800164c <HAL_GPIO_Init+0x2a0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d875      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 80013ee:	4a98      	ldr	r2, [pc, #608]	@ (8001650 <HAL_GPIO_Init+0x2a4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d058      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 80013f4:	4a96      	ldr	r2, [pc, #600]	@ (8001650 <HAL_GPIO_Init+0x2a4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d86f      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 80013fa:	4a96      	ldr	r2, [pc, #600]	@ (8001654 <HAL_GPIO_Init+0x2a8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d052      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 8001400:	4a94      	ldr	r2, [pc, #592]	@ (8001654 <HAL_GPIO_Init+0x2a8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d869      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 8001406:	4a94      	ldr	r2, [pc, #592]	@ (8001658 <HAL_GPIO_Init+0x2ac>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d04c      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 800140c:	4a92      	ldr	r2, [pc, #584]	@ (8001658 <HAL_GPIO_Init+0x2ac>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d863      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 8001412:	4a92      	ldr	r2, [pc, #584]	@ (800165c <HAL_GPIO_Init+0x2b0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d046      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 8001418:	4a90      	ldr	r2, [pc, #576]	@ (800165c <HAL_GPIO_Init+0x2b0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d85d      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 800141e:	2b12      	cmp	r3, #18
 8001420:	d82a      	bhi.n	8001478 <HAL_GPIO_Init+0xcc>
 8001422:	2b12      	cmp	r3, #18
 8001424:	d859      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 8001426:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <HAL_GPIO_Init+0x80>)
 8001428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142c:	080014a7 	.word	0x080014a7
 8001430:	08001481 	.word	0x08001481
 8001434:	08001493 	.word	0x08001493
 8001438:	080014d5 	.word	0x080014d5
 800143c:	080014db 	.word	0x080014db
 8001440:	080014db 	.word	0x080014db
 8001444:	080014db 	.word	0x080014db
 8001448:	080014db 	.word	0x080014db
 800144c:	080014db 	.word	0x080014db
 8001450:	080014db 	.word	0x080014db
 8001454:	080014db 	.word	0x080014db
 8001458:	080014db 	.word	0x080014db
 800145c:	080014db 	.word	0x080014db
 8001460:	080014db 	.word	0x080014db
 8001464:	080014db 	.word	0x080014db
 8001468:	080014db 	.word	0x080014db
 800146c:	080014db 	.word	0x080014db
 8001470:	08001489 	.word	0x08001489
 8001474:	0800149d 	.word	0x0800149d
 8001478:	4a79      	ldr	r2, [pc, #484]	@ (8001660 <HAL_GPIO_Init+0x2b4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147e:	e02c      	b.n	80014da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e029      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	3304      	adds	r3, #4
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e024      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	3308      	adds	r3, #8
 8001498:	623b      	str	r3, [r7, #32]
          break;
 800149a:	e01f      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	330c      	adds	r3, #12
 80014a2:	623b      	str	r3, [r7, #32]
          break;
 80014a4:	e01a      	b.n	80014dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ae:	2304      	movs	r3, #4
 80014b0:	623b      	str	r3, [r7, #32]
          break;
 80014b2:	e013      	b.n	80014dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d105      	bne.n	80014c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014bc:	2308      	movs	r3, #8
 80014be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	611a      	str	r2, [r3, #16]
          break;
 80014c6:	e009      	b.n	80014dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c8:	2308      	movs	r3, #8
 80014ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	615a      	str	r2, [r3, #20]
          break;
 80014d2:	e003      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x130>
          break;
 80014da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2bff      	cmp	r3, #255	@ 0xff
 80014e0:	d801      	bhi.n	80014e6 <HAL_GPIO_Init+0x13a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	e001      	b.n	80014ea <HAL_GPIO_Init+0x13e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3304      	adds	r3, #4
 80014ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2bff      	cmp	r3, #255	@ 0xff
 80014f0:	d802      	bhi.n	80014f8 <HAL_GPIO_Init+0x14c>
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	e002      	b.n	80014fe <HAL_GPIO_Init+0x152>
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	3b08      	subs	r3, #8
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	210f      	movs	r1, #15
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	401a      	ands	r2, r3
 8001510:	6a39      	ldr	r1, [r7, #32]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	431a      	orrs	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80b1 	beq.w	800168e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800152c:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <HAL_GPIO_Init+0x2b8>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a4c      	ldr	r2, [pc, #304]	@ (8001664 <HAL_GPIO_Init+0x2b8>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <HAL_GPIO_Init+0x2b8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001544:	4a48      	ldr	r2, [pc, #288]	@ (8001668 <HAL_GPIO_Init+0x2bc>)
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001550:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a40      	ldr	r2, [pc, #256]	@ (800166c <HAL_GPIO_Init+0x2c0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d013      	beq.n	8001598 <HAL_GPIO_Init+0x1ec>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a3f      	ldr	r2, [pc, #252]	@ (8001670 <HAL_GPIO_Init+0x2c4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d00d      	beq.n	8001594 <HAL_GPIO_Init+0x1e8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3e      	ldr	r2, [pc, #248]	@ (8001674 <HAL_GPIO_Init+0x2c8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d007      	beq.n	8001590 <HAL_GPIO_Init+0x1e4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3d      	ldr	r2, [pc, #244]	@ (8001678 <HAL_GPIO_Init+0x2cc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d101      	bne.n	800158c <HAL_GPIO_Init+0x1e0>
 8001588:	2303      	movs	r3, #3
 800158a:	e006      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 800158c:	2304      	movs	r3, #4
 800158e:	e004      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 8001590:	2302      	movs	r3, #2
 8001592:	e002      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 8001598:	2300      	movs	r3, #0
 800159a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800159c:	f002 0203 	and.w	r2, r2, #3
 80015a0:	0092      	lsls	r2, r2, #2
 80015a2:	4093      	lsls	r3, r2
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015aa:	492f      	ldr	r1, [pc, #188]	@ (8001668 <HAL_GPIO_Init+0x2bc>)
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	492c      	ldr	r1, [pc, #176]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4928      	ldr	r1, [pc, #160]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b23      	ldr	r3, [pc, #140]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4922      	ldr	r1, [pc, #136]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	43db      	mvns	r3, r3
 8001602:	491e      	ldr	r1, [pc, #120]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001604:	4013      	ands	r3, r2
 8001606:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001614:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4918      	ldr	r1, [pc, #96]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	43db      	mvns	r3, r3
 800162a:	4914      	ldr	r1, [pc, #80]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 800162c:	4013      	ands	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d021      	beq.n	8001680 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	490e      	ldr	r1, [pc, #56]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
 8001648:	e021      	b.n	800168e <HAL_GPIO_Init+0x2e2>
 800164a:	bf00      	nop
 800164c:	10320000 	.word	0x10320000
 8001650:	10310000 	.word	0x10310000
 8001654:	10220000 	.word	0x10220000
 8001658:	10210000 	.word	0x10210000
 800165c:	10120000 	.word	0x10120000
 8001660:	10110000 	.word	0x10110000
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	40010800 	.word	0x40010800
 8001670:	40010c00 	.word	0x40010c00
 8001674:	40011000 	.word	0x40011000
 8001678:	40011400 	.word	0x40011400
 800167c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_GPIO_Init+0x304>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4909      	ldr	r1, [pc, #36]	@ (80016b0 <HAL_GPIO_Init+0x304>)
 800168a:	4013      	ands	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f ae8e 	bne.w	80013c0 <HAL_GPIO_Init+0x14>
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	372c      	adds	r7, #44	@ 0x2c
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e12b      	b.n	800191e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fba4 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2224      	movs	r2, #36	@ 0x24
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001718:	f001 f832 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 800171c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a81      	ldr	r2, [pc, #516]	@ (8001928 <HAL_I2C_Init+0x274>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d807      	bhi.n	8001738 <HAL_I2C_Init+0x84>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a80      	ldr	r2, [pc, #512]	@ (800192c <HAL_I2C_Init+0x278>)
 800172c:	4293      	cmp	r3, r2
 800172e:	bf94      	ite	ls
 8001730:	2301      	movls	r3, #1
 8001732:	2300      	movhi	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	e006      	b.n	8001746 <HAL_I2C_Init+0x92>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4a7d      	ldr	r2, [pc, #500]	@ (8001930 <HAL_I2C_Init+0x27c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	bf94      	ite	ls
 8001740:	2301      	movls	r3, #1
 8001742:	2300      	movhi	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0e7      	b.n	800191e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4a78      	ldr	r2, [pc, #480]	@ (8001934 <HAL_I2C_Init+0x280>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a6a      	ldr	r2, [pc, #424]	@ (8001928 <HAL_I2C_Init+0x274>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d802      	bhi.n	8001788 <HAL_I2C_Init+0xd4>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	e009      	b.n	800179c <HAL_I2C_Init+0xe8>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	4a69      	ldr	r2, [pc, #420]	@ (8001938 <HAL_I2C_Init+0x284>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	3301      	adds	r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	495c      	ldr	r1, [pc, #368]	@ (8001928 <HAL_I2C_Init+0x274>)
 80017b8:	428b      	cmp	r3, r1
 80017ba:	d819      	bhi.n	80017f0 <HAL_I2C_Init+0x13c>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e59      	subs	r1, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017d0:	400b      	ands	r3, r1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <HAL_I2C_Init+0x138>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e59      	subs	r1, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ea:	e051      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017ec:	2304      	movs	r3, #4
 80017ee:	e04f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_I2C_Init+0x168>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e58      	subs	r0, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e012      	b.n	8001842 <HAL_I2C_Init+0x18e>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	0099      	lsls	r1, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x196>
 8001846:	2301      	movs	r3, #1
 8001848:	e022      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10e      	bne.n	8001870 <HAL_I2C_Init+0x1bc>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e58      	subs	r0, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	440b      	add	r3, r1
 8001860:	fbb0 f3f3 	udiv	r3, r0, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800186e:	e00f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	fbb0 f3f3 	udiv	r3, r0, r3
 8001886:	3301      	adds	r3, #1
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	4313      	orrs	r3, r2
 8001896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69da      	ldr	r2, [r3, #28]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6911      	ldr	r1, [r2, #16]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68d2      	ldr	r2, [r2, #12]
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	000186a0 	.word	0x000186a0
 800192c:	001e847f 	.word	0x001e847f
 8001930:	003d08ff 	.word	0x003d08ff
 8001934:	431bde83 	.word	0x431bde83
 8001938:	10624dd3 	.word	0x10624dd3

0800193c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	460b      	mov	r3, r1
 800194a:	817b      	strh	r3, [r7, #10]
 800194c:	4613      	mov	r3, r2
 800194e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff fc1a 	bl	8001188 <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b20      	cmp	r3, #32
 8001960:	f040 80e0 	bne.w	8001b24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2319      	movs	r3, #25
 800196a:	2201      	movs	r2, #1
 800196c:	4970      	ldr	r1, [pc, #448]	@ (8001b30 <HAL_I2C_Master_Transmit+0x1f4>)
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f964 	bl	8001c3c <I2C_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800197a:	2302      	movs	r3, #2
 800197c:	e0d3      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_I2C_Master_Transmit+0x50>
 8001988:	2302      	movs	r3, #2
 800198a:	e0cc      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d007      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2221      	movs	r2, #33	@ 0x21
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2210      	movs	r2, #16
 80019ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	893a      	ldrh	r2, [r7, #8]
 80019e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4a50      	ldr	r2, [pc, #320]	@ (8001b34 <HAL_I2C_Master_Transmit+0x1f8>)
 80019f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019f4:	8979      	ldrh	r1, [r7, #10]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f89c 	bl	8001b38 <I2C_MasterRequestWrite>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e08d      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a20:	e066      	b.n	8001af0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	6a39      	ldr	r1, [r7, #32]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 fa22 	bl	8001e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00d      	beq.n	8001a4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d107      	bne.n	8001a4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06b      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_I2C_Master_Transmit+0x188>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d017      	beq.n	8001ac4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	6a39      	ldr	r1, [r7, #32]
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 fa19 	bl	8001f00 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00d      	beq.n	8001af0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d107      	bne.n	8001aec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e01a      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d194      	bne.n	8001a22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
  }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	00100002 	.word	0x00100002
 8001b34:	ffff0000 	.word	0xffff0000

08001b38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	460b      	mov	r3, r1
 8001b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d006      	beq.n	8001b62 <I2C_MasterRequestWrite+0x2a>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d003      	beq.n	8001b62 <I2C_MasterRequestWrite+0x2a>
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b60:	d108      	bne.n	8001b74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e00b      	b.n	8001b8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b78:	2b12      	cmp	r3, #18
 8001b7a:	d107      	bne.n	8001b8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f84f 	bl	8001c3c <I2C_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00d      	beq.n	8001bc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bb2:	d103      	bne.n	8001bbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e035      	b.n	8001c2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bc8:	d108      	bne.n	8001bdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bca:	897b      	ldrh	r3, [r7, #10]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	e01b      	b.n	8001c14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bdc:	897b      	ldrh	r3, [r7, #10]
 8001bde:	11db      	asrs	r3, r3, #7
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f003 0306 	and.w	r3, r3, #6
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f063 030f 	orn	r3, r3, #15
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	490e      	ldr	r1, [pc, #56]	@ (8001c34 <I2C_MasterRequestWrite+0xfc>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f898 	bl	8001d30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e010      	b.n	8001c2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4907      	ldr	r1, [pc, #28]	@ (8001c38 <I2C_MasterRequestWrite+0x100>)
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f888 	bl	8001d30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	00010008 	.word	0x00010008
 8001c38:	00010002 	.word	0x00010002

08001c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c4c:	e048      	b.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d044      	beq.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c56:	f7ff fa97 	bl	8001188 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d302      	bcc.n	8001c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d139      	bne.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d10d      	bne.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	4013      	ands	r3, r2
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	e00c      	b.n	8001cac <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d116      	bne.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f043 0220 	orr.w	r2, r3, #32
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e023      	b.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	0c1b      	lsrs	r3, r3, #16
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d10d      	bne.n	8001d06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	43da      	mvns	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	e00c      	b.n	8001d20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	4013      	ands	r3, r2
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d093      	beq.n	8001c4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d3e:	e071      	b.n	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d4e:	d123      	bne.n	8001d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f043 0204 	orr.w	r2, r3, #4
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e067      	b.n	8001e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9e:	d041      	beq.n	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da0:	f7ff f9f2 	bl	8001188 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d302      	bcc.n	8001db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d136      	bne.n	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	0c1b      	lsrs	r3, r3, #16
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d10c      	bne.n	8001dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf14      	ite	ne
 8001dd2:	2301      	movne	r3, #1
 8001dd4:	2300      	moveq	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	e00b      	b.n	8001df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	43da      	mvns	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	4013      	ands	r3, r2
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f043 0220 	orr.w	r2, r3, #32
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e021      	b.n	8001e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10c      	bne.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	43da      	mvns	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf14      	ite	ne
 8001e40:	2301      	movne	r3, #1
 8001e42:	2300      	moveq	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e00b      	b.n	8001e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4013      	ands	r3, r2
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	2301      	movne	r3, #1
 8001e5c:	2300      	moveq	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f47f af6d 	bne.w	8001d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e7c:	e034      	b.n	8001ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f886 	bl	8001f90 <I2C_IsAcknowledgeFailed>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e034      	b.n	8001ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d028      	beq.n	8001ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e96:	f7ff f977 	bl	8001188 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d11d      	bne.n	8001ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb6:	2b80      	cmp	r3, #128	@ 0x80
 8001eb8:	d016      	beq.n	8001ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef2:	2b80      	cmp	r3, #128	@ 0x80
 8001ef4:	d1c3      	bne.n	8001e7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f0c:	e034      	b.n	8001f78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f83e 	bl	8001f90 <I2C_IsAcknowledgeFailed>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e034      	b.n	8001f88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d028      	beq.n	8001f78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f26:	f7ff f92f 	bl	8001188 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d302      	bcc.n	8001f3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d11d      	bne.n	8001f78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d016      	beq.n	8001f78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f043 0220 	orr.w	r2, r3, #32
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e007      	b.n	8001f88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d1c3      	bne.n	8001f0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa6:	d11b      	bne.n	8001fe0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	f043 0204 	orr.w	r2, r3, #4
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e272      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8087 	beq.w	800211a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800200c:	4b92      	ldr	r3, [pc, #584]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	2b04      	cmp	r3, #4
 8002016:	d00c      	beq.n	8002032 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002018:	4b8f      	ldr	r3, [pc, #572]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b08      	cmp	r3, #8
 8002022:	d112      	bne.n	800204a <HAL_RCC_OscConfig+0x5e>
 8002024:	4b8c      	ldr	r3, [pc, #560]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800202c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002030:	d10b      	bne.n	800204a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002032:	4b89      	ldr	r3, [pc, #548]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d06c      	beq.n	8002118 <HAL_RCC_OscConfig+0x12c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d168      	bne.n	8002118 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e24c      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x76>
 8002054:	4b80      	ldr	r3, [pc, #512]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a7f      	ldr	r2, [pc, #508]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e02e      	b.n	80020c0 <HAL_RCC_OscConfig+0xd4>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x98>
 800206a:	4b7b      	ldr	r3, [pc, #492]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a7a      	ldr	r2, [pc, #488]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b78      	ldr	r3, [pc, #480]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a77      	ldr	r2, [pc, #476]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0xd4>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0xbc>
 800208e:	4b72      	ldr	r3, [pc, #456]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a71      	ldr	r2, [pc, #452]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a6e      	ldr	r2, [pc, #440]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0xd4>
 80020a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b68      	ldr	r3, [pc, #416]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a67      	ldr	r2, [pc, #412]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff f85e 	bl	8001188 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff f85a 	bl	8001188 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	@ 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e200      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0xe4>
 80020ee:	e014      	b.n	800211a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff f84a 	bl	8001188 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff f846 	bl	8001188 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	@ 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1ec      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210a:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x10c>
 8002116:	e000      	b.n	800211a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d063      	beq.n	80021ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002126:	4b4c      	ldr	r3, [pc, #304]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002132:	4b49      	ldr	r3, [pc, #292]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b08      	cmp	r3, #8
 800213c:	d11c      	bne.n	8002178 <HAL_RCC_OscConfig+0x18c>
 800213e:	4b46      	ldr	r3, [pc, #280]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	4b43      	ldr	r3, [pc, #268]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x176>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e1c0      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b3d      	ldr	r3, [pc, #244]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4939      	ldr	r1, [pc, #228]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	e03a      	b.n	80021ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002180:	4b36      	ldr	r3, [pc, #216]	@ (800225c <HAL_RCC_OscConfig+0x270>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe ffff 	bl	8001188 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218e:	f7fe fffb 	bl	8001188 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1a1      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4927      	ldr	r1, [pc, #156]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b26      	ldr	r3, [pc, #152]	@ (800225c <HAL_RCC_OscConfig+0x270>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe ffde 	bl	8001188 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d0:	f7fe ffda 	bl	8001188 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e180      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d03a      	beq.n	8002270 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d019      	beq.n	8002236 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <HAL_RCC_OscConfig+0x274>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7fe ffbe 	bl	8001188 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002210:	f7fe ffba 	bl	8001188 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e160      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <HAL_RCC_OscConfig+0x26c>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800222e:	2001      	movs	r0, #1
 8002230:	f000 faba 	bl	80027a8 <RCC_Delay>
 8002234:	e01c      	b.n	8002270 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_RCC_OscConfig+0x274>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223c:	f7fe ffa4 	bl	8001188 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002242:	e00f      	b.n	8002264 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002244:	f7fe ffa0 	bl	8001188 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d908      	bls.n	8002264 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e146      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	42420000 	.word	0x42420000
 8002260:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	4b92      	ldr	r3, [pc, #584]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e9      	bne.n	8002244 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80a6 	beq.w	80023ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002282:	4b8b      	ldr	r3, [pc, #556]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10d      	bne.n	80022aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	4b88      	ldr	r3, [pc, #544]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a87      	ldr	r2, [pc, #540]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b85      	ldr	r3, [pc, #532]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4b82      	ldr	r3, [pc, #520]	@ (80024b4 <HAL_RCC_OscConfig+0x4c8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d118      	bne.n	80022e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b6:	4b7f      	ldr	r3, [pc, #508]	@ (80024b4 <HAL_RCC_OscConfig+0x4c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7e      	ldr	r2, [pc, #504]	@ (80024b4 <HAL_RCC_OscConfig+0x4c8>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c2:	f7fe ff61 	bl	8001188 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ca:	f7fe ff5d 	bl	8001188 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b64      	cmp	r3, #100	@ 0x64
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e103      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	4b75      	ldr	r3, [pc, #468]	@ (80024b4 <HAL_RCC_OscConfig+0x4c8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x312>
 80022f0:	4b6f      	ldr	r3, [pc, #444]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a6e      	ldr	r2, [pc, #440]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	e02d      	b.n	800235a <HAL_RCC_OscConfig+0x36e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x334>
 8002306:	4b6a      	ldr	r3, [pc, #424]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a69      	ldr	r2, [pc, #420]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	4b67      	ldr	r3, [pc, #412]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a66      	ldr	r2, [pc, #408]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	6213      	str	r3, [r2, #32]
 800231e:	e01c      	b.n	800235a <HAL_RCC_OscConfig+0x36e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b05      	cmp	r3, #5
 8002326:	d10c      	bne.n	8002342 <HAL_RCC_OscConfig+0x356>
 8002328:	4b61      	ldr	r3, [pc, #388]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4a60      	ldr	r2, [pc, #384]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6213      	str	r3, [r2, #32]
 8002334:	4b5e      	ldr	r3, [pc, #376]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4a5d      	ldr	r2, [pc, #372]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	e00b      	b.n	800235a <HAL_RCC_OscConfig+0x36e>
 8002342:	4b5b      	ldr	r3, [pc, #364]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a5a      	ldr	r2, [pc, #360]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6213      	str	r3, [r2, #32]
 800234e:	4b58      	ldr	r3, [pc, #352]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a57      	ldr	r2, [pc, #348]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d015      	beq.n	800238e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7fe ff11 	bl	8001188 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe ff0d 	bl	8001188 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e0b1      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	4b4b      	ldr	r3, [pc, #300]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0ee      	beq.n	800236a <HAL_RCC_OscConfig+0x37e>
 800238c:	e014      	b.n	80023b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7fe fefb 	bl	8001188 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7fe fef7 	bl	8001188 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e09b      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	4b40      	ldr	r3, [pc, #256]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ee      	bne.n	8002396 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d105      	bne.n	80023ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4b3c      	ldr	r3, [pc, #240]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a3b      	ldr	r2, [pc, #236]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8087 	beq.w	80024e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d4:	4b36      	ldr	r3, [pc, #216]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d061      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d146      	bne.n	8002476 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e8:	4b33      	ldr	r3, [pc, #204]	@ (80024b8 <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fecb 	bl	8001188 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f6:	f7fe fec7 	bl	8001188 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e06d      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002408:	4b29      	ldr	r3, [pc, #164]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241c:	d108      	bne.n	8002430 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800241e:	4b24      	ldr	r3, [pc, #144]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4921      	ldr	r1, [pc, #132]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002430:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a19      	ldr	r1, [r3, #32]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	430b      	orrs	r3, r1
 8002442:	491b      	ldr	r1, [pc, #108]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002448:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <HAL_RCC_OscConfig+0x4cc>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7fe fe9b 	bl	8001188 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7fe fe97 	bl	8001188 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e03d      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x46a>
 8002474:	e035      	b.n	80024e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <HAL_RCC_OscConfig+0x4cc>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fe84 	bl	8001188 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe fe80 	bl	8001188 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e026      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002496:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x498>
 80024a2:	e01e      	b.n	80024e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e019      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
 80024b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024bc:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_RCC_OscConfig+0x500>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0d0      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b6a      	ldr	r3, [pc, #424]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d910      	bls.n	8002534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b67      	ldr	r3, [pc, #412]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4965      	ldr	r1, [pc, #404]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b63      	ldr	r3, [pc, #396]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800254c:	4b59      	ldr	r3, [pc, #356]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a58      	ldr	r2, [pc, #352]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002556:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002564:	4b53      	ldr	r3, [pc, #332]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a52      	ldr	r2, [pc, #328]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800256e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b50      	ldr	r3, [pc, #320]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	494d      	ldr	r1, [pc, #308]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d040      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b47      	ldr	r3, [pc, #284]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d115      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b41      	ldr	r3, [pc, #260]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e073      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3d      	ldr	r3, [pc, #244]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06b      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b39      	ldr	r3, [pc, #228]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4936      	ldr	r1, [pc, #216]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fdd2 	bl	8001188 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fdce 	bl	8001188 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e053      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2d      	ldr	r3, [pc, #180]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b27      	ldr	r3, [pc, #156]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d210      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4922      	ldr	r1, [pc, #136]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e032      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4916      	ldr	r1, [pc, #88]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266a:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	490e      	ldr	r1, [pc, #56]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800267e:	f000 f821 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	490a      	ldr	r1, [pc, #40]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a09      	ldr	r2, [pc, #36]	@ (80026bc <HAL_RCC_ClockConfig+0x1cc>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <HAL_RCC_ClockConfig+0x1d0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fd30 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08005130 	.word	0x08005130
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026de:	4b1e      	ldr	r3, [pc, #120]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x94>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x30>
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x36>
 80026f2:	e027      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f4:	4b19      	ldr	r3, [pc, #100]	@ (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 80026f6:	613b      	str	r3, [r7, #16]
      break;
 80026f8:	e027      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0c9b      	lsrs	r3, r3, #18
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	4a17      	ldr	r2, [pc, #92]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002712:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x94>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0c5b      	lsrs	r3, r3, #17
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	4a11      	ldr	r2, [pc, #68]	@ (8002764 <HAL_RCC_GetSysClockFreq+0xa0>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 8002726:	fb03 f202 	mul.w	r2, r3, r2
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e004      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a0c      	ldr	r2, [pc, #48]	@ (8002768 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	613b      	str	r3, [r7, #16]
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 8002746:	613b      	str	r3, [r7, #16]
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	693b      	ldr	r3, [r7, #16]
}
 800274c:	4618      	mov	r0, r3
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	08005148 	.word	0x08005148
 8002764:	08005158 	.word	0x08005158
 8002768:	003d0900 	.word	0x003d0900

0800276c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002770:	4b02      	ldr	r3, [pc, #8]	@ (800277c <HAL_RCC_GetHCLKFreq+0x10>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	20000000 	.word	0x20000000

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff2 	bl	800276c <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	08005140 	.word	0x08005140

080027a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b0:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <RCC_Delay+0x34>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <RCC_Delay+0x38>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0a5b      	lsrs	r3, r3, #9
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c4:	bf00      	nop
  }
  while (Delay --);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	60fa      	str	r2, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f9      	bne.n	80027c4 <RCC_Delay+0x1c>
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	20000000 	.word	0x20000000
 80027e0:	10624dd3 	.word	0x10624dd3

080027e4 <__cvt>:
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ea:	461d      	mov	r5, r3
 80027ec:	bfbb      	ittet	lt
 80027ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80027f2:	461d      	movlt	r5, r3
 80027f4:	2300      	movge	r3, #0
 80027f6:	232d      	movlt	r3, #45	@ 0x2d
 80027f8:	b088      	sub	sp, #32
 80027fa:	4614      	mov	r4, r2
 80027fc:	bfb8      	it	lt
 80027fe:	4614      	movlt	r4, r2
 8002800:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002802:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002804:	7013      	strb	r3, [r2, #0]
 8002806:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002808:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800280c:	f023 0820 	bic.w	r8, r3, #32
 8002810:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002814:	d005      	beq.n	8002822 <__cvt+0x3e>
 8002816:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800281a:	d100      	bne.n	800281e <__cvt+0x3a>
 800281c:	3601      	adds	r6, #1
 800281e:	2302      	movs	r3, #2
 8002820:	e000      	b.n	8002824 <__cvt+0x40>
 8002822:	2303      	movs	r3, #3
 8002824:	aa07      	add	r2, sp, #28
 8002826:	9204      	str	r2, [sp, #16]
 8002828:	aa06      	add	r2, sp, #24
 800282a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800282e:	e9cd 3600 	strd	r3, r6, [sp]
 8002832:	4622      	mov	r2, r4
 8002834:	462b      	mov	r3, r5
 8002836:	f000 fe4b 	bl	80034d0 <_dtoa_r>
 800283a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800283e:	4607      	mov	r7, r0
 8002840:	d119      	bne.n	8002876 <__cvt+0x92>
 8002842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002844:	07db      	lsls	r3, r3, #31
 8002846:	d50e      	bpl.n	8002866 <__cvt+0x82>
 8002848:	eb00 0906 	add.w	r9, r0, r6
 800284c:	2200      	movs	r2, #0
 800284e:	2300      	movs	r3, #0
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fe f8a8 	bl	80009a8 <__aeabi_dcmpeq>
 8002858:	b108      	cbz	r0, 800285e <__cvt+0x7a>
 800285a:	f8cd 901c 	str.w	r9, [sp, #28]
 800285e:	2230      	movs	r2, #48	@ 0x30
 8002860:	9b07      	ldr	r3, [sp, #28]
 8002862:	454b      	cmp	r3, r9
 8002864:	d31e      	bcc.n	80028a4 <__cvt+0xc0>
 8002866:	4638      	mov	r0, r7
 8002868:	9b07      	ldr	r3, [sp, #28]
 800286a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800286c:	1bdb      	subs	r3, r3, r7
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	b008      	add	sp, #32
 8002872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002876:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800287a:	eb00 0906 	add.w	r9, r0, r6
 800287e:	d1e5      	bne.n	800284c <__cvt+0x68>
 8002880:	7803      	ldrb	r3, [r0, #0]
 8002882:	2b30      	cmp	r3, #48	@ 0x30
 8002884:	d10a      	bne.n	800289c <__cvt+0xb8>
 8002886:	2200      	movs	r2, #0
 8002888:	2300      	movs	r3, #0
 800288a:	4620      	mov	r0, r4
 800288c:	4629      	mov	r1, r5
 800288e:	f7fe f88b 	bl	80009a8 <__aeabi_dcmpeq>
 8002892:	b918      	cbnz	r0, 800289c <__cvt+0xb8>
 8002894:	f1c6 0601 	rsb	r6, r6, #1
 8002898:	f8ca 6000 	str.w	r6, [sl]
 800289c:	f8da 3000 	ldr.w	r3, [sl]
 80028a0:	4499      	add	r9, r3
 80028a2:	e7d3      	b.n	800284c <__cvt+0x68>
 80028a4:	1c59      	adds	r1, r3, #1
 80028a6:	9107      	str	r1, [sp, #28]
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e7d9      	b.n	8002860 <__cvt+0x7c>

080028ac <__exponent>:
 80028ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028ae:	2900      	cmp	r1, #0
 80028b0:	bfb6      	itet	lt
 80028b2:	232d      	movlt	r3, #45	@ 0x2d
 80028b4:	232b      	movge	r3, #43	@ 0x2b
 80028b6:	4249      	neglt	r1, r1
 80028b8:	2909      	cmp	r1, #9
 80028ba:	7002      	strb	r2, [r0, #0]
 80028bc:	7043      	strb	r3, [r0, #1]
 80028be:	dd29      	ble.n	8002914 <__exponent+0x68>
 80028c0:	f10d 0307 	add.w	r3, sp, #7
 80028c4:	461d      	mov	r5, r3
 80028c6:	270a      	movs	r7, #10
 80028c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80028cc:	461a      	mov	r2, r3
 80028ce:	fb07 1416 	mls	r4, r7, r6, r1
 80028d2:	3430      	adds	r4, #48	@ 0x30
 80028d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80028d8:	460c      	mov	r4, r1
 80028da:	2c63      	cmp	r4, #99	@ 0x63
 80028dc:	4631      	mov	r1, r6
 80028de:	f103 33ff 	add.w	r3, r3, #4294967295
 80028e2:	dcf1      	bgt.n	80028c8 <__exponent+0x1c>
 80028e4:	3130      	adds	r1, #48	@ 0x30
 80028e6:	1e94      	subs	r4, r2, #2
 80028e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80028ec:	4623      	mov	r3, r4
 80028ee:	1c41      	adds	r1, r0, #1
 80028f0:	42ab      	cmp	r3, r5
 80028f2:	d30a      	bcc.n	800290a <__exponent+0x5e>
 80028f4:	f10d 0309 	add.w	r3, sp, #9
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	42ac      	cmp	r4, r5
 80028fc:	bf88      	it	hi
 80028fe:	2300      	movhi	r3, #0
 8002900:	3302      	adds	r3, #2
 8002902:	4403      	add	r3, r0
 8002904:	1a18      	subs	r0, r3, r0
 8002906:	b003      	add	sp, #12
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800290e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002912:	e7ed      	b.n	80028f0 <__exponent+0x44>
 8002914:	2330      	movs	r3, #48	@ 0x30
 8002916:	3130      	adds	r1, #48	@ 0x30
 8002918:	7083      	strb	r3, [r0, #2]
 800291a:	70c1      	strb	r1, [r0, #3]
 800291c:	1d03      	adds	r3, r0, #4
 800291e:	e7f1      	b.n	8002904 <__exponent+0x58>

08002920 <_printf_float>:
 8002920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002924:	b091      	sub	sp, #68	@ 0x44
 8002926:	460c      	mov	r4, r1
 8002928:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800292c:	4616      	mov	r6, r2
 800292e:	461f      	mov	r7, r3
 8002930:	4605      	mov	r5, r0
 8002932:	f000 fcbf 	bl	80032b4 <_localeconv_r>
 8002936:	6803      	ldr	r3, [r0, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	9308      	str	r3, [sp, #32]
 800293c:	f7fd fc08 	bl	8000150 <strlen>
 8002940:	2300      	movs	r3, #0
 8002942:	930e      	str	r3, [sp, #56]	@ 0x38
 8002944:	f8d8 3000 	ldr.w	r3, [r8]
 8002948:	9009      	str	r0, [sp, #36]	@ 0x24
 800294a:	3307      	adds	r3, #7
 800294c:	f023 0307 	bic.w	r3, r3, #7
 8002950:	f103 0208 	add.w	r2, r3, #8
 8002954:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002958:	f8d4 b000 	ldr.w	fp, [r4]
 800295c:	f8c8 2000 	str.w	r2, [r8]
 8002960:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002964:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800296a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800296e:	f04f 32ff 	mov.w	r2, #4294967295
 8002972:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002976:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800297a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bec <_printf_float+0x2cc>)
 800297c:	f7fe f846 	bl	8000a0c <__aeabi_dcmpun>
 8002980:	bb70      	cbnz	r0, 80029e0 <_printf_float+0xc0>
 8002982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002986:	f04f 32ff 	mov.w	r2, #4294967295
 800298a:	4b98      	ldr	r3, [pc, #608]	@ (8002bec <_printf_float+0x2cc>)
 800298c:	f7fe f820 	bl	80009d0 <__aeabi_dcmple>
 8002990:	bb30      	cbnz	r0, 80029e0 <_printf_float+0xc0>
 8002992:	2200      	movs	r2, #0
 8002994:	2300      	movs	r3, #0
 8002996:	4640      	mov	r0, r8
 8002998:	4649      	mov	r1, r9
 800299a:	f7fe f80f 	bl	80009bc <__aeabi_dcmplt>
 800299e:	b110      	cbz	r0, 80029a6 <_printf_float+0x86>
 80029a0:	232d      	movs	r3, #45	@ 0x2d
 80029a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029a6:	4a92      	ldr	r2, [pc, #584]	@ (8002bf0 <_printf_float+0x2d0>)
 80029a8:	4b92      	ldr	r3, [pc, #584]	@ (8002bf4 <_printf_float+0x2d4>)
 80029aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80029ae:	bf8c      	ite	hi
 80029b0:	4690      	movhi	r8, r2
 80029b2:	4698      	movls	r8, r3
 80029b4:	2303      	movs	r3, #3
 80029b6:	f04f 0900 	mov.w	r9, #0
 80029ba:	6123      	str	r3, [r4, #16]
 80029bc:	f02b 0304 	bic.w	r3, fp, #4
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	4633      	mov	r3, r6
 80029c4:	4621      	mov	r1, r4
 80029c6:	4628      	mov	r0, r5
 80029c8:	9700      	str	r7, [sp, #0]
 80029ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80029cc:	f000 f9d4 	bl	8002d78 <_printf_common>
 80029d0:	3001      	adds	r0, #1
 80029d2:	f040 8090 	bne.w	8002af6 <_printf_float+0x1d6>
 80029d6:	f04f 30ff 	mov.w	r0, #4294967295
 80029da:	b011      	add	sp, #68	@ 0x44
 80029dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	4640      	mov	r0, r8
 80029e6:	4649      	mov	r1, r9
 80029e8:	f7fe f810 	bl	8000a0c <__aeabi_dcmpun>
 80029ec:	b148      	cbz	r0, 8002a02 <_printf_float+0xe2>
 80029ee:	464b      	mov	r3, r9
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bfb8      	it	lt
 80029f4:	232d      	movlt	r3, #45	@ 0x2d
 80029f6:	4a80      	ldr	r2, [pc, #512]	@ (8002bf8 <_printf_float+0x2d8>)
 80029f8:	bfb8      	it	lt
 80029fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80029fe:	4b7f      	ldr	r3, [pc, #508]	@ (8002bfc <_printf_float+0x2dc>)
 8002a00:	e7d3      	b.n	80029aa <_printf_float+0x8a>
 8002a02:	6863      	ldr	r3, [r4, #4]
 8002a04:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	d13f      	bne.n	8002a8c <_printf_float+0x16c>
 8002a0c:	2306      	movs	r3, #6
 8002a0e:	6063      	str	r3, [r4, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002a16:	6023      	str	r3, [r4, #0]
 8002a18:	9206      	str	r2, [sp, #24]
 8002a1a:	aa0e      	add	r2, sp, #56	@ 0x38
 8002a1c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002a20:	aa0d      	add	r2, sp, #52	@ 0x34
 8002a22:	9203      	str	r2, [sp, #12]
 8002a24:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002a28:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002a2c:	6863      	ldr	r3, [r4, #4]
 8002a2e:	4642      	mov	r2, r8
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4628      	mov	r0, r5
 8002a34:	464b      	mov	r3, r9
 8002a36:	910a      	str	r1, [sp, #40]	@ 0x28
 8002a38:	f7ff fed4 	bl	80027e4 <__cvt>
 8002a3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002a3e:	4680      	mov	r8, r0
 8002a40:	2947      	cmp	r1, #71	@ 0x47
 8002a42:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002a44:	d128      	bne.n	8002a98 <_printf_float+0x178>
 8002a46:	1cc8      	adds	r0, r1, #3
 8002a48:	db02      	blt.n	8002a50 <_printf_float+0x130>
 8002a4a:	6863      	ldr	r3, [r4, #4]
 8002a4c:	4299      	cmp	r1, r3
 8002a4e:	dd40      	ble.n	8002ad2 <_printf_float+0x1b2>
 8002a50:	f1aa 0a02 	sub.w	sl, sl, #2
 8002a54:	fa5f fa8a 	uxtb.w	sl, sl
 8002a58:	4652      	mov	r2, sl
 8002a5a:	3901      	subs	r1, #1
 8002a5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002a60:	910d      	str	r1, [sp, #52]	@ 0x34
 8002a62:	f7ff ff23 	bl	80028ac <__exponent>
 8002a66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002a68:	4681      	mov	r9, r0
 8002a6a:	1813      	adds	r3, r2, r0
 8002a6c:	2a01      	cmp	r2, #1
 8002a6e:	6123      	str	r3, [r4, #16]
 8002a70:	dc02      	bgt.n	8002a78 <_printf_float+0x158>
 8002a72:	6822      	ldr	r2, [r4, #0]
 8002a74:	07d2      	lsls	r2, r2, #31
 8002a76:	d501      	bpl.n	8002a7c <_printf_float+0x15c>
 8002a78:	3301      	adds	r3, #1
 8002a7a:	6123      	str	r3, [r4, #16]
 8002a7c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d09e      	beq.n	80029c2 <_printf_float+0xa2>
 8002a84:	232d      	movs	r3, #45	@ 0x2d
 8002a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a8a:	e79a      	b.n	80029c2 <_printf_float+0xa2>
 8002a8c:	2947      	cmp	r1, #71	@ 0x47
 8002a8e:	d1bf      	bne.n	8002a10 <_printf_float+0xf0>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1bd      	bne.n	8002a10 <_printf_float+0xf0>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e7ba      	b.n	8002a0e <_printf_float+0xee>
 8002a98:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002a9c:	d9dc      	bls.n	8002a58 <_printf_float+0x138>
 8002a9e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002aa2:	d118      	bne.n	8002ad6 <_printf_float+0x1b6>
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	6863      	ldr	r3, [r4, #4]
 8002aa8:	dd0b      	ble.n	8002ac2 <_printf_float+0x1a2>
 8002aaa:	6121      	str	r1, [r4, #16]
 8002aac:	b913      	cbnz	r3, 8002ab4 <_printf_float+0x194>
 8002aae:	6822      	ldr	r2, [r4, #0]
 8002ab0:	07d0      	lsls	r0, r2, #31
 8002ab2:	d502      	bpl.n	8002aba <_printf_float+0x19a>
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	440b      	add	r3, r1
 8002ab8:	6123      	str	r3, [r4, #16]
 8002aba:	f04f 0900 	mov.w	r9, #0
 8002abe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002ac0:	e7dc      	b.n	8002a7c <_printf_float+0x15c>
 8002ac2:	b913      	cbnz	r3, 8002aca <_printf_float+0x1aa>
 8002ac4:	6822      	ldr	r2, [r4, #0]
 8002ac6:	07d2      	lsls	r2, r2, #31
 8002ac8:	d501      	bpl.n	8002ace <_printf_float+0x1ae>
 8002aca:	3302      	adds	r3, #2
 8002acc:	e7f4      	b.n	8002ab8 <_printf_float+0x198>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e7f2      	b.n	8002ab8 <_printf_float+0x198>
 8002ad2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002ad6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002ad8:	4299      	cmp	r1, r3
 8002ada:	db05      	blt.n	8002ae8 <_printf_float+0x1c8>
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	6121      	str	r1, [r4, #16]
 8002ae0:	07d8      	lsls	r0, r3, #31
 8002ae2:	d5ea      	bpl.n	8002aba <_printf_float+0x19a>
 8002ae4:	1c4b      	adds	r3, r1, #1
 8002ae6:	e7e7      	b.n	8002ab8 <_printf_float+0x198>
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	bfcc      	ite	gt
 8002aec:	2201      	movgt	r2, #1
 8002aee:	f1c1 0202 	rsble	r2, r1, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	e7e0      	b.n	8002ab8 <_printf_float+0x198>
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	055a      	lsls	r2, r3, #21
 8002afa:	d407      	bmi.n	8002b0c <_printf_float+0x1ec>
 8002afc:	6923      	ldr	r3, [r4, #16]
 8002afe:	4642      	mov	r2, r8
 8002b00:	4631      	mov	r1, r6
 8002b02:	4628      	mov	r0, r5
 8002b04:	47b8      	blx	r7
 8002b06:	3001      	adds	r0, #1
 8002b08:	d12b      	bne.n	8002b62 <_printf_float+0x242>
 8002b0a:	e764      	b.n	80029d6 <_printf_float+0xb6>
 8002b0c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002b10:	f240 80dc 	bls.w	8002ccc <_printf_float+0x3ac>
 8002b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f7fd ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8002b20:	2800      	cmp	r0, #0
 8002b22:	d033      	beq.n	8002b8c <_printf_float+0x26c>
 8002b24:	2301      	movs	r3, #1
 8002b26:	4631      	mov	r1, r6
 8002b28:	4628      	mov	r0, r5
 8002b2a:	4a35      	ldr	r2, [pc, #212]	@ (8002c00 <_printf_float+0x2e0>)
 8002b2c:	47b8      	blx	r7
 8002b2e:	3001      	adds	r0, #1
 8002b30:	f43f af51 	beq.w	80029d6 <_printf_float+0xb6>
 8002b34:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002b38:	4543      	cmp	r3, r8
 8002b3a:	db02      	blt.n	8002b42 <_printf_float+0x222>
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	07d8      	lsls	r0, r3, #31
 8002b40:	d50f      	bpl.n	8002b62 <_printf_float+0x242>
 8002b42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002b46:	4631      	mov	r1, r6
 8002b48:	4628      	mov	r0, r5
 8002b4a:	47b8      	blx	r7
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	f43f af42 	beq.w	80029d6 <_printf_float+0xb6>
 8002b52:	f04f 0900 	mov.w	r9, #0
 8002b56:	f108 38ff 	add.w	r8, r8, #4294967295
 8002b5a:	f104 0a1a 	add.w	sl, r4, #26
 8002b5e:	45c8      	cmp	r8, r9
 8002b60:	dc09      	bgt.n	8002b76 <_printf_float+0x256>
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	079b      	lsls	r3, r3, #30
 8002b66:	f100 8102 	bmi.w	8002d6e <_printf_float+0x44e>
 8002b6a:	68e0      	ldr	r0, [r4, #12]
 8002b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002b6e:	4298      	cmp	r0, r3
 8002b70:	bfb8      	it	lt
 8002b72:	4618      	movlt	r0, r3
 8002b74:	e731      	b.n	80029da <_printf_float+0xba>
 8002b76:	2301      	movs	r3, #1
 8002b78:	4652      	mov	r2, sl
 8002b7a:	4631      	mov	r1, r6
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	47b8      	blx	r7
 8002b80:	3001      	adds	r0, #1
 8002b82:	f43f af28 	beq.w	80029d6 <_printf_float+0xb6>
 8002b86:	f109 0901 	add.w	r9, r9, #1
 8002b8a:	e7e8      	b.n	8002b5e <_printf_float+0x23e>
 8002b8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	dc38      	bgt.n	8002c04 <_printf_float+0x2e4>
 8002b92:	2301      	movs	r3, #1
 8002b94:	4631      	mov	r1, r6
 8002b96:	4628      	mov	r0, r5
 8002b98:	4a19      	ldr	r2, [pc, #100]	@ (8002c00 <_printf_float+0x2e0>)
 8002b9a:	47b8      	blx	r7
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	f43f af1a 	beq.w	80029d6 <_printf_float+0xb6>
 8002ba2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002ba6:	ea59 0303 	orrs.w	r3, r9, r3
 8002baa:	d102      	bne.n	8002bb2 <_printf_float+0x292>
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	07d9      	lsls	r1, r3, #31
 8002bb0:	d5d7      	bpl.n	8002b62 <_printf_float+0x242>
 8002bb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002bb6:	4631      	mov	r1, r6
 8002bb8:	4628      	mov	r0, r5
 8002bba:	47b8      	blx	r7
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	f43f af0a 	beq.w	80029d6 <_printf_float+0xb6>
 8002bc2:	f04f 0a00 	mov.w	sl, #0
 8002bc6:	f104 0b1a 	add.w	fp, r4, #26
 8002bca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002bcc:	425b      	negs	r3, r3
 8002bce:	4553      	cmp	r3, sl
 8002bd0:	dc01      	bgt.n	8002bd6 <_printf_float+0x2b6>
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	e793      	b.n	8002afe <_printf_float+0x1de>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	465a      	mov	r2, fp
 8002bda:	4631      	mov	r1, r6
 8002bdc:	4628      	mov	r0, r5
 8002bde:	47b8      	blx	r7
 8002be0:	3001      	adds	r0, #1
 8002be2:	f43f aef8 	beq.w	80029d6 <_printf_float+0xb6>
 8002be6:	f10a 0a01 	add.w	sl, sl, #1
 8002bea:	e7ee      	b.n	8002bca <_printf_float+0x2aa>
 8002bec:	7fefffff 	.word	0x7fefffff
 8002bf0:	0800515e 	.word	0x0800515e
 8002bf4:	0800515a 	.word	0x0800515a
 8002bf8:	08005166 	.word	0x08005166
 8002bfc:	08005162 	.word	0x08005162
 8002c00:	0800516a 	.word	0x0800516a
 8002c04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c06:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002c0a:	4553      	cmp	r3, sl
 8002c0c:	bfa8      	it	ge
 8002c0e:	4653      	movge	r3, sl
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	4699      	mov	r9, r3
 8002c14:	dc36      	bgt.n	8002c84 <_printf_float+0x364>
 8002c16:	f04f 0b00 	mov.w	fp, #0
 8002c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c1e:	f104 021a 	add.w	r2, r4, #26
 8002c22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c24:	930a      	str	r3, [sp, #40]	@ 0x28
 8002c26:	eba3 0309 	sub.w	r3, r3, r9
 8002c2a:	455b      	cmp	r3, fp
 8002c2c:	dc31      	bgt.n	8002c92 <_printf_float+0x372>
 8002c2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002c30:	459a      	cmp	sl, r3
 8002c32:	dc3a      	bgt.n	8002caa <_printf_float+0x38a>
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	07da      	lsls	r2, r3, #31
 8002c38:	d437      	bmi.n	8002caa <_printf_float+0x38a>
 8002c3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002c3c:	ebaa 0903 	sub.w	r9, sl, r3
 8002c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c42:	ebaa 0303 	sub.w	r3, sl, r3
 8002c46:	4599      	cmp	r9, r3
 8002c48:	bfa8      	it	ge
 8002c4a:	4699      	movge	r9, r3
 8002c4c:	f1b9 0f00 	cmp.w	r9, #0
 8002c50:	dc33      	bgt.n	8002cba <_printf_float+0x39a>
 8002c52:	f04f 0800 	mov.w	r8, #0
 8002c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c5a:	f104 0b1a 	add.w	fp, r4, #26
 8002c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002c60:	ebaa 0303 	sub.w	r3, sl, r3
 8002c64:	eba3 0309 	sub.w	r3, r3, r9
 8002c68:	4543      	cmp	r3, r8
 8002c6a:	f77f af7a 	ble.w	8002b62 <_printf_float+0x242>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	465a      	mov	r2, fp
 8002c72:	4631      	mov	r1, r6
 8002c74:	4628      	mov	r0, r5
 8002c76:	47b8      	blx	r7
 8002c78:	3001      	adds	r0, #1
 8002c7a:	f43f aeac 	beq.w	80029d6 <_printf_float+0xb6>
 8002c7e:	f108 0801 	add.w	r8, r8, #1
 8002c82:	e7ec      	b.n	8002c5e <_printf_float+0x33e>
 8002c84:	4642      	mov	r2, r8
 8002c86:	4631      	mov	r1, r6
 8002c88:	4628      	mov	r0, r5
 8002c8a:	47b8      	blx	r7
 8002c8c:	3001      	adds	r0, #1
 8002c8e:	d1c2      	bne.n	8002c16 <_printf_float+0x2f6>
 8002c90:	e6a1      	b.n	80029d6 <_printf_float+0xb6>
 8002c92:	2301      	movs	r3, #1
 8002c94:	4631      	mov	r1, r6
 8002c96:	4628      	mov	r0, r5
 8002c98:	920a      	str	r2, [sp, #40]	@ 0x28
 8002c9a:	47b8      	blx	r7
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	f43f ae9a 	beq.w	80029d6 <_printf_float+0xb6>
 8002ca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002ca4:	f10b 0b01 	add.w	fp, fp, #1
 8002ca8:	e7bb      	b.n	8002c22 <_printf_float+0x302>
 8002caa:	4631      	mov	r1, r6
 8002cac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	47b8      	blx	r7
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	d1c0      	bne.n	8002c3a <_printf_float+0x31a>
 8002cb8:	e68d      	b.n	80029d6 <_printf_float+0xb6>
 8002cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002cbc:	464b      	mov	r3, r9
 8002cbe:	4631      	mov	r1, r6
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	4442      	add	r2, r8
 8002cc4:	47b8      	blx	r7
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	d1c3      	bne.n	8002c52 <_printf_float+0x332>
 8002cca:	e684      	b.n	80029d6 <_printf_float+0xb6>
 8002ccc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002cd0:	f1ba 0f01 	cmp.w	sl, #1
 8002cd4:	dc01      	bgt.n	8002cda <_printf_float+0x3ba>
 8002cd6:	07db      	lsls	r3, r3, #31
 8002cd8:	d536      	bpl.n	8002d48 <_printf_float+0x428>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	4642      	mov	r2, r8
 8002cde:	4631      	mov	r1, r6
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	47b8      	blx	r7
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	f43f ae76 	beq.w	80029d6 <_printf_float+0xb6>
 8002cea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002cee:	4631      	mov	r1, r6
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	47b8      	blx	r7
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	f43f ae6e 	beq.w	80029d6 <_printf_float+0xb6>
 8002cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2300      	movs	r3, #0
 8002d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d06:	f7fd fe4f 	bl	80009a8 <__aeabi_dcmpeq>
 8002d0a:	b9c0      	cbnz	r0, 8002d3e <_printf_float+0x41e>
 8002d0c:	4653      	mov	r3, sl
 8002d0e:	f108 0201 	add.w	r2, r8, #1
 8002d12:	4631      	mov	r1, r6
 8002d14:	4628      	mov	r0, r5
 8002d16:	47b8      	blx	r7
 8002d18:	3001      	adds	r0, #1
 8002d1a:	d10c      	bne.n	8002d36 <_printf_float+0x416>
 8002d1c:	e65b      	b.n	80029d6 <_printf_float+0xb6>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	465a      	mov	r2, fp
 8002d22:	4631      	mov	r1, r6
 8002d24:	4628      	mov	r0, r5
 8002d26:	47b8      	blx	r7
 8002d28:	3001      	adds	r0, #1
 8002d2a:	f43f ae54 	beq.w	80029d6 <_printf_float+0xb6>
 8002d2e:	f108 0801 	add.w	r8, r8, #1
 8002d32:	45d0      	cmp	r8, sl
 8002d34:	dbf3      	blt.n	8002d1e <_printf_float+0x3fe>
 8002d36:	464b      	mov	r3, r9
 8002d38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002d3c:	e6e0      	b.n	8002b00 <_printf_float+0x1e0>
 8002d3e:	f04f 0800 	mov.w	r8, #0
 8002d42:	f104 0b1a 	add.w	fp, r4, #26
 8002d46:	e7f4      	b.n	8002d32 <_printf_float+0x412>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	4642      	mov	r2, r8
 8002d4c:	e7e1      	b.n	8002d12 <_printf_float+0x3f2>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	464a      	mov	r2, r9
 8002d52:	4631      	mov	r1, r6
 8002d54:	4628      	mov	r0, r5
 8002d56:	47b8      	blx	r7
 8002d58:	3001      	adds	r0, #1
 8002d5a:	f43f ae3c 	beq.w	80029d6 <_printf_float+0xb6>
 8002d5e:	f108 0801 	add.w	r8, r8, #1
 8002d62:	68e3      	ldr	r3, [r4, #12]
 8002d64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002d66:	1a5b      	subs	r3, r3, r1
 8002d68:	4543      	cmp	r3, r8
 8002d6a:	dcf0      	bgt.n	8002d4e <_printf_float+0x42e>
 8002d6c:	e6fd      	b.n	8002b6a <_printf_float+0x24a>
 8002d6e:	f04f 0800 	mov.w	r8, #0
 8002d72:	f104 0919 	add.w	r9, r4, #25
 8002d76:	e7f4      	b.n	8002d62 <_printf_float+0x442>

08002d78 <_printf_common>:
 8002d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d7c:	4616      	mov	r6, r2
 8002d7e:	4698      	mov	r8, r3
 8002d80:	688a      	ldr	r2, [r1, #8]
 8002d82:	690b      	ldr	r3, [r1, #16]
 8002d84:	4607      	mov	r7, r0
 8002d86:	4293      	cmp	r3, r2
 8002d88:	bfb8      	it	lt
 8002d8a:	4613      	movlt	r3, r2
 8002d8c:	6033      	str	r3, [r6, #0]
 8002d8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002d92:	460c      	mov	r4, r1
 8002d94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002d98:	b10a      	cbz	r2, 8002d9e <_printf_common+0x26>
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	6033      	str	r3, [r6, #0]
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	0699      	lsls	r1, r3, #26
 8002da2:	bf42      	ittt	mi
 8002da4:	6833      	ldrmi	r3, [r6, #0]
 8002da6:	3302      	addmi	r3, #2
 8002da8:	6033      	strmi	r3, [r6, #0]
 8002daa:	6825      	ldr	r5, [r4, #0]
 8002dac:	f015 0506 	ands.w	r5, r5, #6
 8002db0:	d106      	bne.n	8002dc0 <_printf_common+0x48>
 8002db2:	f104 0a19 	add.w	sl, r4, #25
 8002db6:	68e3      	ldr	r3, [r4, #12]
 8002db8:	6832      	ldr	r2, [r6, #0]
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	42ab      	cmp	r3, r5
 8002dbe:	dc2b      	bgt.n	8002e18 <_printf_common+0xa0>
 8002dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	3b00      	subs	r3, #0
 8002dc8:	bf18      	it	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	0692      	lsls	r2, r2, #26
 8002dce:	d430      	bmi.n	8002e32 <_printf_common+0xba>
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002dd8:	47c8      	blx	r9
 8002dda:	3001      	adds	r0, #1
 8002ddc:	d023      	beq.n	8002e26 <_printf_common+0xae>
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	6922      	ldr	r2, [r4, #16]
 8002de2:	f003 0306 	and.w	r3, r3, #6
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	bf14      	ite	ne
 8002dea:	2500      	movne	r5, #0
 8002dec:	6833      	ldreq	r3, [r6, #0]
 8002dee:	f04f 0600 	mov.w	r6, #0
 8002df2:	bf08      	it	eq
 8002df4:	68e5      	ldreq	r5, [r4, #12]
 8002df6:	f104 041a 	add.w	r4, r4, #26
 8002dfa:	bf08      	it	eq
 8002dfc:	1aed      	subeq	r5, r5, r3
 8002dfe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002e02:	bf08      	it	eq
 8002e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bfc4      	itt	gt
 8002e0c:	1a9b      	subgt	r3, r3, r2
 8002e0e:	18ed      	addgt	r5, r5, r3
 8002e10:	42b5      	cmp	r5, r6
 8002e12:	d11a      	bne.n	8002e4a <_printf_common+0xd2>
 8002e14:	2000      	movs	r0, #0
 8002e16:	e008      	b.n	8002e2a <_printf_common+0xb2>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	4652      	mov	r2, sl
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	4638      	mov	r0, r7
 8002e20:	47c8      	blx	r9
 8002e22:	3001      	adds	r0, #1
 8002e24:	d103      	bne.n	8002e2e <_printf_common+0xb6>
 8002e26:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e2e:	3501      	adds	r5, #1
 8002e30:	e7c1      	b.n	8002db6 <_printf_common+0x3e>
 8002e32:	2030      	movs	r0, #48	@ 0x30
 8002e34:	18e1      	adds	r1, r4, r3
 8002e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002e40:	4422      	add	r2, r4
 8002e42:	3302      	adds	r3, #2
 8002e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002e48:	e7c2      	b.n	8002dd0 <_printf_common+0x58>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	4641      	mov	r1, r8
 8002e50:	4638      	mov	r0, r7
 8002e52:	47c8      	blx	r9
 8002e54:	3001      	adds	r0, #1
 8002e56:	d0e6      	beq.n	8002e26 <_printf_common+0xae>
 8002e58:	3601      	adds	r6, #1
 8002e5a:	e7d9      	b.n	8002e10 <_printf_common+0x98>

08002e5c <_printf_i>:
 8002e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	7e0f      	ldrb	r7, [r1, #24]
 8002e62:	4691      	mov	r9, r2
 8002e64:	2f78      	cmp	r7, #120	@ 0x78
 8002e66:	4680      	mov	r8, r0
 8002e68:	460c      	mov	r4, r1
 8002e6a:	469a      	mov	sl, r3
 8002e6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002e72:	d807      	bhi.n	8002e84 <_printf_i+0x28>
 8002e74:	2f62      	cmp	r7, #98	@ 0x62
 8002e76:	d80a      	bhi.n	8002e8e <_printf_i+0x32>
 8002e78:	2f00      	cmp	r7, #0
 8002e7a:	f000 80d1 	beq.w	8003020 <_printf_i+0x1c4>
 8002e7e:	2f58      	cmp	r7, #88	@ 0x58
 8002e80:	f000 80b8 	beq.w	8002ff4 <_printf_i+0x198>
 8002e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002e8c:	e03a      	b.n	8002f04 <_printf_i+0xa8>
 8002e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002e92:	2b15      	cmp	r3, #21
 8002e94:	d8f6      	bhi.n	8002e84 <_printf_i+0x28>
 8002e96:	a101      	add	r1, pc, #4	@ (adr r1, 8002e9c <_printf_i+0x40>)
 8002e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e9c:	08002ef5 	.word	0x08002ef5
 8002ea0:	08002f09 	.word	0x08002f09
 8002ea4:	08002e85 	.word	0x08002e85
 8002ea8:	08002e85 	.word	0x08002e85
 8002eac:	08002e85 	.word	0x08002e85
 8002eb0:	08002e85 	.word	0x08002e85
 8002eb4:	08002f09 	.word	0x08002f09
 8002eb8:	08002e85 	.word	0x08002e85
 8002ebc:	08002e85 	.word	0x08002e85
 8002ec0:	08002e85 	.word	0x08002e85
 8002ec4:	08002e85 	.word	0x08002e85
 8002ec8:	08003007 	.word	0x08003007
 8002ecc:	08002f33 	.word	0x08002f33
 8002ed0:	08002fc1 	.word	0x08002fc1
 8002ed4:	08002e85 	.word	0x08002e85
 8002ed8:	08002e85 	.word	0x08002e85
 8002edc:	08003029 	.word	0x08003029
 8002ee0:	08002e85 	.word	0x08002e85
 8002ee4:	08002f33 	.word	0x08002f33
 8002ee8:	08002e85 	.word	0x08002e85
 8002eec:	08002e85 	.word	0x08002e85
 8002ef0:	08002fc9 	.word	0x08002fc9
 8002ef4:	6833      	ldr	r3, [r6, #0]
 8002ef6:	1d1a      	adds	r2, r3, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6032      	str	r2, [r6, #0]
 8002efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f04:	2301      	movs	r3, #1
 8002f06:	e09c      	b.n	8003042 <_printf_i+0x1e6>
 8002f08:	6833      	ldr	r3, [r6, #0]
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	1d19      	adds	r1, r3, #4
 8002f0e:	6031      	str	r1, [r6, #0]
 8002f10:	0606      	lsls	r6, r0, #24
 8002f12:	d501      	bpl.n	8002f18 <_printf_i+0xbc>
 8002f14:	681d      	ldr	r5, [r3, #0]
 8002f16:	e003      	b.n	8002f20 <_printf_i+0xc4>
 8002f18:	0645      	lsls	r5, r0, #25
 8002f1a:	d5fb      	bpl.n	8002f14 <_printf_i+0xb8>
 8002f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002f20:	2d00      	cmp	r5, #0
 8002f22:	da03      	bge.n	8002f2c <_printf_i+0xd0>
 8002f24:	232d      	movs	r3, #45	@ 0x2d
 8002f26:	426d      	negs	r5, r5
 8002f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f2c:	230a      	movs	r3, #10
 8002f2e:	4858      	ldr	r0, [pc, #352]	@ (8003090 <_printf_i+0x234>)
 8002f30:	e011      	b.n	8002f56 <_printf_i+0xfa>
 8002f32:	6821      	ldr	r1, [r4, #0]
 8002f34:	6833      	ldr	r3, [r6, #0]
 8002f36:	0608      	lsls	r0, r1, #24
 8002f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8002f3c:	d402      	bmi.n	8002f44 <_printf_i+0xe8>
 8002f3e:	0649      	lsls	r1, r1, #25
 8002f40:	bf48      	it	mi
 8002f42:	b2ad      	uxthmi	r5, r5
 8002f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8002f46:	6033      	str	r3, [r6, #0]
 8002f48:	bf14      	ite	ne
 8002f4a:	230a      	movne	r3, #10
 8002f4c:	2308      	moveq	r3, #8
 8002f4e:	4850      	ldr	r0, [pc, #320]	@ (8003090 <_printf_i+0x234>)
 8002f50:	2100      	movs	r1, #0
 8002f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002f56:	6866      	ldr	r6, [r4, #4]
 8002f58:	2e00      	cmp	r6, #0
 8002f5a:	60a6      	str	r6, [r4, #8]
 8002f5c:	db05      	blt.n	8002f6a <_printf_i+0x10e>
 8002f5e:	6821      	ldr	r1, [r4, #0]
 8002f60:	432e      	orrs	r6, r5
 8002f62:	f021 0104 	bic.w	r1, r1, #4
 8002f66:	6021      	str	r1, [r4, #0]
 8002f68:	d04b      	beq.n	8003002 <_printf_i+0x1a6>
 8002f6a:	4616      	mov	r6, r2
 8002f6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f70:	fb03 5711 	mls	r7, r3, r1, r5
 8002f74:	5dc7      	ldrb	r7, [r0, r7]
 8002f76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f7a:	462f      	mov	r7, r5
 8002f7c:	42bb      	cmp	r3, r7
 8002f7e:	460d      	mov	r5, r1
 8002f80:	d9f4      	bls.n	8002f6c <_printf_i+0x110>
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d10b      	bne.n	8002f9e <_printf_i+0x142>
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	07df      	lsls	r7, r3, #31
 8002f8a:	d508      	bpl.n	8002f9e <_printf_i+0x142>
 8002f8c:	6923      	ldr	r3, [r4, #16]
 8002f8e:	6861      	ldr	r1, [r4, #4]
 8002f90:	4299      	cmp	r1, r3
 8002f92:	bfde      	ittt	le
 8002f94:	2330      	movle	r3, #48	@ 0x30
 8002f96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f9e:	1b92      	subs	r2, r2, r6
 8002fa0:	6122      	str	r2, [r4, #16]
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	f8cd a000 	str.w	sl, [sp]
 8002fac:	aa03      	add	r2, sp, #12
 8002fae:	f7ff fee3 	bl	8002d78 <_printf_common>
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d14a      	bne.n	800304c <_printf_i+0x1f0>
 8002fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fba:	b004      	add	sp, #16
 8002fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f043 0320 	orr.w	r3, r3, #32
 8002fc6:	6023      	str	r3, [r4, #0]
 8002fc8:	2778      	movs	r7, #120	@ 0x78
 8002fca:	4832      	ldr	r0, [pc, #200]	@ (8003094 <_printf_i+0x238>)
 8002fcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	6831      	ldr	r1, [r6, #0]
 8002fd4:	061f      	lsls	r7, r3, #24
 8002fd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002fda:	d402      	bmi.n	8002fe2 <_printf_i+0x186>
 8002fdc:	065f      	lsls	r7, r3, #25
 8002fde:	bf48      	it	mi
 8002fe0:	b2ad      	uxthmi	r5, r5
 8002fe2:	6031      	str	r1, [r6, #0]
 8002fe4:	07d9      	lsls	r1, r3, #31
 8002fe6:	bf44      	itt	mi
 8002fe8:	f043 0320 	orrmi.w	r3, r3, #32
 8002fec:	6023      	strmi	r3, [r4, #0]
 8002fee:	b11d      	cbz	r5, 8002ff8 <_printf_i+0x19c>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	e7ad      	b.n	8002f50 <_printf_i+0xf4>
 8002ff4:	4826      	ldr	r0, [pc, #152]	@ (8003090 <_printf_i+0x234>)
 8002ff6:	e7e9      	b.n	8002fcc <_printf_i+0x170>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	f023 0320 	bic.w	r3, r3, #32
 8002ffe:	6023      	str	r3, [r4, #0]
 8003000:	e7f6      	b.n	8002ff0 <_printf_i+0x194>
 8003002:	4616      	mov	r6, r2
 8003004:	e7bd      	b.n	8002f82 <_printf_i+0x126>
 8003006:	6833      	ldr	r3, [r6, #0]
 8003008:	6825      	ldr	r5, [r4, #0]
 800300a:	1d18      	adds	r0, r3, #4
 800300c:	6961      	ldr	r1, [r4, #20]
 800300e:	6030      	str	r0, [r6, #0]
 8003010:	062e      	lsls	r6, r5, #24
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	d501      	bpl.n	800301a <_printf_i+0x1be>
 8003016:	6019      	str	r1, [r3, #0]
 8003018:	e002      	b.n	8003020 <_printf_i+0x1c4>
 800301a:	0668      	lsls	r0, r5, #25
 800301c:	d5fb      	bpl.n	8003016 <_printf_i+0x1ba>
 800301e:	8019      	strh	r1, [r3, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	4616      	mov	r6, r2
 8003024:	6123      	str	r3, [r4, #16]
 8003026:	e7bc      	b.n	8002fa2 <_printf_i+0x146>
 8003028:	6833      	ldr	r3, [r6, #0]
 800302a:	2100      	movs	r1, #0
 800302c:	1d1a      	adds	r2, r3, #4
 800302e:	6032      	str	r2, [r6, #0]
 8003030:	681e      	ldr	r6, [r3, #0]
 8003032:	6862      	ldr	r2, [r4, #4]
 8003034:	4630      	mov	r0, r6
 8003036:	f000 f9b4 	bl	80033a2 <memchr>
 800303a:	b108      	cbz	r0, 8003040 <_printf_i+0x1e4>
 800303c:	1b80      	subs	r0, r0, r6
 800303e:	6060      	str	r0, [r4, #4]
 8003040:	6863      	ldr	r3, [r4, #4]
 8003042:	6123      	str	r3, [r4, #16]
 8003044:	2300      	movs	r3, #0
 8003046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800304a:	e7aa      	b.n	8002fa2 <_printf_i+0x146>
 800304c:	4632      	mov	r2, r6
 800304e:	4649      	mov	r1, r9
 8003050:	4640      	mov	r0, r8
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	47d0      	blx	sl
 8003056:	3001      	adds	r0, #1
 8003058:	d0ad      	beq.n	8002fb6 <_printf_i+0x15a>
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	079b      	lsls	r3, r3, #30
 800305e:	d413      	bmi.n	8003088 <_printf_i+0x22c>
 8003060:	68e0      	ldr	r0, [r4, #12]
 8003062:	9b03      	ldr	r3, [sp, #12]
 8003064:	4298      	cmp	r0, r3
 8003066:	bfb8      	it	lt
 8003068:	4618      	movlt	r0, r3
 800306a:	e7a6      	b.n	8002fba <_printf_i+0x15e>
 800306c:	2301      	movs	r3, #1
 800306e:	4632      	mov	r2, r6
 8003070:	4649      	mov	r1, r9
 8003072:	4640      	mov	r0, r8
 8003074:	47d0      	blx	sl
 8003076:	3001      	adds	r0, #1
 8003078:	d09d      	beq.n	8002fb6 <_printf_i+0x15a>
 800307a:	3501      	adds	r5, #1
 800307c:	68e3      	ldr	r3, [r4, #12]
 800307e:	9903      	ldr	r1, [sp, #12]
 8003080:	1a5b      	subs	r3, r3, r1
 8003082:	42ab      	cmp	r3, r5
 8003084:	dcf2      	bgt.n	800306c <_printf_i+0x210>
 8003086:	e7eb      	b.n	8003060 <_printf_i+0x204>
 8003088:	2500      	movs	r5, #0
 800308a:	f104 0619 	add.w	r6, r4, #25
 800308e:	e7f5      	b.n	800307c <_printf_i+0x220>
 8003090:	0800516c 	.word	0x0800516c
 8003094:	0800517d 	.word	0x0800517d

08003098 <std>:
 8003098:	2300      	movs	r3, #0
 800309a:	b510      	push	{r4, lr}
 800309c:	4604      	mov	r4, r0
 800309e:	e9c0 3300 	strd	r3, r3, [r0]
 80030a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030a6:	6083      	str	r3, [r0, #8]
 80030a8:	8181      	strh	r1, [r0, #12]
 80030aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80030ac:	81c2      	strh	r2, [r0, #14]
 80030ae:	6183      	str	r3, [r0, #24]
 80030b0:	4619      	mov	r1, r3
 80030b2:	2208      	movs	r2, #8
 80030b4:	305c      	adds	r0, #92	@ 0x5c
 80030b6:	f000 f8f4 	bl	80032a2 <memset>
 80030ba:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <std+0x58>)
 80030bc:	6224      	str	r4, [r4, #32]
 80030be:	6263      	str	r3, [r4, #36]	@ 0x24
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <std+0x5c>)
 80030c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <std+0x60>)
 80030c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030c8:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <std+0x64>)
 80030ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <std+0x68>)
 80030ce:	429c      	cmp	r4, r3
 80030d0:	d006      	beq.n	80030e0 <std+0x48>
 80030d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030d6:	4294      	cmp	r4, r2
 80030d8:	d002      	beq.n	80030e0 <std+0x48>
 80030da:	33d0      	adds	r3, #208	@ 0xd0
 80030dc:	429c      	cmp	r4, r3
 80030de:	d105      	bne.n	80030ec <std+0x54>
 80030e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80030e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030e8:	f000 b958 	b.w	800339c <__retarget_lock_init_recursive>
 80030ec:	bd10      	pop	{r4, pc}
 80030ee:	bf00      	nop
 80030f0:	0800321d 	.word	0x0800321d
 80030f4:	0800323f 	.word	0x0800323f
 80030f8:	08003277 	.word	0x08003277
 80030fc:	0800329b 	.word	0x0800329b
 8003100:	2000024c 	.word	0x2000024c

08003104 <stdio_exit_handler>:
 8003104:	4a02      	ldr	r2, [pc, #8]	@ (8003110 <stdio_exit_handler+0xc>)
 8003106:	4903      	ldr	r1, [pc, #12]	@ (8003114 <stdio_exit_handler+0x10>)
 8003108:	4803      	ldr	r0, [pc, #12]	@ (8003118 <stdio_exit_handler+0x14>)
 800310a:	f000 b869 	b.w	80031e0 <_fwalk_sglue>
 800310e:	bf00      	nop
 8003110:	2000000c 	.word	0x2000000c
 8003114:	08004a69 	.word	0x08004a69
 8003118:	2000001c 	.word	0x2000001c

0800311c <cleanup_stdio>:
 800311c:	6841      	ldr	r1, [r0, #4]
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <cleanup_stdio+0x34>)
 8003120:	b510      	push	{r4, lr}
 8003122:	4299      	cmp	r1, r3
 8003124:	4604      	mov	r4, r0
 8003126:	d001      	beq.n	800312c <cleanup_stdio+0x10>
 8003128:	f001 fc9e 	bl	8004a68 <_fflush_r>
 800312c:	68a1      	ldr	r1, [r4, #8]
 800312e:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <cleanup_stdio+0x38>)
 8003130:	4299      	cmp	r1, r3
 8003132:	d002      	beq.n	800313a <cleanup_stdio+0x1e>
 8003134:	4620      	mov	r0, r4
 8003136:	f001 fc97 	bl	8004a68 <_fflush_r>
 800313a:	68e1      	ldr	r1, [r4, #12]
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <cleanup_stdio+0x3c>)
 800313e:	4299      	cmp	r1, r3
 8003140:	d004      	beq.n	800314c <cleanup_stdio+0x30>
 8003142:	4620      	mov	r0, r4
 8003144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003148:	f001 bc8e 	b.w	8004a68 <_fflush_r>
 800314c:	bd10      	pop	{r4, pc}
 800314e:	bf00      	nop
 8003150:	2000024c 	.word	0x2000024c
 8003154:	200002b4 	.word	0x200002b4
 8003158:	2000031c 	.word	0x2000031c

0800315c <global_stdio_init.part.0>:
 800315c:	b510      	push	{r4, lr}
 800315e:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <global_stdio_init.part.0+0x30>)
 8003160:	4c0b      	ldr	r4, [pc, #44]	@ (8003190 <global_stdio_init.part.0+0x34>)
 8003162:	4a0c      	ldr	r2, [pc, #48]	@ (8003194 <global_stdio_init.part.0+0x38>)
 8003164:	4620      	mov	r0, r4
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	2104      	movs	r1, #4
 800316a:	2200      	movs	r2, #0
 800316c:	f7ff ff94 	bl	8003098 <std>
 8003170:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003174:	2201      	movs	r2, #1
 8003176:	2109      	movs	r1, #9
 8003178:	f7ff ff8e 	bl	8003098 <std>
 800317c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003180:	2202      	movs	r2, #2
 8003182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003186:	2112      	movs	r1, #18
 8003188:	f7ff bf86 	b.w	8003098 <std>
 800318c:	20000384 	.word	0x20000384
 8003190:	2000024c 	.word	0x2000024c
 8003194:	08003105 	.word	0x08003105

08003198 <__sfp_lock_acquire>:
 8003198:	4801      	ldr	r0, [pc, #4]	@ (80031a0 <__sfp_lock_acquire+0x8>)
 800319a:	f000 b900 	b.w	800339e <__retarget_lock_acquire_recursive>
 800319e:	bf00      	nop
 80031a0:	2000038d 	.word	0x2000038d

080031a4 <__sfp_lock_release>:
 80031a4:	4801      	ldr	r0, [pc, #4]	@ (80031ac <__sfp_lock_release+0x8>)
 80031a6:	f000 b8fb 	b.w	80033a0 <__retarget_lock_release_recursive>
 80031aa:	bf00      	nop
 80031ac:	2000038d 	.word	0x2000038d

080031b0 <__sinit>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4604      	mov	r4, r0
 80031b4:	f7ff fff0 	bl	8003198 <__sfp_lock_acquire>
 80031b8:	6a23      	ldr	r3, [r4, #32]
 80031ba:	b11b      	cbz	r3, 80031c4 <__sinit+0x14>
 80031bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c0:	f7ff bff0 	b.w	80031a4 <__sfp_lock_release>
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <__sinit+0x28>)
 80031c6:	6223      	str	r3, [r4, #32]
 80031c8:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <__sinit+0x2c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f5      	bne.n	80031bc <__sinit+0xc>
 80031d0:	f7ff ffc4 	bl	800315c <global_stdio_init.part.0>
 80031d4:	e7f2      	b.n	80031bc <__sinit+0xc>
 80031d6:	bf00      	nop
 80031d8:	0800311d 	.word	0x0800311d
 80031dc:	20000384 	.word	0x20000384

080031e0 <_fwalk_sglue>:
 80031e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031e4:	4607      	mov	r7, r0
 80031e6:	4688      	mov	r8, r1
 80031e8:	4614      	mov	r4, r2
 80031ea:	2600      	movs	r6, #0
 80031ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031f0:	f1b9 0901 	subs.w	r9, r9, #1
 80031f4:	d505      	bpl.n	8003202 <_fwalk_sglue+0x22>
 80031f6:	6824      	ldr	r4, [r4, #0]
 80031f8:	2c00      	cmp	r4, #0
 80031fa:	d1f7      	bne.n	80031ec <_fwalk_sglue+0xc>
 80031fc:	4630      	mov	r0, r6
 80031fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003202:	89ab      	ldrh	r3, [r5, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d907      	bls.n	8003218 <_fwalk_sglue+0x38>
 8003208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800320c:	3301      	adds	r3, #1
 800320e:	d003      	beq.n	8003218 <_fwalk_sglue+0x38>
 8003210:	4629      	mov	r1, r5
 8003212:	4638      	mov	r0, r7
 8003214:	47c0      	blx	r8
 8003216:	4306      	orrs	r6, r0
 8003218:	3568      	adds	r5, #104	@ 0x68
 800321a:	e7e9      	b.n	80031f0 <_fwalk_sglue+0x10>

0800321c <__sread>:
 800321c:	b510      	push	{r4, lr}
 800321e:	460c      	mov	r4, r1
 8003220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003224:	f000 f86c 	bl	8003300 <_read_r>
 8003228:	2800      	cmp	r0, #0
 800322a:	bfab      	itete	ge
 800322c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800322e:	89a3      	ldrhlt	r3, [r4, #12]
 8003230:	181b      	addge	r3, r3, r0
 8003232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003236:	bfac      	ite	ge
 8003238:	6563      	strge	r3, [r4, #84]	@ 0x54
 800323a:	81a3      	strhlt	r3, [r4, #12]
 800323c:	bd10      	pop	{r4, pc}

0800323e <__swrite>:
 800323e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003242:	461f      	mov	r7, r3
 8003244:	898b      	ldrh	r3, [r1, #12]
 8003246:	4605      	mov	r5, r0
 8003248:	05db      	lsls	r3, r3, #23
 800324a:	460c      	mov	r4, r1
 800324c:	4616      	mov	r6, r2
 800324e:	d505      	bpl.n	800325c <__swrite+0x1e>
 8003250:	2302      	movs	r3, #2
 8003252:	2200      	movs	r2, #0
 8003254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003258:	f000 f840 	bl	80032dc <_lseek_r>
 800325c:	89a3      	ldrh	r3, [r4, #12]
 800325e:	4632      	mov	r2, r6
 8003260:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003264:	81a3      	strh	r3, [r4, #12]
 8003266:	4628      	mov	r0, r5
 8003268:	463b      	mov	r3, r7
 800326a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800326e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003272:	f000 b857 	b.w	8003324 <_write_r>

08003276 <__sseek>:
 8003276:	b510      	push	{r4, lr}
 8003278:	460c      	mov	r4, r1
 800327a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800327e:	f000 f82d 	bl	80032dc <_lseek_r>
 8003282:	1c43      	adds	r3, r0, #1
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	bf15      	itete	ne
 8003288:	6560      	strne	r0, [r4, #84]	@ 0x54
 800328a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800328e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003292:	81a3      	strheq	r3, [r4, #12]
 8003294:	bf18      	it	ne
 8003296:	81a3      	strhne	r3, [r4, #12]
 8003298:	bd10      	pop	{r4, pc}

0800329a <__sclose>:
 800329a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800329e:	f000 b80d 	b.w	80032bc <_close_r>

080032a2 <memset>:
 80032a2:	4603      	mov	r3, r0
 80032a4:	4402      	add	r2, r0
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d100      	bne.n	80032ac <memset+0xa>
 80032aa:	4770      	bx	lr
 80032ac:	f803 1b01 	strb.w	r1, [r3], #1
 80032b0:	e7f9      	b.n	80032a6 <memset+0x4>
	...

080032b4 <_localeconv_r>:
 80032b4:	4800      	ldr	r0, [pc, #0]	@ (80032b8 <_localeconv_r+0x4>)
 80032b6:	4770      	bx	lr
 80032b8:	20000158 	.word	0x20000158

080032bc <_close_r>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	2300      	movs	r3, #0
 80032c0:	4d05      	ldr	r5, [pc, #20]	@ (80032d8 <_close_r+0x1c>)
 80032c2:	4604      	mov	r4, r0
 80032c4:	4608      	mov	r0, r1
 80032c6:	602b      	str	r3, [r5, #0]
 80032c8:	f7fd fe73 	bl	8000fb2 <_close>
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	d102      	bne.n	80032d6 <_close_r+0x1a>
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	b103      	cbz	r3, 80032d6 <_close_r+0x1a>
 80032d4:	6023      	str	r3, [r4, #0]
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	20000388 	.word	0x20000388

080032dc <_lseek_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	4604      	mov	r4, r0
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	2200      	movs	r2, #0
 80032e6:	4d05      	ldr	r5, [pc, #20]	@ (80032fc <_lseek_r+0x20>)
 80032e8:	602a      	str	r2, [r5, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f7fd fe85 	bl	8000ffa <_lseek>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d102      	bne.n	80032fa <_lseek_r+0x1e>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	b103      	cbz	r3, 80032fa <_lseek_r+0x1e>
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	bd38      	pop	{r3, r4, r5, pc}
 80032fc:	20000388 	.word	0x20000388

08003300 <_read_r>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4604      	mov	r4, r0
 8003304:	4608      	mov	r0, r1
 8003306:	4611      	mov	r1, r2
 8003308:	2200      	movs	r2, #0
 800330a:	4d05      	ldr	r5, [pc, #20]	@ (8003320 <_read_r+0x20>)
 800330c:	602a      	str	r2, [r5, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	f7fd fe16 	bl	8000f40 <_read>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_read_r+0x1e>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_read_r+0x1e>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	20000388 	.word	0x20000388

08003324 <_write_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4604      	mov	r4, r0
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	2200      	movs	r2, #0
 800332e:	4d05      	ldr	r5, [pc, #20]	@ (8003344 <_write_r+0x20>)
 8003330:	602a      	str	r2, [r5, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	f7fd fe21 	bl	8000f7a <_write>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <_write_r+0x1e>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	b103      	cbz	r3, 8003342 <_write_r+0x1e>
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	20000388 	.word	0x20000388

08003348 <__errno>:
 8003348:	4b01      	ldr	r3, [pc, #4]	@ (8003350 <__errno+0x8>)
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000018 	.word	0x20000018

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	2600      	movs	r6, #0
 8003358:	4d0c      	ldr	r5, [pc, #48]	@ (800338c <__libc_init_array+0x38>)
 800335a:	4c0d      	ldr	r4, [pc, #52]	@ (8003390 <__libc_init_array+0x3c>)
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	f001 fecc 	bl	8005100 <_init>
 8003368:	2600      	movs	r6, #0
 800336a:	4d0a      	ldr	r5, [pc, #40]	@ (8003394 <__libc_init_array+0x40>)
 800336c:	4c0a      	ldr	r4, [pc, #40]	@ (8003398 <__libc_init_array+0x44>)
 800336e:	1b64      	subs	r4, r4, r5
 8003370:	10a4      	asrs	r4, r4, #2
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	f855 3b04 	ldr.w	r3, [r5], #4
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	f855 3b04 	ldr.w	r3, [r5], #4
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	080054d4 	.word	0x080054d4
 8003390:	080054d4 	.word	0x080054d4
 8003394:	080054d4 	.word	0x080054d4
 8003398:	080054d8 	.word	0x080054d8

0800339c <__retarget_lock_init_recursive>:
 800339c:	4770      	bx	lr

0800339e <__retarget_lock_acquire_recursive>:
 800339e:	4770      	bx	lr

080033a0 <__retarget_lock_release_recursive>:
 80033a0:	4770      	bx	lr

080033a2 <memchr>:
 80033a2:	4603      	mov	r3, r0
 80033a4:	b510      	push	{r4, lr}
 80033a6:	b2c9      	uxtb	r1, r1
 80033a8:	4402      	add	r2, r0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	d101      	bne.n	80033b4 <memchr+0x12>
 80033b0:	2000      	movs	r0, #0
 80033b2:	e003      	b.n	80033bc <memchr+0x1a>
 80033b4:	7804      	ldrb	r4, [r0, #0]
 80033b6:	3301      	adds	r3, #1
 80033b8:	428c      	cmp	r4, r1
 80033ba:	d1f6      	bne.n	80033aa <memchr+0x8>
 80033bc:	bd10      	pop	{r4, pc}

080033be <quorem>:
 80033be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c2:	6903      	ldr	r3, [r0, #16]
 80033c4:	690c      	ldr	r4, [r1, #16]
 80033c6:	4607      	mov	r7, r0
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	db7e      	blt.n	80034ca <quorem+0x10c>
 80033cc:	3c01      	subs	r4, #1
 80033ce:	00a3      	lsls	r3, r4, #2
 80033d0:	f100 0514 	add.w	r5, r0, #20
 80033d4:	f101 0814 	add.w	r8, r1, #20
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80033e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80033e8:	3301      	adds	r3, #1
 80033ea:	429a      	cmp	r2, r3
 80033ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80033f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80033f4:	d32e      	bcc.n	8003454 <quorem+0x96>
 80033f6:	f04f 0a00 	mov.w	sl, #0
 80033fa:	46c4      	mov	ip, r8
 80033fc:	46ae      	mov	lr, r5
 80033fe:	46d3      	mov	fp, sl
 8003400:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003404:	b298      	uxth	r0, r3
 8003406:	fb06 a000 	mla	r0, r6, r0, sl
 800340a:	0c1b      	lsrs	r3, r3, #16
 800340c:	0c02      	lsrs	r2, r0, #16
 800340e:	fb06 2303 	mla	r3, r6, r3, r2
 8003412:	f8de 2000 	ldr.w	r2, [lr]
 8003416:	b280      	uxth	r0, r0
 8003418:	b292      	uxth	r2, r2
 800341a:	1a12      	subs	r2, r2, r0
 800341c:	445a      	add	r2, fp
 800341e:	f8de 0000 	ldr.w	r0, [lr]
 8003422:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003426:	b29b      	uxth	r3, r3
 8003428:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800342c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003430:	b292      	uxth	r2, r2
 8003432:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003436:	45e1      	cmp	r9, ip
 8003438:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800343c:	f84e 2b04 	str.w	r2, [lr], #4
 8003440:	d2de      	bcs.n	8003400 <quorem+0x42>
 8003442:	9b00      	ldr	r3, [sp, #0]
 8003444:	58eb      	ldr	r3, [r5, r3]
 8003446:	b92b      	cbnz	r3, 8003454 <quorem+0x96>
 8003448:	9b01      	ldr	r3, [sp, #4]
 800344a:	3b04      	subs	r3, #4
 800344c:	429d      	cmp	r5, r3
 800344e:	461a      	mov	r2, r3
 8003450:	d32f      	bcc.n	80034b2 <quorem+0xf4>
 8003452:	613c      	str	r4, [r7, #16]
 8003454:	4638      	mov	r0, r7
 8003456:	f001 f97f 	bl	8004758 <__mcmp>
 800345a:	2800      	cmp	r0, #0
 800345c:	db25      	blt.n	80034aa <quorem+0xec>
 800345e:	4629      	mov	r1, r5
 8003460:	2000      	movs	r0, #0
 8003462:	f858 2b04 	ldr.w	r2, [r8], #4
 8003466:	f8d1 c000 	ldr.w	ip, [r1]
 800346a:	fa1f fe82 	uxth.w	lr, r2
 800346e:	fa1f f38c 	uxth.w	r3, ip
 8003472:	eba3 030e 	sub.w	r3, r3, lr
 8003476:	4403      	add	r3, r0
 8003478:	0c12      	lsrs	r2, r2, #16
 800347a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800347e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003482:	b29b      	uxth	r3, r3
 8003484:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003488:	45c1      	cmp	r9, r8
 800348a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800348e:	f841 3b04 	str.w	r3, [r1], #4
 8003492:	d2e6      	bcs.n	8003462 <quorem+0xa4>
 8003494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003498:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800349c:	b922      	cbnz	r2, 80034a8 <quorem+0xea>
 800349e:	3b04      	subs	r3, #4
 80034a0:	429d      	cmp	r5, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	d30b      	bcc.n	80034be <quorem+0x100>
 80034a6:	613c      	str	r4, [r7, #16]
 80034a8:	3601      	adds	r6, #1
 80034aa:	4630      	mov	r0, r6
 80034ac:	b003      	add	sp, #12
 80034ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	3b04      	subs	r3, #4
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	d1cb      	bne.n	8003452 <quorem+0x94>
 80034ba:	3c01      	subs	r4, #1
 80034bc:	e7c6      	b.n	800344c <quorem+0x8e>
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	3b04      	subs	r3, #4
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	d1ef      	bne.n	80034a6 <quorem+0xe8>
 80034c6:	3c01      	subs	r4, #1
 80034c8:	e7ea      	b.n	80034a0 <quorem+0xe2>
 80034ca:	2000      	movs	r0, #0
 80034cc:	e7ee      	b.n	80034ac <quorem+0xee>
	...

080034d0 <_dtoa_r>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	4614      	mov	r4, r2
 80034d6:	461d      	mov	r5, r3
 80034d8:	69c7      	ldr	r7, [r0, #28]
 80034da:	b097      	sub	sp, #92	@ 0x5c
 80034dc:	4681      	mov	r9, r0
 80034de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80034e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80034e4:	b97f      	cbnz	r7, 8003506 <_dtoa_r+0x36>
 80034e6:	2010      	movs	r0, #16
 80034e8:	f000 fe0e 	bl	8004108 <malloc>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f8c9 001c 	str.w	r0, [r9, #28]
 80034f2:	b920      	cbnz	r0, 80034fe <_dtoa_r+0x2e>
 80034f4:	21ef      	movs	r1, #239	@ 0xef
 80034f6:	4bac      	ldr	r3, [pc, #688]	@ (80037a8 <_dtoa_r+0x2d8>)
 80034f8:	48ac      	ldr	r0, [pc, #688]	@ (80037ac <_dtoa_r+0x2dc>)
 80034fa:	f001 fafb 	bl	8004af4 <__assert_func>
 80034fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003502:	6007      	str	r7, [r0, #0]
 8003504:	60c7      	str	r7, [r0, #12]
 8003506:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	b159      	cbz	r1, 8003526 <_dtoa_r+0x56>
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	2301      	movs	r3, #1
 8003512:	4093      	lsls	r3, r2
 8003514:	604a      	str	r2, [r1, #4]
 8003516:	608b      	str	r3, [r1, #8]
 8003518:	4648      	mov	r0, r9
 800351a:	f000 feeb 	bl	80042f4 <_Bfree>
 800351e:	2200      	movs	r2, #0
 8003520:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	1e2b      	subs	r3, r5, #0
 8003528:	bfaf      	iteee	ge
 800352a:	2300      	movge	r3, #0
 800352c:	2201      	movlt	r2, #1
 800352e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003532:	9307      	strlt	r3, [sp, #28]
 8003534:	bfa8      	it	ge
 8003536:	6033      	strge	r3, [r6, #0]
 8003538:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800353c:	4b9c      	ldr	r3, [pc, #624]	@ (80037b0 <_dtoa_r+0x2e0>)
 800353e:	bfb8      	it	lt
 8003540:	6032      	strlt	r2, [r6, #0]
 8003542:	ea33 0308 	bics.w	r3, r3, r8
 8003546:	d112      	bne.n	800356e <_dtoa_r+0x9e>
 8003548:	f242 730f 	movw	r3, #9999	@ 0x270f
 800354c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003554:	4323      	orrs	r3, r4
 8003556:	f000 855e 	beq.w	8004016 <_dtoa_r+0xb46>
 800355a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800355c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80037b4 <_dtoa_r+0x2e4>
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8560 	beq.w	8004026 <_dtoa_r+0xb56>
 8003566:	f10a 0303 	add.w	r3, sl, #3
 800356a:	f000 bd5a 	b.w	8004022 <_dtoa_r+0xb52>
 800356e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003572:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800357a:	2200      	movs	r2, #0
 800357c:	2300      	movs	r3, #0
 800357e:	f7fd fa13 	bl	80009a8 <__aeabi_dcmpeq>
 8003582:	4607      	mov	r7, r0
 8003584:	b158      	cbz	r0, 800359e <_dtoa_r+0xce>
 8003586:	2301      	movs	r3, #1
 8003588:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800358e:	b113      	cbz	r3, 8003596 <_dtoa_r+0xc6>
 8003590:	4b89      	ldr	r3, [pc, #548]	@ (80037b8 <_dtoa_r+0x2e8>)
 8003592:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80037bc <_dtoa_r+0x2ec>
 800359a:	f000 bd44 	b.w	8004026 <_dtoa_r+0xb56>
 800359e:	ab14      	add	r3, sp, #80	@ 0x50
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	ab15      	add	r3, sp, #84	@ 0x54
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	4648      	mov	r0, r9
 80035a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80035ac:	f001 f984 	bl	80048b8 <__d2b>
 80035b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80035b4:	9003      	str	r0, [sp, #12]
 80035b6:	2e00      	cmp	r6, #0
 80035b8:	d078      	beq.n	80036ac <_dtoa_r+0x1dc>
 80035ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80035be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80035c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80035cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80035d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80035d2:	4619      	mov	r1, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	4b7a      	ldr	r3, [pc, #488]	@ (80037c0 <_dtoa_r+0x2f0>)
 80035d8:	f7fc fdc6 	bl	8000168 <__aeabi_dsub>
 80035dc:	a36c      	add	r3, pc, #432	@ (adr r3, 8003790 <_dtoa_r+0x2c0>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fc ff79 	bl	80004d8 <__aeabi_dmul>
 80035e6:	a36c      	add	r3, pc, #432	@ (adr r3, 8003798 <_dtoa_r+0x2c8>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f7fc fdbe 	bl	800016c <__adddf3>
 80035f0:	4604      	mov	r4, r0
 80035f2:	4630      	mov	r0, r6
 80035f4:	460d      	mov	r5, r1
 80035f6:	f7fc ff05 	bl	8000404 <__aeabi_i2d>
 80035fa:	a369      	add	r3, pc, #420	@ (adr r3, 80037a0 <_dtoa_r+0x2d0>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f7fc ff6a 	bl	80004d8 <__aeabi_dmul>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4620      	mov	r0, r4
 800360a:	4629      	mov	r1, r5
 800360c:	f7fc fdae 	bl	800016c <__adddf3>
 8003610:	4604      	mov	r4, r0
 8003612:	460d      	mov	r5, r1
 8003614:	f7fd fa10 	bl	8000a38 <__aeabi_d2iz>
 8003618:	2200      	movs	r2, #0
 800361a:	4607      	mov	r7, r0
 800361c:	2300      	movs	r3, #0
 800361e:	4620      	mov	r0, r4
 8003620:	4629      	mov	r1, r5
 8003622:	f7fd f9cb 	bl	80009bc <__aeabi_dcmplt>
 8003626:	b140      	cbz	r0, 800363a <_dtoa_r+0x16a>
 8003628:	4638      	mov	r0, r7
 800362a:	f7fc feeb 	bl	8000404 <__aeabi_i2d>
 800362e:	4622      	mov	r2, r4
 8003630:	462b      	mov	r3, r5
 8003632:	f7fd f9b9 	bl	80009a8 <__aeabi_dcmpeq>
 8003636:	b900      	cbnz	r0, 800363a <_dtoa_r+0x16a>
 8003638:	3f01      	subs	r7, #1
 800363a:	2f16      	cmp	r7, #22
 800363c:	d854      	bhi.n	80036e8 <_dtoa_r+0x218>
 800363e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003642:	4b60      	ldr	r3, [pc, #384]	@ (80037c4 <_dtoa_r+0x2f4>)
 8003644:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f7fd f9b6 	bl	80009bc <__aeabi_dcmplt>
 8003650:	2800      	cmp	r0, #0
 8003652:	d04b      	beq.n	80036ec <_dtoa_r+0x21c>
 8003654:	2300      	movs	r3, #0
 8003656:	3f01      	subs	r7, #1
 8003658:	930f      	str	r3, [sp, #60]	@ 0x3c
 800365a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800365c:	1b9b      	subs	r3, r3, r6
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	bf49      	itett	mi
 8003662:	f1c3 0301 	rsbmi	r3, r3, #1
 8003666:	2300      	movpl	r3, #0
 8003668:	9304      	strmi	r3, [sp, #16]
 800366a:	2300      	movmi	r3, #0
 800366c:	9209      	str	r2, [sp, #36]	@ 0x24
 800366e:	bf54      	ite	pl
 8003670:	9304      	strpl	r3, [sp, #16]
 8003672:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003674:	2f00      	cmp	r7, #0
 8003676:	db3b      	blt.n	80036f0 <_dtoa_r+0x220>
 8003678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800367a:	970e      	str	r7, [sp, #56]	@ 0x38
 800367c:	443b      	add	r3, r7
 800367e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003680:	2300      	movs	r3, #0
 8003682:	930a      	str	r3, [sp, #40]	@ 0x28
 8003684:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003686:	2b09      	cmp	r3, #9
 8003688:	d865      	bhi.n	8003756 <_dtoa_r+0x286>
 800368a:	2b05      	cmp	r3, #5
 800368c:	bfc4      	itt	gt
 800368e:	3b04      	subgt	r3, #4
 8003690:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003692:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003694:	bfc8      	it	gt
 8003696:	2400      	movgt	r4, #0
 8003698:	f1a3 0302 	sub.w	r3, r3, #2
 800369c:	bfd8      	it	le
 800369e:	2401      	movle	r4, #1
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d864      	bhi.n	800376e <_dtoa_r+0x29e>
 80036a4:	e8df f003 	tbb	[pc, r3]
 80036a8:	2c385553 	.word	0x2c385553
 80036ac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80036b0:	441e      	add	r6, r3
 80036b2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	bfc1      	itttt	gt
 80036ba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80036be:	fa08 f803 	lslgt.w	r8, r8, r3
 80036c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80036c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80036ca:	bfd6      	itet	le
 80036cc:	f1c3 0320 	rsble	r3, r3, #32
 80036d0:	ea48 0003 	orrgt.w	r0, r8, r3
 80036d4:	fa04 f003 	lslle.w	r0, r4, r3
 80036d8:	f7fc fe84 	bl	80003e4 <__aeabi_ui2d>
 80036dc:	2201      	movs	r2, #1
 80036de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80036e2:	3e01      	subs	r6, #1
 80036e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80036e6:	e774      	b.n	80035d2 <_dtoa_r+0x102>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e7b5      	b.n	8003658 <_dtoa_r+0x188>
 80036ec:	900f      	str	r0, [sp, #60]	@ 0x3c
 80036ee:	e7b4      	b.n	800365a <_dtoa_r+0x18a>
 80036f0:	9b04      	ldr	r3, [sp, #16]
 80036f2:	1bdb      	subs	r3, r3, r7
 80036f4:	9304      	str	r3, [sp, #16]
 80036f6:	427b      	negs	r3, r7
 80036f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80036fa:	2300      	movs	r3, #0
 80036fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80036fe:	e7c1      	b.n	8003684 <_dtoa_r+0x1b4>
 8003700:	2301      	movs	r3, #1
 8003702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003704:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003706:	eb07 0b03 	add.w	fp, r7, r3
 800370a:	f10b 0301 	add.w	r3, fp, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	9308      	str	r3, [sp, #32]
 8003712:	bfb8      	it	lt
 8003714:	2301      	movlt	r3, #1
 8003716:	e006      	b.n	8003726 <_dtoa_r+0x256>
 8003718:	2301      	movs	r3, #1
 800371a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800371c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800371e:	2b00      	cmp	r3, #0
 8003720:	dd28      	ble.n	8003774 <_dtoa_r+0x2a4>
 8003722:	469b      	mov	fp, r3
 8003724:	9308      	str	r3, [sp, #32]
 8003726:	2100      	movs	r1, #0
 8003728:	2204      	movs	r2, #4
 800372a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800372e:	f102 0514 	add.w	r5, r2, #20
 8003732:	429d      	cmp	r5, r3
 8003734:	d926      	bls.n	8003784 <_dtoa_r+0x2b4>
 8003736:	6041      	str	r1, [r0, #4]
 8003738:	4648      	mov	r0, r9
 800373a:	f000 fd9b 	bl	8004274 <_Balloc>
 800373e:	4682      	mov	sl, r0
 8003740:	2800      	cmp	r0, #0
 8003742:	d143      	bne.n	80037cc <_dtoa_r+0x2fc>
 8003744:	4602      	mov	r2, r0
 8003746:	f240 11af 	movw	r1, #431	@ 0x1af
 800374a:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <_dtoa_r+0x2f8>)
 800374c:	e6d4      	b.n	80034f8 <_dtoa_r+0x28>
 800374e:	2300      	movs	r3, #0
 8003750:	e7e3      	b.n	800371a <_dtoa_r+0x24a>
 8003752:	2300      	movs	r3, #0
 8003754:	e7d5      	b.n	8003702 <_dtoa_r+0x232>
 8003756:	2401      	movs	r4, #1
 8003758:	2300      	movs	r3, #0
 800375a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800375c:	9320      	str	r3, [sp, #128]	@ 0x80
 800375e:	f04f 3bff 	mov.w	fp, #4294967295
 8003762:	2200      	movs	r2, #0
 8003764:	2312      	movs	r3, #18
 8003766:	f8cd b020 	str.w	fp, [sp, #32]
 800376a:	9221      	str	r2, [sp, #132]	@ 0x84
 800376c:	e7db      	b.n	8003726 <_dtoa_r+0x256>
 800376e:	2301      	movs	r3, #1
 8003770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003772:	e7f4      	b.n	800375e <_dtoa_r+0x28e>
 8003774:	f04f 0b01 	mov.w	fp, #1
 8003778:	465b      	mov	r3, fp
 800377a:	f8cd b020 	str.w	fp, [sp, #32]
 800377e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003782:	e7d0      	b.n	8003726 <_dtoa_r+0x256>
 8003784:	3101      	adds	r1, #1
 8003786:	0052      	lsls	r2, r2, #1
 8003788:	e7d1      	b.n	800372e <_dtoa_r+0x25e>
 800378a:	bf00      	nop
 800378c:	f3af 8000 	nop.w
 8003790:	636f4361 	.word	0x636f4361
 8003794:	3fd287a7 	.word	0x3fd287a7
 8003798:	8b60c8b3 	.word	0x8b60c8b3
 800379c:	3fc68a28 	.word	0x3fc68a28
 80037a0:	509f79fb 	.word	0x509f79fb
 80037a4:	3fd34413 	.word	0x3fd34413
 80037a8:	0800519b 	.word	0x0800519b
 80037ac:	080051b2 	.word	0x080051b2
 80037b0:	7ff00000 	.word	0x7ff00000
 80037b4:	08005197 	.word	0x08005197
 80037b8:	0800516b 	.word	0x0800516b
 80037bc:	0800516a 	.word	0x0800516a
 80037c0:	3ff80000 	.word	0x3ff80000
 80037c4:	08005300 	.word	0x08005300
 80037c8:	0800520a 	.word	0x0800520a
 80037cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80037d0:	6018      	str	r0, [r3, #0]
 80037d2:	9b08      	ldr	r3, [sp, #32]
 80037d4:	2b0e      	cmp	r3, #14
 80037d6:	f200 80a1 	bhi.w	800391c <_dtoa_r+0x44c>
 80037da:	2c00      	cmp	r4, #0
 80037dc:	f000 809e 	beq.w	800391c <_dtoa_r+0x44c>
 80037e0:	2f00      	cmp	r7, #0
 80037e2:	dd33      	ble.n	800384c <_dtoa_r+0x37c>
 80037e4:	4b9c      	ldr	r3, [pc, #624]	@ (8003a58 <_dtoa_r+0x588>)
 80037e6:	f007 020f 	and.w	r2, r7, #15
 80037ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037ee:	05f8      	lsls	r0, r7, #23
 80037f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80037f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80037f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80037fc:	d516      	bpl.n	800382c <_dtoa_r+0x35c>
 80037fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003802:	4b96      	ldr	r3, [pc, #600]	@ (8003a5c <_dtoa_r+0x58c>)
 8003804:	2603      	movs	r6, #3
 8003806:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800380a:	f7fc ff8f 	bl	800072c <__aeabi_ddiv>
 800380e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003812:	f004 040f 	and.w	r4, r4, #15
 8003816:	4d91      	ldr	r5, [pc, #580]	@ (8003a5c <_dtoa_r+0x58c>)
 8003818:	b954      	cbnz	r4, 8003830 <_dtoa_r+0x360>
 800381a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800381e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003822:	f7fc ff83 	bl	800072c <__aeabi_ddiv>
 8003826:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800382a:	e028      	b.n	800387e <_dtoa_r+0x3ae>
 800382c:	2602      	movs	r6, #2
 800382e:	e7f2      	b.n	8003816 <_dtoa_r+0x346>
 8003830:	07e1      	lsls	r1, r4, #31
 8003832:	d508      	bpl.n	8003846 <_dtoa_r+0x376>
 8003834:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003838:	e9d5 2300 	ldrd	r2, r3, [r5]
 800383c:	f7fc fe4c 	bl	80004d8 <__aeabi_dmul>
 8003840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003844:	3601      	adds	r6, #1
 8003846:	1064      	asrs	r4, r4, #1
 8003848:	3508      	adds	r5, #8
 800384a:	e7e5      	b.n	8003818 <_dtoa_r+0x348>
 800384c:	f000 80af 	beq.w	80039ae <_dtoa_r+0x4de>
 8003850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003854:	427c      	negs	r4, r7
 8003856:	4b80      	ldr	r3, [pc, #512]	@ (8003a58 <_dtoa_r+0x588>)
 8003858:	f004 020f 	and.w	r2, r4, #15
 800385c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fe38 	bl	80004d8 <__aeabi_dmul>
 8003868:	2602      	movs	r6, #2
 800386a:	2300      	movs	r3, #0
 800386c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003870:	4d7a      	ldr	r5, [pc, #488]	@ (8003a5c <_dtoa_r+0x58c>)
 8003872:	1124      	asrs	r4, r4, #4
 8003874:	2c00      	cmp	r4, #0
 8003876:	f040 808f 	bne.w	8003998 <_dtoa_r+0x4c8>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1d3      	bne.n	8003826 <_dtoa_r+0x356>
 800387e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003882:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8094 	beq.w	80039b2 <_dtoa_r+0x4e2>
 800388a:	2200      	movs	r2, #0
 800388c:	4620      	mov	r0, r4
 800388e:	4629      	mov	r1, r5
 8003890:	4b73      	ldr	r3, [pc, #460]	@ (8003a60 <_dtoa_r+0x590>)
 8003892:	f7fd f893 	bl	80009bc <__aeabi_dcmplt>
 8003896:	2800      	cmp	r0, #0
 8003898:	f000 808b 	beq.w	80039b2 <_dtoa_r+0x4e2>
 800389c:	9b08      	ldr	r3, [sp, #32]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8087 	beq.w	80039b2 <_dtoa_r+0x4e2>
 80038a4:	f1bb 0f00 	cmp.w	fp, #0
 80038a8:	dd34      	ble.n	8003914 <_dtoa_r+0x444>
 80038aa:	4620      	mov	r0, r4
 80038ac:	2200      	movs	r2, #0
 80038ae:	4629      	mov	r1, r5
 80038b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a64 <_dtoa_r+0x594>)
 80038b2:	f7fc fe11 	bl	80004d8 <__aeabi_dmul>
 80038b6:	465c      	mov	r4, fp
 80038b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80038bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80038c0:	3601      	adds	r6, #1
 80038c2:	4630      	mov	r0, r6
 80038c4:	f7fc fd9e 	bl	8000404 <__aeabi_i2d>
 80038c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80038cc:	f7fc fe04 	bl	80004d8 <__aeabi_dmul>
 80038d0:	2200      	movs	r2, #0
 80038d2:	4b65      	ldr	r3, [pc, #404]	@ (8003a68 <_dtoa_r+0x598>)
 80038d4:	f7fc fc4a 	bl	800016c <__adddf3>
 80038d8:	4605      	mov	r5, r0
 80038da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80038de:	2c00      	cmp	r4, #0
 80038e0:	d16a      	bne.n	80039b8 <_dtoa_r+0x4e8>
 80038e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038e6:	2200      	movs	r2, #0
 80038e8:	4b60      	ldr	r3, [pc, #384]	@ (8003a6c <_dtoa_r+0x59c>)
 80038ea:	f7fc fc3d 	bl	8000168 <__aeabi_dsub>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80038f6:	462a      	mov	r2, r5
 80038f8:	4633      	mov	r3, r6
 80038fa:	f7fd f87d 	bl	80009f8 <__aeabi_dcmpgt>
 80038fe:	2800      	cmp	r0, #0
 8003900:	f040 8298 	bne.w	8003e34 <_dtoa_r+0x964>
 8003904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003908:	462a      	mov	r2, r5
 800390a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800390e:	f7fd f855 	bl	80009bc <__aeabi_dcmplt>
 8003912:	bb38      	cbnz	r0, 8003964 <_dtoa_r+0x494>
 8003914:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003918:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800391c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800391e:	2b00      	cmp	r3, #0
 8003920:	f2c0 8157 	blt.w	8003bd2 <_dtoa_r+0x702>
 8003924:	2f0e      	cmp	r7, #14
 8003926:	f300 8154 	bgt.w	8003bd2 <_dtoa_r+0x702>
 800392a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a58 <_dtoa_r+0x588>)
 800392c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003930:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003934:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003938:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800393a:	2b00      	cmp	r3, #0
 800393c:	f280 80e5 	bge.w	8003b0a <_dtoa_r+0x63a>
 8003940:	9b08      	ldr	r3, [sp, #32]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f300 80e1 	bgt.w	8003b0a <_dtoa_r+0x63a>
 8003948:	d10c      	bne.n	8003964 <_dtoa_r+0x494>
 800394a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800394e:	2200      	movs	r2, #0
 8003950:	4b46      	ldr	r3, [pc, #280]	@ (8003a6c <_dtoa_r+0x59c>)
 8003952:	f7fc fdc1 	bl	80004d8 <__aeabi_dmul>
 8003956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800395a:	f7fd f843 	bl	80009e4 <__aeabi_dcmpge>
 800395e:	2800      	cmp	r0, #0
 8003960:	f000 8266 	beq.w	8003e30 <_dtoa_r+0x960>
 8003964:	2400      	movs	r4, #0
 8003966:	4625      	mov	r5, r4
 8003968:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800396a:	4656      	mov	r6, sl
 800396c:	ea6f 0803 	mvn.w	r8, r3
 8003970:	2700      	movs	r7, #0
 8003972:	4621      	mov	r1, r4
 8003974:	4648      	mov	r0, r9
 8003976:	f000 fcbd 	bl	80042f4 <_Bfree>
 800397a:	2d00      	cmp	r5, #0
 800397c:	f000 80bd 	beq.w	8003afa <_dtoa_r+0x62a>
 8003980:	b12f      	cbz	r7, 800398e <_dtoa_r+0x4be>
 8003982:	42af      	cmp	r7, r5
 8003984:	d003      	beq.n	800398e <_dtoa_r+0x4be>
 8003986:	4639      	mov	r1, r7
 8003988:	4648      	mov	r0, r9
 800398a:	f000 fcb3 	bl	80042f4 <_Bfree>
 800398e:	4629      	mov	r1, r5
 8003990:	4648      	mov	r0, r9
 8003992:	f000 fcaf 	bl	80042f4 <_Bfree>
 8003996:	e0b0      	b.n	8003afa <_dtoa_r+0x62a>
 8003998:	07e2      	lsls	r2, r4, #31
 800399a:	d505      	bpl.n	80039a8 <_dtoa_r+0x4d8>
 800399c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80039a0:	f7fc fd9a 	bl	80004d8 <__aeabi_dmul>
 80039a4:	2301      	movs	r3, #1
 80039a6:	3601      	adds	r6, #1
 80039a8:	1064      	asrs	r4, r4, #1
 80039aa:	3508      	adds	r5, #8
 80039ac:	e762      	b.n	8003874 <_dtoa_r+0x3a4>
 80039ae:	2602      	movs	r6, #2
 80039b0:	e765      	b.n	800387e <_dtoa_r+0x3ae>
 80039b2:	46b8      	mov	r8, r7
 80039b4:	9c08      	ldr	r4, [sp, #32]
 80039b6:	e784      	b.n	80038c2 <_dtoa_r+0x3f2>
 80039b8:	4b27      	ldr	r3, [pc, #156]	@ (8003a58 <_dtoa_r+0x588>)
 80039ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80039bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80039c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80039c4:	4454      	add	r4, sl
 80039c6:	2900      	cmp	r1, #0
 80039c8:	d054      	beq.n	8003a74 <_dtoa_r+0x5a4>
 80039ca:	2000      	movs	r0, #0
 80039cc:	4928      	ldr	r1, [pc, #160]	@ (8003a70 <_dtoa_r+0x5a0>)
 80039ce:	f7fc fead 	bl	800072c <__aeabi_ddiv>
 80039d2:	4633      	mov	r3, r6
 80039d4:	462a      	mov	r2, r5
 80039d6:	f7fc fbc7 	bl	8000168 <__aeabi_dsub>
 80039da:	4656      	mov	r6, sl
 80039dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80039e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039e4:	f7fd f828 	bl	8000a38 <__aeabi_d2iz>
 80039e8:	4605      	mov	r5, r0
 80039ea:	f7fc fd0b 	bl	8000404 <__aeabi_i2d>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039f6:	f7fc fbb7 	bl	8000168 <__aeabi_dsub>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	3530      	adds	r5, #48	@ 0x30
 8003a00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003a08:	f806 5b01 	strb.w	r5, [r6], #1
 8003a0c:	f7fc ffd6 	bl	80009bc <__aeabi_dcmplt>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d172      	bne.n	8003afa <_dtoa_r+0x62a>
 8003a14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003a18:	2000      	movs	r0, #0
 8003a1a:	4911      	ldr	r1, [pc, #68]	@ (8003a60 <_dtoa_r+0x590>)
 8003a1c:	f7fc fba4 	bl	8000168 <__aeabi_dsub>
 8003a20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003a24:	f7fc ffca 	bl	80009bc <__aeabi_dcmplt>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	f040 80b4 	bne.w	8003b96 <_dtoa_r+0x6c6>
 8003a2e:	42a6      	cmp	r6, r4
 8003a30:	f43f af70 	beq.w	8003914 <_dtoa_r+0x444>
 8003a34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a64 <_dtoa_r+0x594>)
 8003a3c:	f7fc fd4c 	bl	80004d8 <__aeabi_dmul>
 8003a40:	2200      	movs	r2, #0
 8003a42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a4a:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <_dtoa_r+0x594>)
 8003a4c:	f7fc fd44 	bl	80004d8 <__aeabi_dmul>
 8003a50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003a54:	e7c4      	b.n	80039e0 <_dtoa_r+0x510>
 8003a56:	bf00      	nop
 8003a58:	08005300 	.word	0x08005300
 8003a5c:	080052d8 	.word	0x080052d8
 8003a60:	3ff00000 	.word	0x3ff00000
 8003a64:	40240000 	.word	0x40240000
 8003a68:	401c0000 	.word	0x401c0000
 8003a6c:	40140000 	.word	0x40140000
 8003a70:	3fe00000 	.word	0x3fe00000
 8003a74:	4631      	mov	r1, r6
 8003a76:	4628      	mov	r0, r5
 8003a78:	f7fc fd2e 	bl	80004d8 <__aeabi_dmul>
 8003a7c:	4656      	mov	r6, sl
 8003a7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003a82:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a88:	f7fc ffd6 	bl	8000a38 <__aeabi_d2iz>
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	f7fc fcb9 	bl	8000404 <__aeabi_i2d>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a9a:	f7fc fb65 	bl	8000168 <__aeabi_dsub>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	3530      	adds	r5, #48	@ 0x30
 8003aa4:	f806 5b01 	strb.w	r5, [r6], #1
 8003aa8:	42a6      	cmp	r6, r4
 8003aaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	d124      	bne.n	8003afe <_dtoa_r+0x62e>
 8003ab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003ab8:	4bae      	ldr	r3, [pc, #696]	@ (8003d74 <_dtoa_r+0x8a4>)
 8003aba:	f7fc fb57 	bl	800016c <__adddf3>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ac6:	f7fc ff97 	bl	80009f8 <__aeabi_dcmpgt>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d163      	bne.n	8003b96 <_dtoa_r+0x6c6>
 8003ace:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	49a7      	ldr	r1, [pc, #668]	@ (8003d74 <_dtoa_r+0x8a4>)
 8003ad6:	f7fc fb47 	bl	8000168 <__aeabi_dsub>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ae2:	f7fc ff6b 	bl	80009bc <__aeabi_dcmplt>
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	f43f af14 	beq.w	8003914 <_dtoa_r+0x444>
 8003aec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003aee:	1e73      	subs	r3, r6, #1
 8003af0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003af2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003af6:	2b30      	cmp	r3, #48	@ 0x30
 8003af8:	d0f8      	beq.n	8003aec <_dtoa_r+0x61c>
 8003afa:	4647      	mov	r7, r8
 8003afc:	e03b      	b.n	8003b76 <_dtoa_r+0x6a6>
 8003afe:	4b9e      	ldr	r3, [pc, #632]	@ (8003d78 <_dtoa_r+0x8a8>)
 8003b00:	f7fc fcea 	bl	80004d8 <__aeabi_dmul>
 8003b04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b08:	e7bc      	b.n	8003a84 <_dtoa_r+0x5b4>
 8003b0a:	4656      	mov	r6, sl
 8003b0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b14:	4620      	mov	r0, r4
 8003b16:	4629      	mov	r1, r5
 8003b18:	f7fc fe08 	bl	800072c <__aeabi_ddiv>
 8003b1c:	f7fc ff8c 	bl	8000a38 <__aeabi_d2iz>
 8003b20:	4680      	mov	r8, r0
 8003b22:	f7fc fc6f 	bl	8000404 <__aeabi_i2d>
 8003b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b2a:	f7fc fcd5 	bl	80004d8 <__aeabi_dmul>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4620      	mov	r0, r4
 8003b34:	4629      	mov	r1, r5
 8003b36:	f7fc fb17 	bl	8000168 <__aeabi_dsub>
 8003b3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003b3e:	9d08      	ldr	r5, [sp, #32]
 8003b40:	f806 4b01 	strb.w	r4, [r6], #1
 8003b44:	eba6 040a 	sub.w	r4, r6, sl
 8003b48:	42a5      	cmp	r5, r4
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	d133      	bne.n	8003bb8 <_dtoa_r+0x6e8>
 8003b50:	f7fc fb0c 	bl	800016c <__adddf3>
 8003b54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b58:	4604      	mov	r4, r0
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	f7fc ff4c 	bl	80009f8 <__aeabi_dcmpgt>
 8003b60:	b9c0      	cbnz	r0, 8003b94 <_dtoa_r+0x6c4>
 8003b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b66:	4620      	mov	r0, r4
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7fc ff1d 	bl	80009a8 <__aeabi_dcmpeq>
 8003b6e:	b110      	cbz	r0, 8003b76 <_dtoa_r+0x6a6>
 8003b70:	f018 0f01 	tst.w	r8, #1
 8003b74:	d10e      	bne.n	8003b94 <_dtoa_r+0x6c4>
 8003b76:	4648      	mov	r0, r9
 8003b78:	9903      	ldr	r1, [sp, #12]
 8003b7a:	f000 fbbb 	bl	80042f4 <_Bfree>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	7033      	strb	r3, [r6, #0]
 8003b82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003b84:	3701      	adds	r7, #1
 8003b86:	601f      	str	r7, [r3, #0]
 8003b88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 824b 	beq.w	8004026 <_dtoa_r+0xb56>
 8003b90:	601e      	str	r6, [r3, #0]
 8003b92:	e248      	b.n	8004026 <_dtoa_r+0xb56>
 8003b94:	46b8      	mov	r8, r7
 8003b96:	4633      	mov	r3, r6
 8003b98:	461e      	mov	r6, r3
 8003b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b9e:	2a39      	cmp	r2, #57	@ 0x39
 8003ba0:	d106      	bne.n	8003bb0 <_dtoa_r+0x6e0>
 8003ba2:	459a      	cmp	sl, r3
 8003ba4:	d1f8      	bne.n	8003b98 <_dtoa_r+0x6c8>
 8003ba6:	2230      	movs	r2, #48	@ 0x30
 8003ba8:	f108 0801 	add.w	r8, r8, #1
 8003bac:	f88a 2000 	strb.w	r2, [sl]
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	3201      	adds	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e7a0      	b.n	8003afa <_dtoa_r+0x62a>
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4b6f      	ldr	r3, [pc, #444]	@ (8003d78 <_dtoa_r+0x8a8>)
 8003bbc:	f7fc fc8c 	bl	80004d8 <__aeabi_dmul>
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	460d      	mov	r5, r1
 8003bc8:	f7fc feee 	bl	80009a8 <__aeabi_dcmpeq>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d09f      	beq.n	8003b10 <_dtoa_r+0x640>
 8003bd0:	e7d1      	b.n	8003b76 <_dtoa_r+0x6a6>
 8003bd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003bd4:	2a00      	cmp	r2, #0
 8003bd6:	f000 80ea 	beq.w	8003dae <_dtoa_r+0x8de>
 8003bda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003bdc:	2a01      	cmp	r2, #1
 8003bde:	f300 80cd 	bgt.w	8003d7c <_dtoa_r+0x8ac>
 8003be2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003be4:	2a00      	cmp	r2, #0
 8003be6:	f000 80c1 	beq.w	8003d6c <_dtoa_r+0x89c>
 8003bea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003bee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003bf0:	9e04      	ldr	r6, [sp, #16]
 8003bf2:	9a04      	ldr	r2, [sp, #16]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	441a      	add	r2, r3
 8003bf8:	9204      	str	r2, [sp, #16]
 8003bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bfc:	4648      	mov	r0, r9
 8003bfe:	441a      	add	r2, r3
 8003c00:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c02:	f000 fc2b 	bl	800445c <__i2b>
 8003c06:	4605      	mov	r5, r0
 8003c08:	b166      	cbz	r6, 8003c24 <_dtoa_r+0x754>
 8003c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	dd09      	ble.n	8003c24 <_dtoa_r+0x754>
 8003c10:	42b3      	cmp	r3, r6
 8003c12:	bfa8      	it	ge
 8003c14:	4633      	movge	r3, r6
 8003c16:	9a04      	ldr	r2, [sp, #16]
 8003c18:	1af6      	subs	r6, r6, r3
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	9204      	str	r2, [sp, #16]
 8003c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c26:	b30b      	cbz	r3, 8003c6c <_dtoa_r+0x79c>
 8003c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80c6 	beq.w	8003dbc <_dtoa_r+0x8ec>
 8003c30:	2c00      	cmp	r4, #0
 8003c32:	f000 80c0 	beq.w	8003db6 <_dtoa_r+0x8e6>
 8003c36:	4629      	mov	r1, r5
 8003c38:	4622      	mov	r2, r4
 8003c3a:	4648      	mov	r0, r9
 8003c3c:	f000 fcc6 	bl	80045cc <__pow5mult>
 8003c40:	9a03      	ldr	r2, [sp, #12]
 8003c42:	4601      	mov	r1, r0
 8003c44:	4605      	mov	r5, r0
 8003c46:	4648      	mov	r0, r9
 8003c48:	f000 fc1e 	bl	8004488 <__multiply>
 8003c4c:	9903      	ldr	r1, [sp, #12]
 8003c4e:	4680      	mov	r8, r0
 8003c50:	4648      	mov	r0, r9
 8003c52:	f000 fb4f 	bl	80042f4 <_Bfree>
 8003c56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c58:	1b1b      	subs	r3, r3, r4
 8003c5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c5c:	f000 80b1 	beq.w	8003dc2 <_dtoa_r+0x8f2>
 8003c60:	4641      	mov	r1, r8
 8003c62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c64:	4648      	mov	r0, r9
 8003c66:	f000 fcb1 	bl	80045cc <__pow5mult>
 8003c6a:	9003      	str	r0, [sp, #12]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4648      	mov	r0, r9
 8003c70:	f000 fbf4 	bl	800445c <__i2b>
 8003c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c76:	4604      	mov	r4, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 81d8 	beq.w	800402e <_dtoa_r+0xb5e>
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4601      	mov	r1, r0
 8003c82:	4648      	mov	r0, r9
 8003c84:	f000 fca2 	bl	80045cc <__pow5mult>
 8003c88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	f300 809f 	bgt.w	8003dd0 <_dtoa_r+0x900>
 8003c92:	9b06      	ldr	r3, [sp, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 8097 	bne.w	8003dc8 <_dtoa_r+0x8f8>
 8003c9a:	9b07      	ldr	r3, [sp, #28]
 8003c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 8093 	bne.w	8003dcc <_dtoa_r+0x8fc>
 8003ca6:	9b07      	ldr	r3, [sp, #28]
 8003ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cac:	0d1b      	lsrs	r3, r3, #20
 8003cae:	051b      	lsls	r3, r3, #20
 8003cb0:	b133      	cbz	r3, 8003cc0 <_dtoa_r+0x7f0>
 8003cb2:	9b04      	ldr	r3, [sp, #16]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	9304      	str	r3, [sp, #16]
 8003cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cba:	3301      	adds	r3, #1
 8003cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 81b8 	beq.w	800403a <_dtoa_r+0xb6a>
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003cd0:	6918      	ldr	r0, [r3, #16]
 8003cd2:	f000 fb77 	bl	80043c4 <__hi0bits>
 8003cd6:	f1c0 0020 	rsb	r0, r0, #32
 8003cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cdc:	4418      	add	r0, r3
 8003cde:	f010 001f 	ands.w	r0, r0, #31
 8003ce2:	f000 8082 	beq.w	8003dea <_dtoa_r+0x91a>
 8003ce6:	f1c0 0320 	rsb	r3, r0, #32
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	dd73      	ble.n	8003dd6 <_dtoa_r+0x906>
 8003cee:	9b04      	ldr	r3, [sp, #16]
 8003cf0:	f1c0 001c 	rsb	r0, r0, #28
 8003cf4:	4403      	add	r3, r0
 8003cf6:	9304      	str	r3, [sp, #16]
 8003cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cfa:	4406      	add	r6, r0
 8003cfc:	4403      	add	r3, r0
 8003cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d00:	9b04      	ldr	r3, [sp, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	dd05      	ble.n	8003d12 <_dtoa_r+0x842>
 8003d06:	461a      	mov	r2, r3
 8003d08:	4648      	mov	r0, r9
 8003d0a:	9903      	ldr	r1, [sp, #12]
 8003d0c:	f000 fcb8 	bl	8004680 <__lshift>
 8003d10:	9003      	str	r0, [sp, #12]
 8003d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	dd05      	ble.n	8003d24 <_dtoa_r+0x854>
 8003d18:	4621      	mov	r1, r4
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4648      	mov	r0, r9
 8003d1e:	f000 fcaf 	bl	8004680 <__lshift>
 8003d22:	4604      	mov	r4, r0
 8003d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d061      	beq.n	8003dee <_dtoa_r+0x91e>
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	9803      	ldr	r0, [sp, #12]
 8003d2e:	f000 fd13 	bl	8004758 <__mcmp>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	da5b      	bge.n	8003dee <_dtoa_r+0x91e>
 8003d36:	2300      	movs	r3, #0
 8003d38:	220a      	movs	r2, #10
 8003d3a:	4648      	mov	r0, r9
 8003d3c:	9903      	ldr	r1, [sp, #12]
 8003d3e:	f000 fafb 	bl	8004338 <__multadd>
 8003d42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d44:	f107 38ff 	add.w	r8, r7, #4294967295
 8003d48:	9003      	str	r0, [sp, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8177 	beq.w	800403e <_dtoa_r+0xb6e>
 8003d50:	4629      	mov	r1, r5
 8003d52:	2300      	movs	r3, #0
 8003d54:	220a      	movs	r2, #10
 8003d56:	4648      	mov	r0, r9
 8003d58:	f000 faee 	bl	8004338 <__multadd>
 8003d5c:	f1bb 0f00 	cmp.w	fp, #0
 8003d60:	4605      	mov	r5, r0
 8003d62:	dc6f      	bgt.n	8003e44 <_dtoa_r+0x974>
 8003d64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	dc49      	bgt.n	8003dfe <_dtoa_r+0x92e>
 8003d6a:	e06b      	b.n	8003e44 <_dtoa_r+0x974>
 8003d6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003d72:	e73c      	b.n	8003bee <_dtoa_r+0x71e>
 8003d74:	3fe00000 	.word	0x3fe00000
 8003d78:	40240000 	.word	0x40240000
 8003d7c:	9b08      	ldr	r3, [sp, #32]
 8003d7e:	1e5c      	subs	r4, r3, #1
 8003d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d82:	42a3      	cmp	r3, r4
 8003d84:	db09      	blt.n	8003d9a <_dtoa_r+0x8ca>
 8003d86:	1b1c      	subs	r4, r3, r4
 8003d88:	9b08      	ldr	r3, [sp, #32]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f6bf af30 	bge.w	8003bf0 <_dtoa_r+0x720>
 8003d90:	9b04      	ldr	r3, [sp, #16]
 8003d92:	9a08      	ldr	r2, [sp, #32]
 8003d94:	1a9e      	subs	r6, r3, r2
 8003d96:	2300      	movs	r3, #0
 8003d98:	e72b      	b.n	8003bf2 <_dtoa_r+0x722>
 8003d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d9e:	1ae3      	subs	r3, r4, r3
 8003da0:	441a      	add	r2, r3
 8003da2:	940a      	str	r4, [sp, #40]	@ 0x28
 8003da4:	9e04      	ldr	r6, [sp, #16]
 8003da6:	2400      	movs	r4, #0
 8003da8:	9b08      	ldr	r3, [sp, #32]
 8003daa:	920e      	str	r2, [sp, #56]	@ 0x38
 8003dac:	e721      	b.n	8003bf2 <_dtoa_r+0x722>
 8003dae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003db0:	9e04      	ldr	r6, [sp, #16]
 8003db2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003db4:	e728      	b.n	8003c08 <_dtoa_r+0x738>
 8003db6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003dba:	e751      	b.n	8003c60 <_dtoa_r+0x790>
 8003dbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003dbe:	9903      	ldr	r1, [sp, #12]
 8003dc0:	e750      	b.n	8003c64 <_dtoa_r+0x794>
 8003dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dc6:	e751      	b.n	8003c6c <_dtoa_r+0x79c>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e779      	b.n	8003cc0 <_dtoa_r+0x7f0>
 8003dcc:	9b06      	ldr	r3, [sp, #24]
 8003dce:	e777      	b.n	8003cc0 <_dtoa_r+0x7f0>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003dd4:	e779      	b.n	8003cca <_dtoa_r+0x7fa>
 8003dd6:	d093      	beq.n	8003d00 <_dtoa_r+0x830>
 8003dd8:	9a04      	ldr	r2, [sp, #16]
 8003dda:	331c      	adds	r3, #28
 8003ddc:	441a      	add	r2, r3
 8003dde:	9204      	str	r2, [sp, #16]
 8003de0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003de2:	441e      	add	r6, r3
 8003de4:	441a      	add	r2, r3
 8003de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003de8:	e78a      	b.n	8003d00 <_dtoa_r+0x830>
 8003dea:	4603      	mov	r3, r0
 8003dec:	e7f4      	b.n	8003dd8 <_dtoa_r+0x908>
 8003dee:	9b08      	ldr	r3, [sp, #32]
 8003df0:	46b8      	mov	r8, r7
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	dc20      	bgt.n	8003e38 <_dtoa_r+0x968>
 8003df6:	469b      	mov	fp, r3
 8003df8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	dd1e      	ble.n	8003e3c <_dtoa_r+0x96c>
 8003dfe:	f1bb 0f00 	cmp.w	fp, #0
 8003e02:	f47f adb1 	bne.w	8003968 <_dtoa_r+0x498>
 8003e06:	4621      	mov	r1, r4
 8003e08:	465b      	mov	r3, fp
 8003e0a:	2205      	movs	r2, #5
 8003e0c:	4648      	mov	r0, r9
 8003e0e:	f000 fa93 	bl	8004338 <__multadd>
 8003e12:	4601      	mov	r1, r0
 8003e14:	4604      	mov	r4, r0
 8003e16:	9803      	ldr	r0, [sp, #12]
 8003e18:	f000 fc9e 	bl	8004758 <__mcmp>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	f77f ada3 	ble.w	8003968 <_dtoa_r+0x498>
 8003e22:	4656      	mov	r6, sl
 8003e24:	2331      	movs	r3, #49	@ 0x31
 8003e26:	f108 0801 	add.w	r8, r8, #1
 8003e2a:	f806 3b01 	strb.w	r3, [r6], #1
 8003e2e:	e59f      	b.n	8003970 <_dtoa_r+0x4a0>
 8003e30:	46b8      	mov	r8, r7
 8003e32:	9c08      	ldr	r4, [sp, #32]
 8003e34:	4625      	mov	r5, r4
 8003e36:	e7f4      	b.n	8003e22 <_dtoa_r+0x952>
 8003e38:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8101 	beq.w	8004046 <_dtoa_r+0xb76>
 8003e44:	2e00      	cmp	r6, #0
 8003e46:	dd05      	ble.n	8003e54 <_dtoa_r+0x984>
 8003e48:	4629      	mov	r1, r5
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	4648      	mov	r0, r9
 8003e4e:	f000 fc17 	bl	8004680 <__lshift>
 8003e52:	4605      	mov	r5, r0
 8003e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d05c      	beq.n	8003f14 <_dtoa_r+0xa44>
 8003e5a:	4648      	mov	r0, r9
 8003e5c:	6869      	ldr	r1, [r5, #4]
 8003e5e:	f000 fa09 	bl	8004274 <_Balloc>
 8003e62:	4606      	mov	r6, r0
 8003e64:	b928      	cbnz	r0, 8003e72 <_dtoa_r+0x9a2>
 8003e66:	4602      	mov	r2, r0
 8003e68:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003e6c:	4b80      	ldr	r3, [pc, #512]	@ (8004070 <_dtoa_r+0xba0>)
 8003e6e:	f7ff bb43 	b.w	80034f8 <_dtoa_r+0x28>
 8003e72:	692a      	ldr	r2, [r5, #16]
 8003e74:	f105 010c 	add.w	r1, r5, #12
 8003e78:	3202      	adds	r2, #2
 8003e7a:	0092      	lsls	r2, r2, #2
 8003e7c:	300c      	adds	r0, #12
 8003e7e:	f000 fe2b 	bl	8004ad8 <memcpy>
 8003e82:	2201      	movs	r2, #1
 8003e84:	4631      	mov	r1, r6
 8003e86:	4648      	mov	r0, r9
 8003e88:	f000 fbfa 	bl	8004680 <__lshift>
 8003e8c:	462f      	mov	r7, r5
 8003e8e:	4605      	mov	r5, r0
 8003e90:	f10a 0301 	add.w	r3, sl, #1
 8003e94:	9304      	str	r3, [sp, #16]
 8003e96:	eb0a 030b 	add.w	r3, sl, fp
 8003e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e9c:	9b06      	ldr	r3, [sp, #24]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ea4:	9b04      	ldr	r3, [sp, #16]
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	9803      	ldr	r0, [sp, #12]
 8003eaa:	f103 3bff 	add.w	fp, r3, #4294967295
 8003eae:	f7ff fa86 	bl	80033be <quorem>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	3330      	adds	r3, #48	@ 0x30
 8003eb8:	9006      	str	r0, [sp, #24]
 8003eba:	9803      	ldr	r0, [sp, #12]
 8003ebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ebe:	f000 fc4b 	bl	8004758 <__mcmp>
 8003ec2:	462a      	mov	r2, r5
 8003ec4:	9008      	str	r0, [sp, #32]
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	4648      	mov	r0, r9
 8003eca:	f000 fc61 	bl	8004790 <__mdiff>
 8003ece:	68c2      	ldr	r2, [r0, #12]
 8003ed0:	4606      	mov	r6, r0
 8003ed2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ed4:	bb02      	cbnz	r2, 8003f18 <_dtoa_r+0xa48>
 8003ed6:	4601      	mov	r1, r0
 8003ed8:	9803      	ldr	r0, [sp, #12]
 8003eda:	f000 fc3d 	bl	8004758 <__mcmp>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4648      	mov	r0, r9
 8003ee6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8003eea:	f000 fa03 	bl	80042f4 <_Bfree>
 8003eee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ef0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003ef2:	9e04      	ldr	r6, [sp, #16]
 8003ef4:	ea42 0103 	orr.w	r1, r2, r3
 8003ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003efa:	4319      	orrs	r1, r3
 8003efc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003efe:	d10d      	bne.n	8003f1c <_dtoa_r+0xa4c>
 8003f00:	2b39      	cmp	r3, #57	@ 0x39
 8003f02:	d027      	beq.n	8003f54 <_dtoa_r+0xa84>
 8003f04:	9a08      	ldr	r2, [sp, #32]
 8003f06:	2a00      	cmp	r2, #0
 8003f08:	dd01      	ble.n	8003f0e <_dtoa_r+0xa3e>
 8003f0a:	9b06      	ldr	r3, [sp, #24]
 8003f0c:	3331      	adds	r3, #49	@ 0x31
 8003f0e:	f88b 3000 	strb.w	r3, [fp]
 8003f12:	e52e      	b.n	8003972 <_dtoa_r+0x4a2>
 8003f14:	4628      	mov	r0, r5
 8003f16:	e7b9      	b.n	8003e8c <_dtoa_r+0x9bc>
 8003f18:	2201      	movs	r2, #1
 8003f1a:	e7e2      	b.n	8003ee2 <_dtoa_r+0xa12>
 8003f1c:	9908      	ldr	r1, [sp, #32]
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	db04      	blt.n	8003f2c <_dtoa_r+0xa5c>
 8003f22:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8003f24:	4301      	orrs	r1, r0
 8003f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f28:	4301      	orrs	r1, r0
 8003f2a:	d120      	bne.n	8003f6e <_dtoa_r+0xa9e>
 8003f2c:	2a00      	cmp	r2, #0
 8003f2e:	ddee      	ble.n	8003f0e <_dtoa_r+0xa3e>
 8003f30:	2201      	movs	r2, #1
 8003f32:	9903      	ldr	r1, [sp, #12]
 8003f34:	4648      	mov	r0, r9
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	f000 fba2 	bl	8004680 <__lshift>
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	9003      	str	r0, [sp, #12]
 8003f40:	f000 fc0a 	bl	8004758 <__mcmp>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	9b04      	ldr	r3, [sp, #16]
 8003f48:	dc02      	bgt.n	8003f50 <_dtoa_r+0xa80>
 8003f4a:	d1e0      	bne.n	8003f0e <_dtoa_r+0xa3e>
 8003f4c:	07da      	lsls	r2, r3, #31
 8003f4e:	d5de      	bpl.n	8003f0e <_dtoa_r+0xa3e>
 8003f50:	2b39      	cmp	r3, #57	@ 0x39
 8003f52:	d1da      	bne.n	8003f0a <_dtoa_r+0xa3a>
 8003f54:	2339      	movs	r3, #57	@ 0x39
 8003f56:	f88b 3000 	strb.w	r3, [fp]
 8003f5a:	4633      	mov	r3, r6
 8003f5c:	461e      	mov	r6, r3
 8003f5e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	2a39      	cmp	r2, #57	@ 0x39
 8003f66:	d04e      	beq.n	8004006 <_dtoa_r+0xb36>
 8003f68:	3201      	adds	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e501      	b.n	8003972 <_dtoa_r+0x4a2>
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	dd03      	ble.n	8003f7a <_dtoa_r+0xaaa>
 8003f72:	2b39      	cmp	r3, #57	@ 0x39
 8003f74:	d0ee      	beq.n	8003f54 <_dtoa_r+0xa84>
 8003f76:	3301      	adds	r3, #1
 8003f78:	e7c9      	b.n	8003f0e <_dtoa_r+0xa3e>
 8003f7a:	9a04      	ldr	r2, [sp, #16]
 8003f7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003f7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003f82:	428a      	cmp	r2, r1
 8003f84:	d028      	beq.n	8003fd8 <_dtoa_r+0xb08>
 8003f86:	2300      	movs	r3, #0
 8003f88:	220a      	movs	r2, #10
 8003f8a:	9903      	ldr	r1, [sp, #12]
 8003f8c:	4648      	mov	r0, r9
 8003f8e:	f000 f9d3 	bl	8004338 <__multadd>
 8003f92:	42af      	cmp	r7, r5
 8003f94:	9003      	str	r0, [sp, #12]
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	f04f 020a 	mov.w	r2, #10
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	4648      	mov	r0, r9
 8003fa2:	d107      	bne.n	8003fb4 <_dtoa_r+0xae4>
 8003fa4:	f000 f9c8 	bl	8004338 <__multadd>
 8003fa8:	4607      	mov	r7, r0
 8003faa:	4605      	mov	r5, r0
 8003fac:	9b04      	ldr	r3, [sp, #16]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	9304      	str	r3, [sp, #16]
 8003fb2:	e777      	b.n	8003ea4 <_dtoa_r+0x9d4>
 8003fb4:	f000 f9c0 	bl	8004338 <__multadd>
 8003fb8:	4629      	mov	r1, r5
 8003fba:	4607      	mov	r7, r0
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	4648      	mov	r0, r9
 8003fc2:	f000 f9b9 	bl	8004338 <__multadd>
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	e7f0      	b.n	8003fac <_dtoa_r+0xadc>
 8003fca:	f1bb 0f00 	cmp.w	fp, #0
 8003fce:	bfcc      	ite	gt
 8003fd0:	465e      	movgt	r6, fp
 8003fd2:	2601      	movle	r6, #1
 8003fd4:	2700      	movs	r7, #0
 8003fd6:	4456      	add	r6, sl
 8003fd8:	2201      	movs	r2, #1
 8003fda:	9903      	ldr	r1, [sp, #12]
 8003fdc:	4648      	mov	r0, r9
 8003fde:	9304      	str	r3, [sp, #16]
 8003fe0:	f000 fb4e 	bl	8004680 <__lshift>
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	9003      	str	r0, [sp, #12]
 8003fe8:	f000 fbb6 	bl	8004758 <__mcmp>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	dcb4      	bgt.n	8003f5a <_dtoa_r+0xa8a>
 8003ff0:	d102      	bne.n	8003ff8 <_dtoa_r+0xb28>
 8003ff2:	9b04      	ldr	r3, [sp, #16]
 8003ff4:	07db      	lsls	r3, r3, #31
 8003ff6:	d4b0      	bmi.n	8003f5a <_dtoa_r+0xa8a>
 8003ff8:	4633      	mov	r3, r6
 8003ffa:	461e      	mov	r6, r3
 8003ffc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004000:	2a30      	cmp	r2, #48	@ 0x30
 8004002:	d0fa      	beq.n	8003ffa <_dtoa_r+0xb2a>
 8004004:	e4b5      	b.n	8003972 <_dtoa_r+0x4a2>
 8004006:	459a      	cmp	sl, r3
 8004008:	d1a8      	bne.n	8003f5c <_dtoa_r+0xa8c>
 800400a:	2331      	movs	r3, #49	@ 0x31
 800400c:	f108 0801 	add.w	r8, r8, #1
 8004010:	f88a 3000 	strb.w	r3, [sl]
 8004014:	e4ad      	b.n	8003972 <_dtoa_r+0x4a2>
 8004016:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004018:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004074 <_dtoa_r+0xba4>
 800401c:	b11b      	cbz	r3, 8004026 <_dtoa_r+0xb56>
 800401e:	f10a 0308 	add.w	r3, sl, #8
 8004022:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4650      	mov	r0, sl
 8004028:	b017      	add	sp, #92	@ 0x5c
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004030:	2b01      	cmp	r3, #1
 8004032:	f77f ae2e 	ble.w	8003c92 <_dtoa_r+0x7c2>
 8004036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004038:	930a      	str	r3, [sp, #40]	@ 0x28
 800403a:	2001      	movs	r0, #1
 800403c:	e64d      	b.n	8003cda <_dtoa_r+0x80a>
 800403e:	f1bb 0f00 	cmp.w	fp, #0
 8004042:	f77f aed9 	ble.w	8003df8 <_dtoa_r+0x928>
 8004046:	4656      	mov	r6, sl
 8004048:	4621      	mov	r1, r4
 800404a:	9803      	ldr	r0, [sp, #12]
 800404c:	f7ff f9b7 	bl	80033be <quorem>
 8004050:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004054:	f806 3b01 	strb.w	r3, [r6], #1
 8004058:	eba6 020a 	sub.w	r2, r6, sl
 800405c:	4593      	cmp	fp, r2
 800405e:	ddb4      	ble.n	8003fca <_dtoa_r+0xafa>
 8004060:	2300      	movs	r3, #0
 8004062:	220a      	movs	r2, #10
 8004064:	4648      	mov	r0, r9
 8004066:	9903      	ldr	r1, [sp, #12]
 8004068:	f000 f966 	bl	8004338 <__multadd>
 800406c:	9003      	str	r0, [sp, #12]
 800406e:	e7eb      	b.n	8004048 <_dtoa_r+0xb78>
 8004070:	0800520a 	.word	0x0800520a
 8004074:	0800518e 	.word	0x0800518e

08004078 <_free_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4605      	mov	r5, r0
 800407c:	2900      	cmp	r1, #0
 800407e:	d040      	beq.n	8004102 <_free_r+0x8a>
 8004080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004084:	1f0c      	subs	r4, r1, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	bfb8      	it	lt
 800408a:	18e4      	addlt	r4, r4, r3
 800408c:	f000 f8e6 	bl	800425c <__malloc_lock>
 8004090:	4a1c      	ldr	r2, [pc, #112]	@ (8004104 <_free_r+0x8c>)
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	b933      	cbnz	r3, 80040a4 <_free_r+0x2c>
 8004096:	6063      	str	r3, [r4, #4]
 8004098:	6014      	str	r4, [r2, #0]
 800409a:	4628      	mov	r0, r5
 800409c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040a0:	f000 b8e2 	b.w	8004268 <__malloc_unlock>
 80040a4:	42a3      	cmp	r3, r4
 80040a6:	d908      	bls.n	80040ba <_free_r+0x42>
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	1821      	adds	r1, r4, r0
 80040ac:	428b      	cmp	r3, r1
 80040ae:	bf01      	itttt	eq
 80040b0:	6819      	ldreq	r1, [r3, #0]
 80040b2:	685b      	ldreq	r3, [r3, #4]
 80040b4:	1809      	addeq	r1, r1, r0
 80040b6:	6021      	streq	r1, [r4, #0]
 80040b8:	e7ed      	b.n	8004096 <_free_r+0x1e>
 80040ba:	461a      	mov	r2, r3
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b10b      	cbz	r3, 80040c4 <_free_r+0x4c>
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	d9fa      	bls.n	80040ba <_free_r+0x42>
 80040c4:	6811      	ldr	r1, [r2, #0]
 80040c6:	1850      	adds	r0, r2, r1
 80040c8:	42a0      	cmp	r0, r4
 80040ca:	d10b      	bne.n	80040e4 <_free_r+0x6c>
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	4401      	add	r1, r0
 80040d0:	1850      	adds	r0, r2, r1
 80040d2:	4283      	cmp	r3, r0
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	d1e0      	bne.n	800409a <_free_r+0x22>
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4408      	add	r0, r1
 80040de:	6010      	str	r0, [r2, #0]
 80040e0:	6053      	str	r3, [r2, #4]
 80040e2:	e7da      	b.n	800409a <_free_r+0x22>
 80040e4:	d902      	bls.n	80040ec <_free_r+0x74>
 80040e6:	230c      	movs	r3, #12
 80040e8:	602b      	str	r3, [r5, #0]
 80040ea:	e7d6      	b.n	800409a <_free_r+0x22>
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	1821      	adds	r1, r4, r0
 80040f0:	428b      	cmp	r3, r1
 80040f2:	bf01      	itttt	eq
 80040f4:	6819      	ldreq	r1, [r3, #0]
 80040f6:	685b      	ldreq	r3, [r3, #4]
 80040f8:	1809      	addeq	r1, r1, r0
 80040fa:	6021      	streq	r1, [r4, #0]
 80040fc:	6063      	str	r3, [r4, #4]
 80040fe:	6054      	str	r4, [r2, #4]
 8004100:	e7cb      	b.n	800409a <_free_r+0x22>
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	20000394 	.word	0x20000394

08004108 <malloc>:
 8004108:	4b02      	ldr	r3, [pc, #8]	@ (8004114 <malloc+0xc>)
 800410a:	4601      	mov	r1, r0
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	f000 b825 	b.w	800415c <_malloc_r>
 8004112:	bf00      	nop
 8004114:	20000018 	.word	0x20000018

08004118 <sbrk_aligned>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	4e0f      	ldr	r6, [pc, #60]	@ (8004158 <sbrk_aligned+0x40>)
 800411c:	460c      	mov	r4, r1
 800411e:	6831      	ldr	r1, [r6, #0]
 8004120:	4605      	mov	r5, r0
 8004122:	b911      	cbnz	r1, 800412a <sbrk_aligned+0x12>
 8004124:	f000 fcc8 	bl	8004ab8 <_sbrk_r>
 8004128:	6030      	str	r0, [r6, #0]
 800412a:	4621      	mov	r1, r4
 800412c:	4628      	mov	r0, r5
 800412e:	f000 fcc3 	bl	8004ab8 <_sbrk_r>
 8004132:	1c43      	adds	r3, r0, #1
 8004134:	d103      	bne.n	800413e <sbrk_aligned+0x26>
 8004136:	f04f 34ff 	mov.w	r4, #4294967295
 800413a:	4620      	mov	r0, r4
 800413c:	bd70      	pop	{r4, r5, r6, pc}
 800413e:	1cc4      	adds	r4, r0, #3
 8004140:	f024 0403 	bic.w	r4, r4, #3
 8004144:	42a0      	cmp	r0, r4
 8004146:	d0f8      	beq.n	800413a <sbrk_aligned+0x22>
 8004148:	1a21      	subs	r1, r4, r0
 800414a:	4628      	mov	r0, r5
 800414c:	f000 fcb4 	bl	8004ab8 <_sbrk_r>
 8004150:	3001      	adds	r0, #1
 8004152:	d1f2      	bne.n	800413a <sbrk_aligned+0x22>
 8004154:	e7ef      	b.n	8004136 <sbrk_aligned+0x1e>
 8004156:	bf00      	nop
 8004158:	20000390 	.word	0x20000390

0800415c <_malloc_r>:
 800415c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004160:	1ccd      	adds	r5, r1, #3
 8004162:	f025 0503 	bic.w	r5, r5, #3
 8004166:	3508      	adds	r5, #8
 8004168:	2d0c      	cmp	r5, #12
 800416a:	bf38      	it	cc
 800416c:	250c      	movcc	r5, #12
 800416e:	2d00      	cmp	r5, #0
 8004170:	4606      	mov	r6, r0
 8004172:	db01      	blt.n	8004178 <_malloc_r+0x1c>
 8004174:	42a9      	cmp	r1, r5
 8004176:	d904      	bls.n	8004182 <_malloc_r+0x26>
 8004178:	230c      	movs	r3, #12
 800417a:	6033      	str	r3, [r6, #0]
 800417c:	2000      	movs	r0, #0
 800417e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004258 <_malloc_r+0xfc>
 8004186:	f000 f869 	bl	800425c <__malloc_lock>
 800418a:	f8d8 3000 	ldr.w	r3, [r8]
 800418e:	461c      	mov	r4, r3
 8004190:	bb44      	cbnz	r4, 80041e4 <_malloc_r+0x88>
 8004192:	4629      	mov	r1, r5
 8004194:	4630      	mov	r0, r6
 8004196:	f7ff ffbf 	bl	8004118 <sbrk_aligned>
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	4604      	mov	r4, r0
 800419e:	d158      	bne.n	8004252 <_malloc_r+0xf6>
 80041a0:	f8d8 4000 	ldr.w	r4, [r8]
 80041a4:	4627      	mov	r7, r4
 80041a6:	2f00      	cmp	r7, #0
 80041a8:	d143      	bne.n	8004232 <_malloc_r+0xd6>
 80041aa:	2c00      	cmp	r4, #0
 80041ac:	d04b      	beq.n	8004246 <_malloc_r+0xea>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	4639      	mov	r1, r7
 80041b2:	4630      	mov	r0, r6
 80041b4:	eb04 0903 	add.w	r9, r4, r3
 80041b8:	f000 fc7e 	bl	8004ab8 <_sbrk_r>
 80041bc:	4581      	cmp	r9, r0
 80041be:	d142      	bne.n	8004246 <_malloc_r+0xea>
 80041c0:	6821      	ldr	r1, [r4, #0]
 80041c2:	4630      	mov	r0, r6
 80041c4:	1a6d      	subs	r5, r5, r1
 80041c6:	4629      	mov	r1, r5
 80041c8:	f7ff ffa6 	bl	8004118 <sbrk_aligned>
 80041cc:	3001      	adds	r0, #1
 80041ce:	d03a      	beq.n	8004246 <_malloc_r+0xea>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	442b      	add	r3, r5
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	f8d8 3000 	ldr.w	r3, [r8]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	bb62      	cbnz	r2, 8004238 <_malloc_r+0xdc>
 80041de:	f8c8 7000 	str.w	r7, [r8]
 80041e2:	e00f      	b.n	8004204 <_malloc_r+0xa8>
 80041e4:	6822      	ldr	r2, [r4, #0]
 80041e6:	1b52      	subs	r2, r2, r5
 80041e8:	d420      	bmi.n	800422c <_malloc_r+0xd0>
 80041ea:	2a0b      	cmp	r2, #11
 80041ec:	d917      	bls.n	800421e <_malloc_r+0xc2>
 80041ee:	1961      	adds	r1, r4, r5
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	6025      	str	r5, [r4, #0]
 80041f4:	bf18      	it	ne
 80041f6:	6059      	strne	r1, [r3, #4]
 80041f8:	6863      	ldr	r3, [r4, #4]
 80041fa:	bf08      	it	eq
 80041fc:	f8c8 1000 	streq.w	r1, [r8]
 8004200:	5162      	str	r2, [r4, r5]
 8004202:	604b      	str	r3, [r1, #4]
 8004204:	4630      	mov	r0, r6
 8004206:	f000 f82f 	bl	8004268 <__malloc_unlock>
 800420a:	f104 000b 	add.w	r0, r4, #11
 800420e:	1d23      	adds	r3, r4, #4
 8004210:	f020 0007 	bic.w	r0, r0, #7
 8004214:	1ac2      	subs	r2, r0, r3
 8004216:	bf1c      	itt	ne
 8004218:	1a1b      	subne	r3, r3, r0
 800421a:	50a3      	strne	r3, [r4, r2]
 800421c:	e7af      	b.n	800417e <_malloc_r+0x22>
 800421e:	6862      	ldr	r2, [r4, #4]
 8004220:	42a3      	cmp	r3, r4
 8004222:	bf0c      	ite	eq
 8004224:	f8c8 2000 	streq.w	r2, [r8]
 8004228:	605a      	strne	r2, [r3, #4]
 800422a:	e7eb      	b.n	8004204 <_malloc_r+0xa8>
 800422c:	4623      	mov	r3, r4
 800422e:	6864      	ldr	r4, [r4, #4]
 8004230:	e7ae      	b.n	8004190 <_malloc_r+0x34>
 8004232:	463c      	mov	r4, r7
 8004234:	687f      	ldr	r7, [r7, #4]
 8004236:	e7b6      	b.n	80041a6 <_malloc_r+0x4a>
 8004238:	461a      	mov	r2, r3
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	42a3      	cmp	r3, r4
 800423e:	d1fb      	bne.n	8004238 <_malloc_r+0xdc>
 8004240:	2300      	movs	r3, #0
 8004242:	6053      	str	r3, [r2, #4]
 8004244:	e7de      	b.n	8004204 <_malloc_r+0xa8>
 8004246:	230c      	movs	r3, #12
 8004248:	4630      	mov	r0, r6
 800424a:	6033      	str	r3, [r6, #0]
 800424c:	f000 f80c 	bl	8004268 <__malloc_unlock>
 8004250:	e794      	b.n	800417c <_malloc_r+0x20>
 8004252:	6005      	str	r5, [r0, #0]
 8004254:	e7d6      	b.n	8004204 <_malloc_r+0xa8>
 8004256:	bf00      	nop
 8004258:	20000394 	.word	0x20000394

0800425c <__malloc_lock>:
 800425c:	4801      	ldr	r0, [pc, #4]	@ (8004264 <__malloc_lock+0x8>)
 800425e:	f7ff b89e 	b.w	800339e <__retarget_lock_acquire_recursive>
 8004262:	bf00      	nop
 8004264:	2000038c 	.word	0x2000038c

08004268 <__malloc_unlock>:
 8004268:	4801      	ldr	r0, [pc, #4]	@ (8004270 <__malloc_unlock+0x8>)
 800426a:	f7ff b899 	b.w	80033a0 <__retarget_lock_release_recursive>
 800426e:	bf00      	nop
 8004270:	2000038c 	.word	0x2000038c

08004274 <_Balloc>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	69c6      	ldr	r6, [r0, #28]
 8004278:	4604      	mov	r4, r0
 800427a:	460d      	mov	r5, r1
 800427c:	b976      	cbnz	r6, 800429c <_Balloc+0x28>
 800427e:	2010      	movs	r0, #16
 8004280:	f7ff ff42 	bl	8004108 <malloc>
 8004284:	4602      	mov	r2, r0
 8004286:	61e0      	str	r0, [r4, #28]
 8004288:	b920      	cbnz	r0, 8004294 <_Balloc+0x20>
 800428a:	216b      	movs	r1, #107	@ 0x6b
 800428c:	4b17      	ldr	r3, [pc, #92]	@ (80042ec <_Balloc+0x78>)
 800428e:	4818      	ldr	r0, [pc, #96]	@ (80042f0 <_Balloc+0x7c>)
 8004290:	f000 fc30 	bl	8004af4 <__assert_func>
 8004294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004298:	6006      	str	r6, [r0, #0]
 800429a:	60c6      	str	r6, [r0, #12]
 800429c:	69e6      	ldr	r6, [r4, #28]
 800429e:	68f3      	ldr	r3, [r6, #12]
 80042a0:	b183      	cbz	r3, 80042c4 <_Balloc+0x50>
 80042a2:	69e3      	ldr	r3, [r4, #28]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80042aa:	b9b8      	cbnz	r0, 80042dc <_Balloc+0x68>
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f605 	lsl.w	r6, r1, r5
 80042b2:	1d72      	adds	r2, r6, #5
 80042b4:	4620      	mov	r0, r4
 80042b6:	0092      	lsls	r2, r2, #2
 80042b8:	f000 fc3a 	bl	8004b30 <_calloc_r>
 80042bc:	b160      	cbz	r0, 80042d8 <_Balloc+0x64>
 80042be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80042c2:	e00e      	b.n	80042e2 <_Balloc+0x6e>
 80042c4:	2221      	movs	r2, #33	@ 0x21
 80042c6:	2104      	movs	r1, #4
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fc31 	bl	8004b30 <_calloc_r>
 80042ce:	69e3      	ldr	r3, [r4, #28]
 80042d0:	60f0      	str	r0, [r6, #12]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e4      	bne.n	80042a2 <_Balloc+0x2e>
 80042d8:	2000      	movs	r0, #0
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	6802      	ldr	r2, [r0, #0]
 80042de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80042e2:	2300      	movs	r3, #0
 80042e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80042e8:	e7f7      	b.n	80042da <_Balloc+0x66>
 80042ea:	bf00      	nop
 80042ec:	0800519b 	.word	0x0800519b
 80042f0:	0800521b 	.word	0x0800521b

080042f4 <_Bfree>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	69c6      	ldr	r6, [r0, #28]
 80042f8:	4605      	mov	r5, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	b976      	cbnz	r6, 800431c <_Bfree+0x28>
 80042fe:	2010      	movs	r0, #16
 8004300:	f7ff ff02 	bl	8004108 <malloc>
 8004304:	4602      	mov	r2, r0
 8004306:	61e8      	str	r0, [r5, #28]
 8004308:	b920      	cbnz	r0, 8004314 <_Bfree+0x20>
 800430a:	218f      	movs	r1, #143	@ 0x8f
 800430c:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <_Bfree+0x3c>)
 800430e:	4809      	ldr	r0, [pc, #36]	@ (8004334 <_Bfree+0x40>)
 8004310:	f000 fbf0 	bl	8004af4 <__assert_func>
 8004314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004318:	6006      	str	r6, [r0, #0]
 800431a:	60c6      	str	r6, [r0, #12]
 800431c:	b13c      	cbz	r4, 800432e <_Bfree+0x3a>
 800431e:	69eb      	ldr	r3, [r5, #28]
 8004320:	6862      	ldr	r2, [r4, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004328:	6021      	str	r1, [r4, #0]
 800432a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	0800519b 	.word	0x0800519b
 8004334:	0800521b 	.word	0x0800521b

08004338 <__multadd>:
 8004338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800433c:	4607      	mov	r7, r0
 800433e:	460c      	mov	r4, r1
 8004340:	461e      	mov	r6, r3
 8004342:	2000      	movs	r0, #0
 8004344:	690d      	ldr	r5, [r1, #16]
 8004346:	f101 0c14 	add.w	ip, r1, #20
 800434a:	f8dc 3000 	ldr.w	r3, [ip]
 800434e:	3001      	adds	r0, #1
 8004350:	b299      	uxth	r1, r3
 8004352:	fb02 6101 	mla	r1, r2, r1, r6
 8004356:	0c1e      	lsrs	r6, r3, #16
 8004358:	0c0b      	lsrs	r3, r1, #16
 800435a:	fb02 3306 	mla	r3, r2, r6, r3
 800435e:	b289      	uxth	r1, r1
 8004360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004364:	4285      	cmp	r5, r0
 8004366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800436a:	f84c 1b04 	str.w	r1, [ip], #4
 800436e:	dcec      	bgt.n	800434a <__multadd+0x12>
 8004370:	b30e      	cbz	r6, 80043b6 <__multadd+0x7e>
 8004372:	68a3      	ldr	r3, [r4, #8]
 8004374:	42ab      	cmp	r3, r5
 8004376:	dc19      	bgt.n	80043ac <__multadd+0x74>
 8004378:	6861      	ldr	r1, [r4, #4]
 800437a:	4638      	mov	r0, r7
 800437c:	3101      	adds	r1, #1
 800437e:	f7ff ff79 	bl	8004274 <_Balloc>
 8004382:	4680      	mov	r8, r0
 8004384:	b928      	cbnz	r0, 8004392 <__multadd+0x5a>
 8004386:	4602      	mov	r2, r0
 8004388:	21ba      	movs	r1, #186	@ 0xba
 800438a:	4b0c      	ldr	r3, [pc, #48]	@ (80043bc <__multadd+0x84>)
 800438c:	480c      	ldr	r0, [pc, #48]	@ (80043c0 <__multadd+0x88>)
 800438e:	f000 fbb1 	bl	8004af4 <__assert_func>
 8004392:	6922      	ldr	r2, [r4, #16]
 8004394:	f104 010c 	add.w	r1, r4, #12
 8004398:	3202      	adds	r2, #2
 800439a:	0092      	lsls	r2, r2, #2
 800439c:	300c      	adds	r0, #12
 800439e:	f000 fb9b 	bl	8004ad8 <memcpy>
 80043a2:	4621      	mov	r1, r4
 80043a4:	4638      	mov	r0, r7
 80043a6:	f7ff ffa5 	bl	80042f4 <_Bfree>
 80043aa:	4644      	mov	r4, r8
 80043ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80043b0:	3501      	adds	r5, #1
 80043b2:	615e      	str	r6, [r3, #20]
 80043b4:	6125      	str	r5, [r4, #16]
 80043b6:	4620      	mov	r0, r4
 80043b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043bc:	0800520a 	.word	0x0800520a
 80043c0:	0800521b 	.word	0x0800521b

080043c4 <__hi0bits>:
 80043c4:	4603      	mov	r3, r0
 80043c6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80043ca:	bf3a      	itte	cc
 80043cc:	0403      	lslcc	r3, r0, #16
 80043ce:	2010      	movcc	r0, #16
 80043d0:	2000      	movcs	r0, #0
 80043d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d6:	bf3c      	itt	cc
 80043d8:	021b      	lslcc	r3, r3, #8
 80043da:	3008      	addcc	r0, #8
 80043dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043e0:	bf3c      	itt	cc
 80043e2:	011b      	lslcc	r3, r3, #4
 80043e4:	3004      	addcc	r0, #4
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ea:	bf3c      	itt	cc
 80043ec:	009b      	lslcc	r3, r3, #2
 80043ee:	3002      	addcc	r0, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db05      	blt.n	8004400 <__hi0bits+0x3c>
 80043f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80043f8:	f100 0001 	add.w	r0, r0, #1
 80043fc:	bf08      	it	eq
 80043fe:	2020      	moveq	r0, #32
 8004400:	4770      	bx	lr

08004402 <__lo0bits>:
 8004402:	6803      	ldr	r3, [r0, #0]
 8004404:	4602      	mov	r2, r0
 8004406:	f013 0007 	ands.w	r0, r3, #7
 800440a:	d00b      	beq.n	8004424 <__lo0bits+0x22>
 800440c:	07d9      	lsls	r1, r3, #31
 800440e:	d421      	bmi.n	8004454 <__lo0bits+0x52>
 8004410:	0798      	lsls	r0, r3, #30
 8004412:	bf49      	itett	mi
 8004414:	085b      	lsrmi	r3, r3, #1
 8004416:	089b      	lsrpl	r3, r3, #2
 8004418:	2001      	movmi	r0, #1
 800441a:	6013      	strmi	r3, [r2, #0]
 800441c:	bf5c      	itt	pl
 800441e:	2002      	movpl	r0, #2
 8004420:	6013      	strpl	r3, [r2, #0]
 8004422:	4770      	bx	lr
 8004424:	b299      	uxth	r1, r3
 8004426:	b909      	cbnz	r1, 800442c <__lo0bits+0x2a>
 8004428:	2010      	movs	r0, #16
 800442a:	0c1b      	lsrs	r3, r3, #16
 800442c:	b2d9      	uxtb	r1, r3
 800442e:	b909      	cbnz	r1, 8004434 <__lo0bits+0x32>
 8004430:	3008      	adds	r0, #8
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	0719      	lsls	r1, r3, #28
 8004436:	bf04      	itt	eq
 8004438:	091b      	lsreq	r3, r3, #4
 800443a:	3004      	addeq	r0, #4
 800443c:	0799      	lsls	r1, r3, #30
 800443e:	bf04      	itt	eq
 8004440:	089b      	lsreq	r3, r3, #2
 8004442:	3002      	addeq	r0, #2
 8004444:	07d9      	lsls	r1, r3, #31
 8004446:	d403      	bmi.n	8004450 <__lo0bits+0x4e>
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	f100 0001 	add.w	r0, r0, #1
 800444e:	d003      	beq.n	8004458 <__lo0bits+0x56>
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4770      	bx	lr
 8004454:	2000      	movs	r0, #0
 8004456:	4770      	bx	lr
 8004458:	2020      	movs	r0, #32
 800445a:	4770      	bx	lr

0800445c <__i2b>:
 800445c:	b510      	push	{r4, lr}
 800445e:	460c      	mov	r4, r1
 8004460:	2101      	movs	r1, #1
 8004462:	f7ff ff07 	bl	8004274 <_Balloc>
 8004466:	4602      	mov	r2, r0
 8004468:	b928      	cbnz	r0, 8004476 <__i2b+0x1a>
 800446a:	f240 1145 	movw	r1, #325	@ 0x145
 800446e:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <__i2b+0x24>)
 8004470:	4804      	ldr	r0, [pc, #16]	@ (8004484 <__i2b+0x28>)
 8004472:	f000 fb3f 	bl	8004af4 <__assert_func>
 8004476:	2301      	movs	r3, #1
 8004478:	6144      	str	r4, [r0, #20]
 800447a:	6103      	str	r3, [r0, #16]
 800447c:	bd10      	pop	{r4, pc}
 800447e:	bf00      	nop
 8004480:	0800520a 	.word	0x0800520a
 8004484:	0800521b 	.word	0x0800521b

08004488 <__multiply>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	4617      	mov	r7, r2
 800448e:	690a      	ldr	r2, [r1, #16]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4689      	mov	r9, r1
 8004494:	429a      	cmp	r2, r3
 8004496:	bfa2      	ittt	ge
 8004498:	463b      	movge	r3, r7
 800449a:	460f      	movge	r7, r1
 800449c:	4699      	movge	r9, r3
 800449e:	693d      	ldr	r5, [r7, #16]
 80044a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	eb05 060a 	add.w	r6, r5, sl
 80044ac:	42b3      	cmp	r3, r6
 80044ae:	b085      	sub	sp, #20
 80044b0:	bfb8      	it	lt
 80044b2:	3101      	addlt	r1, #1
 80044b4:	f7ff fede 	bl	8004274 <_Balloc>
 80044b8:	b930      	cbnz	r0, 80044c8 <__multiply+0x40>
 80044ba:	4602      	mov	r2, r0
 80044bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80044c0:	4b40      	ldr	r3, [pc, #256]	@ (80045c4 <__multiply+0x13c>)
 80044c2:	4841      	ldr	r0, [pc, #260]	@ (80045c8 <__multiply+0x140>)
 80044c4:	f000 fb16 	bl	8004af4 <__assert_func>
 80044c8:	f100 0414 	add.w	r4, r0, #20
 80044cc:	4623      	mov	r3, r4
 80044ce:	2200      	movs	r2, #0
 80044d0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80044d4:	4573      	cmp	r3, lr
 80044d6:	d320      	bcc.n	800451a <__multiply+0x92>
 80044d8:	f107 0814 	add.w	r8, r7, #20
 80044dc:	f109 0114 	add.w	r1, r9, #20
 80044e0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80044e4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	1beb      	subs	r3, r5, r7
 80044ec:	3b15      	subs	r3, #21
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	3304      	adds	r3, #4
 80044f4:	3715      	adds	r7, #21
 80044f6:	42bd      	cmp	r5, r7
 80044f8:	bf38      	it	cc
 80044fa:	2304      	movcc	r3, #4
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	9b02      	ldr	r3, [sp, #8]
 8004500:	9103      	str	r1, [sp, #12]
 8004502:	428b      	cmp	r3, r1
 8004504:	d80c      	bhi.n	8004520 <__multiply+0x98>
 8004506:	2e00      	cmp	r6, #0
 8004508:	dd03      	ble.n	8004512 <__multiply+0x8a>
 800450a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800450e:	2b00      	cmp	r3, #0
 8004510:	d055      	beq.n	80045be <__multiply+0x136>
 8004512:	6106      	str	r6, [r0, #16]
 8004514:	b005      	add	sp, #20
 8004516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451a:	f843 2b04 	str.w	r2, [r3], #4
 800451e:	e7d9      	b.n	80044d4 <__multiply+0x4c>
 8004520:	f8b1 a000 	ldrh.w	sl, [r1]
 8004524:	f1ba 0f00 	cmp.w	sl, #0
 8004528:	d01f      	beq.n	800456a <__multiply+0xe2>
 800452a:	46c4      	mov	ip, r8
 800452c:	46a1      	mov	r9, r4
 800452e:	2700      	movs	r7, #0
 8004530:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004534:	f8d9 3000 	ldr.w	r3, [r9]
 8004538:	fa1f fb82 	uxth.w	fp, r2
 800453c:	b29b      	uxth	r3, r3
 800453e:	fb0a 330b 	mla	r3, sl, fp, r3
 8004542:	443b      	add	r3, r7
 8004544:	f8d9 7000 	ldr.w	r7, [r9]
 8004548:	0c12      	lsrs	r2, r2, #16
 800454a:	0c3f      	lsrs	r7, r7, #16
 800454c:	fb0a 7202 	mla	r2, sl, r2, r7
 8004550:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004554:	b29b      	uxth	r3, r3
 8004556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800455a:	4565      	cmp	r5, ip
 800455c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004560:	f849 3b04 	str.w	r3, [r9], #4
 8004564:	d8e4      	bhi.n	8004530 <__multiply+0xa8>
 8004566:	9b01      	ldr	r3, [sp, #4]
 8004568:	50e7      	str	r7, [r4, r3]
 800456a:	9b03      	ldr	r3, [sp, #12]
 800456c:	3104      	adds	r1, #4
 800456e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004572:	f1b9 0f00 	cmp.w	r9, #0
 8004576:	d020      	beq.n	80045ba <__multiply+0x132>
 8004578:	4647      	mov	r7, r8
 800457a:	46a4      	mov	ip, r4
 800457c:	f04f 0a00 	mov.w	sl, #0
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	f8b7 b000 	ldrh.w	fp, [r7]
 8004586:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800458a:	b29b      	uxth	r3, r3
 800458c:	fb09 220b 	mla	r2, r9, fp, r2
 8004590:	4452      	add	r2, sl
 8004592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004596:	f84c 3b04 	str.w	r3, [ip], #4
 800459a:	f857 3b04 	ldr.w	r3, [r7], #4
 800459e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80045a2:	f8bc 3000 	ldrh.w	r3, [ip]
 80045a6:	42bd      	cmp	r5, r7
 80045a8:	fb09 330a 	mla	r3, r9, sl, r3
 80045ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80045b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80045b4:	d8e5      	bhi.n	8004582 <__multiply+0xfa>
 80045b6:	9a01      	ldr	r2, [sp, #4]
 80045b8:	50a3      	str	r3, [r4, r2]
 80045ba:	3404      	adds	r4, #4
 80045bc:	e79f      	b.n	80044fe <__multiply+0x76>
 80045be:	3e01      	subs	r6, #1
 80045c0:	e7a1      	b.n	8004506 <__multiply+0x7e>
 80045c2:	bf00      	nop
 80045c4:	0800520a 	.word	0x0800520a
 80045c8:	0800521b 	.word	0x0800521b

080045cc <__pow5mult>:
 80045cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045d0:	4615      	mov	r5, r2
 80045d2:	f012 0203 	ands.w	r2, r2, #3
 80045d6:	4607      	mov	r7, r0
 80045d8:	460e      	mov	r6, r1
 80045da:	d007      	beq.n	80045ec <__pow5mult+0x20>
 80045dc:	4c25      	ldr	r4, [pc, #148]	@ (8004674 <__pow5mult+0xa8>)
 80045de:	3a01      	subs	r2, #1
 80045e0:	2300      	movs	r3, #0
 80045e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80045e6:	f7ff fea7 	bl	8004338 <__multadd>
 80045ea:	4606      	mov	r6, r0
 80045ec:	10ad      	asrs	r5, r5, #2
 80045ee:	d03d      	beq.n	800466c <__pow5mult+0xa0>
 80045f0:	69fc      	ldr	r4, [r7, #28]
 80045f2:	b97c      	cbnz	r4, 8004614 <__pow5mult+0x48>
 80045f4:	2010      	movs	r0, #16
 80045f6:	f7ff fd87 	bl	8004108 <malloc>
 80045fa:	4602      	mov	r2, r0
 80045fc:	61f8      	str	r0, [r7, #28]
 80045fe:	b928      	cbnz	r0, 800460c <__pow5mult+0x40>
 8004600:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004604:	4b1c      	ldr	r3, [pc, #112]	@ (8004678 <__pow5mult+0xac>)
 8004606:	481d      	ldr	r0, [pc, #116]	@ (800467c <__pow5mult+0xb0>)
 8004608:	f000 fa74 	bl	8004af4 <__assert_func>
 800460c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004610:	6004      	str	r4, [r0, #0]
 8004612:	60c4      	str	r4, [r0, #12]
 8004614:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800461c:	b94c      	cbnz	r4, 8004632 <__pow5mult+0x66>
 800461e:	f240 2171 	movw	r1, #625	@ 0x271
 8004622:	4638      	mov	r0, r7
 8004624:	f7ff ff1a 	bl	800445c <__i2b>
 8004628:	2300      	movs	r3, #0
 800462a:	4604      	mov	r4, r0
 800462c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004630:	6003      	str	r3, [r0, #0]
 8004632:	f04f 0900 	mov.w	r9, #0
 8004636:	07eb      	lsls	r3, r5, #31
 8004638:	d50a      	bpl.n	8004650 <__pow5mult+0x84>
 800463a:	4631      	mov	r1, r6
 800463c:	4622      	mov	r2, r4
 800463e:	4638      	mov	r0, r7
 8004640:	f7ff ff22 	bl	8004488 <__multiply>
 8004644:	4680      	mov	r8, r0
 8004646:	4631      	mov	r1, r6
 8004648:	4638      	mov	r0, r7
 800464a:	f7ff fe53 	bl	80042f4 <_Bfree>
 800464e:	4646      	mov	r6, r8
 8004650:	106d      	asrs	r5, r5, #1
 8004652:	d00b      	beq.n	800466c <__pow5mult+0xa0>
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	b938      	cbnz	r0, 8004668 <__pow5mult+0x9c>
 8004658:	4622      	mov	r2, r4
 800465a:	4621      	mov	r1, r4
 800465c:	4638      	mov	r0, r7
 800465e:	f7ff ff13 	bl	8004488 <__multiply>
 8004662:	6020      	str	r0, [r4, #0]
 8004664:	f8c0 9000 	str.w	r9, [r0]
 8004668:	4604      	mov	r4, r0
 800466a:	e7e4      	b.n	8004636 <__pow5mult+0x6a>
 800466c:	4630      	mov	r0, r6
 800466e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004672:	bf00      	nop
 8004674:	080052cc 	.word	0x080052cc
 8004678:	0800519b 	.word	0x0800519b
 800467c:	0800521b 	.word	0x0800521b

08004680 <__lshift>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	460c      	mov	r4, r1
 8004686:	4607      	mov	r7, r0
 8004688:	4691      	mov	r9, r2
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	6849      	ldr	r1, [r1, #4]
 800468e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004692:	68a3      	ldr	r3, [r4, #8]
 8004694:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004698:	f108 0601 	add.w	r6, r8, #1
 800469c:	42b3      	cmp	r3, r6
 800469e:	db0b      	blt.n	80046b8 <__lshift+0x38>
 80046a0:	4638      	mov	r0, r7
 80046a2:	f7ff fde7 	bl	8004274 <_Balloc>
 80046a6:	4605      	mov	r5, r0
 80046a8:	b948      	cbnz	r0, 80046be <__lshift+0x3e>
 80046aa:	4602      	mov	r2, r0
 80046ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80046b0:	4b27      	ldr	r3, [pc, #156]	@ (8004750 <__lshift+0xd0>)
 80046b2:	4828      	ldr	r0, [pc, #160]	@ (8004754 <__lshift+0xd4>)
 80046b4:	f000 fa1e 	bl	8004af4 <__assert_func>
 80046b8:	3101      	adds	r1, #1
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	e7ee      	b.n	800469c <__lshift+0x1c>
 80046be:	2300      	movs	r3, #0
 80046c0:	f100 0114 	add.w	r1, r0, #20
 80046c4:	f100 0210 	add.w	r2, r0, #16
 80046c8:	4618      	mov	r0, r3
 80046ca:	4553      	cmp	r3, sl
 80046cc:	db33      	blt.n	8004736 <__lshift+0xb6>
 80046ce:	6920      	ldr	r0, [r4, #16]
 80046d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80046d4:	f104 0314 	add.w	r3, r4, #20
 80046d8:	f019 091f 	ands.w	r9, r9, #31
 80046dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80046e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80046e4:	d02b      	beq.n	800473e <__lshift+0xbe>
 80046e6:	468a      	mov	sl, r1
 80046e8:	2200      	movs	r2, #0
 80046ea:	f1c9 0e20 	rsb	lr, r9, #32
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	fa00 f009 	lsl.w	r0, r0, r9
 80046f4:	4310      	orrs	r0, r2
 80046f6:	f84a 0b04 	str.w	r0, [sl], #4
 80046fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80046fe:	459c      	cmp	ip, r3
 8004700:	fa22 f20e 	lsr.w	r2, r2, lr
 8004704:	d8f3      	bhi.n	80046ee <__lshift+0x6e>
 8004706:	ebac 0304 	sub.w	r3, ip, r4
 800470a:	3b15      	subs	r3, #21
 800470c:	f023 0303 	bic.w	r3, r3, #3
 8004710:	3304      	adds	r3, #4
 8004712:	f104 0015 	add.w	r0, r4, #21
 8004716:	4560      	cmp	r0, ip
 8004718:	bf88      	it	hi
 800471a:	2304      	movhi	r3, #4
 800471c:	50ca      	str	r2, [r1, r3]
 800471e:	b10a      	cbz	r2, 8004724 <__lshift+0xa4>
 8004720:	f108 0602 	add.w	r6, r8, #2
 8004724:	3e01      	subs	r6, #1
 8004726:	4638      	mov	r0, r7
 8004728:	4621      	mov	r1, r4
 800472a:	612e      	str	r6, [r5, #16]
 800472c:	f7ff fde2 	bl	80042f4 <_Bfree>
 8004730:	4628      	mov	r0, r5
 8004732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004736:	f842 0f04 	str.w	r0, [r2, #4]!
 800473a:	3301      	adds	r3, #1
 800473c:	e7c5      	b.n	80046ca <__lshift+0x4a>
 800473e:	3904      	subs	r1, #4
 8004740:	f853 2b04 	ldr.w	r2, [r3], #4
 8004744:	459c      	cmp	ip, r3
 8004746:	f841 2f04 	str.w	r2, [r1, #4]!
 800474a:	d8f9      	bhi.n	8004740 <__lshift+0xc0>
 800474c:	e7ea      	b.n	8004724 <__lshift+0xa4>
 800474e:	bf00      	nop
 8004750:	0800520a 	.word	0x0800520a
 8004754:	0800521b 	.word	0x0800521b

08004758 <__mcmp>:
 8004758:	4603      	mov	r3, r0
 800475a:	690a      	ldr	r2, [r1, #16]
 800475c:	6900      	ldr	r0, [r0, #16]
 800475e:	b530      	push	{r4, r5, lr}
 8004760:	1a80      	subs	r0, r0, r2
 8004762:	d10e      	bne.n	8004782 <__mcmp+0x2a>
 8004764:	3314      	adds	r3, #20
 8004766:	3114      	adds	r1, #20
 8004768:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800476c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004778:	4295      	cmp	r5, r2
 800477a:	d003      	beq.n	8004784 <__mcmp+0x2c>
 800477c:	d205      	bcs.n	800478a <__mcmp+0x32>
 800477e:	f04f 30ff 	mov.w	r0, #4294967295
 8004782:	bd30      	pop	{r4, r5, pc}
 8004784:	42a3      	cmp	r3, r4
 8004786:	d3f3      	bcc.n	8004770 <__mcmp+0x18>
 8004788:	e7fb      	b.n	8004782 <__mcmp+0x2a>
 800478a:	2001      	movs	r0, #1
 800478c:	e7f9      	b.n	8004782 <__mcmp+0x2a>
	...

08004790 <__mdiff>:
 8004790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	4689      	mov	r9, r1
 8004796:	4606      	mov	r6, r0
 8004798:	4611      	mov	r1, r2
 800479a:	4648      	mov	r0, r9
 800479c:	4614      	mov	r4, r2
 800479e:	f7ff ffdb 	bl	8004758 <__mcmp>
 80047a2:	1e05      	subs	r5, r0, #0
 80047a4:	d112      	bne.n	80047cc <__mdiff+0x3c>
 80047a6:	4629      	mov	r1, r5
 80047a8:	4630      	mov	r0, r6
 80047aa:	f7ff fd63 	bl	8004274 <_Balloc>
 80047ae:	4602      	mov	r2, r0
 80047b0:	b928      	cbnz	r0, 80047be <__mdiff+0x2e>
 80047b2:	f240 2137 	movw	r1, #567	@ 0x237
 80047b6:	4b3e      	ldr	r3, [pc, #248]	@ (80048b0 <__mdiff+0x120>)
 80047b8:	483e      	ldr	r0, [pc, #248]	@ (80048b4 <__mdiff+0x124>)
 80047ba:	f000 f99b 	bl	8004af4 <__assert_func>
 80047be:	2301      	movs	r3, #1
 80047c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80047c4:	4610      	mov	r0, r2
 80047c6:	b003      	add	sp, #12
 80047c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047cc:	bfbc      	itt	lt
 80047ce:	464b      	movlt	r3, r9
 80047d0:	46a1      	movlt	r9, r4
 80047d2:	4630      	mov	r0, r6
 80047d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80047d8:	bfba      	itte	lt
 80047da:	461c      	movlt	r4, r3
 80047dc:	2501      	movlt	r5, #1
 80047de:	2500      	movge	r5, #0
 80047e0:	f7ff fd48 	bl	8004274 <_Balloc>
 80047e4:	4602      	mov	r2, r0
 80047e6:	b918      	cbnz	r0, 80047f0 <__mdiff+0x60>
 80047e8:	f240 2145 	movw	r1, #581	@ 0x245
 80047ec:	4b30      	ldr	r3, [pc, #192]	@ (80048b0 <__mdiff+0x120>)
 80047ee:	e7e3      	b.n	80047b8 <__mdiff+0x28>
 80047f0:	f100 0b14 	add.w	fp, r0, #20
 80047f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80047f8:	f109 0310 	add.w	r3, r9, #16
 80047fc:	60c5      	str	r5, [r0, #12]
 80047fe:	f04f 0c00 	mov.w	ip, #0
 8004802:	f109 0514 	add.w	r5, r9, #20
 8004806:	46d9      	mov	r9, fp
 8004808:	6926      	ldr	r6, [r4, #16]
 800480a:	f104 0e14 	add.w	lr, r4, #20
 800480e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004812:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	9b01      	ldr	r3, [sp, #4]
 800481a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800481e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004822:	b281      	uxth	r1, r0
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	fa1f f38a 	uxth.w	r3, sl
 800482a:	1a5b      	subs	r3, r3, r1
 800482c:	0c00      	lsrs	r0, r0, #16
 800482e:	4463      	add	r3, ip
 8004830:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004834:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004838:	b29b      	uxth	r3, r3
 800483a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800483e:	4576      	cmp	r6, lr
 8004840:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004844:	f849 3b04 	str.w	r3, [r9], #4
 8004848:	d8e6      	bhi.n	8004818 <__mdiff+0x88>
 800484a:	1b33      	subs	r3, r6, r4
 800484c:	3b15      	subs	r3, #21
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	3415      	adds	r4, #21
 8004854:	3304      	adds	r3, #4
 8004856:	42a6      	cmp	r6, r4
 8004858:	bf38      	it	cc
 800485a:	2304      	movcc	r3, #4
 800485c:	441d      	add	r5, r3
 800485e:	445b      	add	r3, fp
 8004860:	461e      	mov	r6, r3
 8004862:	462c      	mov	r4, r5
 8004864:	4544      	cmp	r4, r8
 8004866:	d30e      	bcc.n	8004886 <__mdiff+0xf6>
 8004868:	f108 0103 	add.w	r1, r8, #3
 800486c:	1b49      	subs	r1, r1, r5
 800486e:	f021 0103 	bic.w	r1, r1, #3
 8004872:	3d03      	subs	r5, #3
 8004874:	45a8      	cmp	r8, r5
 8004876:	bf38      	it	cc
 8004878:	2100      	movcc	r1, #0
 800487a:	440b      	add	r3, r1
 800487c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004880:	b199      	cbz	r1, 80048aa <__mdiff+0x11a>
 8004882:	6117      	str	r7, [r2, #16]
 8004884:	e79e      	b.n	80047c4 <__mdiff+0x34>
 8004886:	46e6      	mov	lr, ip
 8004888:	f854 1b04 	ldr.w	r1, [r4], #4
 800488c:	fa1f fc81 	uxth.w	ip, r1
 8004890:	44f4      	add	ip, lr
 8004892:	0c08      	lsrs	r0, r1, #16
 8004894:	4471      	add	r1, lr
 8004896:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800489a:	b289      	uxth	r1, r1
 800489c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80048a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80048a4:	f846 1b04 	str.w	r1, [r6], #4
 80048a8:	e7dc      	b.n	8004864 <__mdiff+0xd4>
 80048aa:	3f01      	subs	r7, #1
 80048ac:	e7e6      	b.n	800487c <__mdiff+0xec>
 80048ae:	bf00      	nop
 80048b0:	0800520a 	.word	0x0800520a
 80048b4:	0800521b 	.word	0x0800521b

080048b8 <__d2b>:
 80048b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80048bc:	2101      	movs	r1, #1
 80048be:	4690      	mov	r8, r2
 80048c0:	4699      	mov	r9, r3
 80048c2:	9e08      	ldr	r6, [sp, #32]
 80048c4:	f7ff fcd6 	bl	8004274 <_Balloc>
 80048c8:	4604      	mov	r4, r0
 80048ca:	b930      	cbnz	r0, 80048da <__d2b+0x22>
 80048cc:	4602      	mov	r2, r0
 80048ce:	f240 310f 	movw	r1, #783	@ 0x30f
 80048d2:	4b23      	ldr	r3, [pc, #140]	@ (8004960 <__d2b+0xa8>)
 80048d4:	4823      	ldr	r0, [pc, #140]	@ (8004964 <__d2b+0xac>)
 80048d6:	f000 f90d 	bl	8004af4 <__assert_func>
 80048da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80048de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048e2:	b10d      	cbz	r5, 80048e8 <__d2b+0x30>
 80048e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	f1b8 0300 	subs.w	r3, r8, #0
 80048ee:	d024      	beq.n	800493a <__d2b+0x82>
 80048f0:	4668      	mov	r0, sp
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	f7ff fd85 	bl	8004402 <__lo0bits>
 80048f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80048fc:	b1d8      	cbz	r0, 8004936 <__d2b+0x7e>
 80048fe:	f1c0 0320 	rsb	r3, r0, #32
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	430b      	orrs	r3, r1
 8004908:	40c2      	lsrs	r2, r0
 800490a:	6163      	str	r3, [r4, #20]
 800490c:	9201      	str	r2, [sp, #4]
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf0c      	ite	eq
 8004914:	2201      	moveq	r2, #1
 8004916:	2202      	movne	r2, #2
 8004918:	61a3      	str	r3, [r4, #24]
 800491a:	6122      	str	r2, [r4, #16]
 800491c:	b1ad      	cbz	r5, 800494a <__d2b+0x92>
 800491e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004922:	4405      	add	r5, r0
 8004924:	6035      	str	r5, [r6, #0]
 8004926:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800492a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800492c:	6018      	str	r0, [r3, #0]
 800492e:	4620      	mov	r0, r4
 8004930:	b002      	add	sp, #8
 8004932:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004936:	6161      	str	r1, [r4, #20]
 8004938:	e7e9      	b.n	800490e <__d2b+0x56>
 800493a:	a801      	add	r0, sp, #4
 800493c:	f7ff fd61 	bl	8004402 <__lo0bits>
 8004940:	9b01      	ldr	r3, [sp, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	6163      	str	r3, [r4, #20]
 8004946:	3020      	adds	r0, #32
 8004948:	e7e7      	b.n	800491a <__d2b+0x62>
 800494a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800494e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004952:	6030      	str	r0, [r6, #0]
 8004954:	6918      	ldr	r0, [r3, #16]
 8004956:	f7ff fd35 	bl	80043c4 <__hi0bits>
 800495a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800495e:	e7e4      	b.n	800492a <__d2b+0x72>
 8004960:	0800520a 	.word	0x0800520a
 8004964:	0800521b 	.word	0x0800521b

08004968 <__sflush_r>:
 8004968:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	0716      	lsls	r6, r2, #28
 8004970:	4605      	mov	r5, r0
 8004972:	460c      	mov	r4, r1
 8004974:	d454      	bmi.n	8004a20 <__sflush_r+0xb8>
 8004976:	684b      	ldr	r3, [r1, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	dc02      	bgt.n	8004982 <__sflush_r+0x1a>
 800497c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	dd48      	ble.n	8004a14 <__sflush_r+0xac>
 8004982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004984:	2e00      	cmp	r6, #0
 8004986:	d045      	beq.n	8004a14 <__sflush_r+0xac>
 8004988:	2300      	movs	r3, #0
 800498a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800498e:	682f      	ldr	r7, [r5, #0]
 8004990:	6a21      	ldr	r1, [r4, #32]
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	d030      	beq.n	80049f8 <__sflush_r+0x90>
 8004996:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	0759      	lsls	r1, r3, #29
 800499c:	d505      	bpl.n	80049aa <__sflush_r+0x42>
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	1ad2      	subs	r2, r2, r3
 80049a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049a4:	b10b      	cbz	r3, 80049aa <__sflush_r+0x42>
 80049a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049a8:	1ad2      	subs	r2, r2, r3
 80049aa:	2300      	movs	r3, #0
 80049ac:	4628      	mov	r0, r5
 80049ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049b0:	6a21      	ldr	r1, [r4, #32]
 80049b2:	47b0      	blx	r6
 80049b4:	1c43      	adds	r3, r0, #1
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	d106      	bne.n	80049c8 <__sflush_r+0x60>
 80049ba:	6829      	ldr	r1, [r5, #0]
 80049bc:	291d      	cmp	r1, #29
 80049be:	d82b      	bhi.n	8004a18 <__sflush_r+0xb0>
 80049c0:	4a28      	ldr	r2, [pc, #160]	@ (8004a64 <__sflush_r+0xfc>)
 80049c2:	40ca      	lsrs	r2, r1
 80049c4:	07d6      	lsls	r6, r2, #31
 80049c6:	d527      	bpl.n	8004a18 <__sflush_r+0xb0>
 80049c8:	2200      	movs	r2, #0
 80049ca:	6062      	str	r2, [r4, #4]
 80049cc:	6922      	ldr	r2, [r4, #16]
 80049ce:	04d9      	lsls	r1, r3, #19
 80049d0:	6022      	str	r2, [r4, #0]
 80049d2:	d504      	bpl.n	80049de <__sflush_r+0x76>
 80049d4:	1c42      	adds	r2, r0, #1
 80049d6:	d101      	bne.n	80049dc <__sflush_r+0x74>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	b903      	cbnz	r3, 80049de <__sflush_r+0x76>
 80049dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80049de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049e0:	602f      	str	r7, [r5, #0]
 80049e2:	b1b9      	cbz	r1, 8004a14 <__sflush_r+0xac>
 80049e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049e8:	4299      	cmp	r1, r3
 80049ea:	d002      	beq.n	80049f2 <__sflush_r+0x8a>
 80049ec:	4628      	mov	r0, r5
 80049ee:	f7ff fb43 	bl	8004078 <_free_r>
 80049f2:	2300      	movs	r3, #0
 80049f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80049f6:	e00d      	b.n	8004a14 <__sflush_r+0xac>
 80049f8:	2301      	movs	r3, #1
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b0      	blx	r6
 80049fe:	4602      	mov	r2, r0
 8004a00:	1c50      	adds	r0, r2, #1
 8004a02:	d1c9      	bne.n	8004998 <__sflush_r+0x30>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0c6      	beq.n	8004998 <__sflush_r+0x30>
 8004a0a:	2b1d      	cmp	r3, #29
 8004a0c:	d001      	beq.n	8004a12 <__sflush_r+0xaa>
 8004a0e:	2b16      	cmp	r3, #22
 8004a10:	d11d      	bne.n	8004a4e <__sflush_r+0xe6>
 8004a12:	602f      	str	r7, [r5, #0]
 8004a14:	2000      	movs	r0, #0
 8004a16:	e021      	b.n	8004a5c <__sflush_r+0xf4>
 8004a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a1c:	b21b      	sxth	r3, r3
 8004a1e:	e01a      	b.n	8004a56 <__sflush_r+0xee>
 8004a20:	690f      	ldr	r7, [r1, #16]
 8004a22:	2f00      	cmp	r7, #0
 8004a24:	d0f6      	beq.n	8004a14 <__sflush_r+0xac>
 8004a26:	0793      	lsls	r3, r2, #30
 8004a28:	bf18      	it	ne
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	680e      	ldr	r6, [r1, #0]
 8004a2e:	bf08      	it	eq
 8004a30:	694b      	ldreq	r3, [r1, #20]
 8004a32:	1bf6      	subs	r6, r6, r7
 8004a34:	600f      	str	r7, [r1, #0]
 8004a36:	608b      	str	r3, [r1, #8]
 8004a38:	2e00      	cmp	r6, #0
 8004a3a:	ddeb      	ble.n	8004a14 <__sflush_r+0xac>
 8004a3c:	4633      	mov	r3, r6
 8004a3e:	463a      	mov	r2, r7
 8004a40:	4628      	mov	r0, r5
 8004a42:	6a21      	ldr	r1, [r4, #32]
 8004a44:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004a48:	47e0      	blx	ip
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	dc07      	bgt.n	8004a5e <__sflush_r+0xf6>
 8004a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a5e:	4407      	add	r7, r0
 8004a60:	1a36      	subs	r6, r6, r0
 8004a62:	e7e9      	b.n	8004a38 <__sflush_r+0xd0>
 8004a64:	20400001 	.word	0x20400001

08004a68 <_fflush_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	690b      	ldr	r3, [r1, #16]
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	b913      	cbnz	r3, 8004a78 <_fflush_r+0x10>
 8004a72:	2500      	movs	r5, #0
 8004a74:	4628      	mov	r0, r5
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	b118      	cbz	r0, 8004a82 <_fflush_r+0x1a>
 8004a7a:	6a03      	ldr	r3, [r0, #32]
 8004a7c:	b90b      	cbnz	r3, 8004a82 <_fflush_r+0x1a>
 8004a7e:	f7fe fb97 	bl	80031b0 <__sinit>
 8004a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f3      	beq.n	8004a72 <_fflush_r+0xa>
 8004a8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a8c:	07d0      	lsls	r0, r2, #31
 8004a8e:	d404      	bmi.n	8004a9a <_fflush_r+0x32>
 8004a90:	0599      	lsls	r1, r3, #22
 8004a92:	d402      	bmi.n	8004a9a <_fflush_r+0x32>
 8004a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a96:	f7fe fc82 	bl	800339e <__retarget_lock_acquire_recursive>
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	f7ff ff63 	bl	8004968 <__sflush_r>
 8004aa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	07da      	lsls	r2, r3, #31
 8004aa8:	d4e4      	bmi.n	8004a74 <_fflush_r+0xc>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	059b      	lsls	r3, r3, #22
 8004aae:	d4e1      	bmi.n	8004a74 <_fflush_r+0xc>
 8004ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ab2:	f7fe fc75 	bl	80033a0 <__retarget_lock_release_recursive>
 8004ab6:	e7dd      	b.n	8004a74 <_fflush_r+0xc>

08004ab8 <_sbrk_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	2300      	movs	r3, #0
 8004abc:	4d05      	ldr	r5, [pc, #20]	@ (8004ad4 <_sbrk_r+0x1c>)
 8004abe:	4604      	mov	r4, r0
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	f7fc faa6 	bl	8001014 <_sbrk>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_sbrk_r+0x1a>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_sbrk_r+0x1a>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	20000388 	.word	0x20000388

08004ad8 <memcpy>:
 8004ad8:	440a      	add	r2, r1
 8004ada:	4291      	cmp	r1, r2
 8004adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae0:	d100      	bne.n	8004ae4 <memcpy+0xc>
 8004ae2:	4770      	bx	lr
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aea:	4291      	cmp	r1, r2
 8004aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af0:	d1f9      	bne.n	8004ae6 <memcpy+0xe>
 8004af2:	bd10      	pop	{r4, pc}

08004af4 <__assert_func>:
 8004af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004af6:	4614      	mov	r4, r2
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <__assert_func+0x2c>)
 8004afc:	4605      	mov	r5, r0
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68d8      	ldr	r0, [r3, #12]
 8004b02:	b14c      	cbz	r4, 8004b18 <__assert_func+0x24>
 8004b04:	4b07      	ldr	r3, [pc, #28]	@ (8004b24 <__assert_func+0x30>)
 8004b06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b0a:	9100      	str	r1, [sp, #0]
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	4906      	ldr	r1, [pc, #24]	@ (8004b28 <__assert_func+0x34>)
 8004b10:	f000 f842 	bl	8004b98 <fiprintf>
 8004b14:	f000 f852 	bl	8004bbc <abort>
 8004b18:	4b04      	ldr	r3, [pc, #16]	@ (8004b2c <__assert_func+0x38>)
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	e7f3      	b.n	8004b06 <__assert_func+0x12>
 8004b1e:	bf00      	nop
 8004b20:	20000018 	.word	0x20000018
 8004b24:	0800527e 	.word	0x0800527e
 8004b28:	0800528b 	.word	0x0800528b
 8004b2c:	080052b9 	.word	0x080052b9

08004b30 <_calloc_r>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	fba1 5402 	umull	r5, r4, r1, r2
 8004b36:	b934      	cbnz	r4, 8004b46 <_calloc_r+0x16>
 8004b38:	4629      	mov	r1, r5
 8004b3a:	f7ff fb0f 	bl	800415c <_malloc_r>
 8004b3e:	4606      	mov	r6, r0
 8004b40:	b928      	cbnz	r0, 8004b4e <_calloc_r+0x1e>
 8004b42:	4630      	mov	r0, r6
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
 8004b46:	220c      	movs	r2, #12
 8004b48:	2600      	movs	r6, #0
 8004b4a:	6002      	str	r2, [r0, #0]
 8004b4c:	e7f9      	b.n	8004b42 <_calloc_r+0x12>
 8004b4e:	462a      	mov	r2, r5
 8004b50:	4621      	mov	r1, r4
 8004b52:	f7fe fba6 	bl	80032a2 <memset>
 8004b56:	e7f4      	b.n	8004b42 <_calloc_r+0x12>

08004b58 <__ascii_mbtowc>:
 8004b58:	b082      	sub	sp, #8
 8004b5a:	b901      	cbnz	r1, 8004b5e <__ascii_mbtowc+0x6>
 8004b5c:	a901      	add	r1, sp, #4
 8004b5e:	b142      	cbz	r2, 8004b72 <__ascii_mbtowc+0x1a>
 8004b60:	b14b      	cbz	r3, 8004b76 <__ascii_mbtowc+0x1e>
 8004b62:	7813      	ldrb	r3, [r2, #0]
 8004b64:	600b      	str	r3, [r1, #0]
 8004b66:	7812      	ldrb	r2, [r2, #0]
 8004b68:	1e10      	subs	r0, r2, #0
 8004b6a:	bf18      	it	ne
 8004b6c:	2001      	movne	r0, #1
 8004b6e:	b002      	add	sp, #8
 8004b70:	4770      	bx	lr
 8004b72:	4610      	mov	r0, r2
 8004b74:	e7fb      	b.n	8004b6e <__ascii_mbtowc+0x16>
 8004b76:	f06f 0001 	mvn.w	r0, #1
 8004b7a:	e7f8      	b.n	8004b6e <__ascii_mbtowc+0x16>

08004b7c <__ascii_wctomb>:
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4608      	mov	r0, r1
 8004b80:	b141      	cbz	r1, 8004b94 <__ascii_wctomb+0x18>
 8004b82:	2aff      	cmp	r2, #255	@ 0xff
 8004b84:	d904      	bls.n	8004b90 <__ascii_wctomb+0x14>
 8004b86:	228a      	movs	r2, #138	@ 0x8a
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	4770      	bx	lr
 8004b90:	2001      	movs	r0, #1
 8004b92:	700a      	strb	r2, [r1, #0]
 8004b94:	4770      	bx	lr
	...

08004b98 <fiprintf>:
 8004b98:	b40e      	push	{r1, r2, r3}
 8004b9a:	b503      	push	{r0, r1, lr}
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	ab03      	add	r3, sp, #12
 8004ba0:	4805      	ldr	r0, [pc, #20]	@ (8004bb8 <fiprintf+0x20>)
 8004ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba6:	6800      	ldr	r0, [r0, #0]
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	f000 f835 	bl	8004c18 <_vfiprintf_r>
 8004bae:	b002      	add	sp, #8
 8004bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bb4:	b003      	add	sp, #12
 8004bb6:	4770      	bx	lr
 8004bb8:	20000018 	.word	0x20000018

08004bbc <abort>:
 8004bbc:	2006      	movs	r0, #6
 8004bbe:	b508      	push	{r3, lr}
 8004bc0:	f000 f9fe 	bl	8004fc0 <raise>
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f7fc f9b0 	bl	8000f2a <_exit>

08004bca <__sfputc_r>:
 8004bca:	6893      	ldr	r3, [r2, #8]
 8004bcc:	b410      	push	{r4}
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	6093      	str	r3, [r2, #8]
 8004bd4:	da07      	bge.n	8004be6 <__sfputc_r+0x1c>
 8004bd6:	6994      	ldr	r4, [r2, #24]
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	db01      	blt.n	8004be0 <__sfputc_r+0x16>
 8004bdc:	290a      	cmp	r1, #10
 8004bde:	d102      	bne.n	8004be6 <__sfputc_r+0x1c>
 8004be0:	bc10      	pop	{r4}
 8004be2:	f000 b931 	b.w	8004e48 <__swbuf_r>
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	1c58      	adds	r0, r3, #1
 8004bea:	6010      	str	r0, [r2, #0]
 8004bec:	7019      	strb	r1, [r3, #0]
 8004bee:	4608      	mov	r0, r1
 8004bf0:	bc10      	pop	{r4}
 8004bf2:	4770      	bx	lr

08004bf4 <__sfputs_r>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460f      	mov	r7, r1
 8004bfa:	4614      	mov	r4, r2
 8004bfc:	18d5      	adds	r5, r2, r3
 8004bfe:	42ac      	cmp	r4, r5
 8004c00:	d101      	bne.n	8004c06 <__sfputs_r+0x12>
 8004c02:	2000      	movs	r0, #0
 8004c04:	e007      	b.n	8004c16 <__sfputs_r+0x22>
 8004c06:	463a      	mov	r2, r7
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c0e:	f7ff ffdc 	bl	8004bca <__sfputc_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	d1f3      	bne.n	8004bfe <__sfputs_r+0xa>
 8004c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c18 <_vfiprintf_r>:
 8004c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1c:	460d      	mov	r5, r1
 8004c1e:	4614      	mov	r4, r2
 8004c20:	4698      	mov	r8, r3
 8004c22:	4606      	mov	r6, r0
 8004c24:	b09d      	sub	sp, #116	@ 0x74
 8004c26:	b118      	cbz	r0, 8004c30 <_vfiprintf_r+0x18>
 8004c28:	6a03      	ldr	r3, [r0, #32]
 8004c2a:	b90b      	cbnz	r3, 8004c30 <_vfiprintf_r+0x18>
 8004c2c:	f7fe fac0 	bl	80031b0 <__sinit>
 8004c30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c32:	07d9      	lsls	r1, r3, #31
 8004c34:	d405      	bmi.n	8004c42 <_vfiprintf_r+0x2a>
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	059a      	lsls	r2, r3, #22
 8004c3a:	d402      	bmi.n	8004c42 <_vfiprintf_r+0x2a>
 8004c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c3e:	f7fe fbae 	bl	800339e <__retarget_lock_acquire_recursive>
 8004c42:	89ab      	ldrh	r3, [r5, #12]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	d501      	bpl.n	8004c4c <_vfiprintf_r+0x34>
 8004c48:	692b      	ldr	r3, [r5, #16]
 8004c4a:	b99b      	cbnz	r3, 8004c74 <_vfiprintf_r+0x5c>
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 f938 	bl	8004ec4 <__swsetup_r>
 8004c54:	b170      	cbz	r0, 8004c74 <_vfiprintf_r+0x5c>
 8004c56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c58:	07dc      	lsls	r4, r3, #31
 8004c5a:	d504      	bpl.n	8004c66 <_vfiprintf_r+0x4e>
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	b01d      	add	sp, #116	@ 0x74
 8004c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c66:	89ab      	ldrh	r3, [r5, #12]
 8004c68:	0598      	lsls	r0, r3, #22
 8004c6a:	d4f7      	bmi.n	8004c5c <_vfiprintf_r+0x44>
 8004c6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c6e:	f7fe fb97 	bl	80033a0 <__retarget_lock_release_recursive>
 8004c72:	e7f3      	b.n	8004c5c <_vfiprintf_r+0x44>
 8004c74:	2300      	movs	r3, #0
 8004c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c78:	2320      	movs	r3, #32
 8004c7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c7e:	2330      	movs	r3, #48	@ 0x30
 8004c80:	f04f 0901 	mov.w	r9, #1
 8004c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c88:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004e34 <_vfiprintf_r+0x21c>
 8004c8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c90:	4623      	mov	r3, r4
 8004c92:	469a      	mov	sl, r3
 8004c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c98:	b10a      	cbz	r2, 8004c9e <_vfiprintf_r+0x86>
 8004c9a:	2a25      	cmp	r2, #37	@ 0x25
 8004c9c:	d1f9      	bne.n	8004c92 <_vfiprintf_r+0x7a>
 8004c9e:	ebba 0b04 	subs.w	fp, sl, r4
 8004ca2:	d00b      	beq.n	8004cbc <_vfiprintf_r+0xa4>
 8004ca4:	465b      	mov	r3, fp
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	4630      	mov	r0, r6
 8004cac:	f7ff ffa2 	bl	8004bf4 <__sfputs_r>
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	f000 80a7 	beq.w	8004e04 <_vfiprintf_r+0x1ec>
 8004cb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cb8:	445a      	add	r2, fp
 8004cba:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 809f 	beq.w	8004e04 <_vfiprintf_r+0x1ec>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cd0:	f10a 0a01 	add.w	sl, sl, #1
 8004cd4:	9304      	str	r3, [sp, #16]
 8004cd6:	9307      	str	r3, [sp, #28]
 8004cd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cde:	4654      	mov	r4, sl
 8004ce0:	2205      	movs	r2, #5
 8004ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce6:	4853      	ldr	r0, [pc, #332]	@ (8004e34 <_vfiprintf_r+0x21c>)
 8004ce8:	f7fe fb5b 	bl	80033a2 <memchr>
 8004cec:	9a04      	ldr	r2, [sp, #16]
 8004cee:	b9d8      	cbnz	r0, 8004d28 <_vfiprintf_r+0x110>
 8004cf0:	06d1      	lsls	r1, r2, #27
 8004cf2:	bf44      	itt	mi
 8004cf4:	2320      	movmi	r3, #32
 8004cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cfa:	0713      	lsls	r3, r2, #28
 8004cfc:	bf44      	itt	mi
 8004cfe:	232b      	movmi	r3, #43	@ 0x2b
 8004d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d04:	f89a 3000 	ldrb.w	r3, [sl]
 8004d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d0a:	d015      	beq.n	8004d38 <_vfiprintf_r+0x120>
 8004d0c:	4654      	mov	r4, sl
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f04f 0c0a 	mov.w	ip, #10
 8004d14:	9a07      	ldr	r2, [sp, #28]
 8004d16:	4621      	mov	r1, r4
 8004d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d1c:	3b30      	subs	r3, #48	@ 0x30
 8004d1e:	2b09      	cmp	r3, #9
 8004d20:	d94b      	bls.n	8004dba <_vfiprintf_r+0x1a2>
 8004d22:	b1b0      	cbz	r0, 8004d52 <_vfiprintf_r+0x13a>
 8004d24:	9207      	str	r2, [sp, #28]
 8004d26:	e014      	b.n	8004d52 <_vfiprintf_r+0x13a>
 8004d28:	eba0 0308 	sub.w	r3, r0, r8
 8004d2c:	fa09 f303 	lsl.w	r3, r9, r3
 8004d30:	4313      	orrs	r3, r2
 8004d32:	46a2      	mov	sl, r4
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	e7d2      	b.n	8004cde <_vfiprintf_r+0xc6>
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	1d19      	adds	r1, r3, #4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	9103      	str	r1, [sp, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bfbb      	ittet	lt
 8004d44:	425b      	neglt	r3, r3
 8004d46:	f042 0202 	orrlt.w	r2, r2, #2
 8004d4a:	9307      	strge	r3, [sp, #28]
 8004d4c:	9307      	strlt	r3, [sp, #28]
 8004d4e:	bfb8      	it	lt
 8004d50:	9204      	strlt	r2, [sp, #16]
 8004d52:	7823      	ldrb	r3, [r4, #0]
 8004d54:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d56:	d10a      	bne.n	8004d6e <_vfiprintf_r+0x156>
 8004d58:	7863      	ldrb	r3, [r4, #1]
 8004d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d5c:	d132      	bne.n	8004dc4 <_vfiprintf_r+0x1ac>
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	3402      	adds	r4, #2
 8004d62:	1d1a      	adds	r2, r3, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	9203      	str	r2, [sp, #12]
 8004d68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d6c:	9305      	str	r3, [sp, #20]
 8004d6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004e38 <_vfiprintf_r+0x220>
 8004d72:	2203      	movs	r2, #3
 8004d74:	4650      	mov	r0, sl
 8004d76:	7821      	ldrb	r1, [r4, #0]
 8004d78:	f7fe fb13 	bl	80033a2 <memchr>
 8004d7c:	b138      	cbz	r0, 8004d8e <_vfiprintf_r+0x176>
 8004d7e:	2240      	movs	r2, #64	@ 0x40
 8004d80:	9b04      	ldr	r3, [sp, #16]
 8004d82:	eba0 000a 	sub.w	r0, r0, sl
 8004d86:	4082      	lsls	r2, r0
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	3401      	adds	r4, #1
 8004d8c:	9304      	str	r3, [sp, #16]
 8004d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d92:	2206      	movs	r2, #6
 8004d94:	4829      	ldr	r0, [pc, #164]	@ (8004e3c <_vfiprintf_r+0x224>)
 8004d96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d9a:	f7fe fb02 	bl	80033a2 <memchr>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d03f      	beq.n	8004e22 <_vfiprintf_r+0x20a>
 8004da2:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <_vfiprintf_r+0x228>)
 8004da4:	bb1b      	cbnz	r3, 8004dee <_vfiprintf_r+0x1d6>
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	3307      	adds	r3, #7
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	3308      	adds	r3, #8
 8004db0:	9303      	str	r3, [sp, #12]
 8004db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db4:	443b      	add	r3, r7
 8004db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004db8:	e76a      	b.n	8004c90 <_vfiprintf_r+0x78>
 8004dba:	460c      	mov	r4, r1
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dc2:	e7a8      	b.n	8004d16 <_vfiprintf_r+0xfe>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f04f 0c0a 	mov.w	ip, #10
 8004dca:	4619      	mov	r1, r3
 8004dcc:	3401      	adds	r4, #1
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dd6:	3a30      	subs	r2, #48	@ 0x30
 8004dd8:	2a09      	cmp	r2, #9
 8004dda:	d903      	bls.n	8004de4 <_vfiprintf_r+0x1cc>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0c6      	beq.n	8004d6e <_vfiprintf_r+0x156>
 8004de0:	9105      	str	r1, [sp, #20]
 8004de2:	e7c4      	b.n	8004d6e <_vfiprintf_r+0x156>
 8004de4:	4604      	mov	r4, r0
 8004de6:	2301      	movs	r3, #1
 8004de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dec:	e7f0      	b.n	8004dd0 <_vfiprintf_r+0x1b8>
 8004dee:	ab03      	add	r3, sp, #12
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	462a      	mov	r2, r5
 8004df4:	4630      	mov	r0, r6
 8004df6:	4b13      	ldr	r3, [pc, #76]	@ (8004e44 <_vfiprintf_r+0x22c>)
 8004df8:	a904      	add	r1, sp, #16
 8004dfa:	f7fd fd91 	bl	8002920 <_printf_float>
 8004dfe:	4607      	mov	r7, r0
 8004e00:	1c78      	adds	r0, r7, #1
 8004e02:	d1d6      	bne.n	8004db2 <_vfiprintf_r+0x19a>
 8004e04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e06:	07d9      	lsls	r1, r3, #31
 8004e08:	d405      	bmi.n	8004e16 <_vfiprintf_r+0x1fe>
 8004e0a:	89ab      	ldrh	r3, [r5, #12]
 8004e0c:	059a      	lsls	r2, r3, #22
 8004e0e:	d402      	bmi.n	8004e16 <_vfiprintf_r+0x1fe>
 8004e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e12:	f7fe fac5 	bl	80033a0 <__retarget_lock_release_recursive>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	065b      	lsls	r3, r3, #25
 8004e1a:	f53f af1f 	bmi.w	8004c5c <_vfiprintf_r+0x44>
 8004e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e20:	e71e      	b.n	8004c60 <_vfiprintf_r+0x48>
 8004e22:	ab03      	add	r3, sp, #12
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	462a      	mov	r2, r5
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <_vfiprintf_r+0x22c>)
 8004e2c:	a904      	add	r1, sp, #16
 8004e2e:	f7fe f815 	bl	8002e5c <_printf_i>
 8004e32:	e7e4      	b.n	8004dfe <_vfiprintf_r+0x1e6>
 8004e34:	080052ba 	.word	0x080052ba
 8004e38:	080052c0 	.word	0x080052c0
 8004e3c:	080052c4 	.word	0x080052c4
 8004e40:	08002921 	.word	0x08002921
 8004e44:	08004bf5 	.word	0x08004bf5

08004e48 <__swbuf_r>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	460e      	mov	r6, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	4605      	mov	r5, r0
 8004e50:	b118      	cbz	r0, 8004e5a <__swbuf_r+0x12>
 8004e52:	6a03      	ldr	r3, [r0, #32]
 8004e54:	b90b      	cbnz	r3, 8004e5a <__swbuf_r+0x12>
 8004e56:	f7fe f9ab 	bl	80031b0 <__sinit>
 8004e5a:	69a3      	ldr	r3, [r4, #24]
 8004e5c:	60a3      	str	r3, [r4, #8]
 8004e5e:	89a3      	ldrh	r3, [r4, #12]
 8004e60:	071a      	lsls	r2, r3, #28
 8004e62:	d501      	bpl.n	8004e68 <__swbuf_r+0x20>
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	b943      	cbnz	r3, 8004e7a <__swbuf_r+0x32>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 f82a 	bl	8004ec4 <__swsetup_r>
 8004e70:	b118      	cbz	r0, 8004e7a <__swbuf_r+0x32>
 8004e72:	f04f 37ff 	mov.w	r7, #4294967295
 8004e76:	4638      	mov	r0, r7
 8004e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	6922      	ldr	r2, [r4, #16]
 8004e7e:	b2f6      	uxtb	r6, r6
 8004e80:	1a98      	subs	r0, r3, r2
 8004e82:	6963      	ldr	r3, [r4, #20]
 8004e84:	4637      	mov	r7, r6
 8004e86:	4283      	cmp	r3, r0
 8004e88:	dc05      	bgt.n	8004e96 <__swbuf_r+0x4e>
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f7ff fdeb 	bl	8004a68 <_fflush_r>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d1ed      	bne.n	8004e72 <__swbuf_r+0x2a>
 8004e96:	68a3      	ldr	r3, [r4, #8]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	60a3      	str	r3, [r4, #8]
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	6022      	str	r2, [r4, #0]
 8004ea2:	701e      	strb	r6, [r3, #0]
 8004ea4:	6962      	ldr	r2, [r4, #20]
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d004      	beq.n	8004eb6 <__swbuf_r+0x6e>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	07db      	lsls	r3, r3, #31
 8004eb0:	d5e1      	bpl.n	8004e76 <__swbuf_r+0x2e>
 8004eb2:	2e0a      	cmp	r6, #10
 8004eb4:	d1df      	bne.n	8004e76 <__swbuf_r+0x2e>
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f7ff fdd5 	bl	8004a68 <_fflush_r>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d0d9      	beq.n	8004e76 <__swbuf_r+0x2e>
 8004ec2:	e7d6      	b.n	8004e72 <__swbuf_r+0x2a>

08004ec4 <__swsetup_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4b29      	ldr	r3, [pc, #164]	@ (8004f6c <__swsetup_r+0xa8>)
 8004ec8:	4605      	mov	r5, r0
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	460c      	mov	r4, r1
 8004ece:	b118      	cbz	r0, 8004ed8 <__swsetup_r+0x14>
 8004ed0:	6a03      	ldr	r3, [r0, #32]
 8004ed2:	b90b      	cbnz	r3, 8004ed8 <__swsetup_r+0x14>
 8004ed4:	f7fe f96c 	bl	80031b0 <__sinit>
 8004ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004edc:	0719      	lsls	r1, r3, #28
 8004ede:	d422      	bmi.n	8004f26 <__swsetup_r+0x62>
 8004ee0:	06da      	lsls	r2, r3, #27
 8004ee2:	d407      	bmi.n	8004ef4 <__swsetup_r+0x30>
 8004ee4:	2209      	movs	r2, #9
 8004ee6:	602a      	str	r2, [r5, #0]
 8004ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	e033      	b.n	8004f5c <__swsetup_r+0x98>
 8004ef4:	0758      	lsls	r0, r3, #29
 8004ef6:	d512      	bpl.n	8004f1e <__swsetup_r+0x5a>
 8004ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004efa:	b141      	cbz	r1, 8004f0e <__swsetup_r+0x4a>
 8004efc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f00:	4299      	cmp	r1, r3
 8004f02:	d002      	beq.n	8004f0a <__swsetup_r+0x46>
 8004f04:	4628      	mov	r0, r5
 8004f06:	f7ff f8b7 	bl	8004078 <_free_r>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	2300      	movs	r3, #0
 8004f18:	6063      	str	r3, [r4, #4]
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	89a3      	ldrh	r3, [r4, #12]
 8004f20:	f043 0308 	orr.w	r3, r3, #8
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	b94b      	cbnz	r3, 8004f3e <__swsetup_r+0x7a>
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f34:	d003      	beq.n	8004f3e <__swsetup_r+0x7a>
 8004f36:	4621      	mov	r1, r4
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 f882 	bl	8005042 <__smakebuf_r>
 8004f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f42:	f013 0201 	ands.w	r2, r3, #1
 8004f46:	d00a      	beq.n	8004f5e <__swsetup_r+0x9a>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	60a2      	str	r2, [r4, #8]
 8004f4c:	6962      	ldr	r2, [r4, #20]
 8004f4e:	4252      	negs	r2, r2
 8004f50:	61a2      	str	r2, [r4, #24]
 8004f52:	6922      	ldr	r2, [r4, #16]
 8004f54:	b942      	cbnz	r2, 8004f68 <__swsetup_r+0xa4>
 8004f56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f5a:	d1c5      	bne.n	8004ee8 <__swsetup_r+0x24>
 8004f5c:	bd38      	pop	{r3, r4, r5, pc}
 8004f5e:	0799      	lsls	r1, r3, #30
 8004f60:	bf58      	it	pl
 8004f62:	6962      	ldrpl	r2, [r4, #20]
 8004f64:	60a2      	str	r2, [r4, #8]
 8004f66:	e7f4      	b.n	8004f52 <__swsetup_r+0x8e>
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e7f7      	b.n	8004f5c <__swsetup_r+0x98>
 8004f6c:	20000018 	.word	0x20000018

08004f70 <_raise_r>:
 8004f70:	291f      	cmp	r1, #31
 8004f72:	b538      	push	{r3, r4, r5, lr}
 8004f74:	4605      	mov	r5, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	d904      	bls.n	8004f84 <_raise_r+0x14>
 8004f7a:	2316      	movs	r3, #22
 8004f7c:	6003      	str	r3, [r0, #0]
 8004f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004f86:	b112      	cbz	r2, 8004f8e <_raise_r+0x1e>
 8004f88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f8c:	b94b      	cbnz	r3, 8004fa2 <_raise_r+0x32>
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f000 f830 	bl	8004ff4 <_getpid_r>
 8004f94:	4622      	mov	r2, r4
 8004f96:	4601      	mov	r1, r0
 8004f98:	4628      	mov	r0, r5
 8004f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f9e:	f000 b817 	b.w	8004fd0 <_kill_r>
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d00a      	beq.n	8004fbc <_raise_r+0x4c>
 8004fa6:	1c59      	adds	r1, r3, #1
 8004fa8:	d103      	bne.n	8004fb2 <_raise_r+0x42>
 8004faa:	2316      	movs	r3, #22
 8004fac:	6003      	str	r3, [r0, #0]
 8004fae:	2001      	movs	r0, #1
 8004fb0:	e7e7      	b.n	8004f82 <_raise_r+0x12>
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004fba:	4798      	blx	r3
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	e7e0      	b.n	8004f82 <_raise_r+0x12>

08004fc0 <raise>:
 8004fc0:	4b02      	ldr	r3, [pc, #8]	@ (8004fcc <raise+0xc>)
 8004fc2:	4601      	mov	r1, r0
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	f7ff bfd3 	b.w	8004f70 <_raise_r>
 8004fca:	bf00      	nop
 8004fcc:	20000018 	.word	0x20000018

08004fd0 <_kill_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	4d06      	ldr	r5, [pc, #24]	@ (8004ff0 <_kill_r+0x20>)
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	f7fb ff94 	bl	8000f0a <_kill>
 8004fe2:	1c43      	adds	r3, r0, #1
 8004fe4:	d102      	bne.n	8004fec <_kill_r+0x1c>
 8004fe6:	682b      	ldr	r3, [r5, #0]
 8004fe8:	b103      	cbz	r3, 8004fec <_kill_r+0x1c>
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	bd38      	pop	{r3, r4, r5, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000388 	.word	0x20000388

08004ff4 <_getpid_r>:
 8004ff4:	f7fb bf82 	b.w	8000efc <_getpid>

08004ff8 <__swhatbuf_r>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005000:	4615      	mov	r5, r2
 8005002:	2900      	cmp	r1, #0
 8005004:	461e      	mov	r6, r3
 8005006:	b096      	sub	sp, #88	@ 0x58
 8005008:	da0c      	bge.n	8005024 <__swhatbuf_r+0x2c>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	2100      	movs	r1, #0
 800500e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005012:	bf14      	ite	ne
 8005014:	2340      	movne	r3, #64	@ 0x40
 8005016:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800501a:	2000      	movs	r0, #0
 800501c:	6031      	str	r1, [r6, #0]
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	b016      	add	sp, #88	@ 0x58
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	466a      	mov	r2, sp
 8005026:	f000 f849 	bl	80050bc <_fstat_r>
 800502a:	2800      	cmp	r0, #0
 800502c:	dbed      	blt.n	800500a <__swhatbuf_r+0x12>
 800502e:	9901      	ldr	r1, [sp, #4]
 8005030:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005034:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005038:	4259      	negs	r1, r3
 800503a:	4159      	adcs	r1, r3
 800503c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005040:	e7eb      	b.n	800501a <__swhatbuf_r+0x22>

08005042 <__smakebuf_r>:
 8005042:	898b      	ldrh	r3, [r1, #12]
 8005044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005046:	079d      	lsls	r5, r3, #30
 8005048:	4606      	mov	r6, r0
 800504a:	460c      	mov	r4, r1
 800504c:	d507      	bpl.n	800505e <__smakebuf_r+0x1c>
 800504e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	6123      	str	r3, [r4, #16]
 8005056:	2301      	movs	r3, #1
 8005058:	6163      	str	r3, [r4, #20]
 800505a:	b003      	add	sp, #12
 800505c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800505e:	466a      	mov	r2, sp
 8005060:	ab01      	add	r3, sp, #4
 8005062:	f7ff ffc9 	bl	8004ff8 <__swhatbuf_r>
 8005066:	9f00      	ldr	r7, [sp, #0]
 8005068:	4605      	mov	r5, r0
 800506a:	4639      	mov	r1, r7
 800506c:	4630      	mov	r0, r6
 800506e:	f7ff f875 	bl	800415c <_malloc_r>
 8005072:	b948      	cbnz	r0, 8005088 <__smakebuf_r+0x46>
 8005074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005078:	059a      	lsls	r2, r3, #22
 800507a:	d4ee      	bmi.n	800505a <__smakebuf_r+0x18>
 800507c:	f023 0303 	bic.w	r3, r3, #3
 8005080:	f043 0302 	orr.w	r3, r3, #2
 8005084:	81a3      	strh	r3, [r4, #12]
 8005086:	e7e2      	b.n	800504e <__smakebuf_r+0xc>
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800508e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005092:	81a3      	strh	r3, [r4, #12]
 8005094:	9b01      	ldr	r3, [sp, #4]
 8005096:	6020      	str	r0, [r4, #0]
 8005098:	b15b      	cbz	r3, 80050b2 <__smakebuf_r+0x70>
 800509a:	4630      	mov	r0, r6
 800509c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a0:	f000 f81e 	bl	80050e0 <_isatty_r>
 80050a4:	b128      	cbz	r0, 80050b2 <__smakebuf_r+0x70>
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	f023 0303 	bic.w	r3, r3, #3
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	81a3      	strh	r3, [r4, #12]
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	431d      	orrs	r5, r3
 80050b6:	81a5      	strh	r5, [r4, #12]
 80050b8:	e7cf      	b.n	800505a <__smakebuf_r+0x18>
	...

080050bc <_fstat_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	2300      	movs	r3, #0
 80050c0:	4d06      	ldr	r5, [pc, #24]	@ (80050dc <_fstat_r+0x20>)
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	4611      	mov	r1, r2
 80050c8:	602b      	str	r3, [r5, #0]
 80050ca:	f7fb ff7d 	bl	8000fc8 <_fstat>
 80050ce:	1c43      	adds	r3, r0, #1
 80050d0:	d102      	bne.n	80050d8 <_fstat_r+0x1c>
 80050d2:	682b      	ldr	r3, [r5, #0]
 80050d4:	b103      	cbz	r3, 80050d8 <_fstat_r+0x1c>
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	bd38      	pop	{r3, r4, r5, pc}
 80050da:	bf00      	nop
 80050dc:	20000388 	.word	0x20000388

080050e0 <_isatty_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	2300      	movs	r3, #0
 80050e4:	4d05      	ldr	r5, [pc, #20]	@ (80050fc <_isatty_r+0x1c>)
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	602b      	str	r3, [r5, #0]
 80050ec:	f7fb ff7b 	bl	8000fe6 <_isatty>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_isatty_r+0x1a>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_isatty_r+0x1a>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	20000388 	.word	0x20000388

08005100 <_init>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	bf00      	nop
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr

0800510c <_fini>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr
