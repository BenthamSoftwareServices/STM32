
Nucleo-L432KC_basic_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cec  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec0  08002ec0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec8  08002ec8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08002edc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002edc  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc7c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b18  00000000  00000000  0002bcfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002d818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a6  00000000  00000000  0002e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f966  00000000  00000000  0002e9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf66  00000000  00000000  0004e324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1255  00000000  00000000  0005a28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002804  00000000  00000000  0011b4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0011dce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002e60 	.word	0x08002e60

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002e60 	.word	0x08002e60

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fa49 	bl	8000962 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81a 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d2 	bl	800067c <MX_GPIO_Init>
  MX_RTC_Init();
 80004d8:	f000 f878 	bl	80005cc <MX_RTC_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f89e 	bl	800061c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1); //Turn on LD3 [Green]
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <main+0x3c>)
 80004e6:	f000 fd25 	bl	8000f34 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80004ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ee:	f000 faad 	bl	8000a4c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0); //Turn off LD3 [Green]
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <main+0x3c>)
 80004f8:	f000 fd1c 	bl	8000f34 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f000 faa5 	bl	8000a4c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1); //Turn on LD3 [Green]
 8000502:	e7ed      	b.n	80004e0 <main+0x18>
 8000504:	48000400 	.word	0x48000400

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b096      	sub	sp, #88	; 0x58
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2244      	movs	r2, #68	; 0x44
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fc75 	bl	8002e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	463b      	mov	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800052a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800052e:	f000 fd37 	bl	8000fa0 <HAL_PWREx_ControlVoltageScaling>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000538:	f000 f8ea 	bl	8000710 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800053c:	f000 fd12 	bl	8000f64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <SystemClock_Config+0xc0>)
 8000542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000546:	4a20      	ldr	r2, [pc, #128]	; (80005c8 <SystemClock_Config+0xc0>)
 8000548:	f023 0318 	bic.w	r3, r3, #24
 800054c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000550:	2314      	movs	r3, #20
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000560:	2360      	movs	r3, #96	; 0x60
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000568:	2301      	movs	r3, #1
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000570:	2328      	movs	r3, #40	; 0x28
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000574:	2307      	movs	r3, #7
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fd61 	bl	800104c <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000590:	f000 f8be 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2303      	movs	r3, #3
 800059a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	2104      	movs	r1, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 f961 	bl	8001874 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005b8:	f000 f8aa 	bl	8000710 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005bc:	f001 fd74 	bl	80020a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005c0:	bf00      	nop
 80005c2:	3758      	adds	r7, #88	; 0x58
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000

080005cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_RTC_Init+0x48>)
 80005d2:	4a11      	ldr	r2, [pc, #68]	; (8000618 <MX_RTC_Init+0x4c>)
 80005d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_RTC_Init+0x48>)
 80005d8:	2200      	movs	r2, #0
 80005da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_RTC_Init+0x48>)
 80005de:	227f      	movs	r2, #127	; 0x7f
 80005e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_RTC_Init+0x48>)
 80005e4:	22ff      	movs	r2, #255	; 0xff
 80005e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_RTC_Init+0x48>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_RTC_Init+0x48>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_RTC_Init+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_RTC_Init+0x48>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_RTC_Init+0x48>)
 8000602:	f001 fe53 	bl	80022ac <HAL_RTC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800060c:	f000 f880 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000028 	.word	0x20000028
 8000618:	40002800 	.word	0x40002800

0800061c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000622:	4a15      	ldr	r2, [pc, #84]	; (8000678 <MX_USART2_UART_Init+0x5c>)
 8000624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000660:	f001 ff42 	bl	80024e8 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800066a:	f000 f851 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000004c 	.word	0x2000004c
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_GPIO_Init+0x8c>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <MX_GPIO_Init+0x8c>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a16      	ldr	r2, [pc, #88]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2108      	movs	r1, #8
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0x90>)
 80006e0:	f000 fc28 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006e4:	2308      	movs	r3, #8
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_GPIO_Init+0x90>)
 80006fc:	f000 fab0 	bl	8000c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	48000400 	.word	0x48000400

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x44>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_MspInit+0x44>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_MspInit+0x44>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_MspInit+0x44>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6593      	str	r3, [r2, #88]	; 0x58
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b098      	sub	sp, #96	; 0x60
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2254      	movs	r2, #84	; 0x54
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fb46 	bl	8002e06 <memset>
  if(hrtc->Instance==RTC)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_RTC_MspInit+0x58>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d117      	bne.n	80007b4 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000788:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800078a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fa91 	bl	8001cbc <HAL_RCCEx_PeriphCLKConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80007a0:	f7ff ffb6 	bl	8000710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_RTC_MspInit+0x5c>)
 80007a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <HAL_RTC_MspInit+0x5c>)
 80007ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3760      	adds	r7, #96	; 0x60
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40002800 	.word	0x40002800
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09e      	sub	sp, #120	; 0x78
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2254      	movs	r2, #84	; 0x54
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fb0e 	bl	8002e06 <memset>
  if(huart->Instance==USART2)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a28      	ldr	r2, [pc, #160]	; (8000890 <HAL_UART_MspInit+0xcc>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d148      	bne.n	8000886 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fa5b 	bl	8001cbc <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800080c:	f7ff ff80 	bl	8000710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <HAL_UART_MspInit+0xd0>)
 8000812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000814:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <HAL_UART_MspInit+0xd0>)
 8000816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081a:	6593      	str	r3, [r2, #88]	; 0x58
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <HAL_UART_MspInit+0xd0>)
 800081e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_UART_MspInit+0xd0>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	4a19      	ldr	r2, [pc, #100]	; (8000894 <HAL_UART_MspInit+0xd0>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_UART_MspInit+0xd0>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000840:	2304      	movs	r3, #4
 8000842:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000850:	2307      	movs	r3, #7
 8000852:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000858:	4619      	mov	r1, r3
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f000 f9ff 	bl	8000c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000866:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000874:	2303      	movs	r3, #3
 8000876:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800087c:	4619      	mov	r1, r3
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f000 f9ed 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3778      	adds	r7, #120	; 0x78
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f892 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000948 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000914:	f7ff ffea 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093e:	f002 fa6b 	bl	8002e18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000942:	f7ff fdc1 	bl	80004c8 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000948:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	08002ed0 	.word	0x08002ed0
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	200000d8 	.word	0x200000d8

08000960 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_IRQHandler>

08000962 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f943 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f80e 	bl	8000994 <HAL_InitTick>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	e001      	b.n	8000988 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000984:	f7ff feca 	bl	800071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000988:	79fb      	ldrb	r3, [r7, #7]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_InitTick+0x6c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d023      	beq.n	80009f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_InitTick+0x70>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_InitTick+0x6c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f941 	bl	8000c46 <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10f      	bne.n	80009ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d809      	bhi.n	80009e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f000 f919 	bl	8000c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_InitTick+0x74>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e007      	b.n	80009f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	e004      	b.n	80009f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e001      	b.n	80009f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	200000d4 	.word	0x200000d4

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	200000d4 	.word	0x200000d4

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff ffee 	bl	8000a34 <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d005      	beq.n	8000a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_Delay+0x44>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a72:	bf00      	nop
 8000a74:	f7ff ffde 	bl	8000a34 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <HAL_Delay+0x28>
  {
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff8e 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff47 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff5c 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff8e 	bl	8000b4c <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5d 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffb0 	bl	8000bb4 <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e148      	b.n	8000f02 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 813a 	beq.w	8000efc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d005      	beq.n	8000ca0 <HAL_GPIO_Init+0x40>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d130      	bne.n	8000d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	f003 0201 	and.w	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d017      	beq.n	8000d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d123      	bne.n	8000d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	6939      	ldr	r1, [r7, #16]
 8000d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0203 	and.w	r2, r3, #3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8094 	beq.w	8000efc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <HAL_GPIO_Init+0x2c0>)
 8000dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd8:	4a51      	ldr	r2, [pc, #324]	; (8000f20 <HAL_GPIO_Init+0x2c0>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6613      	str	r3, [r2, #96]	; 0x60
 8000de0:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <HAL_GPIO_Init+0x2c0>)
 8000de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dec:	4a4d      	ldr	r2, [pc, #308]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e16:	d00d      	beq.n	8000e34 <HAL_GPIO_Init+0x1d4>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a43      	ldr	r2, [pc, #268]	; (8000f28 <HAL_GPIO_Init+0x2c8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d007      	beq.n	8000e30 <HAL_GPIO_Init+0x1d0>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a42      	ldr	r2, [pc, #264]	; (8000f2c <HAL_GPIO_Init+0x2cc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d101      	bne.n	8000e2c <HAL_GPIO_Init+0x1cc>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e004      	b.n	8000e36 <HAL_GPIO_Init+0x1d6>
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_Init+0x1d6>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <HAL_GPIO_Init+0x1d6>
 8000e34:	2300      	movs	r3, #0
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	f002 0203 	and.w	r2, r2, #3
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e46:	4937      	ldr	r1, [pc, #220]	; (8000f24 <HAL_GPIO_Init+0x2c4>)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e78:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ea2:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ecc:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_GPIO_Init+0x2d0>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f47f aeaf 	bne.w	8000c70 <HAL_GPIO_Init+0x10>
  }
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	48000800 	.word	0x48000800
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40007000 	.word	0x40007000

08000f84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <HAL_PWREx_GetVoltageRange+0x18>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fae:	d130      	bne.n	8001012 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fbc:	d038      	beq.n	8001030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2232      	movs	r2, #50	; 0x32
 8000fd4:	fb02 f303 	mul.w	r3, r2, r3
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fda:	fba2 2303 	umull	r2, r3, r2, r3
 8000fde:	0c9b      	lsrs	r3, r3, #18
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe4:	e002      	b.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff8:	d102      	bne.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f2      	bne.n	8000fe6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100c:	d110      	bne.n	8001030 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e00f      	b.n	8001032 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800101a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101e:	d007      	beq.n	8001030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40007000 	.word	0x40007000
 8001044:	20000000 	.word	0x20000000
 8001048:	431bde83 	.word	0x431bde83

0800104c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	f000 bc02 	b.w	8001864 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001060:	4b96      	ldr	r3, [pc, #600]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 030c 	and.w	r3, r3, #12
 8001068:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800106a:	4b94      	ldr	r3, [pc, #592]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80e4 	beq.w	800124a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <HAL_RCC_OscConfig+0x4c>
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b0c      	cmp	r3, #12
 800108c:	f040 808b 	bne.w	80011a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b01      	cmp	r3, #1
 8001094:	f040 8087 	bne.w	80011a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001098:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_OscConfig+0x64>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e3d9      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1a      	ldr	r2, [r3, #32]
 80010b4:	4b81      	ldr	r3, [pc, #516]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_RCC_OscConfig+0x7e>
 80010c0:	4b7e      	ldr	r3, [pc, #504]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010c8:	e005      	b.n	80010d6 <HAL_RCC_OscConfig+0x8a>
 80010ca:	4b7c      	ldr	r3, [pc, #496]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80010cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d223      	bcs.n	8001122 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fd8c 	bl	8001bfc <RCC_SetFlashLatencyFromMSIRange>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e3ba      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ee:	4b73      	ldr	r3, [pc, #460]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a72      	ldr	r2, [pc, #456]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b70      	ldr	r3, [pc, #448]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	496d      	ldr	r1, [pc, #436]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001108:	4313      	orrs	r3, r2
 800110a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800110c:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	4968      	ldr	r1, [pc, #416]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
 8001120:	e025      	b.n	800116e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001122:	4b66      	ldr	r3, [pc, #408]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a65      	ldr	r2, [pc, #404]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4960      	ldr	r1, [pc, #384]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001140:	4b5e      	ldr	r3, [pc, #376]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	495b      	ldr	r1, [pc, #364]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fd4c 	bl	8001bfc <RCC_SetFlashLatencyFromMSIRange>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e37a      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800116e:	f000 fc81 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001172:	4602      	mov	r2, r0
 8001174:	4b51      	ldr	r3, [pc, #324]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	4950      	ldr	r1, [pc, #320]	; (80012c0 <HAL_RCC_OscConfig+0x274>)
 8001180:	5ccb      	ldrb	r3, [r1, r3]
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	fa22 f303 	lsr.w	r3, r2, r3
 800118a:	4a4e      	ldr	r2, [pc, #312]	; (80012c4 <HAL_RCC_OscConfig+0x278>)
 800118c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800118e:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <HAL_RCC_OscConfig+0x27c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fbfe 	bl	8000994 <HAL_InitTick>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d052      	beq.n	8001248 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	e35e      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d032      	beq.n	8001214 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a42      	ldr	r2, [pc, #264]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fc3b 	bl	8000a34 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c2:	f7ff fc37 	bl	8000a34 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e347      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011d4:	4b39      	ldr	r3, [pc, #228]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011e0:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a35      	ldr	r2, [pc, #212]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	4930      	ldr	r1, [pc, #192]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	492b      	ldr	r1, [pc, #172]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800120e:	4313      	orrs	r3, r2
 8001210:	604b      	str	r3, [r1, #4]
 8001212:	e01a      	b.n	800124a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001220:	f7ff fc08 	bl	8000a34 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001228:	f7ff fc04 	bl	8000a34 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e314      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x1dc>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d073      	beq.n	800133e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b08      	cmp	r3, #8
 800125a:	d005      	beq.n	8001268 <HAL_RCC_OscConfig+0x21c>
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b0c      	cmp	r3, #12
 8001260:	d10e      	bne.n	8001280 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d10b      	bne.n	8001280 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d063      	beq.n	800133c <HAL_RCC_OscConfig+0x2f0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d15f      	bne.n	800133c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e2f1      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001288:	d106      	bne.n	8001298 <HAL_RCC_OscConfig+0x24c>
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e025      	b.n	80012e4 <HAL_RCC_OscConfig+0x298>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a0:	d114      	bne.n	80012cc <HAL_RCC_OscConfig+0x280>
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a02      	ldr	r2, [pc, #8]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e013      	b.n	80012e4 <HAL_RCC_OscConfig+0x298>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	08002e78 	.word	0x08002e78
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004
 80012cc:	4ba0      	ldr	r3, [pc, #640]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a9f      	ldr	r2, [pc, #636]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b9d      	ldr	r3, [pc, #628]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a9c      	ldr	r2, [pc, #624]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fba2 	bl	8000a34 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fb9e 	bl	8000a34 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e2ae      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001306:	4b92      	ldr	r3, [pc, #584]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x2a8>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fb8e 	bl	8000a34 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fb8a 	bl	8000a34 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e29a      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x2d0>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d060      	beq.n	800140c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b04      	cmp	r3, #4
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x310>
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b0c      	cmp	r3, #12
 8001354:	d119      	bne.n	800138a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d116      	bne.n	800138a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135c:	4b7c      	ldr	r3, [pc, #496]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_OscConfig+0x328>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e277      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	061b      	lsls	r3, r3, #24
 8001382:	4973      	ldr	r1, [pc, #460]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001388:	e040      	b.n	800140c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d023      	beq.n	80013da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001392:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a6e      	ldr	r2, [pc, #440]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fb49 	bl	8000a34 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fb45 	bl	8000a34 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e255      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b8:	4b65      	ldr	r3, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	061b      	lsls	r3, r3, #24
 80013d2:	495f      	ldr	r1, [pc, #380]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
 80013d8:	e018      	b.n	800140c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a5c      	ldr	r2, [pc, #368]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80013e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fb25 	bl	8000a34 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fb21 	bl	8000a34 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e231      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f0      	bne.n	80013ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d03c      	beq.n	8001492 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01c      	beq.n	800145a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001420:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001426:	4a4a      	ldr	r2, [pc, #296]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fb00 	bl	8000a34 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fafc 	bl	8000a34 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e20c      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 800144c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0ef      	beq.n	8001438 <HAL_RCC_OscConfig+0x3ec>
 8001458:	e01b      	b.n	8001492 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 800145c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001460:	4a3b      	ldr	r2, [pc, #236]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146a:	f7ff fae3 	bl	8000a34 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fadf 	bl	8000a34 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1ef      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ef      	bne.n	8001472 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80a6 	beq.w	80015ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10d      	bne.n	80014cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	4a26      	ldr	r2, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ba:	6593      	str	r3, [r2, #88]	; 0x58
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c8:	2301      	movs	r3, #1
 80014ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_RCC_OscConfig+0x508>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d118      	bne.n	800150a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_RCC_OscConfig+0x508>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_RCC_OscConfig+0x508>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e4:	f7ff faa6 	bl	8000a34 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ec:	f7ff faa2 	bl	8000a34 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1b2      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_RCC_OscConfig+0x508>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d108      	bne.n	8001524 <HAL_RCC_OscConfig+0x4d8>
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001522:	e029      	b.n	8001578 <HAL_RCC_OscConfig+0x52c>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d115      	bne.n	8001558 <HAL_RCC_OscConfig+0x50c>
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 800153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001542:	4a03      	ldr	r2, [pc, #12]	; (8001550 <HAL_RCC_OscConfig+0x504>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800154c:	e014      	b.n	8001578 <HAL_RCC_OscConfig+0x52c>
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	40007000 	.word	0x40007000
 8001558:	4b9a      	ldr	r3, [pc, #616]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	4a99      	ldr	r2, [pc, #612]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001568:	4b96      	ldr	r3, [pc, #600]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 800156a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156e:	4a95      	ldr	r2, [pc, #596]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d016      	beq.n	80015ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fa58 	bl	8000a34 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fa54 	bl	8000a34 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e162      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800159e:	4b89      	ldr	r3, [pc, #548]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ed      	beq.n	8001588 <HAL_RCC_OscConfig+0x53c>
 80015ac:	e015      	b.n	80015da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ae:	f7ff fa41 	bl	8000a34 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff fa3d 	bl	8000a34 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e14b      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015cc:	4b7d      	ldr	r3, [pc, #500]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ed      	bne.n	80015b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e0:	4b78      	ldr	r3, [pc, #480]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	4a77      	ldr	r2, [pc, #476]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 80015e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d03c      	beq.n	8001672 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01c      	beq.n	800163a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001600:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001606:	4a6f      	ldr	r2, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff fa10 	bl	8000a34 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001618:	f7ff fa0c 	bl	8000a34 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e11c      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800162a:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 800162c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ef      	beq.n	8001618 <HAL_RCC_OscConfig+0x5cc>
 8001638:	e01b      	b.n	8001672 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800163a:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 800163c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001640:	4a60      	ldr	r2, [pc, #384]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff f9f3 	bl	8000a34 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001652:	f7ff f9ef 	bl	8000a34 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0ff      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001664:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ef      	bne.n	8001652 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80f3 	beq.w	8001862 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	2b02      	cmp	r3, #2
 8001682:	f040 80c9 	bne.w	8001818 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001686:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0203 	and.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	429a      	cmp	r2, r3
 8001698:	d12c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	3b01      	subs	r3, #1
 80016a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d123      	bne.n	80016f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d11b      	bne.n	80016f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d113      	bne.n	80016f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	3b01      	subs	r3, #1
 80016da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d109      	bne.n	80016f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	3b01      	subs	r3, #1
 80016ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d06b      	beq.n	80017cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d062      	beq.n	80017c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0ac      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001714:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001716:	f7ff f98d 	bl	8000a34 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171e:	f7ff f989 	bl	8000a34 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e099      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_RCC_OscConfig+0x77c>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800174c:	3a01      	subs	r2, #1
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	4311      	orrs	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001756:	0212      	lsls	r2, r2, #8
 8001758:	4311      	orrs	r1, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800175e:	0852      	lsrs	r2, r2, #1
 8001760:	3a01      	subs	r2, #1
 8001762:	0552      	lsls	r2, r2, #21
 8001764:	4311      	orrs	r1, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800176a:	0852      	lsrs	r2, r2, #1
 800176c:	3a01      	subs	r2, #1
 800176e:	0652      	lsls	r2, r2, #25
 8001770:	4311      	orrs	r1, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001776:	06d2      	lsls	r2, r2, #27
 8001778:	430a      	orrs	r2, r1
 800177a:	4912      	ldr	r1, [pc, #72]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 800177c:	4313      	orrs	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001798:	f7ff f94c 	bl	8000a34 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f948 	bl	8000a34 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e058      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <HAL_RCC_OscConfig+0x778>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017be:	e050      	b.n	8001862 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e04f      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
 80017c4:	40021000 	.word	0x40021000
 80017c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_RCC_OscConfig+0x820>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d144      	bne.n	8001862 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_OscConfig+0x820>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a23      	ldr	r2, [pc, #140]	; (800186c <HAL_RCC_OscConfig+0x820>)
 80017de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_RCC_OscConfig+0x820>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a20      	ldr	r2, [pc, #128]	; (800186c <HAL_RCC_OscConfig+0x820>)
 80017ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017f0:	f7ff f920 	bl	8000a34 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff f91c 	bl	8000a34 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e02c      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_RCC_OscConfig+0x820>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x7ac>
 8001816:	e024      	b.n	8001862 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d01f      	beq.n	800185e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_RCC_OscConfig+0x820>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_RCC_OscConfig+0x820>)
 8001824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff f903 	bl	8000a34 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff f8ff 	bl	8000a34 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e00f      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_OscConfig+0x820>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_RCC_OscConfig+0x820>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	4905      	ldr	r1, [pc, #20]	; (800186c <HAL_RCC_OscConfig+0x820>)
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_RCC_OscConfig+0x824>)
 8001858:	4013      	ands	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
 800185c:	e001      	b.n	8001862 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	feeefffc 	.word	0xfeeefffc

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0e7      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b75      	ldr	r3, [pc, #468]	; (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d910      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b72      	ldr	r3, [pc, #456]	; (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 0207 	bic.w	r2, r3, #7
 800189e:	4970      	ldr	r1, [pc, #448]	; (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b6e      	ldr	r3, [pc, #440]	; (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cf      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d010      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d908      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4960      	ldr	r1, [pc, #384]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d04c      	beq.n	800198c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d121      	bne.n	800194a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0a6      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001912:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d115      	bne.n	800194a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e09a      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800192a:	4b4e      	ldr	r3, [pc, #312]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e08e      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e086      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f023 0203 	bic.w	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4943      	ldr	r1, [pc, #268]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	4313      	orrs	r3, r2
 800195a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800195c:	f7ff f86a 	bl	8000a34 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	e00a      	b.n	800197a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7ff f866 	bl	8000a34 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e06e      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 020c 	and.w	r2, r3, #12
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	429a      	cmp	r2, r3
 800198a:	d1eb      	bne.n	8001964 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d010      	beq.n	80019ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d208      	bcs.n	80019ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a8:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	492b      	ldr	r1, [pc, #172]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d210      	bcs.n	80019ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 0207 	bic.w	r2, r3, #7
 80019d0:	4923      	ldr	r1, [pc, #140]	; (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_ClockConfig+0x1ec>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e036      	b.n	8001a58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4918      	ldr	r1, [pc, #96]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4910      	ldr	r1, [pc, #64]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a28:	f000 f824 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	490b      	ldr	r1, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x1f4>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1f8>)
 8001a46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1fc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe ffa1 	bl	8000994 <HAL_InitTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a56:	7afb      	ldrb	r3, [r7, #11]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	08002e78 	.word	0x08002e78
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a82:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a8c:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d121      	bne.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d11e      	bne.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001aa8:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e005      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10d      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d102      	bne.n	8001af2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	e004      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001af8:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001afa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d134      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d003      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0xac>
 8001b18:	e005      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b1c:	617b      	str	r3, [r7, #20]
      break;
 8001b1e:	e005      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b22:	617b      	str	r3, [r7, #20]
      break;
 8001b24:	e002      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	617b      	str	r3, [r7, #20]
      break;
 8001b2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	3301      	adds	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	fb03 f202 	mul.w	r2, r3, r2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	0e5b      	lsrs	r3, r3, #25
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08002e90 	.word	0x08002e90
 8001b84:	00f42400 	.word	0x00f42400
 8001b88:	007a1200 	.word	0x007a1200

08001b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ba8:	f7ff fff0 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4904      	ldr	r1, [pc, #16]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08002e88 	.word	0x08002e88

08001bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bd4:	f7ff ffda 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0adb      	lsrs	r3, r3, #11
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4904      	ldr	r1, [pc, #16]	; (8001bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08002e88 	.word	0x08002e88

08001bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c14:	f7ff f9b6 	bl	8000f84 <HAL_PWREx_GetVoltageRange>
 8001c18:	6178      	str	r0, [r7, #20]
 8001c1a:	e014      	b.n	8001c46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6593      	str	r3, [r2, #88]	; 0x58
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c34:	f7ff f9a6 	bl	8000f84 <HAL_PWREx_GetVoltageRange>
 8001c38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c4c:	d10b      	bne.n	8001c66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b80      	cmp	r3, #128	; 0x80
 8001c52:	d919      	bls.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2ba0      	cmp	r3, #160	; 0xa0
 8001c58:	d902      	bls.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	e013      	b.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c60:	2301      	movs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e010      	b.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b80      	cmp	r3, #128	; 0x80
 8001c6a:	d902      	bls.n	8001c72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	e00a      	b.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b80      	cmp	r3, #128	; 0x80
 8001c76:	d102      	bne.n	8001c7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c78:	2302      	movs	r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	e004      	b.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b70      	cmp	r3, #112	; 0x70
 8001c82:	d101      	bne.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c84:	2301      	movs	r3, #1
 8001c86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 0207 	bic.w	r2, r3, #7
 8001c90:	4909      	ldr	r1, [pc, #36]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d001      	beq.n	8001caa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40022000 	.word	0x40022000

08001cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cc8:	2300      	movs	r3, #0
 8001cca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d031      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ce0:	d01a      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001ce2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ce6:	d814      	bhi.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cf0:	d10f      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001cf2:	4b5d      	ldr	r3, [pc, #372]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	4a5c      	ldr	r2, [pc, #368]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cfe:	e00c      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f9de 	bl	80020c8 <RCCEx_PLLSAI1_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d10:	e003      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	74fb      	strb	r3, [r7, #19]
      break;
 8001d16:	e000      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d1a:	7cfb      	ldrb	r3, [r7, #19]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d20:	4b51      	ldr	r3, [pc, #324]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2e:	494e      	ldr	r1, [pc, #312]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d36:	e001      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 809e 	beq.w	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00d      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a3f      	ldr	r2, [pc, #252]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d70:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a39      	ldr	r2, [pc, #228]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d8c:	f7fe fe52 	bl	8000a34 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d92:	e009      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d94:	f7fe fe4e 	bl	8000a34 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d902      	bls.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	74fb      	strb	r3, [r7, #19]
        break;
 8001da6:	e005      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001da8:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ef      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001db4:	7cfb      	ldrb	r3, [r7, #19]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d15a      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dba:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01e      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d019      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de8:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e02:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d016      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe fe0e 	bl	8000a34 <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7fe fe0a 	bl	8000a34 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d902      	bls.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	74fb      	strb	r3, [r7, #19]
            break;
 8001e32:	e006      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ec      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e56:	4904      	ldr	r1, [pc, #16]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e5e:	e009      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	74bb      	strb	r3, [r7, #18]
 8001e64:	e006      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e74:	7c7b      	ldrb	r3, [r7, #17]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d105      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4b8a      	ldr	r3, [pc, #552]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4a89      	ldr	r2, [pc, #548]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e92:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e98:	f023 0203 	bic.w	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4980      	ldr	r1, [pc, #512]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb4:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	f023 020c 	bic.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	4978      	ldr	r1, [pc, #480]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ed6:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001edc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	496f      	ldr	r1, [pc, #444]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f06:	4967      	ldr	r1, [pc, #412]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f1a:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	495e      	ldr	r1, [pc, #376]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	4956      	ldr	r1, [pc, #344]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	494d      	ldr	r1, [pc, #308]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d028      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f80:	4b48      	ldr	r3, [pc, #288]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4945      	ldr	r1, [pc, #276]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f9e:	d106      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001faa:	60d3      	str	r3, [r2, #12]
 8001fac:	e011      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f882 	bl	80020c8 <RCCEx_PLLSAI1_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d028      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	492d      	ldr	r1, [pc, #180]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ffc:	d106      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002008:	60d3      	str	r3, [r2, #12]
 800200a:	e011      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002014:	d10c      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f000 f853 	bl	80020c8 <RCCEx_PLLSAI1_Config>
 8002022:	4603      	mov	r3, r0
 8002024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002026:	7cfb      	ldrb	r3, [r7, #19]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01c      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204a:	4916      	ldr	r1, [pc, #88]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800205a:	d10c      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	2102      	movs	r1, #2
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f830 	bl	80020c8 <RCCEx_PLLSAI1_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002072:	7cfb      	ldrb	r3, [r7, #19]
 8002074:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002088:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002098:	7cbb      	ldrb	r3, [r7, #18]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000

080020c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020d6:	4b74      	ldr	r3, [pc, #464]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d018      	beq.n	8002114 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020e2:	4b71      	ldr	r3, [pc, #452]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0203 	and.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d10d      	bne.n	800210e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
       ||
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020fa:	4b6b      	ldr	r3, [pc, #428]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
       ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d047      	beq.n	800219e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e044      	b.n	800219e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d018      	beq.n	800214e <RCCEx_PLLSAI1_Config+0x86>
 800211c:	2b03      	cmp	r3, #3
 800211e:	d825      	bhi.n	800216c <RCCEx_PLLSAI1_Config+0xa4>
 8002120:	2b01      	cmp	r3, #1
 8002122:	d002      	beq.n	800212a <RCCEx_PLLSAI1_Config+0x62>
 8002124:	2b02      	cmp	r3, #2
 8002126:	d009      	beq.n	800213c <RCCEx_PLLSAI1_Config+0x74>
 8002128:	e020      	b.n	800216c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11d      	bne.n	8002172 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213a:	e01a      	b.n	8002172 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800213c:	4b5a      	ldr	r3, [pc, #360]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d116      	bne.n	8002176 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214c:	e013      	b.n	8002176 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800214e:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800215a:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800216a:	e006      	b.n	800217a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      break;
 8002170:	e004      	b.n	800217c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002172:	bf00      	nop
 8002174:	e002      	b.n	800217c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800217a:	bf00      	nop
    }

    if(status == HAL_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002182:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	430b      	orrs	r3, r1
 8002198:	4943      	ldr	r1, [pc, #268]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800219a:	4313      	orrs	r3, r2
 800219c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d17c      	bne.n	800229e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80021a4:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b0:	f7fe fc40 	bl	8000a34 <HAL_GetTick>
 80021b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021b6:	e009      	b.n	80021cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021b8:	f7fe fc3c 	bl	8000a34 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d902      	bls.n	80021cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	73fb      	strb	r3, [r7, #15]
        break;
 80021ca:	e005      	b.n	80021d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021cc:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1ef      	bne.n	80021b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d15f      	bne.n	800229e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d110      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021e4:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80021ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6892      	ldr	r2, [r2, #8]
 80021f4:	0211      	lsls	r1, r2, #8
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68d2      	ldr	r2, [r2, #12]
 80021fa:	06d2      	lsls	r2, r2, #27
 80021fc:	430a      	orrs	r2, r1
 80021fe:	492a      	ldr	r1, [pc, #168]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002200:	4313      	orrs	r3, r2
 8002202:	610b      	str	r3, [r1, #16]
 8002204:	e027      	b.n	8002256 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d112      	bne.n	8002232 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800220c:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002214:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6892      	ldr	r2, [r2, #8]
 800221c:	0211      	lsls	r1, r2, #8
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6912      	ldr	r2, [r2, #16]
 8002222:	0852      	lsrs	r2, r2, #1
 8002224:	3a01      	subs	r2, #1
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	430a      	orrs	r2, r1
 800222a:	491f      	ldr	r1, [pc, #124]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	610b      	str	r3, [r1, #16]
 8002230:	e011      	b.n	8002256 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800223a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6892      	ldr	r2, [r2, #8]
 8002242:	0211      	lsls	r1, r2, #8
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6952      	ldr	r2, [r2, #20]
 8002248:	0852      	lsrs	r2, r2, #1
 800224a:	3a01      	subs	r2, #1
 800224c:	0652      	lsls	r2, r2, #25
 800224e:	430a      	orrs	r2, r1
 8002250:	4915      	ldr	r1, [pc, #84]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002252:	4313      	orrs	r3, r2
 8002254:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800225c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002260:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe fbe7 	bl	8000a34 <HAL_GetTick>
 8002266:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002268:	e009      	b.n	800227e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800226a:	f7fe fbe3 	bl	8000a34 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d902      	bls.n	800227e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	73fb      	strb	r3, [r7, #15]
          break;
 800227c:	e005      	b.n	800228a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0ef      	beq.n	800226a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d106      	bne.n	800229e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4903      	ldr	r1, [pc, #12]	; (80022a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d079      	beq.n	80023b2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fa46 	bl	8000764 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d058      	beq.n	80023a0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	22ca      	movs	r2, #202	; 0xca
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2253      	movs	r2, #83	; 0x53
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f880 	bl	8002404 <RTC_EnterInitMode>
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d127      	bne.n	800235e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800231c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002320:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68d2      	ldr	r2, [r2, #12]
 8002348:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6919      	ldr	r1, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	041a      	lsls	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f884 	bl	800246c <RTC_ExitInitMode>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d113      	bne.n	8002396 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0203 	bic.w	r2, r2, #3
 800237c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	625a      	str	r2, [r3, #36]	; 0x24
 800239e:	e001      	b.n	80023a4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_RTC_WaitForSynchro+0x44>)
 80023ca:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80023cc:	f7fe fb32 	bl	8000a34 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023d2:	e009      	b.n	80023e8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023d4:	f7fe fb2e 	bl	8000a34 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023e2:	d901      	bls.n	80023e8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e007      	b.n	80023f8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0ee      	beq.n	80023d4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	0003ff5f 	.word	0x0003ff5f

08002404 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d120      	bne.n	8002460 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f04f 32ff 	mov.w	r2, #4294967295
 8002426:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002428:	f7fe fb04 	bl	8000a34 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800242e:	e00d      	b.n	800244c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002430:	f7fe fb00 	bl	8000a34 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800243e:	d905      	bls.n	800244c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2203      	movs	r2, #3
 8002448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <RTC_EnterInitMode+0x5c>
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d1e7      	bne.n	8002430 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <RTC_ExitInitMode+0x78>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <RTC_ExitInitMode+0x78>)
 800247e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002482:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002484:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <RTC_ExitInitMode+0x78>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10c      	bne.n	80024aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ff93 	bl	80023bc <HAL_RTC_WaitForSynchro>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01e      	beq.n	80024da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2203      	movs	r2, #3
 80024a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e017      	b.n	80024da <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <RTC_ExitInitMode+0x78>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <RTC_ExitInitMode+0x78>)
 80024b0:	f023 0320 	bic.w	r3, r3, #32
 80024b4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ff80 	bl	80023bc <HAL_RTC_WaitForSynchro>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <RTC_ExitInitMode+0x78>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <RTC_ExitInitMode+0x78>)
 80024d4:	f043 0320 	orr.w	r3, r3, #32
 80024d8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40002800 	.word	0x40002800

080024e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e040      	b.n	800257c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe f95a 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	; 0x24
 8002514:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fa54 	bl	80029dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f825 	bl	8002584 <UART_SetConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e01b      	b.n	800257c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fad3 	bl	8002b20 <UART_CheckIdleState>
 800257a:	4603      	mov	r3, r0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002588:	b08a      	sub	sp, #40	; 0x28
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4bb4      	ldr	r3, [pc, #720]	; (8002884 <UART_SetConfig+0x300>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025bc:	430b      	orrs	r3, r1
 80025be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4aa9      	ldr	r2, [pc, #676]	; (8002888 <UART_SetConfig+0x304>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	4313      	orrs	r3, r2
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4aa0      	ldr	r2, [pc, #640]	; (800288c <UART_SetConfig+0x308>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d126      	bne.n	800265c <UART_SetConfig+0xd8>
 800260e:	4ba0      	ldr	r3, [pc, #640]	; (8002890 <UART_SetConfig+0x30c>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b03      	cmp	r3, #3
 800261a:	d81b      	bhi.n	8002654 <UART_SetConfig+0xd0>
 800261c:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <UART_SetConfig+0xa0>)
 800261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002622:	bf00      	nop
 8002624:	08002635 	.word	0x08002635
 8002628:	08002645 	.word	0x08002645
 800262c:	0800263d 	.word	0x0800263d
 8002630:	0800264d 	.word	0x0800264d
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800263a:	e080      	b.n	800273e <UART_SetConfig+0x1ba>
 800263c:	2302      	movs	r3, #2
 800263e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002642:	e07c      	b.n	800273e <UART_SetConfig+0x1ba>
 8002644:	2304      	movs	r3, #4
 8002646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800264a:	e078      	b.n	800273e <UART_SetConfig+0x1ba>
 800264c:	2308      	movs	r3, #8
 800264e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002652:	e074      	b.n	800273e <UART_SetConfig+0x1ba>
 8002654:	2310      	movs	r3, #16
 8002656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800265a:	e070      	b.n	800273e <UART_SetConfig+0x1ba>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a8c      	ldr	r2, [pc, #560]	; (8002894 <UART_SetConfig+0x310>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d138      	bne.n	80026d8 <UART_SetConfig+0x154>
 8002666:	4b8a      	ldr	r3, [pc, #552]	; (8002890 <UART_SetConfig+0x30c>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d82d      	bhi.n	80026d0 <UART_SetConfig+0x14c>
 8002674:	a201      	add	r2, pc, #4	; (adr r2, 800267c <UART_SetConfig+0xf8>)
 8002676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267a:	bf00      	nop
 800267c:	080026b1 	.word	0x080026b1
 8002680:	080026d1 	.word	0x080026d1
 8002684:	080026d1 	.word	0x080026d1
 8002688:	080026d1 	.word	0x080026d1
 800268c:	080026c1 	.word	0x080026c1
 8002690:	080026d1 	.word	0x080026d1
 8002694:	080026d1 	.word	0x080026d1
 8002698:	080026d1 	.word	0x080026d1
 800269c:	080026b9 	.word	0x080026b9
 80026a0:	080026d1 	.word	0x080026d1
 80026a4:	080026d1 	.word	0x080026d1
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	080026c9 	.word	0x080026c9
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026b6:	e042      	b.n	800273e <UART_SetConfig+0x1ba>
 80026b8:	2302      	movs	r3, #2
 80026ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026be:	e03e      	b.n	800273e <UART_SetConfig+0x1ba>
 80026c0:	2304      	movs	r3, #4
 80026c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026c6:	e03a      	b.n	800273e <UART_SetConfig+0x1ba>
 80026c8:	2308      	movs	r3, #8
 80026ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ce:	e036      	b.n	800273e <UART_SetConfig+0x1ba>
 80026d0:	2310      	movs	r3, #16
 80026d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026d6:	e032      	b.n	800273e <UART_SetConfig+0x1ba>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6a      	ldr	r2, [pc, #424]	; (8002888 <UART_SetConfig+0x304>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d12a      	bne.n	8002738 <UART_SetConfig+0x1b4>
 80026e2:	4b6b      	ldr	r3, [pc, #428]	; (8002890 <UART_SetConfig+0x30c>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026f0:	d01a      	beq.n	8002728 <UART_SetConfig+0x1a4>
 80026f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026f6:	d81b      	bhi.n	8002730 <UART_SetConfig+0x1ac>
 80026f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026fc:	d00c      	beq.n	8002718 <UART_SetConfig+0x194>
 80026fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002702:	d815      	bhi.n	8002730 <UART_SetConfig+0x1ac>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <UART_SetConfig+0x18c>
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270c:	d008      	beq.n	8002720 <UART_SetConfig+0x19c>
 800270e:	e00f      	b.n	8002730 <UART_SetConfig+0x1ac>
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002716:	e012      	b.n	800273e <UART_SetConfig+0x1ba>
 8002718:	2302      	movs	r3, #2
 800271a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800271e:	e00e      	b.n	800273e <UART_SetConfig+0x1ba>
 8002720:	2304      	movs	r3, #4
 8002722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002726:	e00a      	b.n	800273e <UART_SetConfig+0x1ba>
 8002728:	2308      	movs	r3, #8
 800272a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800272e:	e006      	b.n	800273e <UART_SetConfig+0x1ba>
 8002730:	2310      	movs	r3, #16
 8002732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002736:	e002      	b.n	800273e <UART_SetConfig+0x1ba>
 8002738:	2310      	movs	r3, #16
 800273a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a51      	ldr	r2, [pc, #324]	; (8002888 <UART_SetConfig+0x304>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d17a      	bne.n	800283e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800274c:	2b08      	cmp	r3, #8
 800274e:	d824      	bhi.n	800279a <UART_SetConfig+0x216>
 8002750:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <UART_SetConfig+0x1d4>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	0800277d 	.word	0x0800277d
 800275c:	0800279b 	.word	0x0800279b
 8002760:	08002785 	.word	0x08002785
 8002764:	0800279b 	.word	0x0800279b
 8002768:	0800278b 	.word	0x0800278b
 800276c:	0800279b 	.word	0x0800279b
 8002770:	0800279b 	.word	0x0800279b
 8002774:	0800279b 	.word	0x0800279b
 8002778:	08002793 	.word	0x08002793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800277c:	f7ff fa12 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8002780:	61f8      	str	r0, [r7, #28]
        break;
 8002782:	e010      	b.n	80027a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002784:	4b44      	ldr	r3, [pc, #272]	; (8002898 <UART_SetConfig+0x314>)
 8002786:	61fb      	str	r3, [r7, #28]
        break;
 8002788:	e00d      	b.n	80027a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800278a:	f7ff f973 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 800278e:	61f8      	str	r0, [r7, #28]
        break;
 8002790:	e009      	b.n	80027a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002796:	61fb      	str	r3, [r7, #28]
        break;
 8002798:	e005      	b.n	80027a6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80027a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8107 	beq.w	80029bc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d305      	bcc.n	80027ca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d903      	bls.n	80027d2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80027d0:	e0f4      	b.n	80029bc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	2200      	movs	r2, #0
 80027d6:	461c      	mov	r4, r3
 80027d8:	4615      	mov	r5, r2
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	022b      	lsls	r3, r5, #8
 80027e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80027e8:	0222      	lsls	r2, r4, #8
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	6849      	ldr	r1, [r1, #4]
 80027ee:	0849      	lsrs	r1, r1, #1
 80027f0:	2000      	movs	r0, #0
 80027f2:	4688      	mov	r8, r1
 80027f4:	4681      	mov	r9, r0
 80027f6:	eb12 0a08 	adds.w	sl, r2, r8
 80027fa:	eb43 0b09 	adc.w	fp, r3, r9
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800280c:	4650      	mov	r0, sl
 800280e:	4659      	mov	r1, fp
 8002810:	f7fd fcdc 	bl	80001cc <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4613      	mov	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002822:	d308      	bcc.n	8002836 <UART_SetConfig+0x2b2>
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800282a:	d204      	bcs.n	8002836 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	e0c2      	b.n	80029bc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800283c:	e0be      	b.n	80029bc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002846:	d16a      	bne.n	800291e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800284c:	2b08      	cmp	r3, #8
 800284e:	d834      	bhi.n	80028ba <UART_SetConfig+0x336>
 8002850:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <UART_SetConfig+0x2d4>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	0800287d 	.word	0x0800287d
 800285c:	0800289d 	.word	0x0800289d
 8002860:	080028a5 	.word	0x080028a5
 8002864:	080028bb 	.word	0x080028bb
 8002868:	080028ab 	.word	0x080028ab
 800286c:	080028bb 	.word	0x080028bb
 8002870:	080028bb 	.word	0x080028bb
 8002874:	080028bb 	.word	0x080028bb
 8002878:	080028b3 	.word	0x080028b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800287c:	f7ff f992 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8002880:	61f8      	str	r0, [r7, #28]
        break;
 8002882:	e020      	b.n	80028c6 <UART_SetConfig+0x342>
 8002884:	efff69f3 	.word	0xefff69f3
 8002888:	40008000 	.word	0x40008000
 800288c:	40013800 	.word	0x40013800
 8002890:	40021000 	.word	0x40021000
 8002894:	40004400 	.word	0x40004400
 8002898:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800289c:	f7ff f998 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 80028a0:	61f8      	str	r0, [r7, #28]
        break;
 80028a2:	e010      	b.n	80028c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028a4:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <UART_SetConfig+0x454>)
 80028a6:	61fb      	str	r3, [r7, #28]
        break;
 80028a8:	e00d      	b.n	80028c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028aa:	f7ff f8e3 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80028ae:	61f8      	str	r0, [r7, #28]
        break;
 80028b0:	e009      	b.n	80028c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028b6:	61fb      	str	r3, [r7, #28]
        break;
 80028b8:	e005      	b.n	80028c6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80028c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d077      	beq.n	80029bc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005a      	lsls	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	441a      	add	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b0f      	cmp	r3, #15
 80028e6:	d916      	bls.n	8002916 <UART_SetConfig+0x392>
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ee:	d212      	bcs.n	8002916 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f023 030f 	bic.w	r3, r3, #15
 80028f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	b29a      	uxth	r2, r3
 8002906:	8afb      	ldrh	r3, [r7, #22]
 8002908:	4313      	orrs	r3, r2
 800290a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	8afa      	ldrh	r2, [r7, #22]
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	e052      	b.n	80029bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800291c:	e04e      	b.n	80029bc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800291e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002922:	2b08      	cmp	r3, #8
 8002924:	d827      	bhi.n	8002976 <UART_SetConfig+0x3f2>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <UART_SetConfig+0x3a8>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08002951 	.word	0x08002951
 8002930:	08002959 	.word	0x08002959
 8002934:	08002961 	.word	0x08002961
 8002938:	08002977 	.word	0x08002977
 800293c:	08002967 	.word	0x08002967
 8002940:	08002977 	.word	0x08002977
 8002944:	08002977 	.word	0x08002977
 8002948:	08002977 	.word	0x08002977
 800294c:	0800296f 	.word	0x0800296f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002950:	f7ff f928 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8002954:	61f8      	str	r0, [r7, #28]
        break;
 8002956:	e014      	b.n	8002982 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002958:	f7ff f93a 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 800295c:	61f8      	str	r0, [r7, #28]
        break;
 800295e:	e010      	b.n	8002982 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <UART_SetConfig+0x454>)
 8002962:	61fb      	str	r3, [r7, #28]
        break;
 8002964:	e00d      	b.n	8002982 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002966:	f7ff f885 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 800296a:	61f8      	str	r0, [r7, #28]
        break;
 800296c:	e009      	b.n	8002982 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800296e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002972:	61fb      	str	r3, [r7, #28]
        break;
 8002974:	e005      	b.n	8002982 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002980:	bf00      	nop
    }

    if (pclk != 0U)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d019      	beq.n	80029bc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	085a      	lsrs	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	441a      	add	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d909      	bls.n	80029b6 <UART_SetConfig+0x432>
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d205      	bcs.n	80029b6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	e002      	b.n	80029bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80029c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029d6:	bf00      	nop
 80029d8:	00f42400 	.word	0x00f42400

080029dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01a      	beq.n	8002af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ada:	d10a      	bne.n	8002af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]
  }
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b098      	sub	sp, #96	; 0x60
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b30:	f7fd ff80 	bl	8000a34 <HAL_GetTick>
 8002b34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d12e      	bne.n	8002ba2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f88c 	bl	8002c70 <UART_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d021      	beq.n	8002ba2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	e853 3f00 	ldrex	r3, [r3]
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b72:	653b      	str	r3, [r7, #80]	; 0x50
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b84:	e841 2300 	strex	r3, r2, [r1]
 8002b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e6      	bne.n	8002b5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e062      	b.n	8002c68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d149      	bne.n	8002c44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f856 	bl	8002c70 <UART_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d03c      	beq.n	8002c44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	e853 3f00 	ldrex	r3, [r3]
 8002bd6:	623b      	str	r3, [r7, #32]
   return(result);
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf0:	e841 2300 	strex	r3, r2, [r1]
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e6      	bne.n	8002bca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3308      	adds	r3, #8
 8002c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	e853 3f00 	ldrex	r3, [r3]
 8002c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c1c:	61fa      	str	r2, [r7, #28]
 8002c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	69b9      	ldr	r1, [r7, #24]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	617b      	str	r3, [r7, #20]
   return(result);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e5      	bne.n	8002bfc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e011      	b.n	8002c68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3758      	adds	r7, #88	; 0x58
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c80:	e049      	b.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d045      	beq.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fd fed3 	bl	8000a34 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e048      	b.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d031      	beq.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d110      	bne.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f838 	bl	8002d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e029      	b.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf0:	d111      	bne.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f81e 	bl	8002d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e00f      	b.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d0a6      	beq.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b095      	sub	sp, #84	; 0x54
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d64:	643b      	str	r3, [r7, #64]	; 0x40
 8002d66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e6      	bne.n	8002d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3308      	adds	r3, #8
 8002d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d118      	bne.n	8002de6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f023 0310 	bic.w	r3, r3, #16
 8002dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	6979      	ldr	r1, [r7, #20]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	e841 2300 	strex	r3, r2, [r1]
 8002dde:	613b      	str	r3, [r7, #16]
   return(result);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1e6      	bne.n	8002db4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002dfa:	bf00      	nop
 8002dfc:	3754      	adds	r7, #84	; 0x54
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <memset>:
 8002e06:	4402      	add	r2, r0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d100      	bne.n	8002e10 <memset+0xa>
 8002e0e:	4770      	bx	lr
 8002e10:	f803 1b01 	strb.w	r1, [r3], #1
 8002e14:	e7f9      	b.n	8002e0a <memset+0x4>
	...

08002e18 <__libc_init_array>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	4d0d      	ldr	r5, [pc, #52]	; (8002e50 <__libc_init_array+0x38>)
 8002e1c:	4c0d      	ldr	r4, [pc, #52]	; (8002e54 <__libc_init_array+0x3c>)
 8002e1e:	1b64      	subs	r4, r4, r5
 8002e20:	10a4      	asrs	r4, r4, #2
 8002e22:	2600      	movs	r6, #0
 8002e24:	42a6      	cmp	r6, r4
 8002e26:	d109      	bne.n	8002e3c <__libc_init_array+0x24>
 8002e28:	4d0b      	ldr	r5, [pc, #44]	; (8002e58 <__libc_init_array+0x40>)
 8002e2a:	4c0c      	ldr	r4, [pc, #48]	; (8002e5c <__libc_init_array+0x44>)
 8002e2c:	f000 f818 	bl	8002e60 <_init>
 8002e30:	1b64      	subs	r4, r4, r5
 8002e32:	10a4      	asrs	r4, r4, #2
 8002e34:	2600      	movs	r6, #0
 8002e36:	42a6      	cmp	r6, r4
 8002e38:	d105      	bne.n	8002e46 <__libc_init_array+0x2e>
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e40:	4798      	blx	r3
 8002e42:	3601      	adds	r6, #1
 8002e44:	e7ee      	b.n	8002e24 <__libc_init_array+0xc>
 8002e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4a:	4798      	blx	r3
 8002e4c:	3601      	adds	r6, #1
 8002e4e:	e7f2      	b.n	8002e36 <__libc_init_array+0x1e>
 8002e50:	08002ec8 	.word	0x08002ec8
 8002e54:	08002ec8 	.word	0x08002ec8
 8002e58:	08002ec8 	.word	0x08002ec8
 8002e5c:	08002ecc 	.word	0x08002ecc

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
