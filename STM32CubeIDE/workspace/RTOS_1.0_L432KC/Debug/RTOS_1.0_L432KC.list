
RTOS_1.0_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005358  08005358  00006358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005468  08005468  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005468  08005468  00006468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005470  08005470  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005470  08005470  00006470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005474  08005474  00006474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005478  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  20000060  080054d8  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000125c  080054d8  0000725c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e1f  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f80  00000000  00000000  0001ceaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0001fe30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebf  00000000  00000000  00021128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022808  00000000  00000000  00021fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015db2  00000000  00000000  000447ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2249  00000000  00000000  0005a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c7ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f8  00000000  00000000  0012c830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00131c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005340 	.word	0x08005340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005340 	.word	0x08005340

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	2000011c 	.word	0x2000011c

080005a4 <send_Task1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_Task1(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
	 The uint8_t *data pointer is initialised directly to the string literal "Hello from DEFTASK\r\n".
	 strlen((const char *)data) is used to determine the length of the string, excluding the null terminator, and this length is passed to HAL_UART_Transmit.
	 This method avoids the need to explicitly specify the size of an array and ensures that only the characters of the string literal are transmitted without the null terminator.
	 */

	const uint8_t *data = (const uint8_t*) "Hello from Task1\r\n";
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <send_Task1+0x50>)
 80005ac:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, data, strlen((const char*) data), 500);
 80005ae:	6978      	ldr	r0, [r7, #20]
 80005b0:	f7ff fe0e 	bl	80001d0 <strlen>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005bc:	6979      	ldr	r1, [r7, #20]
 80005be:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <send_Task1+0x54>)
 80005c0:	f002 fa6e 	bl	8002aa0 <HAL_UART_Transmit>

	//The following code transmits the value of the variable number via the UART
	char buffer[20]; // buffer is an array of characters to hold the string representation of the number
	sprintf(buffer, "%lu\r\n", number); // Convert number to string and stores in the array called buffer
 80005c4:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <send_Task1+0x58>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	463b      	mov	r3, r7
 80005ca:	490d      	ldr	r1, [pc, #52]	@ (8000600 <send_Task1+0x5c>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 f9c1 	bl	8004954 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer),
 80005d2:	463b      	mov	r3, r7
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fdfb 	bl	80001d0 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4639      	mov	r1, r7
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <send_Task1+0x54>)
 80005e6:	f002 fa5b 	bl	8002aa0 <HAL_UART_Transmit>
	HAL_MAX_DELAY); // Transmit the string via UART
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08005358 	.word	0x08005358
 80005f8:	2000031c 	.word	0x2000031c
 80005fc:	200003b0 	.word	0x200003b0
 8000600:	0800536c 	.word	0x0800536c

08000604 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b096      	sub	sp, #88	@ 0x58
 8000608:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060a:	f000 fb2c 	bl	8000c66 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800060e:	f000 f84b 	bl	80006a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000612:	f000 f8cb 	bl	80007ac <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000616:	f000 f899 	bl	800074c <MX_USART2_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800061a:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <main+0x8c>)
 800061c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800062e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f002 ff1d 	bl	8003474 <osThreadCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <main+0x90>)
 800063e:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task1 */
	osThreadDef(Task1, Task1_init, osPriorityNormal, 0, 128);
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <main+0x94>)
 8000642:	f107 0420 	add.w	r4, r7, #32
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 ff0a 	bl	8003474 <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <main+0x98>)
 8000664:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task2 */
	osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <main+0x9c>)
 8000668:	1d3c      	adds	r4, r7, #4
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fef9 	bl	8003474 <osThreadCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a07      	ldr	r2, [pc, #28]	@ (80006a4 <main+0xa0>)
 8000686:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000688:	f002 feed 	bl	8003466 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0x88>
 8000690:	08005380 	.word	0x08005380
 8000694:	200003a4 	.word	0x200003a4
 8000698:	080053a4 	.word	0x080053a4
 800069c:	200003a8 	.word	0x200003a8
 80006a0:	080053c8 	.word	0x080053c8
 80006a4:	200003ac 	.word	0x200003ac

080006a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	@ 0x58
 80006ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	@ 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 f96c 	bl	8004994 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80006ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ce:	f000 fd8f 	bl	80011f0 <HAL_PWREx_ControlVoltageScaling>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80006d8:	f000 f91c 	bl	8000914 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	2310      	movs	r3, #16
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80006f6:	230a      	movs	r3, #10
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fdc6 	bl	800129c <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x72>
		Error_Handler();
 8000716:	f000 f8fd 	bl	8000914 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800072e:	463b      	mov	r3, r7
 8000730:	2104      	movs	r1, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f9c6 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
		Error_Handler();
 800073e:	f000 f8e9 	bl	8000914 <Error_Handler>
	}
}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	@ 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	@ (80007a8 <MX_USART2_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000790:	f002 f938 	bl	8002a04 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800079a:	f000 f8bb 	bl	8000914 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000031c 	.word	0x2000031c
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_GPIO_Init+0xb8>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a27      	ldr	r2, [pc, #156]	@ (8000864 <MX_GPIO_Init+0xb8>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <MX_GPIO_Init+0xb8>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <MX_GPIO_Init+0xb8>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a21      	ldr	r2, [pc, #132]	@ (8000864 <MX_GPIO_Init+0xb8>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <MX_GPIO_Init+0xb8>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_GPIO_Init+0xb8>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <MX_GPIO_Init+0xb8>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_GPIO_Init+0xb8>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000812:	f000 fcad 	bl	8001170 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4813      	ldr	r0, [pc, #76]	@ (8000868 <MX_GPIO_Init+0xbc>)
 800081c:	f000 fca8 	bl	8001170 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000820:	2302      	movs	r3, #2
 8000822:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083a:	f000 fb2f 	bl	8000e9c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 800083e:	2308      	movs	r3, #8
 8000840:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_GPIO_Init+0xbc>)
 8000856:	f000 fb21 	bl	8000e9c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	48000400 	.word	0x48000400

0800086c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000874:	2001      	movs	r0, #1
 8000876:	f002 fe49 	bl	800350c <osDelay>
 800087a:	e7fb      	b.n	8000874 <StartDefaultTask+0x8>

0800087c <Task1_init>:
 * @brief Function implementing the Task1 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task1_init */
void Task1_init(void const *argument) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task1_init */
	//Flash Red LED and transmit text and number via UART2
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(PORTA, LED_Red);
 8000884:	2102      	movs	r1, #2
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f000 fc89 	bl	80011a0 <HAL_GPIO_TogglePin>
		osDelay(300); //better than HAL_Delay(500)when using RTOS
 800088e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000892:	f002 fe3b 	bl	800350c <osDelay>
		HAL_GPIO_TogglePin(PORTA, LED_Red);
 8000896:	2102      	movs	r1, #2
 8000898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089c:	f000 fc80 	bl	80011a0 <HAL_GPIO_TogglePin>
		osDelay(700); //better than HAL_Delay(1000) when using RTOS
 80008a0:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80008a4:	f002 fe32 	bl	800350c <osDelay>

		send_Task1(); //call function to transmit text and numeric data
 80008a8:	f7ff fe7c 	bl	80005a4 <send_Task1>
		number++; //increment the variable i.e. number
 80008ac:	4b03      	ldr	r3, [pc, #12]	@ (80008bc <Task1_init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a02      	ldr	r2, [pc, #8]	@ (80008bc <Task1_init+0x40>)
 80008b4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(PORTA, LED_Red);
 80008b6:	bf00      	nop
 80008b8:	e7e4      	b.n	8000884 <Task1_init+0x8>
 80008ba:	bf00      	nop
 80008bc:	200003b0 	.word	0x200003b0

080008c0 <Task2_init>:
 * @brief Function implementing the Task2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task2_init */
void Task2_init(void const *argument) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task2_init */
	//Flash on-board green LED
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(PORTB, LED_Green);
 80008c8:	2108      	movs	r1, #8
 80008ca:	4808      	ldr	r0, [pc, #32]	@ (80008ec <Task2_init+0x2c>)
 80008cc:	f000 fc68 	bl	80011a0 <HAL_GPIO_TogglePin>
		osDelay(500); //better than HAL_Delay(500)when using RTOS
 80008d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008d4:	f002 fe1a 	bl	800350c <osDelay>
		HAL_GPIO_TogglePin(PORTB, LED_Green);
 80008d8:	2108      	movs	r1, #8
 80008da:	4804      	ldr	r0, [pc, #16]	@ (80008ec <Task2_init+0x2c>)
 80008dc:	f000 fc60 	bl	80011a0 <HAL_GPIO_TogglePin>
		osDelay(1000); //better than HAL_Delay(1000) when using RTOS
 80008e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e4:	f002 fe12 	bl	800350c <osDelay>
		HAL_GPIO_TogglePin(PORTB, LED_Green);
 80008e8:	bf00      	nop
 80008ea:	e7ed      	b.n	80008c8 <Task2_init+0x8>
 80008ec:	48000400 	.word	0x48000400

080008f0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
// Timer 6 (TIM6) is one of two basic timers in the L432 MCU, the other is Timer 7 for the HAL TIMEBASE SOURCE rather than SysTick which is very busy being used for HAL_Delay() etc.
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d101      	bne.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000902:	f000 f9c9 	bl	8000c98 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40001000 	.word	0x40001000

08000914 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <HAL_MspInit+0x4c>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092a:	4a10      	ldr	r2, [pc, #64]	@ (800096c <HAL_MspInit+0x4c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	@ 0x60
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <HAL_MspInit+0x4c>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_MspInit+0x4c>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <HAL_MspInit+0x4c>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	@ 0x58
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_MspInit+0x4c>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fa73 	bl	8000e48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09e      	sub	sp, #120	@ 0x78
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2254      	movs	r2, #84	@ 0x54
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f003 ffff 	bl	8004994 <memset>
  if(huart->Instance==USART2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a28      	ldr	r2, [pc, #160]	@ (8000a3c <HAL_UART_MspInit+0xcc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d148      	bne.n	8000a32 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fadf 	bl	8001f70 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b8:	f7ff ffac 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009bc:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <HAL_UART_MspInit+0xd0>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <HAL_UART_MspInit+0xd0>)
 80009c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <HAL_UART_MspInit+0xd0>)
 80009ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <HAL_UART_MspInit+0xd0>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d8:	4a19      	ldr	r2, [pc, #100]	@ (8000a40 <HAL_UART_MspInit+0xd0>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <HAL_UART_MspInit+0xd0>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009ec:	2304      	movs	r3, #4
 80009ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fc:	2307      	movs	r3, #7
 80009fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0a:	f000 fa47 	bl	8000e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a12:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a20:	2303      	movs	r3, #3
 8000a22:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f000 fa35 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3778      	adds	r7, #120	@ 0x78
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40004400 	.word	0x40004400
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	@ 0x38
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a52:	4b34      	ldr	r3, [pc, #208]	@ (8000b24 <HAL_InitTick+0xe0>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	4a33      	ldr	r2, [pc, #204]	@ (8000b24 <HAL_InitTick+0xe0>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5e:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <HAL_InitTick+0xe0>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6a:	f107 0210 	add.w	r2, r7, #16
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 f9e9 	bl	8001e4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a84:	f001 f9b6 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8000a88:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a8a:	e004      	b.n	8000a96 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a8c:	f001 f9b2 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8000a90:	4603      	mov	r3, r0
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a98:	4a23      	ldr	r2, [pc, #140]	@ (8000b28 <HAL_InitTick+0xe4>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9b      	lsrs	r3, r3, #18
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa4:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000aa6:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <HAL_InitTick+0xec>)
 8000aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000aac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000aca:	4818      	ldr	r0, [pc, #96]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000acc:	f001 fd38 	bl	8002540 <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ad6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d11b      	bne.n	8000b16 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ade:	4813      	ldr	r0, [pc, #76]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000ae0:	f001 fd90 	bl	8002604 <HAL_TIM_Base_Start_IT>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000aea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d111      	bne.n	8000b16 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000af2:	2036      	movs	r0, #54	@ 0x36
 8000af4:	f000 f9c4 	bl	8000e80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	d808      	bhi.n	8000b10 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000afe:	2200      	movs	r2, #0
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	2036      	movs	r0, #54	@ 0x36
 8000b04:	f000 f9a0 	bl	8000e48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e002      	b.n	8000b16 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3738      	adds	r7, #56	@ 0x38
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	431bde83 	.word	0x431bde83
 8000b2c:	200003b4 	.word	0x200003b4
 8000b30:	40001000 	.word	0x40001000
 8000b34:	20000004 	.word	0x20000004

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <NMI_Handler+0x4>

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <MemManage_Handler+0x4>

08000b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <TIM6_DAC_IRQHandler+0x10>)
 8000b76:	f001 fd99 	bl	80026ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200003b4 	.word	0x200003b4

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	@ (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f003 ff4c 	bl	8004a50 <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20010000 	.word	0x20010000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	20000400 	.word	0x20000400
 8000bec:	20001260 	.word	0x20001260

08000bf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c18:	f7ff ffea 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	@ (8000c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <LoopForever+0xe>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	@ (8000c60 <LoopForever+0x16>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c42:	f003 ff0b 	bl	8004a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c46:	f7ff fcdd 	bl	8000604 <main>

08000c4a <LoopForever>:

LoopForever:
    b LoopForever
 8000c4a:	e7fe      	b.n	8000c4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c58:	08005478 	.word	0x08005478
  ldr r2, =_sbss
 8000c5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c60:	2000125c 	.word	0x2000125c

08000c64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_IRQHandler>

08000c66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f8de 	bl	8000e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c76:	200f      	movs	r0, #15
 8000c78:	f7ff fee4 	bl	8000a44 <HAL_InitTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	e001      	b.n	8000c8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c88:	f7ff fe4a 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000404 	.word	0x20000404

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000404 	.word	0x20000404

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	@ (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	@ (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	@ (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	@ 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff4c 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5a:	f7ff ff61 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f7ff ffb1 	bl	8000dcc <NVIC_EncodePriority>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff80 	bl	8000d78 <__NVIC_SetPriority>
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff54 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e148      	b.n	800113e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 813a 	beq.w	8001138 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x40>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	f003 0201 	and.w	r2, r3, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8094 	beq.w	8001138 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b52      	ldr	r3, [pc, #328]	@ (800115c <HAL_GPIO_Init+0x2c0>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001014:	4a51      	ldr	r2, [pc, #324]	@ (800115c <HAL_GPIO_Init+0x2c0>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6613      	str	r3, [r2, #96]	@ 0x60
 800101c:	4b4f      	ldr	r3, [pc, #316]	@ (800115c <HAL_GPIO_Init+0x2c0>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001028:	4a4d      	ldr	r2, [pc, #308]	@ (8001160 <HAL_GPIO_Init+0x2c4>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001052:	d00d      	beq.n	8001070 <HAL_GPIO_Init+0x1d4>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a43      	ldr	r2, [pc, #268]	@ (8001164 <HAL_GPIO_Init+0x2c8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x1d0>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a42      	ldr	r2, [pc, #264]	@ (8001168 <HAL_GPIO_Init+0x2cc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_Init+0x1cc>
 8001064:	2302      	movs	r3, #2
 8001066:	e004      	b.n	8001072 <HAL_GPIO_Init+0x1d6>
 8001068:	2307      	movs	r3, #7
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x1d6>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x1d6>
 8001070:	2300      	movs	r3, #0
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	f002 0203 	and.w	r2, r2, #3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4093      	lsls	r3, r2
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001082:	4937      	ldr	r1, [pc, #220]	@ (8001160 <HAL_GPIO_Init+0x2c4>)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001090:	4b36      	ldr	r3, [pc, #216]	@ (800116c <HAL_GPIO_Init+0x2d0>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b4:	4a2d      	ldr	r2, [pc, #180]	@ (800116c <HAL_GPIO_Init+0x2d0>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <HAL_GPIO_Init+0x2d0>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010de:	4a23      	ldr	r2, [pc, #140]	@ (800116c <HAL_GPIO_Init+0x2d0>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010e4:	4b21      	ldr	r3, [pc, #132]	@ (800116c <HAL_GPIO_Init+0x2d0>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001108:	4a18      	ldr	r2, [pc, #96]	@ (800116c <HAL_GPIO_Init+0x2d0>)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_GPIO_Init+0x2d0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001132:	4a0e      	ldr	r2, [pc, #56]	@ (800116c <HAL_GPIO_Init+0x2d0>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa22 f303 	lsr.w	r3, r2, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	f47f aeaf 	bne.w	8000eac <HAL_GPIO_Init+0x10>
  }
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118c:	e002      	b.n	8001194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4013      	ands	r3, r2
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43d9      	mvns	r1, r3
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	400b      	ands	r3, r1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <HAL_PWREx_GetVoltageRange+0x18>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011fe:	d130      	bne.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001200:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800120c:	d038      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001216:	4a1e      	ldr	r2, [pc, #120]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2232      	movs	r2, #50	@ 0x32
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	4a1b      	ldr	r2, [pc, #108]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9b      	lsrs	r3, r3, #18
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001234:	e002      	b.n	800123c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3b01      	subs	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001248:	d102      	bne.n	8001250 <HAL_PWREx_ControlVoltageScaling+0x60>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f2      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800125c:	d110      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e00f      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800126a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126e:	d007      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001278:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800127e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40007000 	.word	0x40007000
 8001294:	20000000 	.word	0x20000000
 8001298:	431bde83 	.word	0x431bde83

0800129c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f000 bc02 	b.w	8001ab4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b0:	4b96      	ldr	r3, [pc, #600]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ba:	4b94      	ldr	r3, [pc, #592]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80e4 	beq.w	800149a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <HAL_RCC_OscConfig+0x4c>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b0c      	cmp	r3, #12
 80012dc:	f040 808b 	bne.w	80013f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	f040 8087 	bne.w	80013f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e8:	4b88      	ldr	r3, [pc, #544]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_OscConfig+0x64>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e3d9      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	4b81      	ldr	r3, [pc, #516]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <HAL_RCC_OscConfig+0x7e>
 8001310:	4b7e      	ldr	r3, [pc, #504]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001318:	e005      	b.n	8001326 <HAL_RCC_OscConfig+0x8a>
 800131a:	4b7c      	ldr	r3, [pc, #496]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800131c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001326:	4293      	cmp	r3, r2
 8001328:	d223      	bcs.n	8001372 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fdbe 	bl	8001eb0 <RCC_SetFlashLatencyFromMSIRange>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e3ba      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133e:	4b73      	ldr	r3, [pc, #460]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a72      	ldr	r2, [pc, #456]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b70      	ldr	r3, [pc, #448]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	496d      	ldr	r1, [pc, #436]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135c:	4b6b      	ldr	r3, [pc, #428]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	4968      	ldr	r1, [pc, #416]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e025      	b.n	80013be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001372:	4b66      	ldr	r3, [pc, #408]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a65      	ldr	r2, [pc, #404]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b63      	ldr	r3, [pc, #396]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4960      	ldr	r1, [pc, #384]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001390:	4b5e      	ldr	r3, [pc, #376]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	495b      	ldr	r1, [pc, #364]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fd7e 	bl	8001eb0 <RCC_SetFlashLatencyFromMSIRange>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e37a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013be:	f000 fc81 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b51      	ldr	r3, [pc, #324]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4950      	ldr	r1, [pc, #320]	@ (8001510 <HAL_RCC_OscConfig+0x274>)
 80013d0:	5ccb      	ldrb	r3, [r1, r3]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	4a4e      	ldr	r2, [pc, #312]	@ (8001514 <HAL_RCC_OscConfig+0x278>)
 80013dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013de:	4b4e      	ldr	r3, [pc, #312]	@ (8001518 <HAL_RCC_OscConfig+0x27c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fb2e 	bl	8000a44 <HAL_InitTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d052      	beq.n	8001498 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	e35e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d032      	beq.n	8001464 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013fe:	4b43      	ldr	r3, [pc, #268]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a42      	ldr	r2, [pc, #264]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140a:	f7ff fc59 	bl	8000cc0 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001412:	f7ff fc55 	bl	8000cc0 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e347      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001424:	4b39      	ldr	r3, [pc, #228]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001430:	4b36      	ldr	r3, [pc, #216]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a35      	ldr	r2, [pc, #212]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b33      	ldr	r3, [pc, #204]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4930      	ldr	r1, [pc, #192]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144e:	4b2f      	ldr	r3, [pc, #188]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	492b      	ldr	r1, [pc, #172]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
 8001462:	e01a      	b.n	800149a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a28      	ldr	r2, [pc, #160]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001470:	f7ff fc26 	bl	8000cc0 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001478:	f7ff fc22 	bl	8000cc0 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e314      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1dc>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d073      	beq.n	800158e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x21c>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	d10e      	bne.n	80014d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d10b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d063      	beq.n	800158c <HAL_RCC_OscConfig+0x2f0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d15f      	bne.n	800158c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e2f1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x24c>
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e025      	b.n	8001534 <HAL_RCC_OscConfig+0x298>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f0:	d114      	bne.n	800151c <HAL_RCC_OscConfig+0x280>
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a02      	ldr	r2, [pc, #8]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e013      	b.n	8001534 <HAL_RCC_OscConfig+0x298>
 800150c:	40021000 	.word	0x40021000
 8001510:	080053ec 	.word	0x080053ec
 8001514:	20000000 	.word	0x20000000
 8001518:	20000004 	.word	0x20000004
 800151c:	4ba0      	ldr	r3, [pc, #640]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9f      	ldr	r2, [pc, #636]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b9d      	ldr	r3, [pc, #628]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a9c      	ldr	r2, [pc, #624]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fbc0 	bl	8000cc0 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fbbc 	bl	8000cc0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e2ae      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001556:	4b92      	ldr	r3, [pc, #584]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x2a8>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fbac 	bl	8000cc0 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fba8 	bl	8000cc0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	@ 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e29a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157e:	4b88      	ldr	r3, [pc, #544]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x2d0>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d060      	beq.n	800165c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d005      	beq.n	80015ac <HAL_RCC_OscConfig+0x310>
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d119      	bne.n	80015da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d116      	bne.n	80015da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ac:	4b7c      	ldr	r3, [pc, #496]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x328>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e277      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b76      	ldr	r3, [pc, #472]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	4973      	ldr	r1, [pc, #460]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d8:	e040      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d023      	beq.n	800162a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e2:	4b6f      	ldr	r3, [pc, #444]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6e      	ldr	r2, [pc, #440]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb67 	bl	8000cc0 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb63 	bl	8000cc0 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e255      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001608:	4b65      	ldr	r3, [pc, #404]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b62      	ldr	r3, [pc, #392]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	495f      	ldr	r1, [pc, #380]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e018      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b5d      	ldr	r3, [pc, #372]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5c      	ldr	r2, [pc, #368]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fb43 	bl	8000cc0 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fb3f 	bl	8000cc0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e231      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001650:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d03c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01c      	beq.n	80016aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001670:	4b4b      	ldr	r3, [pc, #300]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001676:	4a4a      	ldr	r2, [pc, #296]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fb1e 	bl	8000cc0 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fb1a 	bl	8000cc0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e20c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169a:	4b41      	ldr	r3, [pc, #260]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ef      	beq.n	8001688 <HAL_RCC_OscConfig+0x3ec>
 80016a8:	e01b      	b.n	80016e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b0:	4a3b      	ldr	r2, [pc, #236]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb01 	bl	8000cc0 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff fafd 	bl	8000cc0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e1ef      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d4:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ef      	bne.n	80016c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80a6 	beq.w	800183c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016f4:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10d      	bne.n	800171c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	4a26      	ldr	r2, [pc, #152]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	@ 0x58
 800170c:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001718:	2301      	movs	r3, #1
 800171a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171c:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <HAL_RCC_OscConfig+0x508>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d118      	bne.n	800175a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <HAL_RCC_OscConfig+0x508>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1d      	ldr	r2, [pc, #116]	@ (80017a4 <HAL_RCC_OscConfig+0x508>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001732:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001734:	f7ff fac4 	bl	8000cc0 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173c:	f7ff fac0 	bl	8000cc0 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1b2      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <HAL_RCC_OscConfig+0x508>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_RCC_OscConfig+0x4d8>
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001772:	e029      	b.n	80017c8 <HAL_RCC_OscConfig+0x52c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d115      	bne.n	80017a8 <HAL_RCC_OscConfig+0x50c>
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001782:	4a07      	ldr	r2, [pc, #28]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001792:	4a03      	ldr	r2, [pc, #12]	@ (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x52c>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40007000 	.word	0x40007000
 80017a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	4a99      	ldr	r2, [pc, #612]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b8:	4b96      	ldr	r3, [pc, #600]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017be:	4a95      	ldr	r2, [pc, #596]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d016      	beq.n	80017fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fa76 	bl	8000cc0 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff fa72 	bl	8000cc0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e162      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ee:	4b89      	ldr	r3, [pc, #548]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ed      	beq.n	80017d8 <HAL_RCC_OscConfig+0x53c>
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa5f 	bl	8000cc0 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fa5b 	bl	8000cc0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e14b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800181c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ed      	bne.n	8001806 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182a:	7ffb      	ldrb	r3, [r7, #31]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b78      	ldr	r3, [pc, #480]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001834:	4a77      	ldr	r2, [pc, #476]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	2b00      	cmp	r3, #0
 8001846:	d03c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01c      	beq.n	800188a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001850:	4b70      	ldr	r3, [pc, #448]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001852:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001856:	4a6f      	ldr	r2, [pc, #444]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff fa2e 	bl	8000cc0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001868:	f7ff fa2a 	bl	8000cc0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e11c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800187a:	4b66      	ldr	r3, [pc, #408]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 800187c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0ef      	beq.n	8001868 <HAL_RCC_OscConfig+0x5cc>
 8001888:	e01b      	b.n	80018c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800188a:	4b62      	ldr	r3, [pc, #392]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 800188c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001890:	4a60      	ldr	r2, [pc, #384]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff fa11 	bl	8000cc0 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018a2:	f7ff fa0d 	bl	8000cc0 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0ff      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b4:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80018b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ef      	bne.n	80018a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80f3 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f040 80c9 	bne.w	8001a68 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d12c      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f4:	3b01      	subs	r3, #1
 80018f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d123      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001906:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d11b      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001916:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d113      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	3b01      	subs	r3, #1
 800192a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d109      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	085b      	lsrs	r3, r3, #1
 800193c:	3b01      	subs	r3, #1
 800193e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d06b      	beq.n	8001a1c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d062      	beq.n	8001a10 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800194a:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0ac      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800195a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001960:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001964:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001966:	f7ff f9ab 	bl	8000cc0 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff f9a7 	bl	8000cc0 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e099      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001980:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198c:	4b21      	ldr	r3, [pc, #132]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_RCC_OscConfig+0x77c>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800199c:	3a01      	subs	r2, #1
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019a6:	0212      	lsls	r2, r2, #8
 80019a8:	4311      	orrs	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019ae:	0852      	lsrs	r2, r2, #1
 80019b0:	3a01      	subs	r2, #1
 80019b2:	0552      	lsls	r2, r2, #21
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019ba:	0852      	lsrs	r2, r2, #1
 80019bc:	3a01      	subs	r2, #1
 80019be:	0652      	lsls	r2, r2, #25
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019c6:	06d2      	lsls	r2, r2, #27
 80019c8:	430a      	orrs	r2, r1
 80019ca:	4912      	ldr	r1, [pc, #72]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019d0:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e8:	f7ff f96a 	bl	8000cc0 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f966 	bl	8000cc0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e058      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0e:	e050      	b.n	8001ab2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e04f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
 8001a14:	40021000 	.word	0x40021000
 8001a18:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1c:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d144      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a28:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a23      	ldr	r2, [pc, #140]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a34:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4a20      	ldr	r2, [pc, #128]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a40:	f7ff f93e 	bl	8000cc0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f93a 	bl	8000cc0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e02c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x7ac>
 8001a66:	e024      	b.n	8001ab2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d01f      	beq.n	8001aae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f921 	bl	8000cc0 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f91d 	bl	8000cc0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e00f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	4905      	ldr	r1, [pc, #20]	@ (8001abc <HAL_RCC_OscConfig+0x820>)
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_RCC_OscConfig+0x824>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
 8001aac:	e001      	b.n	8001ab2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	feeefffc 	.word	0xfeeefffc

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0e7      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b75      	ldr	r3, [pc, #468]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d910      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b72      	ldr	r3, [pc, #456]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4970      	ldr	r1, [pc, #448]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0cf      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d010      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b66      	ldr	r3, [pc, #408]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d908      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b63      	ldr	r3, [pc, #396]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4960      	ldr	r1, [pc, #384]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d04c      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d121      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0a6      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b62:	4b54      	ldr	r3, [pc, #336]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e09a      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e08e      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e086      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b46      	ldr	r3, [pc, #280]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4943      	ldr	r1, [pc, #268]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bac:	f7ff f888 	bl	8000cc0 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff f884 	bl	8000cc0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e06e      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d010      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d208      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	492b      	ldr	r1, [pc, #172]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d210      	bcs.n	8001c3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 0207 	bic.w	r2, r3, #7
 8001c20:	4923      	ldr	r1, [pc, #140]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e036      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	4918      	ldr	r1, [pc, #96]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4910      	ldr	r1, [pc, #64]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c78:	f000 f824 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	490b      	ldr	r1, [pc, #44]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f8>)
 8001c96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fed1 	bl	8000a44 <HAL_InitTick>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	080053ec 	.word	0x080053ec
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	@ 0x24
 8001cc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d121      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d11e      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cf8:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d04:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e005      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d14:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d20:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10d      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d3c:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	e004      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d48:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d134      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d52:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d003      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0xac>
 8001d68:	e005      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d6c:	617b      	str	r3, [r7, #20]
      break;
 8001d6e:	e005      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d72:	617b      	str	r3, [r7, #20]
      break;
 8001d74:	e002      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	617b      	str	r3, [r7, #20]
      break;
 8001d7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	3301      	adds	r3, #1
 8001d88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	fb03 f202 	mul.w	r2, r3, r2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	0e5b      	lsrs	r3, r3, #25
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	3301      	adds	r3, #1
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08005404 	.word	0x08005404
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	007a1200 	.word	0x007a1200

08001ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4904      	ldr	r1, [pc, #16]	@ (8001e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	080053fc 	.word	0x080053fc

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e24:	f7ff ffda 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0adb      	lsrs	r3, r3, #11
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4904      	ldr	r1, [pc, #16]	@ (8001e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	080053fc 	.word	0x080053fc

08001e4c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	220f      	movs	r2, #15
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e8e:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <HAL_RCC_GetClockConfig+0x60>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0207 	and.w	r2, r3, #7
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40022000 	.word	0x40022000

08001eb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ec8:	f7ff f984 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001ecc:	6178      	str	r0, [r7, #20]
 8001ece:	e014      	b.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b25      	ldr	r3, [pc, #148]	@ (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001edc:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ee8:	f7ff f974 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001eec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f00:	d10b      	bne.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b80      	cmp	r3, #128	@ 0x80
 8001f06:	d919      	bls.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f0c:	d902      	bls.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f0e:	2302      	movs	r3, #2
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	e013      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f14:	2301      	movs	r3, #1
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e010      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b80      	cmp	r3, #128	@ 0x80
 8001f1e:	d902      	bls.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f20:	2303      	movs	r3, #3
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e00a      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b80      	cmp	r3, #128	@ 0x80
 8001f2a:	d102      	bne.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e004      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b70      	cmp	r3, #112	@ 0x70
 8001f36:	d101      	bne.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f38:	2301      	movs	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 0207 	bic.w	r2, r3, #7
 8001f44:	4909      	ldr	r1, [pc, #36]	@ (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40022000 	.word	0x40022000

08001f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f78:	2300      	movs	r3, #0
 8001f7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d031      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f94:	d01a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f96:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f9a:	d814      	bhi.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fa0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4a5c      	ldr	r2, [pc, #368]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb2:	e00c      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f9ce 	bl	800235c <RCCEx_PLLSAI1_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc4:	e003      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fca:	e000      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fd4:	4b51      	ldr	r3, [pc, #324]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe2:	494e      	ldr	r1, [pc, #312]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fea:	e001      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fec:	7cfb      	ldrb	r3, [r7, #19]
 8001fee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 809e 	beq.w	800213a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002002:	4b46      	ldr	r3, [pc, #280]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	4b40      	ldr	r3, [pc, #256]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	4a3f      	ldr	r2, [pc, #252]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002022:	6593      	str	r3, [r2, #88]	@ 0x58
 8002024:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002030:	2301      	movs	r3, #1
 8002032:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002034:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a39      	ldr	r2, [pc, #228]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002040:	f7fe fe3e 	bl	8000cc0 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002046:	e009      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002048:	f7fe fe3a 	bl	8000cc0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	74fb      	strb	r3, [r7, #19]
        break;
 800205a:	e005      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800205c:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ef      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d15a      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800206e:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002074:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002078:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01e      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	429a      	cmp	r2, r3
 8002088:	d019      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002094:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002096:	4b21      	ldr	r3, [pc, #132]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209c:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a6:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020b6:	4a19      	ldr	r2, [pc, #100]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d016      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fdfa 	bl	8000cc0 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	e00b      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7fe fdf6 	bl	8000cc0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d902      	bls.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	74fb      	strb	r3, [r7, #19]
            break;
 80020e6:	e006      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ec      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10b      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020fc:	4b07      	ldr	r3, [pc, #28]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002102:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210a:	4904      	ldr	r1, [pc, #16]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002112:	e009      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	74bb      	strb	r3, [r7, #18]
 8002118:	e006      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002128:	7c7b      	ldrb	r3, [r7, #17]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4b8a      	ldr	r3, [pc, #552]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	4a89      	ldr	r2, [pc, #548]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002138:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002146:	4b84      	ldr	r3, [pc, #528]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214c:	f023 0203 	bic.w	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4980      	ldr	r1, [pc, #512]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002168:	4b7b      	ldr	r3, [pc, #492]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	f023 020c 	bic.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	4978      	ldr	r1, [pc, #480]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800218a:	4b73      	ldr	r3, [pc, #460]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002190:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002198:	496f      	ldr	r1, [pc, #444]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ba:	4967      	ldr	r1, [pc, #412]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021ce:	4b62      	ldr	r3, [pc, #392]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021dc:	495e      	ldr	r1, [pc, #376]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f0:	4b59      	ldr	r3, [pc, #356]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	4956      	ldr	r1, [pc, #344]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002212:	4b51      	ldr	r3, [pc, #324]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002218:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	494d      	ldr	r1, [pc, #308]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d028      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002234:	4b48      	ldr	r3, [pc, #288]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4945      	ldr	r1, [pc, #276]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002252:	d106      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002254:	4b40      	ldr	r3, [pc, #256]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a3f      	ldr	r2, [pc, #252]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800225a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225e:	60d3      	str	r3, [r2, #12]
 8002260:	e011      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800226a:	d10c      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	2101      	movs	r1, #1
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f872 	bl	800235c <RCCEx_PLLSAI1_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d028      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002292:	4b31      	ldr	r3, [pc, #196]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002298:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a0:	492d      	ldr	r1, [pc, #180]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022b0:	d106      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b2:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4a28      	ldr	r2, [pc, #160]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022bc:	60d3      	str	r3, [r2, #12]
 80022be:	e011      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f843 	bl	800235c <RCCEx_PLLSAI1_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022da:	7cfb      	ldrb	r3, [r7, #19]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01c      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022fe:	4916      	ldr	r1, [pc, #88]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800230e:	d10c      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f820 	bl	800235c <RCCEx_PLLSAI1_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	4904      	ldr	r1, [pc, #16]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800234c:	7cbb      	ldrb	r3, [r7, #18]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000

0800235c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800236a:	4b74      	ldr	r3, [pc, #464]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d018      	beq.n	80023a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002376:	4b71      	ldr	r3, [pc, #452]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0203 	and.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d10d      	bne.n	80023a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
       ||
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800238e:	4b6b      	ldr	r3, [pc, #428]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
       ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d047      	beq.n	8002432 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e044      	b.n	8002432 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d018      	beq.n	80023e2 <RCCEx_PLLSAI1_Config+0x86>
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d825      	bhi.n	8002400 <RCCEx_PLLSAI1_Config+0xa4>
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d002      	beq.n	80023be <RCCEx_PLLSAI1_Config+0x62>
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d009      	beq.n	80023d0 <RCCEx_PLLSAI1_Config+0x74>
 80023bc:	e020      	b.n	8002400 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023be:	4b5f      	ldr	r3, [pc, #380]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11d      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e01a      	b.n	8002406 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023d0:	4b5a      	ldr	r3, [pc, #360]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d116      	bne.n	800240a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e013      	b.n	800240a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023e2:	4b56      	ldr	r3, [pc, #344]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ee:	4b53      	ldr	r3, [pc, #332]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023fe:	e006      	b.n	800240e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      break;
 8002404:	e004      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002406:	bf00      	nop
 8002408:	e002      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800240a:	bf00      	nop
 800240c:	e000      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800240e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10d      	bne.n	8002432 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002416:	4b49      	ldr	r3, [pc, #292]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	430b      	orrs	r3, r1
 800242c:	4943      	ldr	r1, [pc, #268]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d17c      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002438:	4b40      	ldr	r3, [pc, #256]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3f      	ldr	r2, [pc, #252]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800243e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7fe fc3c 	bl	8000cc0 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800244a:	e009      	b.n	8002460 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800244c:	f7fe fc38 	bl	8000cc0 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d902      	bls.n	8002460 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	73fb      	strb	r3, [r7, #15]
        break;
 800245e:	e005      	b.n	800246c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002460:	4b36      	ldr	r3, [pc, #216]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ef      	bne.n	800244c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d15f      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d110      	bne.n	800249a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002478:	4b30      	ldr	r3, [pc, #192]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002480:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6892      	ldr	r2, [r2, #8]
 8002488:	0211      	lsls	r1, r2, #8
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68d2      	ldr	r2, [r2, #12]
 800248e:	06d2      	lsls	r2, r2, #27
 8002490:	430a      	orrs	r2, r1
 8002492:	492a      	ldr	r1, [pc, #168]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	610b      	str	r3, [r1, #16]
 8002498:	e027      	b.n	80024ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d112      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024a0:	4b26      	ldr	r3, [pc, #152]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80024a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6892      	ldr	r2, [r2, #8]
 80024b0:	0211      	lsls	r1, r2, #8
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6912      	ldr	r2, [r2, #16]
 80024b6:	0852      	lsrs	r2, r2, #1
 80024b8:	3a01      	subs	r2, #1
 80024ba:	0552      	lsls	r2, r2, #21
 80024bc:	430a      	orrs	r2, r1
 80024be:	491f      	ldr	r1, [pc, #124]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	610b      	str	r3, [r1, #16]
 80024c4:	e011      	b.n	80024ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c6:	4b1d      	ldr	r3, [pc, #116]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80024ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6892      	ldr	r2, [r2, #8]
 80024d6:	0211      	lsls	r1, r2, #8
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6952      	ldr	r2, [r2, #20]
 80024dc:	0852      	lsrs	r2, r2, #1
 80024de:	3a01      	subs	r2, #1
 80024e0:	0652      	lsls	r2, r2, #25
 80024e2:	430a      	orrs	r2, r1
 80024e4:	4915      	ldr	r1, [pc, #84]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024ea:	4b14      	ldr	r3, [pc, #80]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a13      	ldr	r2, [pc, #76]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe fbe3 	bl	8000cc0 <HAL_GetTick>
 80024fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024fc:	e009      	b.n	8002512 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024fe:	f7fe fbdf 	bl	8000cc0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d902      	bls.n	8002512 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	73fb      	strb	r3, [r7, #15]
          break;
 8002510:	e005      	b.n	800251e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ef      	beq.n	80024fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4903      	ldr	r1, [pc, #12]	@ (800253c <RCCEx_PLLSAI1_Config+0x1e0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e049      	b.n	80025e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f841 	bl	80025ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f000 f9be 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d001      	beq.n	800261c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e03b      	b.n	8002694 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a19      	ldr	r2, [pc, #100]	@ (80026a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_TIM_Base_Start_IT+0x4e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002646:	d004      	beq.n	8002652 <HAL_TIM_Base_Start_IT+0x4e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d115      	bne.n	800267e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800265a:	4013      	ands	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b06      	cmp	r3, #6
 8002662:	d015      	beq.n	8002690 <HAL_TIM_Base_Start_IT+0x8c>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266a:	d011      	beq.n	8002690 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267c:	e008      	b.n	8002690 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e000      	b.n	8002692 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002690:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40014000 	.word	0x40014000
 80026a8:	00010007 	.word	0x00010007

080026ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d020      	beq.n	8002710 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0202 	mvn.w	r2, #2
 80026e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8e4 	bl	80028c4 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8d6 	bl	80028b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8e7 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d020      	beq.n	800275c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01b      	beq.n	800275c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0204 	mvn.w	r2, #4
 800272c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f8be 	bl	80028c4 <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f8b0 	bl	80028b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f8c1 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d020      	beq.n	80027a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01b      	beq.n	80027a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0208 	mvn.w	r2, #8
 8002778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2204      	movs	r2, #4
 800277e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f898 	bl	80028c4 <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f88a 	bl	80028b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f89b 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d020      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0210 	mvn.w	r2, #16
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2208      	movs	r2, #8
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f872 	bl	80028c4 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f864 	bl	80028b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f875 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0201 	mvn.w	r2, #1
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe f86c 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8d0 	bl	80029dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8c8 	bl	80029f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00c      	beq.n	8002884 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f834 	bl	80028ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0220 	mvn.w	r2, #32
 80028a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f890 	bl	80029c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a2a      	ldr	r2, [pc, #168]	@ (80029bc <TIM_Base_SetConfig+0xbc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0x20>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800291e:	d108      	bne.n	8002932 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <TIM_Base_SetConfig+0xbc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00b      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1e      	ldr	r2, [pc, #120]	@ (80029c0 <TIM_Base_SetConfig+0xc0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <TIM_Base_SetConfig+0xc4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <TIM_Base_SetConfig+0xbc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d007      	beq.n	80029a0 <TIM_Base_SetConfig+0xa0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0b      	ldr	r2, [pc, #44]	@ (80029c0 <TIM_Base_SetConfig+0xc0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d003      	beq.n	80029a0 <TIM_Base_SetConfig+0xa0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <TIM_Base_SetConfig+0xc4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d103      	bne.n	80029a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	615a      	str	r2, [r3, #20]
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40014000 	.word	0x40014000
 80029c4:	40014400 	.word	0x40014400

080029c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e040      	b.n	8002a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fd ffa2 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	@ 0x24
 8002a30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fade 	bl	800300c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f8af 	bl	8002bb4 <UART_SetConfig>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e01b      	b.n	8002a98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fb5d 	bl	8003150 <UART_CheckIdleState>
 8002a96:	4603      	mov	r3, r0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	@ 0x28
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d177      	bne.n	8002ba8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_UART_Transmit+0x24>
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e070      	b.n	8002baa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2221      	movs	r2, #33	@ 0x21
 8002ad4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ad6:	f7fe f8f3 	bl	8000cc0 <HAL_GetTick>
 8002ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	88fa      	ldrh	r2, [r7, #6]
 8002ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002af4:	d108      	bne.n	8002b08 <HAL_UART_Transmit+0x68>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	e003      	b.n	8002b10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b10:	e02f      	b.n	8002b72 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2180      	movs	r1, #128	@ 0x80
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fbbf 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e03b      	b.n	8002baa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	881a      	ldrh	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b44:	b292      	uxth	r2, r2
 8002b46:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	e007      	b.n	8002b60 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1c9      	bne.n	8002b12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2140      	movs	r1, #64	@ 0x40
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fb89 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e005      	b.n	8002baa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb8:	b08a      	sub	sp, #40	@ 0x28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4bb4      	ldr	r3, [pc, #720]	@ (8002eb4 <UART_SetConfig+0x300>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bec:	430b      	orrs	r3, r1
 8002bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4aa9      	ldr	r2, [pc, #676]	@ (8002eb8 <UART_SetConfig+0x304>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4aa0      	ldr	r2, [pc, #640]	@ (8002ebc <UART_SetConfig+0x308>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d126      	bne.n	8002c8c <UART_SetConfig+0xd8>
 8002c3e:	4ba0      	ldr	r3, [pc, #640]	@ (8002ec0 <UART_SetConfig+0x30c>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d81b      	bhi.n	8002c84 <UART_SetConfig+0xd0>
 8002c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c54 <UART_SetConfig+0xa0>)
 8002c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c52:	bf00      	nop
 8002c54:	08002c65 	.word	0x08002c65
 8002c58:	08002c75 	.word	0x08002c75
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002c7d 	.word	0x08002c7d
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c6a:	e080      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c72:	e07c      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002c74:	2304      	movs	r3, #4
 8002c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c7a:	e078      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c82:	e074      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002c84:	2310      	movs	r3, #16
 8002c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c8a:	e070      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a8c      	ldr	r2, [pc, #560]	@ (8002ec4 <UART_SetConfig+0x310>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d138      	bne.n	8002d08 <UART_SetConfig+0x154>
 8002c96:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec0 <UART_SetConfig+0x30c>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d82d      	bhi.n	8002d00 <UART_SetConfig+0x14c>
 8002ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cac <UART_SetConfig+0xf8>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002ce1 	.word	0x08002ce1
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002d01 	.word	0x08002d01
 8002cb8:	08002d01 	.word	0x08002d01
 8002cbc:	08002cf1 	.word	0x08002cf1
 8002cc0:	08002d01 	.word	0x08002d01
 8002cc4:	08002d01 	.word	0x08002d01
 8002cc8:	08002d01 	.word	0x08002d01
 8002ccc:	08002ce9 	.word	0x08002ce9
 8002cd0:	08002d01 	.word	0x08002d01
 8002cd4:	08002d01 	.word	0x08002d01
 8002cd8:	08002d01 	.word	0x08002d01
 8002cdc:	08002cf9 	.word	0x08002cf9
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce6:	e042      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cee:	e03e      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cf6:	e03a      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cfe:	e036      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002d00:	2310      	movs	r3, #16
 8002d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d06:	e032      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8002eb8 <UART_SetConfig+0x304>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d12a      	bne.n	8002d68 <UART_SetConfig+0x1b4>
 8002d12:	4b6b      	ldr	r3, [pc, #428]	@ (8002ec0 <UART_SetConfig+0x30c>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d20:	d01a      	beq.n	8002d58 <UART_SetConfig+0x1a4>
 8002d22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d26:	d81b      	bhi.n	8002d60 <UART_SetConfig+0x1ac>
 8002d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d2c:	d00c      	beq.n	8002d48 <UART_SetConfig+0x194>
 8002d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d32:	d815      	bhi.n	8002d60 <UART_SetConfig+0x1ac>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <UART_SetConfig+0x18c>
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3c:	d008      	beq.n	8002d50 <UART_SetConfig+0x19c>
 8002d3e:	e00f      	b.n	8002d60 <UART_SetConfig+0x1ac>
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d46:	e012      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4e:	e00e      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002d50:	2304      	movs	r3, #4
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d56:	e00a      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002d58:	2308      	movs	r3, #8
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d5e:	e006      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002d60:	2310      	movs	r3, #16
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d66:	e002      	b.n	8002d6e <UART_SetConfig+0x1ba>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a51      	ldr	r2, [pc, #324]	@ (8002eb8 <UART_SetConfig+0x304>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d17a      	bne.n	8002e6e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d824      	bhi.n	8002dca <UART_SetConfig+0x216>
 8002d80:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <UART_SetConfig+0x1d4>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	08002dcb 	.word	0x08002dcb
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002dcb 	.word	0x08002dcb
 8002d98:	08002dbb 	.word	0x08002dbb
 8002d9c:	08002dcb 	.word	0x08002dcb
 8002da0:	08002dcb 	.word	0x08002dcb
 8002da4:	08002dcb 	.word	0x08002dcb
 8002da8:	08002dc3 	.word	0x08002dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dac:	f7ff f822 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002db0:	61f8      	str	r0, [r7, #28]
        break;
 8002db2:	e010      	b.n	8002dd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002db4:	4b44      	ldr	r3, [pc, #272]	@ (8002ec8 <UART_SetConfig+0x314>)
 8002db6:	61fb      	str	r3, [r7, #28]
        break;
 8002db8:	e00d      	b.n	8002dd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dba:	f7fe ff83 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8002dbe:	61f8      	str	r0, [r7, #28]
        break;
 8002dc0:	e009      	b.n	8002dd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dc6:	61fb      	str	r3, [r7, #28]
        break;
 8002dc8:	e005      	b.n	8002dd6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8107 	beq.w	8002fec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d305      	bcc.n	8002dfa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d903      	bls.n	8002e02 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e00:	e0f4      	b.n	8002fec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	2200      	movs	r2, #0
 8002e06:	461c      	mov	r4, r3
 8002e08:	4615      	mov	r5, r2
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	022b      	lsls	r3, r5, #8
 8002e14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e18:	0222      	lsls	r2, r4, #8
 8002e1a:	68f9      	ldr	r1, [r7, #12]
 8002e1c:	6849      	ldr	r1, [r1, #4]
 8002e1e:	0849      	lsrs	r1, r1, #1
 8002e20:	2000      	movs	r0, #0
 8002e22:	4688      	mov	r8, r1
 8002e24:	4681      	mov	r9, r0
 8002e26:	eb12 0a08 	adds.w	sl, r2, r8
 8002e2a:	eb43 0b09 	adc.w	fp, r3, r9
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e3c:	4650      	mov	r0, sl
 8002e3e:	4659      	mov	r1, fp
 8002e40:	f7fd fa1e 	bl	8000280 <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4613      	mov	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e52:	d308      	bcc.n	8002e66 <UART_SetConfig+0x2b2>
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e5a:	d204      	bcs.n	8002e66 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	e0c2      	b.n	8002fec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e6c:	e0be      	b.n	8002fec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e76:	d16a      	bne.n	8002f4e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002e78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d834      	bhi.n	8002eea <UART_SetConfig+0x336>
 8002e80:	a201      	add	r2, pc, #4	@ (adr r2, 8002e88 <UART_SetConfig+0x2d4>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002ead 	.word	0x08002ead
 8002e8c:	08002ecd 	.word	0x08002ecd
 8002e90:	08002ed5 	.word	0x08002ed5
 8002e94:	08002eeb 	.word	0x08002eeb
 8002e98:	08002edb 	.word	0x08002edb
 8002e9c:	08002eeb 	.word	0x08002eeb
 8002ea0:	08002eeb 	.word	0x08002eeb
 8002ea4:	08002eeb 	.word	0x08002eeb
 8002ea8:	08002ee3 	.word	0x08002ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eac:	f7fe ffa2 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	61f8      	str	r0, [r7, #28]
        break;
 8002eb2:	e020      	b.n	8002ef6 <UART_SetConfig+0x342>
 8002eb4:	efff69f3 	.word	0xefff69f3
 8002eb8:	40008000 	.word	0x40008000
 8002ebc:	40013800 	.word	0x40013800
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40004400 	.word	0x40004400
 8002ec8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ecc:	f7fe ffa8 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002ed0:	61f8      	str	r0, [r7, #28]
        break;
 8002ed2:	e010      	b.n	8002ef6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed4:	4b4c      	ldr	r3, [pc, #304]	@ (8003008 <UART_SetConfig+0x454>)
 8002ed6:	61fb      	str	r3, [r7, #28]
        break;
 8002ed8:	e00d      	b.n	8002ef6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eda:	f7fe fef3 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8002ede:	61f8      	str	r0, [r7, #28]
        break;
 8002ee0:	e009      	b.n	8002ef6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ee6:	61fb      	str	r3, [r7, #28]
        break;
 8002ee8:	e005      	b.n	8002ef6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ef4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d077      	beq.n	8002fec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005a      	lsls	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	441a      	add	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b0f      	cmp	r3, #15
 8002f16:	d916      	bls.n	8002f46 <UART_SetConfig+0x392>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1e:	d212      	bcs.n	8002f46 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f023 030f 	bic.w	r3, r3, #15
 8002f28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	8afb      	ldrh	r3, [r7, #22]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	8afa      	ldrh	r2, [r7, #22]
 8002f42:	60da      	str	r2, [r3, #12]
 8002f44:	e052      	b.n	8002fec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f4c:	e04e      	b.n	8002fec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d827      	bhi.n	8002fa6 <UART_SetConfig+0x3f2>
 8002f56:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <UART_SetConfig+0x3a8>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08002f89 	.word	0x08002f89
 8002f64:	08002f91 	.word	0x08002f91
 8002f68:	08002fa7 	.word	0x08002fa7
 8002f6c:	08002f97 	.word	0x08002f97
 8002f70:	08002fa7 	.word	0x08002fa7
 8002f74:	08002fa7 	.word	0x08002fa7
 8002f78:	08002fa7 	.word	0x08002fa7
 8002f7c:	08002f9f 	.word	0x08002f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f80:	f7fe ff38 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002f84:	61f8      	str	r0, [r7, #28]
        break;
 8002f86:	e014      	b.n	8002fb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f88:	f7fe ff4a 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002f8c:	61f8      	str	r0, [r7, #28]
        break;
 8002f8e:	e010      	b.n	8002fb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f90:	4b1d      	ldr	r3, [pc, #116]	@ (8003008 <UART_SetConfig+0x454>)
 8002f92:	61fb      	str	r3, [r7, #28]
        break;
 8002f94:	e00d      	b.n	8002fb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f96:	f7fe fe95 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8002f9a:	61f8      	str	r0, [r7, #28]
        break;
 8002f9c:	e009      	b.n	8002fb2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fa2:	61fb      	str	r3, [r7, #28]
        break;
 8002fa4:	e005      	b.n	8002fb2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002fb0:	bf00      	nop
    }

    if (pclk != 0U)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d019      	beq.n	8002fec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	085a      	lsrs	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	441a      	add	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b0f      	cmp	r3, #15
 8002fd0:	d909      	bls.n	8002fe6 <UART_SetConfig+0x432>
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fd8:	d205      	bcs.n	8002fe6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	e002      	b.n	8002fec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ff8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3728      	adds	r7, #40	@ 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003006:	bf00      	nop
 8003008:	00f42400 	.word	0x00f42400

0800300c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01a      	beq.n	8003122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800310a:	d10a      	bne.n	8003122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b098      	sub	sp, #96	@ 0x60
 8003154:	af02      	add	r7, sp, #8
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003160:	f7fd fdae 	bl	8000cc0 <HAL_GetTick>
 8003164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d12e      	bne.n	80031d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317c:	2200      	movs	r2, #0
 800317e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f88c 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d021      	beq.n	80031d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003196:	e853 3f00 	ldrex	r3, [r3]
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e6      	bne.n	800318e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e062      	b.n	8003298 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d149      	bne.n	8003274 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e8:	2200      	movs	r2, #0
 80031ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f856 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d03c      	beq.n	8003274 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	623b      	str	r3, [r7, #32]
   return(result);
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800320e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003218:	633b      	str	r3, [r7, #48]	@ 0x30
 800321a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800321e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e6      	bne.n	80031fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3308      	adds	r3, #8
 8003232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	60fb      	str	r3, [r7, #12]
   return(result);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3308      	adds	r3, #8
 800324a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800324c:	61fa      	str	r2, [r7, #28]
 800324e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	69b9      	ldr	r1, [r7, #24]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	617b      	str	r3, [r7, #20]
   return(result);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e5      	bne.n	800322c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e011      	b.n	8003298 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3758      	adds	r7, #88	@ 0x58
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b0:	e049      	b.n	8003346 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d045      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	f7fd fd01 	bl	8000cc0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e048      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d031      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d110      	bne.n	8003312 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2208      	movs	r2, #8
 80032f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f838 	bl	800336e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2208      	movs	r2, #8
 8003302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e029      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003320:	d111      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800332a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f81e 	bl	800336e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	429a      	cmp	r2, r3
 8003362:	d0a6      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800336e:	b480      	push	{r7}
 8003370:	b095      	sub	sp, #84	@ 0x54
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003394:	643b      	str	r3, [r7, #64]	@ 0x40
 8003396:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800339a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e6      	bne.n	8003376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d118      	bne.n	8003416 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f023 0310 	bic.w	r3, r3, #16
 80033f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	613b      	str	r3, [r7, #16]
   return(result);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e6      	bne.n	80033e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800342a:	bf00      	nop
 800342c:	3754      	adds	r7, #84	@ 0x54
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003448:	2b84      	cmp	r3, #132	@ 0x84
 800344a:	d005      	beq.n	8003458 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800344c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	3303      	adds	r3, #3
 8003456:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003458:	68fb      	ldr	r3, [r7, #12]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800346a:	f000 fafd 	bl	8003a68 <vTaskStartScheduler>
  
  return osOK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}

08003474 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	b089      	sub	sp, #36	@ 0x24
 8003478:	af04      	add	r7, sp, #16
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d020      	beq.n	80034c8 <osThreadCreate+0x54>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01c      	beq.n	80034c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685c      	ldr	r4, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691e      	ldr	r6, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ffc8 	bl	8003436 <makeFreeRtosPriority>
 80034a6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034b0:	9202      	str	r2, [sp, #8]
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	9100      	str	r1, [sp, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	4632      	mov	r2, r6
 80034ba:	4629      	mov	r1, r5
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 f8ed 	bl	800369c <xTaskCreateStatic>
 80034c2:	4603      	mov	r3, r0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e01c      	b.n	8003502 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685c      	ldr	r4, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034d4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ffaa 	bl	8003436 <makeFreeRtosPriority>
 80034e2:	4602      	mov	r2, r0
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	9200      	str	r2, [sp, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4632      	mov	r2, r6
 80034f0:	4629      	mov	r1, r5
 80034f2:	4620      	mov	r0, r4
 80034f4:	f000 f932 	bl	800375c <xTaskCreate>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d001      	beq.n	8003502 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800350c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <osDelay+0x16>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	e000      	b.n	8003524 <osDelay+0x18>
 8003522:	2301      	movs	r3, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fa69 	bl	80039fc <vTaskDelay>
  
  return osOK;
 800352a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f103 0208 	add.w	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f103 0208 	add.w	r2, r3, #8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f103 0208 	add.w	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d103      	bne.n	80035f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e00c      	b.n	8003610 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3308      	adds	r3, #8
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e002      	b.n	8003604 <vListInsert+0x2e>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	d2f6      	bcs.n	80035fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6852      	ldr	r2, [r2, #4]
 8003668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d103      	bne.n	800367c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1e5a      	subs	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08e      	sub	sp, #56	@ 0x38
 80036a0:	af04      	add	r7, sp, #16
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	61fb      	str	r3, [r7, #28]
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	e7fd      	b.n	80036e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036e6:	23a0      	movs	r3, #160	@ 0xa0
 80036e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80036ee:	d00b      	beq.n	8003708 <xTaskCreateStatic+0x6c>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	61bb      	str	r3, [r7, #24]
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003708:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800370a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01e      	beq.n	800374e <xTaskCreateStatic+0xb2>
 8003710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003712:	2b00      	cmp	r3, #0
 8003714:	d01b      	beq.n	800374e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	2202      	movs	r2, #2
 8003724:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003728:	2300      	movs	r3, #0
 800372a:	9303      	str	r3, [sp, #12]
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f851 	bl	80037e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003746:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003748:	f000 f8ee 	bl	8003928 <prvAddNewTaskToReadyList>
 800374c:	e001      	b.n	8003752 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003752:	697b      	ldr	r3, [r7, #20]
	}
 8003754:	4618      	mov	r0, r3
 8003756:	3728      	adds	r7, #40	@ 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af04      	add	r7, sp, #16
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4618      	mov	r0, r3
 8003772:	f000 ff01 	bl	8004578 <pvPortMalloc>
 8003776:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00e      	beq.n	800379c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800377e:	20a0      	movs	r0, #160	@ 0xa0
 8003780:	f000 fefa 	bl	8004578 <pvPortMalloc>
 8003784:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	631a      	str	r2, [r3, #48]	@ 0x30
 8003792:	e005      	b.n	80037a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003794:	6978      	ldr	r0, [r7, #20]
 8003796:	f000 ffbd 	bl	8004714 <vPortFree>
 800379a:	e001      	b.n	80037a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d017      	beq.n	80037d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037ae:	88fa      	ldrh	r2, [r7, #6]
 80037b0:	2300      	movs	r3, #0
 80037b2:	9303      	str	r3, [sp, #12]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	9302      	str	r3, [sp, #8]
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f80f 	bl	80037e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037ca:	69f8      	ldr	r0, [r7, #28]
 80037cc:	f000 f8ac 	bl	8003928 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037d0:	2301      	movs	r3, #1
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	e002      	b.n	80037dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037dc:	69bb      	ldr	r3, [r7, #24]
	}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003800:	3b01      	subs	r3, #1
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f023 0307 	bic.w	r3, r3, #7
 800380e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	617b      	str	r3, [r7, #20]
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	e7fd      	b.n	800382e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01f      	beq.n	8003878 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	e012      	b.n	8003864 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	7819      	ldrb	r1, [r3, #0]
 8003846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	3334      	adds	r3, #52	@ 0x34
 800384e:	460a      	mov	r2, r1
 8003850:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3301      	adds	r3, #1
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	d9e9      	bls.n	800383e <prvInitialiseNewTask+0x56>
 800386a:	e000      	b.n	800386e <prvInitialiseNewTask+0x86>
			{
				break;
 800386c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003876:	e003      	b.n	8003880 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003882:	2b06      	cmp	r3, #6
 8003884:	d901      	bls.n	800388a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003886:	2306      	movs	r3, #6
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800388a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800388e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	2200      	movs	r2, #0
 800389a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fe67 	bl	8003574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a8:	3318      	adds	r3, #24
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fe62 	bl	8003574 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b8:	f1c3 0207 	rsb	r2, r3, #7
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d8:	334c      	adds	r3, #76	@ 0x4c
 80038da:	224c      	movs	r2, #76	@ 0x4c
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 f858 	bl	8004994 <memset>
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	4a0d      	ldr	r2, [pc, #52]	@ (800391c <prvInitialiseNewTask+0x134>)
 80038e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003920 <prvInitialiseNewTask+0x138>)
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80038f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003924 <prvInitialiseNewTask+0x13c>)
 80038f4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	68f9      	ldr	r1, [r7, #12]
 80038fa:	69b8      	ldr	r0, [r7, #24]
 80038fc:	f000 fc2a 	bl	8004154 <pxPortInitialiseStack>
 8003900:	4602      	mov	r2, r0
 8003902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003904:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800390c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003912:	bf00      	nop
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20001114 	.word	0x20001114
 8003920:	2000117c 	.word	0x2000117c
 8003924:	200011e4 	.word	0x200011e4

08003928 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003930:	f000 fd42 	bl	80043b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003934:	4b2a      	ldr	r3, [pc, #168]	@ (80039e0 <prvAddNewTaskToReadyList+0xb8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	4a29      	ldr	r2, [pc, #164]	@ (80039e0 <prvAddNewTaskToReadyList+0xb8>)
 800393c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800393e:	4b29      	ldr	r3, [pc, #164]	@ (80039e4 <prvAddNewTaskToReadyList+0xbc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003946:	4a27      	ldr	r2, [pc, #156]	@ (80039e4 <prvAddNewTaskToReadyList+0xbc>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800394c:	4b24      	ldr	r3, [pc, #144]	@ (80039e0 <prvAddNewTaskToReadyList+0xb8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d110      	bne.n	8003976 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003954:	f000 fad4 	bl	8003f00 <prvInitialiseTaskLists>
 8003958:	e00d      	b.n	8003976 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800395a:	4b23      	ldr	r3, [pc, #140]	@ (80039e8 <prvAddNewTaskToReadyList+0xc0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003962:	4b20      	ldr	r3, [pc, #128]	@ (80039e4 <prvAddNewTaskToReadyList+0xbc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	429a      	cmp	r2, r3
 800396e:	d802      	bhi.n	8003976 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003970:	4a1c      	ldr	r2, [pc, #112]	@ (80039e4 <prvAddNewTaskToReadyList+0xbc>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003976:	4b1d      	ldr	r3, [pc, #116]	@ (80039ec <prvAddNewTaskToReadyList+0xc4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	4a1b      	ldr	r2, [pc, #108]	@ (80039ec <prvAddNewTaskToReadyList+0xc4>)
 800397e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	2201      	movs	r2, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <prvAddNewTaskToReadyList+0xc8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4313      	orrs	r3, r2
 800398e:	4a18      	ldr	r2, [pc, #96]	@ (80039f0 <prvAddNewTaskToReadyList+0xc8>)
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4a15      	ldr	r2, [pc, #84]	@ (80039f4 <prvAddNewTaskToReadyList+0xcc>)
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7ff fdf0 	bl	800358e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039ae:	f000 fd35 	bl	800441c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039b2:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <prvAddNewTaskToReadyList+0xc0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00e      	beq.n	80039d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039ba:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <prvAddNewTaskToReadyList+0xbc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d207      	bcs.n	80039d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <prvAddNewTaskToReadyList+0xd0>)
 80039ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000508 	.word	0x20000508
 80039e4:	20000408 	.word	0x20000408
 80039e8:	20000514 	.word	0x20000514
 80039ec:	20000524 	.word	0x20000524
 80039f0:	20000510 	.word	0x20000510
 80039f4:	2000040c 	.word	0x2000040c
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d018      	beq.n	8003a40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a0e:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <vTaskDelay+0x64>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <vTaskDelay+0x32>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60bb      	str	r3, [r7, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	e7fd      	b.n	8003a2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a2e:	f000 f885 	bl	8003b3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a32:	2100      	movs	r1, #0
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fb27 	bl	8004088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a3a:	f000 f88d 	bl	8003b58 <xTaskResumeAll>
 8003a3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003a46:	4b07      	ldr	r3, [pc, #28]	@ (8003a64 <vTaskDelay+0x68>)
 8003a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000530 	.word	0x20000530
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	@ 0x28
 8003a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a76:	463a      	mov	r2, r7
 8003a78:	1d39      	adds	r1, r7, #4
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fc fd76 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a84:	6839      	ldr	r1, [r7, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	9202      	str	r2, [sp, #8]
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	460a      	mov	r2, r1
 8003a96:	4921      	ldr	r1, [pc, #132]	@ (8003b1c <vTaskStartScheduler+0xb4>)
 8003a98:	4821      	ldr	r0, [pc, #132]	@ (8003b20 <vTaskStartScheduler+0xb8>)
 8003a9a:	f7ff fdff 	bl	800369c <xTaskCreateStatic>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4a20      	ldr	r2, [pc, #128]	@ (8003b24 <vTaskStartScheduler+0xbc>)
 8003aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b24 <vTaskStartScheduler+0xbc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e001      	b.n	8003ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d11b      	bne.n	8003af4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	613b      	str	r3, [r7, #16]
}
 8003ace:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ad0:	4b15      	ldr	r3, [pc, #84]	@ (8003b28 <vTaskStartScheduler+0xc0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	334c      	adds	r3, #76	@ 0x4c
 8003ad6:	4a15      	ldr	r2, [pc, #84]	@ (8003b2c <vTaskStartScheduler+0xc4>)
 8003ad8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ada:	4b15      	ldr	r3, [pc, #84]	@ (8003b30 <vTaskStartScheduler+0xc8>)
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ae2:	4b14      	ldr	r3, [pc, #80]	@ (8003b34 <vTaskStartScheduler+0xcc>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ae8:	4b13      	ldr	r3, [pc, #76]	@ (8003b38 <vTaskStartScheduler+0xd0>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aee:	f000 fbbf 	bl	8004270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003af2:	e00f      	b.n	8003b14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d10b      	bne.n	8003b14 <vTaskStartScheduler+0xac>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	60fb      	str	r3, [r7, #12]
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <vTaskStartScheduler+0xa8>
}
 8003b14:	bf00      	nop
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	080053e4 	.word	0x080053e4
 8003b20:	08003ed1 	.word	0x08003ed1
 8003b24:	2000052c 	.word	0x2000052c
 8003b28:	20000408 	.word	0x20000408
 8003b2c:	20000010 	.word	0x20000010
 8003b30:	20000528 	.word	0x20000528
 8003b34:	20000514 	.word	0x20000514
 8003b38:	2000050c 	.word	0x2000050c

08003b3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b40:	4b04      	ldr	r3, [pc, #16]	@ (8003b54 <vTaskSuspendAll+0x18>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	4a03      	ldr	r2, [pc, #12]	@ (8003b54 <vTaskSuspendAll+0x18>)
 8003b48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	20000530 	.word	0x20000530

08003b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b66:	4b42      	ldr	r3, [pc, #264]	@ (8003c70 <xTaskResumeAll+0x118>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10b      	bne.n	8003b86 <xTaskResumeAll+0x2e>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	603b      	str	r3, [r7, #0]
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	e7fd      	b.n	8003b82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b86:	f000 fc17 	bl	80043b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b8a:	4b39      	ldr	r3, [pc, #228]	@ (8003c70 <xTaskResumeAll+0x118>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	4a37      	ldr	r2, [pc, #220]	@ (8003c70 <xTaskResumeAll+0x118>)
 8003b92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b94:	4b36      	ldr	r3, [pc, #216]	@ (8003c70 <xTaskResumeAll+0x118>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d161      	bne.n	8003c60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b9c:	4b35      	ldr	r3, [pc, #212]	@ (8003c74 <xTaskResumeAll+0x11c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05d      	beq.n	8003c60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ba4:	e02e      	b.n	8003c04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba6:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <xTaskResumeAll+0x120>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3318      	adds	r3, #24
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fd48 	bl	8003648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fd43 	bl	8003648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <xTaskResumeAll+0x124>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c7c <xTaskResumeAll+0x124>)
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4a27      	ldr	r2, [pc, #156]	@ (8003c80 <xTaskResumeAll+0x128>)
 8003be2:	441a      	add	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f7ff fccf 	bl	800358e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf4:	4b23      	ldr	r3, [pc, #140]	@ (8003c84 <xTaskResumeAll+0x12c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003bfe:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <xTaskResumeAll+0x130>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c04:	4b1c      	ldr	r3, [pc, #112]	@ (8003c78 <xTaskResumeAll+0x120>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1cc      	bne.n	8003ba6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c12:	f000 fa19 	bl	8004048 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c16:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <xTaskResumeAll+0x134>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d010      	beq.n	8003c44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c22:	f000 f837 	bl	8003c94 <xTaskIncrementTick>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c2c:	4b16      	ldr	r3, [pc, #88]	@ (8003c88 <xTaskResumeAll+0x130>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f1      	bne.n	8003c22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c3e:	4b13      	ldr	r3, [pc, #76]	@ (8003c8c <xTaskResumeAll+0x134>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c44:	4b10      	ldr	r3, [pc, #64]	@ (8003c88 <xTaskResumeAll+0x130>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c50:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <xTaskResumeAll+0x138>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c60:	f000 fbdc 	bl	800441c <vPortExitCritical>

	return xAlreadyYielded;
 8003c64:	68bb      	ldr	r3, [r7, #8]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000530 	.word	0x20000530
 8003c74:	20000508 	.word	0x20000508
 8003c78:	200004c8 	.word	0x200004c8
 8003c7c:	20000510 	.word	0x20000510
 8003c80:	2000040c 	.word	0x2000040c
 8003c84:	20000408 	.word	0x20000408
 8003c88:	2000051c 	.word	0x2000051c
 8003c8c:	20000518 	.word	0x20000518
 8003c90:	e000ed04 	.word	0xe000ed04

08003c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8003ddc <xTaskIncrementTick+0x148>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 808f 	bne.w	8003dc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8003de0 <xTaskIncrementTick+0x14c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003de0 <xTaskIncrementTick+0x14c>)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d121      	bne.n	8003d00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cbc:	4b49      	ldr	r3, [pc, #292]	@ (8003de4 <xTaskIncrementTick+0x150>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <xTaskIncrementTick+0x4a>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	603b      	str	r3, [r7, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	e7fd      	b.n	8003cda <xTaskIncrementTick+0x46>
 8003cde:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <xTaskIncrementTick+0x150>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	4b40      	ldr	r3, [pc, #256]	@ (8003de8 <xTaskIncrementTick+0x154>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8003de4 <xTaskIncrementTick+0x150>)
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4a3e      	ldr	r2, [pc, #248]	@ (8003de8 <xTaskIncrementTick+0x154>)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dec <xTaskIncrementTick+0x158>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8003dec <xTaskIncrementTick+0x158>)
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	f000 f9a4 	bl	8004048 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d00:	4b3b      	ldr	r3, [pc, #236]	@ (8003df0 <xTaskIncrementTick+0x15c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d348      	bcc.n	8003d9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d0a:	4b36      	ldr	r3, [pc, #216]	@ (8003de4 <xTaskIncrementTick+0x150>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d14:	4b36      	ldr	r3, [pc, #216]	@ (8003df0 <xTaskIncrementTick+0x15c>)
 8003d16:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1a:	601a      	str	r2, [r3, #0]
					break;
 8003d1c:	e03e      	b.n	8003d9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d1e:	4b31      	ldr	r3, [pc, #196]	@ (8003de4 <xTaskIncrementTick+0x150>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d203      	bcs.n	8003d3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d36:	4a2e      	ldr	r2, [pc, #184]	@ (8003df0 <xTaskIncrementTick+0x15c>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d3c:	e02e      	b.n	8003d9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fc80 	bl	8003648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	3318      	adds	r3, #24
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fc77 	bl	8003648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	409a      	lsls	r2, r3
 8003d62:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <xTaskIncrementTick+0x160>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	4a22      	ldr	r2, [pc, #136]	@ (8003df4 <xTaskIncrementTick+0x160>)
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4a1f      	ldr	r2, [pc, #124]	@ (8003df8 <xTaskIncrementTick+0x164>)
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f7ff fc03 	bl	800358e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dfc <xTaskIncrementTick+0x168>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d3b9      	bcc.n	8003d0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d96:	2301      	movs	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9a:	e7b6      	b.n	8003d0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d9c:	4b17      	ldr	r3, [pc, #92]	@ (8003dfc <xTaskIncrementTick+0x168>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da2:	4915      	ldr	r1, [pc, #84]	@ (8003df8 <xTaskIncrementTick+0x164>)
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d901      	bls.n	8003db8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003db8:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <xTaskIncrementTick+0x16c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e004      	b.n	8003dd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <xTaskIncrementTick+0x170>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e04 <xTaskIncrementTick+0x170>)
 8003dce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003dd0:	697b      	ldr	r3, [r7, #20]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000530 	.word	0x20000530
 8003de0:	2000050c 	.word	0x2000050c
 8003de4:	200004c0 	.word	0x200004c0
 8003de8:	200004c4 	.word	0x200004c4
 8003dec:	20000520 	.word	0x20000520
 8003df0:	20000528 	.word	0x20000528
 8003df4:	20000510 	.word	0x20000510
 8003df8:	2000040c 	.word	0x2000040c
 8003dfc:	20000408 	.word	0x20000408
 8003e00:	2000051c 	.word	0x2000051c
 8003e04:	20000518 	.word	0x20000518

08003e08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <vTaskSwitchContext+0xb0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e16:	4b29      	ldr	r3, [pc, #164]	@ (8003ebc <vTaskSwitchContext+0xb4>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e1c:	e045      	b.n	8003eaa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003e1e:	4b27      	ldr	r3, [pc, #156]	@ (8003ebc <vTaskSwitchContext+0xb4>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e24:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <vTaskSwitchContext+0xb8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e32:	7afb      	ldrb	r3, [r7, #11]
 8003e34:	f1c3 031f 	rsb	r3, r3, #31
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	4922      	ldr	r1, [pc, #136]	@ (8003ec4 <vTaskSwitchContext+0xbc>)
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	607b      	str	r3, [r7, #4]
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <vTaskSwitchContext+0x5a>
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <vTaskSwitchContext+0xbc>)
 8003e72:	4413      	add	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	3308      	adds	r3, #8
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d104      	bne.n	8003e96 <vTaskSwitchContext+0x8e>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <vTaskSwitchContext+0xc0>)
 8003e9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ea0:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <vTaskSwitchContext+0xc0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	334c      	adds	r3, #76	@ 0x4c
 8003ea6:	4a09      	ldr	r2, [pc, #36]	@ (8003ecc <vTaskSwitchContext+0xc4>)
 8003ea8:	6013      	str	r3, [r2, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000530 	.word	0x20000530
 8003ebc:	2000051c 	.word	0x2000051c
 8003ec0:	20000510 	.word	0x20000510
 8003ec4:	2000040c 	.word	0x2000040c
 8003ec8:	20000408 	.word	0x20000408
 8003ecc:	20000010 	.word	0x20000010

08003ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ed8:	f000 f852 	bl	8003f80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <prvIdleTask+0x28>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d9f9      	bls.n	8003ed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <prvIdleTask+0x2c>)
 8003ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ef4:	e7f0      	b.n	8003ed8 <prvIdleTask+0x8>
 8003ef6:	bf00      	nop
 8003ef8:	2000040c 	.word	0x2000040c
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e00c      	b.n	8003f26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4a12      	ldr	r2, [pc, #72]	@ (8003f60 <prvInitialiseTaskLists+0x60>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fb0a 	bl	8003534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3301      	adds	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b06      	cmp	r3, #6
 8003f2a:	d9ef      	bls.n	8003f0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f2c:	480d      	ldr	r0, [pc, #52]	@ (8003f64 <prvInitialiseTaskLists+0x64>)
 8003f2e:	f7ff fb01 	bl	8003534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f32:	480d      	ldr	r0, [pc, #52]	@ (8003f68 <prvInitialiseTaskLists+0x68>)
 8003f34:	f7ff fafe 	bl	8003534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f38:	480c      	ldr	r0, [pc, #48]	@ (8003f6c <prvInitialiseTaskLists+0x6c>)
 8003f3a:	f7ff fafb 	bl	8003534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f3e:	480c      	ldr	r0, [pc, #48]	@ (8003f70 <prvInitialiseTaskLists+0x70>)
 8003f40:	f7ff faf8 	bl	8003534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f44:	480b      	ldr	r0, [pc, #44]	@ (8003f74 <prvInitialiseTaskLists+0x74>)
 8003f46:	f7ff faf5 	bl	8003534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <prvInitialiseTaskLists+0x78>)
 8003f4c:	4a05      	ldr	r2, [pc, #20]	@ (8003f64 <prvInitialiseTaskLists+0x64>)
 8003f4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <prvInitialiseTaskLists+0x7c>)
 8003f52:	4a05      	ldr	r2, [pc, #20]	@ (8003f68 <prvInitialiseTaskLists+0x68>)
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	2000040c 	.word	0x2000040c
 8003f64:	20000498 	.word	0x20000498
 8003f68:	200004ac 	.word	0x200004ac
 8003f6c:	200004c8 	.word	0x200004c8
 8003f70:	200004dc 	.word	0x200004dc
 8003f74:	200004f4 	.word	0x200004f4
 8003f78:	200004c0 	.word	0x200004c0
 8003f7c:	200004c4 	.word	0x200004c4

08003f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f86:	e019      	b.n	8003fbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f88:	f000 fa16 	bl	80043b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f8c:	4b10      	ldr	r3, [pc, #64]	@ (8003fd0 <prvCheckTasksWaitingTermination+0x50>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fb55 	bl	8003648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <prvCheckTasksWaitingTermination+0x54>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd4 <prvCheckTasksWaitingTermination+0x54>)
 8003fa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <prvCheckTasksWaitingTermination+0x58>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd8 <prvCheckTasksWaitingTermination+0x58>)
 8003fb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fb2:	f000 fa33 	bl	800441c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f810 	bl	8003fdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <prvCheckTasksWaitingTermination+0x58>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e1      	bne.n	8003f88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200004dc 	.word	0x200004dc
 8003fd4:	20000508 	.word	0x20000508
 8003fd8:	200004f0 	.word	0x200004f0

08003fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	334c      	adds	r3, #76	@ 0x4c
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fcdb 	bl	80049a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d108      	bne.n	800400a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fb89 	bl	8004714 <vPortFree>
				vPortFree( pxTCB );
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fb86 	bl	8004714 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004008:	e019      	b.n	800403e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004010:	2b01      	cmp	r3, #1
 8004012:	d103      	bne.n	800401c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fb7d 	bl	8004714 <vPortFree>
	}
 800401a:	e010      	b.n	800403e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004022:	2b02      	cmp	r3, #2
 8004024:	d00b      	beq.n	800403e <prvDeleteTCB+0x62>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	60fb      	str	r3, [r7, #12]
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	e7fd      	b.n	800403a <prvDeleteTCB+0x5e>
	}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800404e:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <prvResetNextTaskUnblockTime+0x38>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d104      	bne.n	8004062 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004058:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <prvResetNextTaskUnblockTime+0x3c>)
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004060:	e008      	b.n	8004074 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004062:	4b07      	ldr	r3, [pc, #28]	@ (8004080 <prvResetNextTaskUnblockTime+0x38>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a04      	ldr	r2, [pc, #16]	@ (8004084 <prvResetNextTaskUnblockTime+0x3c>)
 8004072:	6013      	str	r3, [r2, #0]
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	200004c0 	.word	0x200004c0
 8004084:	20000528 	.word	0x20000528

08004088 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004092:	4b29      	ldr	r3, [pc, #164]	@ (8004138 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004098:	4b28      	ldr	r3, [pc, #160]	@ (800413c <prvAddCurrentTaskToDelayedList+0xb4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3304      	adds	r3, #4
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fad2 	bl	8003648 <uxListRemove>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10b      	bne.n	80040c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80040aa:	4b24      	ldr	r3, [pc, #144]	@ (800413c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	2201      	movs	r2, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43da      	mvns	r2, r3
 80040b8:	4b21      	ldr	r3, [pc, #132]	@ (8004140 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4013      	ands	r3, r2
 80040be:	4a20      	ldr	r2, [pc, #128]	@ (8004140 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d10a      	bne.n	80040e0 <prvAddCurrentTaskToDelayedList+0x58>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040d0:	4b1a      	ldr	r3, [pc, #104]	@ (800413c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	481a      	ldr	r0, [pc, #104]	@ (8004144 <prvAddCurrentTaskToDelayedList+0xbc>)
 80040da:	f7ff fa58 	bl	800358e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040de:	e026      	b.n	800412e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040e8:	4b14      	ldr	r3, [pc, #80]	@ (800413c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d209      	bcs.n	800410c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040f8:	4b13      	ldr	r3, [pc, #76]	@ (8004148 <prvAddCurrentTaskToDelayedList+0xc0>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f7ff fa66 	bl	80035d6 <vListInsert>
}
 800410a:	e010      	b.n	800412e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800410c:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <prvAddCurrentTaskToDelayedList+0xc4>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3304      	adds	r3, #4
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f7ff fa5c 	bl	80035d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800411e:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	429a      	cmp	r2, r3
 8004126:	d202      	bcs.n	800412e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004128:	4a09      	ldr	r2, [pc, #36]	@ (8004150 <prvAddCurrentTaskToDelayedList+0xc8>)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6013      	str	r3, [r2, #0]
}
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2000050c 	.word	0x2000050c
 800413c:	20000408 	.word	0x20000408
 8004140:	20000510 	.word	0x20000510
 8004144:	200004f4 	.word	0x200004f4
 8004148:	200004c4 	.word	0x200004c4
 800414c:	200004c0 	.word	0x200004c0
 8004150:	20000528 	.word	0x20000528

08004154 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3b04      	subs	r3, #4
 8004164:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800416c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3b04      	subs	r3, #4
 8004172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f023 0201 	bic.w	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3b04      	subs	r3, #4
 8004182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004184:	4a0c      	ldr	r2, [pc, #48]	@ (80041b8 <pxPortInitialiseStack+0x64>)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3b14      	subs	r3, #20
 800418e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3b04      	subs	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f06f 0202 	mvn.w	r2, #2
 80041a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3b20      	subs	r3, #32
 80041a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041aa:	68fb      	ldr	r3, [r7, #12]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	080041bd 	.word	0x080041bd

080041bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041c6:	4b13      	ldr	r3, [pc, #76]	@ (8004214 <prvTaskExitError+0x58>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d00b      	beq.n	80041e8 <prvTaskExitError+0x2c>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	60fb      	str	r3, [r7, #12]
}
 80041e2:	bf00      	nop
 80041e4:	bf00      	nop
 80041e6:	e7fd      	b.n	80041e4 <prvTaskExitError+0x28>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60bb      	str	r3, [r7, #8]
}
 80041fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041fc:	bf00      	nop
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0fc      	beq.n	80041fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000000c 	.word	0x2000000c
	...

08004220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <pxCurrentTCBConst2>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	6808      	ldr	r0, [r1, #0]
 8004226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	f380 8809 	msr	PSP, r0
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	4770      	bx	lr
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst2>:
 8004240:	20000408 	.word	0x20000408
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004248:	4808      	ldr	r0, [pc, #32]	@ (800426c <prvPortStartFirstTask+0x24>)
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	6800      	ldr	r0, [r0, #0]
 800424e:	f380 8808 	msr	MSP, r0
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8814 	msr	CONTROL, r0
 800425a:	b662      	cpsie	i
 800425c:	b661      	cpsie	f
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	df00      	svc	0
 8004268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800426a:	bf00      	nop
 800426c:	e000ed08 	.word	0xe000ed08

08004270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004276:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <xPortStartScheduler+0x124>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a47      	ldr	r2, [pc, #284]	@ (8004398 <xPortStartScheduler+0x128>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10b      	bne.n	8004298 <xPortStartScheduler+0x28>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	613b      	str	r3, [r7, #16]
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004298:	4b3e      	ldr	r3, [pc, #248]	@ (8004394 <xPortStartScheduler+0x124>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3f      	ldr	r2, [pc, #252]	@ (800439c <xPortStartScheduler+0x12c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10b      	bne.n	80042ba <xPortStartScheduler+0x4a>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	60fb      	str	r3, [r7, #12]
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	e7fd      	b.n	80042b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ba:	4b39      	ldr	r3, [pc, #228]	@ (80043a0 <xPortStartScheduler+0x130>)
 80042bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	22ff      	movs	r2, #255	@ 0xff
 80042ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b31      	ldr	r3, [pc, #196]	@ (80043a4 <xPortStartScheduler+0x134>)
 80042e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042e2:	4b31      	ldr	r3, [pc, #196]	@ (80043a8 <xPortStartScheduler+0x138>)
 80042e4:	2207      	movs	r2, #7
 80042e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e8:	e009      	b.n	80042fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80042ea:	4b2f      	ldr	r3, [pc, #188]	@ (80043a8 <xPortStartScheduler+0x138>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	4a2d      	ldr	r2, [pc, #180]	@ (80043a8 <xPortStartScheduler+0x138>)
 80042f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	2b80      	cmp	r3, #128	@ 0x80
 8004308:	d0ef      	beq.n	80042ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800430a:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <xPortStartScheduler+0x138>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1c3 0307 	rsb	r3, r3, #7
 8004312:	2b04      	cmp	r3, #4
 8004314:	d00b      	beq.n	800432e <xPortStartScheduler+0xbe>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	60bb      	str	r3, [r7, #8]
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	e7fd      	b.n	800432a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800432e:	4b1e      	ldr	r3, [pc, #120]	@ (80043a8 <xPortStartScheduler+0x138>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	4a1c      	ldr	r2, [pc, #112]	@ (80043a8 <xPortStartScheduler+0x138>)
 8004336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004338:	4b1b      	ldr	r3, [pc, #108]	@ (80043a8 <xPortStartScheduler+0x138>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004340:	4a19      	ldr	r2, [pc, #100]	@ (80043a8 <xPortStartScheduler+0x138>)
 8004342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800434c:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <xPortStartScheduler+0x13c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a16      	ldr	r2, [pc, #88]	@ (80043ac <xPortStartScheduler+0x13c>)
 8004352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004358:	4b14      	ldr	r3, [pc, #80]	@ (80043ac <xPortStartScheduler+0x13c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <xPortStartScheduler+0x13c>)
 800435e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004364:	f000 f8da 	bl	800451c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004368:	4b11      	ldr	r3, [pc, #68]	@ (80043b0 <xPortStartScheduler+0x140>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800436e:	f000 f8f9 	bl	8004564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004372:	4b10      	ldr	r3, [pc, #64]	@ (80043b4 <xPortStartScheduler+0x144>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a0f      	ldr	r2, [pc, #60]	@ (80043b4 <xPortStartScheduler+0x144>)
 8004378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800437c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800437e:	f7ff ff63 	bl	8004248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004382:	f7ff fd41 	bl	8003e08 <vTaskSwitchContext>
	prvTaskExitError();
 8004386:	f7ff ff19 	bl	80041bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	e000ed00 	.word	0xe000ed00
 8004398:	410fc271 	.word	0x410fc271
 800439c:	410fc270 	.word	0x410fc270
 80043a0:	e000e400 	.word	0xe000e400
 80043a4:	20000534 	.word	0x20000534
 80043a8:	20000538 	.word	0x20000538
 80043ac:	e000ed20 	.word	0xe000ed20
 80043b0:	2000000c 	.word	0x2000000c
 80043b4:	e000ef34 	.word	0xe000ef34

080043b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
}
 80043d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043d2:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <vPortEnterCritical+0x5c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <vPortEnterCritical+0x5c>)
 80043da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <vPortEnterCritical+0x5c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d110      	bne.n	8004406 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <vPortEnterCritical+0x60>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <vPortEnterCritical+0x4e>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	603b      	str	r3, [r7, #0]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <vPortEnterCritical+0x4a>
	}
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000000c 	.word	0x2000000c
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <vPortExitCritical+0x50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <vPortExitCritical+0x26>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	607b      	str	r3, [r7, #4]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004442:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <vPortExitCritical+0x50>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3b01      	subs	r3, #1
 8004448:	4a08      	ldr	r2, [pc, #32]	@ (800446c <vPortExitCritical+0x50>)
 800444a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800444c:	4b07      	ldr	r3, [pc, #28]	@ (800446c <vPortExitCritical+0x50>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <vPortExitCritical+0x44>
 8004454:	2300      	movs	r3, #0
 8004456:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800445e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	2000000c 	.word	0x2000000c

08004470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004470:	f3ef 8009 	mrs	r0, PSP
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <pxCurrentTCBConst>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	f01e 0f10 	tst.w	lr, #16
 8004480:	bf08      	it	eq
 8004482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004494:	f380 8811 	msr	BASEPRI, r0
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f7ff fcb2 	bl	8003e08 <vTaskSwitchContext>
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f380 8811 	msr	BASEPRI, r0
 80044ac:	bc09      	pop	{r0, r3}
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	6808      	ldr	r0, [r1, #0]
 80044b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b6:	f01e 0f10 	tst.w	lr, #16
 80044ba:	bf08      	it	eq
 80044bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044c0:	f380 8809 	msr	PSP, r0
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	f3af 8000 	nop.w

080044d0 <pxCurrentTCBConst>:
 80044d0:	20000408 	.word	0x20000408
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
}
 80044f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044f2:	f7ff fbcf 	bl	8003c94 <xTaskIncrementTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044fc:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <SysTick_Handler+0x40>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f383 8811 	msr	BASEPRI, r3
}
 800450e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <vPortSetupTimerInterrupt+0x34>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <vPortSetupTimerInterrupt+0x38>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800452c:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <vPortSetupTimerInterrupt+0x3c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <vPortSetupTimerInterrupt+0x40>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	4a09      	ldr	r2, [pc, #36]	@ (8004560 <vPortSetupTimerInterrupt+0x44>)
 800453a:	3b01      	subs	r3, #1
 800453c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800453e:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <vPortSetupTimerInterrupt+0x34>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000e010 	.word	0xe000e010
 8004554:	e000e018 	.word	0xe000e018
 8004558:	20000000 	.word	0x20000000
 800455c:	10624dd3 	.word	0x10624dd3
 8004560:	e000e014 	.word	0xe000e014

08004564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004564:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004574 <vPortEnableVFP+0x10>
 8004568:	6801      	ldr	r1, [r0, #0]
 800456a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800456e:	6001      	str	r1, [r0, #0]
 8004570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004572:	bf00      	nop
 8004574:	e000ed88 	.word	0xe000ed88

08004578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	@ 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004584:	f7ff fada 	bl	8003b3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004588:	4b5c      	ldr	r3, [pc, #368]	@ (80046fc <pvPortMalloc+0x184>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004590:	f000 f924 	bl	80047dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004594:	4b5a      	ldr	r3, [pc, #360]	@ (8004700 <pvPortMalloc+0x188>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	f040 8095 	bne.w	80046cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01e      	beq.n	80045e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80045a8:	2208      	movs	r2, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d015      	beq.n	80045e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f023 0307 	bic.w	r3, r3, #7
 80045c0:	3308      	adds	r3, #8
 80045c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <pvPortMalloc+0x6e>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	617b      	str	r3, [r7, #20]
}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	e7fd      	b.n	80045e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d06f      	beq.n	80046cc <pvPortMalloc+0x154>
 80045ec:	4b45      	ldr	r3, [pc, #276]	@ (8004704 <pvPortMalloc+0x18c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d86a      	bhi.n	80046cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045f6:	4b44      	ldr	r3, [pc, #272]	@ (8004708 <pvPortMalloc+0x190>)
 80045f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045fa:	4b43      	ldr	r3, [pc, #268]	@ (8004708 <pvPortMalloc+0x190>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004600:	e004      	b.n	800460c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d903      	bls.n	800461e <pvPortMalloc+0xa6>
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f1      	bne.n	8004602 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800461e:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <pvPortMalloc+0x184>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	429a      	cmp	r2, r3
 8004626:	d051      	beq.n	80046cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2208      	movs	r2, #8
 800462e:	4413      	add	r3, r2
 8004630:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	1ad2      	subs	r2, r2, r3
 8004642:	2308      	movs	r3, #8
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	429a      	cmp	r2, r3
 8004648:	d920      	bls.n	800468c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800464a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00b      	beq.n	8004674 <pvPortMalloc+0xfc>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	613b      	str	r3, [r7, #16]
}
 800466e:	bf00      	nop
 8004670:	bf00      	nop
 8004672:	e7fd      	b.n	8004670 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1ad2      	subs	r2, r2, r3
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004686:	69b8      	ldr	r0, [r7, #24]
 8004688:	f000 f90a 	bl	80048a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800468c:	4b1d      	ldr	r3, [pc, #116]	@ (8004704 <pvPortMalloc+0x18c>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	4a1b      	ldr	r2, [pc, #108]	@ (8004704 <pvPortMalloc+0x18c>)
 8004698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800469a:	4b1a      	ldr	r3, [pc, #104]	@ (8004704 <pvPortMalloc+0x18c>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4b1b      	ldr	r3, [pc, #108]	@ (800470c <pvPortMalloc+0x194>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d203      	bcs.n	80046ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046a6:	4b17      	ldr	r3, [pc, #92]	@ (8004704 <pvPortMalloc+0x18c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a18      	ldr	r2, [pc, #96]	@ (800470c <pvPortMalloc+0x194>)
 80046ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4b13      	ldr	r3, [pc, #76]	@ (8004700 <pvPortMalloc+0x188>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046c2:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <pvPortMalloc+0x198>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	4a11      	ldr	r2, [pc, #68]	@ (8004710 <pvPortMalloc+0x198>)
 80046ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046cc:	f7ff fa44 	bl	8003b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <pvPortMalloc+0x17a>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	60fb      	str	r3, [r7, #12]
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	e7fd      	b.n	80046ee <pvPortMalloc+0x176>
	return pvReturn;
 80046f2:	69fb      	ldr	r3, [r7, #28]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	@ 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	200010fc 	.word	0x200010fc
 8004700:	20001110 	.word	0x20001110
 8004704:	20001100 	.word	0x20001100
 8004708:	200010f4 	.word	0x200010f4
 800470c:	20001104 	.word	0x20001104
 8004710:	20001108 	.word	0x20001108

08004714 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04f      	beq.n	80047c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004726:	2308      	movs	r3, #8
 8004728:	425b      	negs	r3, r3
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4413      	add	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4b25      	ldr	r3, [pc, #148]	@ (80047d0 <vPortFree+0xbc>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <vPortFree+0x46>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60fb      	str	r3, [r7, #12]
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <vPortFree+0x66>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	60bb      	str	r3, [r7, #8]
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	e7fd      	b.n	8004776 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <vPortFree+0xbc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01e      	beq.n	80047c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d11a      	bne.n	80047c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	4b0e      	ldr	r3, [pc, #56]	@ (80047d0 <vPortFree+0xbc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	43db      	mvns	r3, r3
 800479a:	401a      	ands	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047a0:	f7ff f9cc 	bl	8003b3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <vPortFree+0xc0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4413      	add	r3, r2
 80047ae:	4a09      	ldr	r2, [pc, #36]	@ (80047d4 <vPortFree+0xc0>)
 80047b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047b2:	6938      	ldr	r0, [r7, #16]
 80047b4:	f000 f874 	bl	80048a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047b8:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <vPortFree+0xc4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	4a06      	ldr	r2, [pc, #24]	@ (80047d8 <vPortFree+0xc4>)
 80047c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047c2:	f7ff f9c9 	bl	8003b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047c6:	bf00      	nop
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20001110 	.word	0x20001110
 80047d4:	20001100 	.word	0x20001100
 80047d8:	2000110c 	.word	0x2000110c

080047dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047e2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80047e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047e8:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <prvHeapInit+0xac>)
 80047ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00c      	beq.n	8004810 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3307      	adds	r3, #7
 80047fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0307 	bic.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	4a1f      	ldr	r2, [pc, #124]	@ (8004888 <prvHeapInit+0xac>)
 800480c:	4413      	add	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004814:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <prvHeapInit+0xb0>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800481a:	4b1c      	ldr	r3, [pc, #112]	@ (800488c <prvHeapInit+0xb0>)
 800481c:	2200      	movs	r2, #0
 800481e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4413      	add	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004828:	2208      	movs	r2, #8
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0307 	bic.w	r3, r3, #7
 8004836:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a15      	ldr	r2, [pc, #84]	@ (8004890 <prvHeapInit+0xb4>)
 800483c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800483e:	4b14      	ldr	r3, [pc, #80]	@ (8004890 <prvHeapInit+0xb4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004846:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <prvHeapInit+0xb4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	1ad2      	subs	r2, r2, r3
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800485c:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <prvHeapInit+0xb4>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4a0a      	ldr	r2, [pc, #40]	@ (8004894 <prvHeapInit+0xb8>)
 800486a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <prvHeapInit+0xbc>)
 8004872:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004874:	4b09      	ldr	r3, [pc, #36]	@ (800489c <prvHeapInit+0xc0>)
 8004876:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800487a:	601a      	str	r2, [r3, #0]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	2000053c 	.word	0x2000053c
 800488c:	200010f4 	.word	0x200010f4
 8004890:	200010fc 	.word	0x200010fc
 8004894:	20001104 	.word	0x20001104
 8004898:	20001100 	.word	0x20001100
 800489c:	20001110 	.word	0x20001110

080048a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048a8:	4b28      	ldr	r3, [pc, #160]	@ (800494c <prvInsertBlockIntoFreeList+0xac>)
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e002      	b.n	80048b4 <prvInsertBlockIntoFreeList+0x14>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d8f7      	bhi.n	80048ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	4413      	add	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d108      	bne.n	80048e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	441a      	add	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	441a      	add	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d118      	bne.n	8004928 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <prvInsertBlockIntoFreeList+0xb0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d00d      	beq.n	800491e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e008      	b.n	8004930 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800491e:	4b0c      	ldr	r3, [pc, #48]	@ (8004950 <prvInsertBlockIntoFreeList+0xb0>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e003      	b.n	8004930 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d002      	beq.n	800493e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	200010f4 	.word	0x200010f4
 8004950:	200010fc 	.word	0x200010fc

08004954 <siprintf>:
 8004954:	b40e      	push	{r1, r2, r3}
 8004956:	b500      	push	{lr}
 8004958:	b09c      	sub	sp, #112	@ 0x70
 800495a:	ab1d      	add	r3, sp, #116	@ 0x74
 800495c:	9002      	str	r0, [sp, #8]
 800495e:	9006      	str	r0, [sp, #24]
 8004960:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004964:	4809      	ldr	r0, [pc, #36]	@ (800498c <siprintf+0x38>)
 8004966:	9107      	str	r1, [sp, #28]
 8004968:	9104      	str	r1, [sp, #16]
 800496a:	4909      	ldr	r1, [pc, #36]	@ (8004990 <siprintf+0x3c>)
 800496c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004970:	9105      	str	r1, [sp, #20]
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	a902      	add	r1, sp, #8
 8004978:	f000 f9f8 	bl	8004d6c <_svfiprintf_r>
 800497c:	9b02      	ldr	r3, [sp, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	b01c      	add	sp, #112	@ 0x70
 8004984:	f85d eb04 	ldr.w	lr, [sp], #4
 8004988:	b003      	add	sp, #12
 800498a:	4770      	bx	lr
 800498c:	20000010 	.word	0x20000010
 8004990:	ffff0208 	.word	0xffff0208

08004994 <memset>:
 8004994:	4402      	add	r2, r0
 8004996:	4603      	mov	r3, r0
 8004998:	4293      	cmp	r3, r2
 800499a:	d100      	bne.n	800499e <memset+0xa>
 800499c:	4770      	bx	lr
 800499e:	f803 1b01 	strb.w	r1, [r3], #1
 80049a2:	e7f9      	b.n	8004998 <memset+0x4>

080049a4 <_reclaim_reent>:
 80049a4:	4b29      	ldr	r3, [pc, #164]	@ (8004a4c <_reclaim_reent+0xa8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4283      	cmp	r3, r0
 80049aa:	b570      	push	{r4, r5, r6, lr}
 80049ac:	4604      	mov	r4, r0
 80049ae:	d04b      	beq.n	8004a48 <_reclaim_reent+0xa4>
 80049b0:	69c3      	ldr	r3, [r0, #28]
 80049b2:	b1ab      	cbz	r3, 80049e0 <_reclaim_reent+0x3c>
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	b16b      	cbz	r3, 80049d4 <_reclaim_reent+0x30>
 80049b8:	2500      	movs	r5, #0
 80049ba:	69e3      	ldr	r3, [r4, #28]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	5959      	ldr	r1, [r3, r5]
 80049c0:	2900      	cmp	r1, #0
 80049c2:	d13b      	bne.n	8004a3c <_reclaim_reent+0x98>
 80049c4:	3504      	adds	r5, #4
 80049c6:	2d80      	cmp	r5, #128	@ 0x80
 80049c8:	d1f7      	bne.n	80049ba <_reclaim_reent+0x16>
 80049ca:	69e3      	ldr	r3, [r4, #28]
 80049cc:	4620      	mov	r0, r4
 80049ce:	68d9      	ldr	r1, [r3, #12]
 80049d0:	f000 f878 	bl	8004ac4 <_free_r>
 80049d4:	69e3      	ldr	r3, [r4, #28]
 80049d6:	6819      	ldr	r1, [r3, #0]
 80049d8:	b111      	cbz	r1, 80049e0 <_reclaim_reent+0x3c>
 80049da:	4620      	mov	r0, r4
 80049dc:	f000 f872 	bl	8004ac4 <_free_r>
 80049e0:	6961      	ldr	r1, [r4, #20]
 80049e2:	b111      	cbz	r1, 80049ea <_reclaim_reent+0x46>
 80049e4:	4620      	mov	r0, r4
 80049e6:	f000 f86d 	bl	8004ac4 <_free_r>
 80049ea:	69e1      	ldr	r1, [r4, #28]
 80049ec:	b111      	cbz	r1, 80049f4 <_reclaim_reent+0x50>
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 f868 	bl	8004ac4 <_free_r>
 80049f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80049f6:	b111      	cbz	r1, 80049fe <_reclaim_reent+0x5a>
 80049f8:	4620      	mov	r0, r4
 80049fa:	f000 f863 	bl	8004ac4 <_free_r>
 80049fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a00:	b111      	cbz	r1, 8004a08 <_reclaim_reent+0x64>
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 f85e 	bl	8004ac4 <_free_r>
 8004a08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004a0a:	b111      	cbz	r1, 8004a12 <_reclaim_reent+0x6e>
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f000 f859 	bl	8004ac4 <_free_r>
 8004a12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004a14:	b111      	cbz	r1, 8004a1c <_reclaim_reent+0x78>
 8004a16:	4620      	mov	r0, r4
 8004a18:	f000 f854 	bl	8004ac4 <_free_r>
 8004a1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004a1e:	b111      	cbz	r1, 8004a26 <_reclaim_reent+0x82>
 8004a20:	4620      	mov	r0, r4
 8004a22:	f000 f84f 	bl	8004ac4 <_free_r>
 8004a26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004a28:	b111      	cbz	r1, 8004a30 <_reclaim_reent+0x8c>
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f000 f84a 	bl	8004ac4 <_free_r>
 8004a30:	6a23      	ldr	r3, [r4, #32]
 8004a32:	b14b      	cbz	r3, 8004a48 <_reclaim_reent+0xa4>
 8004a34:	4620      	mov	r0, r4
 8004a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a3a:	4718      	bx	r3
 8004a3c:	680e      	ldr	r6, [r1, #0]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f000 f840 	bl	8004ac4 <_free_r>
 8004a44:	4631      	mov	r1, r6
 8004a46:	e7bb      	b.n	80049c0 <_reclaim_reent+0x1c>
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000010 	.word	0x20000010

08004a50 <__errno>:
 8004a50:	4b01      	ldr	r3, [pc, #4]	@ (8004a58 <__errno+0x8>)
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000010 	.word	0x20000010

08004a5c <__libc_init_array>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a94 <__libc_init_array+0x38>)
 8004a60:	4c0d      	ldr	r4, [pc, #52]	@ (8004a98 <__libc_init_array+0x3c>)
 8004a62:	1b64      	subs	r4, r4, r5
 8004a64:	10a4      	asrs	r4, r4, #2
 8004a66:	2600      	movs	r6, #0
 8004a68:	42a6      	cmp	r6, r4
 8004a6a:	d109      	bne.n	8004a80 <__libc_init_array+0x24>
 8004a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a9c <__libc_init_array+0x40>)
 8004a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004aa0 <__libc_init_array+0x44>)
 8004a70:	f000 fc66 	bl	8005340 <_init>
 8004a74:	1b64      	subs	r4, r4, r5
 8004a76:	10a4      	asrs	r4, r4, #2
 8004a78:	2600      	movs	r6, #0
 8004a7a:	42a6      	cmp	r6, r4
 8004a7c:	d105      	bne.n	8004a8a <__libc_init_array+0x2e>
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a84:	4798      	blx	r3
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7ee      	b.n	8004a68 <__libc_init_array+0xc>
 8004a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8e:	4798      	blx	r3
 8004a90:	3601      	adds	r6, #1
 8004a92:	e7f2      	b.n	8004a7a <__libc_init_array+0x1e>
 8004a94:	08005470 	.word	0x08005470
 8004a98:	08005470 	.word	0x08005470
 8004a9c:	08005470 	.word	0x08005470
 8004aa0:	08005474 	.word	0x08005474

08004aa4 <__retarget_lock_acquire_recursive>:
 8004aa4:	4770      	bx	lr

08004aa6 <__retarget_lock_release_recursive>:
 8004aa6:	4770      	bx	lr

08004aa8 <memcpy>:
 8004aa8:	440a      	add	r2, r1
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ab0:	d100      	bne.n	8004ab4 <memcpy+0xc>
 8004ab2:	4770      	bx	lr
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004abe:	4291      	cmp	r1, r2
 8004ac0:	d1f9      	bne.n	8004ab6 <memcpy+0xe>
 8004ac2:	bd10      	pop	{r4, pc}

08004ac4 <_free_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	d041      	beq.n	8004b50 <_free_r+0x8c>
 8004acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad0:	1f0c      	subs	r4, r1, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bfb8      	it	lt
 8004ad6:	18e4      	addlt	r4, r4, r3
 8004ad8:	f000 f8e0 	bl	8004c9c <__malloc_lock>
 8004adc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b54 <_free_r+0x90>)
 8004ade:	6813      	ldr	r3, [r2, #0]
 8004ae0:	b933      	cbnz	r3, 8004af0 <_free_r+0x2c>
 8004ae2:	6063      	str	r3, [r4, #4]
 8004ae4:	6014      	str	r4, [r2, #0]
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aec:	f000 b8dc 	b.w	8004ca8 <__malloc_unlock>
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	d908      	bls.n	8004b06 <_free_r+0x42>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	1821      	adds	r1, r4, r0
 8004af8:	428b      	cmp	r3, r1
 8004afa:	bf01      	itttt	eq
 8004afc:	6819      	ldreq	r1, [r3, #0]
 8004afe:	685b      	ldreq	r3, [r3, #4]
 8004b00:	1809      	addeq	r1, r1, r0
 8004b02:	6021      	streq	r1, [r4, #0]
 8004b04:	e7ed      	b.n	8004ae2 <_free_r+0x1e>
 8004b06:	461a      	mov	r2, r3
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b10b      	cbz	r3, 8004b10 <_free_r+0x4c>
 8004b0c:	42a3      	cmp	r3, r4
 8004b0e:	d9fa      	bls.n	8004b06 <_free_r+0x42>
 8004b10:	6811      	ldr	r1, [r2, #0]
 8004b12:	1850      	adds	r0, r2, r1
 8004b14:	42a0      	cmp	r0, r4
 8004b16:	d10b      	bne.n	8004b30 <_free_r+0x6c>
 8004b18:	6820      	ldr	r0, [r4, #0]
 8004b1a:	4401      	add	r1, r0
 8004b1c:	1850      	adds	r0, r2, r1
 8004b1e:	4283      	cmp	r3, r0
 8004b20:	6011      	str	r1, [r2, #0]
 8004b22:	d1e0      	bne.n	8004ae6 <_free_r+0x22>
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	6053      	str	r3, [r2, #4]
 8004b2a:	4408      	add	r0, r1
 8004b2c:	6010      	str	r0, [r2, #0]
 8004b2e:	e7da      	b.n	8004ae6 <_free_r+0x22>
 8004b30:	d902      	bls.n	8004b38 <_free_r+0x74>
 8004b32:	230c      	movs	r3, #12
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	e7d6      	b.n	8004ae6 <_free_r+0x22>
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	1821      	adds	r1, r4, r0
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	bf04      	itt	eq
 8004b40:	6819      	ldreq	r1, [r3, #0]
 8004b42:	685b      	ldreq	r3, [r3, #4]
 8004b44:	6063      	str	r3, [r4, #4]
 8004b46:	bf04      	itt	eq
 8004b48:	1809      	addeq	r1, r1, r0
 8004b4a:	6021      	streq	r1, [r4, #0]
 8004b4c:	6054      	str	r4, [r2, #4]
 8004b4e:	e7ca      	b.n	8004ae6 <_free_r+0x22>
 8004b50:	bd38      	pop	{r3, r4, r5, pc}
 8004b52:	bf00      	nop
 8004b54:	20001258 	.word	0x20001258

08004b58 <sbrk_aligned>:
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	4e0f      	ldr	r6, [pc, #60]	@ (8004b98 <sbrk_aligned+0x40>)
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	6831      	ldr	r1, [r6, #0]
 8004b60:	4605      	mov	r5, r0
 8004b62:	b911      	cbnz	r1, 8004b6a <sbrk_aligned+0x12>
 8004b64:	f000 fba6 	bl	80052b4 <_sbrk_r>
 8004b68:	6030      	str	r0, [r6, #0]
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 fba1 	bl	80052b4 <_sbrk_r>
 8004b72:	1c43      	adds	r3, r0, #1
 8004b74:	d103      	bne.n	8004b7e <sbrk_aligned+0x26>
 8004b76:	f04f 34ff 	mov.w	r4, #4294967295
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
 8004b7e:	1cc4      	adds	r4, r0, #3
 8004b80:	f024 0403 	bic.w	r4, r4, #3
 8004b84:	42a0      	cmp	r0, r4
 8004b86:	d0f8      	beq.n	8004b7a <sbrk_aligned+0x22>
 8004b88:	1a21      	subs	r1, r4, r0
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 fb92 	bl	80052b4 <_sbrk_r>
 8004b90:	3001      	adds	r0, #1
 8004b92:	d1f2      	bne.n	8004b7a <sbrk_aligned+0x22>
 8004b94:	e7ef      	b.n	8004b76 <sbrk_aligned+0x1e>
 8004b96:	bf00      	nop
 8004b98:	20001254 	.word	0x20001254

08004b9c <_malloc_r>:
 8004b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba0:	1ccd      	adds	r5, r1, #3
 8004ba2:	f025 0503 	bic.w	r5, r5, #3
 8004ba6:	3508      	adds	r5, #8
 8004ba8:	2d0c      	cmp	r5, #12
 8004baa:	bf38      	it	cc
 8004bac:	250c      	movcc	r5, #12
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	db01      	blt.n	8004bb8 <_malloc_r+0x1c>
 8004bb4:	42a9      	cmp	r1, r5
 8004bb6:	d904      	bls.n	8004bc2 <_malloc_r+0x26>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	6033      	str	r3, [r6, #0]
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c98 <_malloc_r+0xfc>
 8004bc6:	f000 f869 	bl	8004c9c <__malloc_lock>
 8004bca:	f8d8 3000 	ldr.w	r3, [r8]
 8004bce:	461c      	mov	r4, r3
 8004bd0:	bb44      	cbnz	r4, 8004c24 <_malloc_r+0x88>
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f7ff ffbf 	bl	8004b58 <sbrk_aligned>
 8004bda:	1c43      	adds	r3, r0, #1
 8004bdc:	4604      	mov	r4, r0
 8004bde:	d158      	bne.n	8004c92 <_malloc_r+0xf6>
 8004be0:	f8d8 4000 	ldr.w	r4, [r8]
 8004be4:	4627      	mov	r7, r4
 8004be6:	2f00      	cmp	r7, #0
 8004be8:	d143      	bne.n	8004c72 <_malloc_r+0xd6>
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	d04b      	beq.n	8004c86 <_malloc_r+0xea>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	eb04 0903 	add.w	r9, r4, r3
 8004bf8:	f000 fb5c 	bl	80052b4 <_sbrk_r>
 8004bfc:	4581      	cmp	r9, r0
 8004bfe:	d142      	bne.n	8004c86 <_malloc_r+0xea>
 8004c00:	6821      	ldr	r1, [r4, #0]
 8004c02:	1a6d      	subs	r5, r5, r1
 8004c04:	4629      	mov	r1, r5
 8004c06:	4630      	mov	r0, r6
 8004c08:	f7ff ffa6 	bl	8004b58 <sbrk_aligned>
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d03a      	beq.n	8004c86 <_malloc_r+0xea>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	442b      	add	r3, r5
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	f8d8 3000 	ldr.w	r3, [r8]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	bb62      	cbnz	r2, 8004c78 <_malloc_r+0xdc>
 8004c1e:	f8c8 7000 	str.w	r7, [r8]
 8004c22:	e00f      	b.n	8004c44 <_malloc_r+0xa8>
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	1b52      	subs	r2, r2, r5
 8004c28:	d420      	bmi.n	8004c6c <_malloc_r+0xd0>
 8004c2a:	2a0b      	cmp	r2, #11
 8004c2c:	d917      	bls.n	8004c5e <_malloc_r+0xc2>
 8004c2e:	1961      	adds	r1, r4, r5
 8004c30:	42a3      	cmp	r3, r4
 8004c32:	6025      	str	r5, [r4, #0]
 8004c34:	bf18      	it	ne
 8004c36:	6059      	strne	r1, [r3, #4]
 8004c38:	6863      	ldr	r3, [r4, #4]
 8004c3a:	bf08      	it	eq
 8004c3c:	f8c8 1000 	streq.w	r1, [r8]
 8004c40:	5162      	str	r2, [r4, r5]
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	4630      	mov	r0, r6
 8004c46:	f000 f82f 	bl	8004ca8 <__malloc_unlock>
 8004c4a:	f104 000b 	add.w	r0, r4, #11
 8004c4e:	1d23      	adds	r3, r4, #4
 8004c50:	f020 0007 	bic.w	r0, r0, #7
 8004c54:	1ac2      	subs	r2, r0, r3
 8004c56:	bf1c      	itt	ne
 8004c58:	1a1b      	subne	r3, r3, r0
 8004c5a:	50a3      	strne	r3, [r4, r2]
 8004c5c:	e7af      	b.n	8004bbe <_malloc_r+0x22>
 8004c5e:	6862      	ldr	r2, [r4, #4]
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	bf0c      	ite	eq
 8004c64:	f8c8 2000 	streq.w	r2, [r8]
 8004c68:	605a      	strne	r2, [r3, #4]
 8004c6a:	e7eb      	b.n	8004c44 <_malloc_r+0xa8>
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	6864      	ldr	r4, [r4, #4]
 8004c70:	e7ae      	b.n	8004bd0 <_malloc_r+0x34>
 8004c72:	463c      	mov	r4, r7
 8004c74:	687f      	ldr	r7, [r7, #4]
 8004c76:	e7b6      	b.n	8004be6 <_malloc_r+0x4a>
 8004c78:	461a      	mov	r2, r3
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	42a3      	cmp	r3, r4
 8004c7e:	d1fb      	bne.n	8004c78 <_malloc_r+0xdc>
 8004c80:	2300      	movs	r3, #0
 8004c82:	6053      	str	r3, [r2, #4]
 8004c84:	e7de      	b.n	8004c44 <_malloc_r+0xa8>
 8004c86:	230c      	movs	r3, #12
 8004c88:	6033      	str	r3, [r6, #0]
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f000 f80c 	bl	8004ca8 <__malloc_unlock>
 8004c90:	e794      	b.n	8004bbc <_malloc_r+0x20>
 8004c92:	6005      	str	r5, [r0, #0]
 8004c94:	e7d6      	b.n	8004c44 <_malloc_r+0xa8>
 8004c96:	bf00      	nop
 8004c98:	20001258 	.word	0x20001258

08004c9c <__malloc_lock>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	@ (8004ca4 <__malloc_lock+0x8>)
 8004c9e:	f7ff bf01 	b.w	8004aa4 <__retarget_lock_acquire_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	20001250 	.word	0x20001250

08004ca8 <__malloc_unlock>:
 8004ca8:	4801      	ldr	r0, [pc, #4]	@ (8004cb0 <__malloc_unlock+0x8>)
 8004caa:	f7ff befc 	b.w	8004aa6 <__retarget_lock_release_recursive>
 8004cae:	bf00      	nop
 8004cb0:	20001250 	.word	0x20001250

08004cb4 <__ssputs_r>:
 8004cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	688e      	ldr	r6, [r1, #8]
 8004cba:	461f      	mov	r7, r3
 8004cbc:	42be      	cmp	r6, r7
 8004cbe:	680b      	ldr	r3, [r1, #0]
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4690      	mov	r8, r2
 8004cc6:	d82d      	bhi.n	8004d24 <__ssputs_r+0x70>
 8004cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ccc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cd0:	d026      	beq.n	8004d20 <__ssputs_r+0x6c>
 8004cd2:	6965      	ldr	r5, [r4, #20]
 8004cd4:	6909      	ldr	r1, [r1, #16]
 8004cd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cda:	eba3 0901 	sub.w	r9, r3, r1
 8004cde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ce2:	1c7b      	adds	r3, r7, #1
 8004ce4:	444b      	add	r3, r9
 8004ce6:	106d      	asrs	r5, r5, #1
 8004ce8:	429d      	cmp	r5, r3
 8004cea:	bf38      	it	cc
 8004cec:	461d      	movcc	r5, r3
 8004cee:	0553      	lsls	r3, r2, #21
 8004cf0:	d527      	bpl.n	8004d42 <__ssputs_r+0x8e>
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	f7ff ff52 	bl	8004b9c <_malloc_r>
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	b360      	cbz	r0, 8004d56 <__ssputs_r+0xa2>
 8004cfc:	6921      	ldr	r1, [r4, #16]
 8004cfe:	464a      	mov	r2, r9
 8004d00:	f7ff fed2 	bl	8004aa8 <memcpy>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0e:	81a3      	strh	r3, [r4, #12]
 8004d10:	6126      	str	r6, [r4, #16]
 8004d12:	6165      	str	r5, [r4, #20]
 8004d14:	444e      	add	r6, r9
 8004d16:	eba5 0509 	sub.w	r5, r5, r9
 8004d1a:	6026      	str	r6, [r4, #0]
 8004d1c:	60a5      	str	r5, [r4, #8]
 8004d1e:	463e      	mov	r6, r7
 8004d20:	42be      	cmp	r6, r7
 8004d22:	d900      	bls.n	8004d26 <__ssputs_r+0x72>
 8004d24:	463e      	mov	r6, r7
 8004d26:	6820      	ldr	r0, [r4, #0]
 8004d28:	4632      	mov	r2, r6
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	f000 faa8 	bl	8005280 <memmove>
 8004d30:	68a3      	ldr	r3, [r4, #8]
 8004d32:	1b9b      	subs	r3, r3, r6
 8004d34:	60a3      	str	r3, [r4, #8]
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	4433      	add	r3, r6
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d42:	462a      	mov	r2, r5
 8004d44:	f000 fac6 	bl	80052d4 <_realloc_r>
 8004d48:	4606      	mov	r6, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d1e0      	bne.n	8004d10 <__ssputs_r+0x5c>
 8004d4e:	6921      	ldr	r1, [r4, #16]
 8004d50:	4650      	mov	r0, sl
 8004d52:	f7ff feb7 	bl	8004ac4 <_free_r>
 8004d56:	230c      	movs	r3, #12
 8004d58:	f8ca 3000 	str.w	r3, [sl]
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	e7e9      	b.n	8004d3e <__ssputs_r+0x8a>
	...

08004d6c <_svfiprintf_r>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	4698      	mov	r8, r3
 8004d72:	898b      	ldrh	r3, [r1, #12]
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	b09d      	sub	sp, #116	@ 0x74
 8004d78:	4607      	mov	r7, r0
 8004d7a:	460d      	mov	r5, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	d510      	bpl.n	8004da2 <_svfiprintf_r+0x36>
 8004d80:	690b      	ldr	r3, [r1, #16]
 8004d82:	b973      	cbnz	r3, 8004da2 <_svfiprintf_r+0x36>
 8004d84:	2140      	movs	r1, #64	@ 0x40
 8004d86:	f7ff ff09 	bl	8004b9c <_malloc_r>
 8004d8a:	6028      	str	r0, [r5, #0]
 8004d8c:	6128      	str	r0, [r5, #16]
 8004d8e:	b930      	cbnz	r0, 8004d9e <_svfiprintf_r+0x32>
 8004d90:	230c      	movs	r3, #12
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	b01d      	add	sp, #116	@ 0x74
 8004d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9e:	2340      	movs	r3, #64	@ 0x40
 8004da0:	616b      	str	r3, [r5, #20]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004da6:	2320      	movs	r3, #32
 8004da8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db0:	2330      	movs	r3, #48	@ 0x30
 8004db2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f50 <_svfiprintf_r+0x1e4>
 8004db6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dba:	f04f 0901 	mov.w	r9, #1
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	469a      	mov	sl, r3
 8004dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc6:	b10a      	cbz	r2, 8004dcc <_svfiprintf_r+0x60>
 8004dc8:	2a25      	cmp	r2, #37	@ 0x25
 8004dca:	d1f9      	bne.n	8004dc0 <_svfiprintf_r+0x54>
 8004dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd0:	d00b      	beq.n	8004dea <_svfiprintf_r+0x7e>
 8004dd2:	465b      	mov	r3, fp
 8004dd4:	4622      	mov	r2, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4638      	mov	r0, r7
 8004dda:	f7ff ff6b 	bl	8004cb4 <__ssputs_r>
 8004dde:	3001      	adds	r0, #1
 8004de0:	f000 80a7 	beq.w	8004f32 <_svfiprintf_r+0x1c6>
 8004de4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004de6:	445a      	add	r2, fp
 8004de8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dea:	f89a 3000 	ldrb.w	r3, [sl]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 809f 	beq.w	8004f32 <_svfiprintf_r+0x1c6>
 8004df4:	2300      	movs	r3, #0
 8004df6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dfe:	f10a 0a01 	add.w	sl, sl, #1
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	9307      	str	r3, [sp, #28]
 8004e06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e0c:	4654      	mov	r4, sl
 8004e0e:	2205      	movs	r2, #5
 8004e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e14:	484e      	ldr	r0, [pc, #312]	@ (8004f50 <_svfiprintf_r+0x1e4>)
 8004e16:	f7fb f9e3 	bl	80001e0 <memchr>
 8004e1a:	9a04      	ldr	r2, [sp, #16]
 8004e1c:	b9d8      	cbnz	r0, 8004e56 <_svfiprintf_r+0xea>
 8004e1e:	06d0      	lsls	r0, r2, #27
 8004e20:	bf44      	itt	mi
 8004e22:	2320      	movmi	r3, #32
 8004e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e28:	0711      	lsls	r1, r2, #28
 8004e2a:	bf44      	itt	mi
 8004e2c:	232b      	movmi	r3, #43	@ 0x2b
 8004e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e32:	f89a 3000 	ldrb.w	r3, [sl]
 8004e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e38:	d015      	beq.n	8004e66 <_svfiprintf_r+0xfa>
 8004e3a:	9a07      	ldr	r2, [sp, #28]
 8004e3c:	4654      	mov	r4, sl
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f04f 0c0a 	mov.w	ip, #10
 8004e44:	4621      	mov	r1, r4
 8004e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4a:	3b30      	subs	r3, #48	@ 0x30
 8004e4c:	2b09      	cmp	r3, #9
 8004e4e:	d94b      	bls.n	8004ee8 <_svfiprintf_r+0x17c>
 8004e50:	b1b0      	cbz	r0, 8004e80 <_svfiprintf_r+0x114>
 8004e52:	9207      	str	r2, [sp, #28]
 8004e54:	e014      	b.n	8004e80 <_svfiprintf_r+0x114>
 8004e56:	eba0 0308 	sub.w	r3, r0, r8
 8004e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	9304      	str	r3, [sp, #16]
 8004e62:	46a2      	mov	sl, r4
 8004e64:	e7d2      	b.n	8004e0c <_svfiprintf_r+0xa0>
 8004e66:	9b03      	ldr	r3, [sp, #12]
 8004e68:	1d19      	adds	r1, r3, #4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	9103      	str	r1, [sp, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bfbb      	ittet	lt
 8004e72:	425b      	neglt	r3, r3
 8004e74:	f042 0202 	orrlt.w	r2, r2, #2
 8004e78:	9307      	strge	r3, [sp, #28]
 8004e7a:	9307      	strlt	r3, [sp, #28]
 8004e7c:	bfb8      	it	lt
 8004e7e:	9204      	strlt	r2, [sp, #16]
 8004e80:	7823      	ldrb	r3, [r4, #0]
 8004e82:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e84:	d10a      	bne.n	8004e9c <_svfiprintf_r+0x130>
 8004e86:	7863      	ldrb	r3, [r4, #1]
 8004e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e8a:	d132      	bne.n	8004ef2 <_svfiprintf_r+0x186>
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	9203      	str	r2, [sp, #12]
 8004e94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e98:	3402      	adds	r4, #2
 8004e9a:	9305      	str	r3, [sp, #20]
 8004e9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f60 <_svfiprintf_r+0x1f4>
 8004ea0:	7821      	ldrb	r1, [r4, #0]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	f7fb f99b 	bl	80001e0 <memchr>
 8004eaa:	b138      	cbz	r0, 8004ebc <_svfiprintf_r+0x150>
 8004eac:	9b04      	ldr	r3, [sp, #16]
 8004eae:	eba0 000a 	sub.w	r0, r0, sl
 8004eb2:	2240      	movs	r2, #64	@ 0x40
 8004eb4:	4082      	lsls	r2, r0
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	3401      	adds	r4, #1
 8004eba:	9304      	str	r3, [sp, #16]
 8004ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec0:	4824      	ldr	r0, [pc, #144]	@ (8004f54 <_svfiprintf_r+0x1e8>)
 8004ec2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ec6:	2206      	movs	r2, #6
 8004ec8:	f7fb f98a 	bl	80001e0 <memchr>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d036      	beq.n	8004f3e <_svfiprintf_r+0x1d2>
 8004ed0:	4b21      	ldr	r3, [pc, #132]	@ (8004f58 <_svfiprintf_r+0x1ec>)
 8004ed2:	bb1b      	cbnz	r3, 8004f1c <_svfiprintf_r+0x1b0>
 8004ed4:	9b03      	ldr	r3, [sp, #12]
 8004ed6:	3307      	adds	r3, #7
 8004ed8:	f023 0307 	bic.w	r3, r3, #7
 8004edc:	3308      	adds	r3, #8
 8004ede:	9303      	str	r3, [sp, #12]
 8004ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee2:	4433      	add	r3, r6
 8004ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ee6:	e76a      	b.n	8004dbe <_svfiprintf_r+0x52>
 8004ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eec:	460c      	mov	r4, r1
 8004eee:	2001      	movs	r0, #1
 8004ef0:	e7a8      	b.n	8004e44 <_svfiprintf_r+0xd8>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	3401      	adds	r4, #1
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f04f 0c0a 	mov.w	ip, #10
 8004efe:	4620      	mov	r0, r4
 8004f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f04:	3a30      	subs	r2, #48	@ 0x30
 8004f06:	2a09      	cmp	r2, #9
 8004f08:	d903      	bls.n	8004f12 <_svfiprintf_r+0x1a6>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0c6      	beq.n	8004e9c <_svfiprintf_r+0x130>
 8004f0e:	9105      	str	r1, [sp, #20]
 8004f10:	e7c4      	b.n	8004e9c <_svfiprintf_r+0x130>
 8004f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f16:	4604      	mov	r4, r0
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e7f0      	b.n	8004efe <_svfiprintf_r+0x192>
 8004f1c:	ab03      	add	r3, sp, #12
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	462a      	mov	r2, r5
 8004f22:	4b0e      	ldr	r3, [pc, #56]	@ (8004f5c <_svfiprintf_r+0x1f0>)
 8004f24:	a904      	add	r1, sp, #16
 8004f26:	4638      	mov	r0, r7
 8004f28:	f3af 8000 	nop.w
 8004f2c:	1c42      	adds	r2, r0, #1
 8004f2e:	4606      	mov	r6, r0
 8004f30:	d1d6      	bne.n	8004ee0 <_svfiprintf_r+0x174>
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	065b      	lsls	r3, r3, #25
 8004f36:	f53f af2d 	bmi.w	8004d94 <_svfiprintf_r+0x28>
 8004f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f3c:	e72c      	b.n	8004d98 <_svfiprintf_r+0x2c>
 8004f3e:	ab03      	add	r3, sp, #12
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	462a      	mov	r2, r5
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <_svfiprintf_r+0x1f0>)
 8004f46:	a904      	add	r1, sp, #16
 8004f48:	4638      	mov	r0, r7
 8004f4a:	f000 f879 	bl	8005040 <_printf_i>
 8004f4e:	e7ed      	b.n	8004f2c <_svfiprintf_r+0x1c0>
 8004f50:	08005434 	.word	0x08005434
 8004f54:	0800543e 	.word	0x0800543e
 8004f58:	00000000 	.word	0x00000000
 8004f5c:	08004cb5 	.word	0x08004cb5
 8004f60:	0800543a 	.word	0x0800543a

08004f64 <_printf_common>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	4616      	mov	r6, r2
 8004f6a:	4698      	mov	r8, r3
 8004f6c:	688a      	ldr	r2, [r1, #8]
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	bfb8      	it	lt
 8004f78:	4613      	movlt	r3, r2
 8004f7a:	6033      	str	r3, [r6, #0]
 8004f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f80:	4607      	mov	r7, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	b10a      	cbz	r2, 8004f8a <_printf_common+0x26>
 8004f86:	3301      	adds	r3, #1
 8004f88:	6033      	str	r3, [r6, #0]
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	0699      	lsls	r1, r3, #26
 8004f8e:	bf42      	ittt	mi
 8004f90:	6833      	ldrmi	r3, [r6, #0]
 8004f92:	3302      	addmi	r3, #2
 8004f94:	6033      	strmi	r3, [r6, #0]
 8004f96:	6825      	ldr	r5, [r4, #0]
 8004f98:	f015 0506 	ands.w	r5, r5, #6
 8004f9c:	d106      	bne.n	8004fac <_printf_common+0x48>
 8004f9e:	f104 0a19 	add.w	sl, r4, #25
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	6832      	ldr	r2, [r6, #0]
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	42ab      	cmp	r3, r5
 8004faa:	dc26      	bgt.n	8004ffa <_printf_common+0x96>
 8004fac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fb0:	6822      	ldr	r2, [r4, #0]
 8004fb2:	3b00      	subs	r3, #0
 8004fb4:	bf18      	it	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	0692      	lsls	r2, r2, #26
 8004fba:	d42b      	bmi.n	8005014 <_printf_common+0xb0>
 8004fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c8      	blx	r9
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d01e      	beq.n	8005008 <_printf_common+0xa4>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	6922      	ldr	r2, [r4, #16]
 8004fce:	f003 0306 	and.w	r3, r3, #6
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf02      	ittt	eq
 8004fd6:	68e5      	ldreq	r5, [r4, #12]
 8004fd8:	6833      	ldreq	r3, [r6, #0]
 8004fda:	1aed      	subeq	r5, r5, r3
 8004fdc:	68a3      	ldr	r3, [r4, #8]
 8004fde:	bf0c      	ite	eq
 8004fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe4:	2500      	movne	r5, #0
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bfc4      	itt	gt
 8004fea:	1a9b      	subgt	r3, r3, r2
 8004fec:	18ed      	addgt	r5, r5, r3
 8004fee:	2600      	movs	r6, #0
 8004ff0:	341a      	adds	r4, #26
 8004ff2:	42b5      	cmp	r5, r6
 8004ff4:	d11a      	bne.n	800502c <_printf_common+0xc8>
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e008      	b.n	800500c <_printf_common+0xa8>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	4641      	mov	r1, r8
 8005000:	4638      	mov	r0, r7
 8005002:	47c8      	blx	r9
 8005004:	3001      	adds	r0, #1
 8005006:	d103      	bne.n	8005010 <_printf_common+0xac>
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005010:	3501      	adds	r5, #1
 8005012:	e7c6      	b.n	8004fa2 <_printf_common+0x3e>
 8005014:	18e1      	adds	r1, r4, r3
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	2030      	movs	r0, #48	@ 0x30
 800501a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800501e:	4422      	add	r2, r4
 8005020:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005024:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005028:	3302      	adds	r3, #2
 800502a:	e7c7      	b.n	8004fbc <_printf_common+0x58>
 800502c:	2301      	movs	r3, #1
 800502e:	4622      	mov	r2, r4
 8005030:	4641      	mov	r1, r8
 8005032:	4638      	mov	r0, r7
 8005034:	47c8      	blx	r9
 8005036:	3001      	adds	r0, #1
 8005038:	d0e6      	beq.n	8005008 <_printf_common+0xa4>
 800503a:	3601      	adds	r6, #1
 800503c:	e7d9      	b.n	8004ff2 <_printf_common+0x8e>
	...

08005040 <_printf_i>:
 8005040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	7e0f      	ldrb	r7, [r1, #24]
 8005046:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005048:	2f78      	cmp	r7, #120	@ 0x78
 800504a:	4691      	mov	r9, r2
 800504c:	4680      	mov	r8, r0
 800504e:	460c      	mov	r4, r1
 8005050:	469a      	mov	sl, r3
 8005052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005056:	d807      	bhi.n	8005068 <_printf_i+0x28>
 8005058:	2f62      	cmp	r7, #98	@ 0x62
 800505a:	d80a      	bhi.n	8005072 <_printf_i+0x32>
 800505c:	2f00      	cmp	r7, #0
 800505e:	f000 80d2 	beq.w	8005206 <_printf_i+0x1c6>
 8005062:	2f58      	cmp	r7, #88	@ 0x58
 8005064:	f000 80b9 	beq.w	80051da <_printf_i+0x19a>
 8005068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800506c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005070:	e03a      	b.n	80050e8 <_printf_i+0xa8>
 8005072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005076:	2b15      	cmp	r3, #21
 8005078:	d8f6      	bhi.n	8005068 <_printf_i+0x28>
 800507a:	a101      	add	r1, pc, #4	@ (adr r1, 8005080 <_printf_i+0x40>)
 800507c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050ed 	.word	0x080050ed
 8005088:	08005069 	.word	0x08005069
 800508c:	08005069 	.word	0x08005069
 8005090:	08005069 	.word	0x08005069
 8005094:	08005069 	.word	0x08005069
 8005098:	080050ed 	.word	0x080050ed
 800509c:	08005069 	.word	0x08005069
 80050a0:	08005069 	.word	0x08005069
 80050a4:	08005069 	.word	0x08005069
 80050a8:	08005069 	.word	0x08005069
 80050ac:	080051ed 	.word	0x080051ed
 80050b0:	08005117 	.word	0x08005117
 80050b4:	080051a7 	.word	0x080051a7
 80050b8:	08005069 	.word	0x08005069
 80050bc:	08005069 	.word	0x08005069
 80050c0:	0800520f 	.word	0x0800520f
 80050c4:	08005069 	.word	0x08005069
 80050c8:	08005117 	.word	0x08005117
 80050cc:	08005069 	.word	0x08005069
 80050d0:	08005069 	.word	0x08005069
 80050d4:	080051af 	.word	0x080051af
 80050d8:	6833      	ldr	r3, [r6, #0]
 80050da:	1d1a      	adds	r2, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6032      	str	r2, [r6, #0]
 80050e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050e8:	2301      	movs	r3, #1
 80050ea:	e09d      	b.n	8005228 <_printf_i+0x1e8>
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	6820      	ldr	r0, [r4, #0]
 80050f0:	1d19      	adds	r1, r3, #4
 80050f2:	6031      	str	r1, [r6, #0]
 80050f4:	0606      	lsls	r6, r0, #24
 80050f6:	d501      	bpl.n	80050fc <_printf_i+0xbc>
 80050f8:	681d      	ldr	r5, [r3, #0]
 80050fa:	e003      	b.n	8005104 <_printf_i+0xc4>
 80050fc:	0645      	lsls	r5, r0, #25
 80050fe:	d5fb      	bpl.n	80050f8 <_printf_i+0xb8>
 8005100:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005104:	2d00      	cmp	r5, #0
 8005106:	da03      	bge.n	8005110 <_printf_i+0xd0>
 8005108:	232d      	movs	r3, #45	@ 0x2d
 800510a:	426d      	negs	r5, r5
 800510c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005110:	4859      	ldr	r0, [pc, #356]	@ (8005278 <_printf_i+0x238>)
 8005112:	230a      	movs	r3, #10
 8005114:	e011      	b.n	800513a <_printf_i+0xfa>
 8005116:	6821      	ldr	r1, [r4, #0]
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	0608      	lsls	r0, r1, #24
 800511c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005120:	d402      	bmi.n	8005128 <_printf_i+0xe8>
 8005122:	0649      	lsls	r1, r1, #25
 8005124:	bf48      	it	mi
 8005126:	b2ad      	uxthmi	r5, r5
 8005128:	2f6f      	cmp	r7, #111	@ 0x6f
 800512a:	4853      	ldr	r0, [pc, #332]	@ (8005278 <_printf_i+0x238>)
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	bf14      	ite	ne
 8005130:	230a      	movne	r3, #10
 8005132:	2308      	moveq	r3, #8
 8005134:	2100      	movs	r1, #0
 8005136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800513a:	6866      	ldr	r6, [r4, #4]
 800513c:	60a6      	str	r6, [r4, #8]
 800513e:	2e00      	cmp	r6, #0
 8005140:	bfa2      	ittt	ge
 8005142:	6821      	ldrge	r1, [r4, #0]
 8005144:	f021 0104 	bicge.w	r1, r1, #4
 8005148:	6021      	strge	r1, [r4, #0]
 800514a:	b90d      	cbnz	r5, 8005150 <_printf_i+0x110>
 800514c:	2e00      	cmp	r6, #0
 800514e:	d04b      	beq.n	80051e8 <_printf_i+0x1a8>
 8005150:	4616      	mov	r6, r2
 8005152:	fbb5 f1f3 	udiv	r1, r5, r3
 8005156:	fb03 5711 	mls	r7, r3, r1, r5
 800515a:	5dc7      	ldrb	r7, [r0, r7]
 800515c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005160:	462f      	mov	r7, r5
 8005162:	42bb      	cmp	r3, r7
 8005164:	460d      	mov	r5, r1
 8005166:	d9f4      	bls.n	8005152 <_printf_i+0x112>
 8005168:	2b08      	cmp	r3, #8
 800516a:	d10b      	bne.n	8005184 <_printf_i+0x144>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	07df      	lsls	r7, r3, #31
 8005170:	d508      	bpl.n	8005184 <_printf_i+0x144>
 8005172:	6923      	ldr	r3, [r4, #16]
 8005174:	6861      	ldr	r1, [r4, #4]
 8005176:	4299      	cmp	r1, r3
 8005178:	bfde      	ittt	le
 800517a:	2330      	movle	r3, #48	@ 0x30
 800517c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005180:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005184:	1b92      	subs	r2, r2, r6
 8005186:	6122      	str	r2, [r4, #16]
 8005188:	f8cd a000 	str.w	sl, [sp]
 800518c:	464b      	mov	r3, r9
 800518e:	aa03      	add	r2, sp, #12
 8005190:	4621      	mov	r1, r4
 8005192:	4640      	mov	r0, r8
 8005194:	f7ff fee6 	bl	8004f64 <_printf_common>
 8005198:	3001      	adds	r0, #1
 800519a:	d14a      	bne.n	8005232 <_printf_i+0x1f2>
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	b004      	add	sp, #16
 80051a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	f043 0320 	orr.w	r3, r3, #32
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	4833      	ldr	r0, [pc, #204]	@ (800527c <_printf_i+0x23c>)
 80051b0:	2778      	movs	r7, #120	@ 0x78
 80051b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	6831      	ldr	r1, [r6, #0]
 80051ba:	061f      	lsls	r7, r3, #24
 80051bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80051c0:	d402      	bmi.n	80051c8 <_printf_i+0x188>
 80051c2:	065f      	lsls	r7, r3, #25
 80051c4:	bf48      	it	mi
 80051c6:	b2ad      	uxthmi	r5, r5
 80051c8:	6031      	str	r1, [r6, #0]
 80051ca:	07d9      	lsls	r1, r3, #31
 80051cc:	bf44      	itt	mi
 80051ce:	f043 0320 	orrmi.w	r3, r3, #32
 80051d2:	6023      	strmi	r3, [r4, #0]
 80051d4:	b11d      	cbz	r5, 80051de <_printf_i+0x19e>
 80051d6:	2310      	movs	r3, #16
 80051d8:	e7ac      	b.n	8005134 <_printf_i+0xf4>
 80051da:	4827      	ldr	r0, [pc, #156]	@ (8005278 <_printf_i+0x238>)
 80051dc:	e7e9      	b.n	80051b2 <_printf_i+0x172>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	f023 0320 	bic.w	r3, r3, #32
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	e7f6      	b.n	80051d6 <_printf_i+0x196>
 80051e8:	4616      	mov	r6, r2
 80051ea:	e7bd      	b.n	8005168 <_printf_i+0x128>
 80051ec:	6833      	ldr	r3, [r6, #0]
 80051ee:	6825      	ldr	r5, [r4, #0]
 80051f0:	6961      	ldr	r1, [r4, #20]
 80051f2:	1d18      	adds	r0, r3, #4
 80051f4:	6030      	str	r0, [r6, #0]
 80051f6:	062e      	lsls	r6, r5, #24
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	d501      	bpl.n	8005200 <_printf_i+0x1c0>
 80051fc:	6019      	str	r1, [r3, #0]
 80051fe:	e002      	b.n	8005206 <_printf_i+0x1c6>
 8005200:	0668      	lsls	r0, r5, #25
 8005202:	d5fb      	bpl.n	80051fc <_printf_i+0x1bc>
 8005204:	8019      	strh	r1, [r3, #0]
 8005206:	2300      	movs	r3, #0
 8005208:	6123      	str	r3, [r4, #16]
 800520a:	4616      	mov	r6, r2
 800520c:	e7bc      	b.n	8005188 <_printf_i+0x148>
 800520e:	6833      	ldr	r3, [r6, #0]
 8005210:	1d1a      	adds	r2, r3, #4
 8005212:	6032      	str	r2, [r6, #0]
 8005214:	681e      	ldr	r6, [r3, #0]
 8005216:	6862      	ldr	r2, [r4, #4]
 8005218:	2100      	movs	r1, #0
 800521a:	4630      	mov	r0, r6
 800521c:	f7fa ffe0 	bl	80001e0 <memchr>
 8005220:	b108      	cbz	r0, 8005226 <_printf_i+0x1e6>
 8005222:	1b80      	subs	r0, r0, r6
 8005224:	6060      	str	r0, [r4, #4]
 8005226:	6863      	ldr	r3, [r4, #4]
 8005228:	6123      	str	r3, [r4, #16]
 800522a:	2300      	movs	r3, #0
 800522c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005230:	e7aa      	b.n	8005188 <_printf_i+0x148>
 8005232:	6923      	ldr	r3, [r4, #16]
 8005234:	4632      	mov	r2, r6
 8005236:	4649      	mov	r1, r9
 8005238:	4640      	mov	r0, r8
 800523a:	47d0      	blx	sl
 800523c:	3001      	adds	r0, #1
 800523e:	d0ad      	beq.n	800519c <_printf_i+0x15c>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	079b      	lsls	r3, r3, #30
 8005244:	d413      	bmi.n	800526e <_printf_i+0x22e>
 8005246:	68e0      	ldr	r0, [r4, #12]
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	4298      	cmp	r0, r3
 800524c:	bfb8      	it	lt
 800524e:	4618      	movlt	r0, r3
 8005250:	e7a6      	b.n	80051a0 <_printf_i+0x160>
 8005252:	2301      	movs	r3, #1
 8005254:	4632      	mov	r2, r6
 8005256:	4649      	mov	r1, r9
 8005258:	4640      	mov	r0, r8
 800525a:	47d0      	blx	sl
 800525c:	3001      	adds	r0, #1
 800525e:	d09d      	beq.n	800519c <_printf_i+0x15c>
 8005260:	3501      	adds	r5, #1
 8005262:	68e3      	ldr	r3, [r4, #12]
 8005264:	9903      	ldr	r1, [sp, #12]
 8005266:	1a5b      	subs	r3, r3, r1
 8005268:	42ab      	cmp	r3, r5
 800526a:	dcf2      	bgt.n	8005252 <_printf_i+0x212>
 800526c:	e7eb      	b.n	8005246 <_printf_i+0x206>
 800526e:	2500      	movs	r5, #0
 8005270:	f104 0619 	add.w	r6, r4, #25
 8005274:	e7f5      	b.n	8005262 <_printf_i+0x222>
 8005276:	bf00      	nop
 8005278:	08005445 	.word	0x08005445
 800527c:	08005456 	.word	0x08005456

08005280 <memmove>:
 8005280:	4288      	cmp	r0, r1
 8005282:	b510      	push	{r4, lr}
 8005284:	eb01 0402 	add.w	r4, r1, r2
 8005288:	d902      	bls.n	8005290 <memmove+0x10>
 800528a:	4284      	cmp	r4, r0
 800528c:	4623      	mov	r3, r4
 800528e:	d807      	bhi.n	80052a0 <memmove+0x20>
 8005290:	1e43      	subs	r3, r0, #1
 8005292:	42a1      	cmp	r1, r4
 8005294:	d008      	beq.n	80052a8 <memmove+0x28>
 8005296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800529a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800529e:	e7f8      	b.n	8005292 <memmove+0x12>
 80052a0:	4402      	add	r2, r0
 80052a2:	4601      	mov	r1, r0
 80052a4:	428a      	cmp	r2, r1
 80052a6:	d100      	bne.n	80052aa <memmove+0x2a>
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052b2:	e7f7      	b.n	80052a4 <memmove+0x24>

080052b4 <_sbrk_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d06      	ldr	r5, [pc, #24]	@ (80052d0 <_sbrk_r+0x1c>)
 80052b8:	2300      	movs	r3, #0
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fb fc60 	bl	8000b84 <_sbrk>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_sbrk_r+0x1a>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_sbrk_r+0x1a>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	2000124c 	.word	0x2000124c

080052d4 <_realloc_r>:
 80052d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d8:	4680      	mov	r8, r0
 80052da:	4615      	mov	r5, r2
 80052dc:	460c      	mov	r4, r1
 80052de:	b921      	cbnz	r1, 80052ea <_realloc_r+0x16>
 80052e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052e4:	4611      	mov	r1, r2
 80052e6:	f7ff bc59 	b.w	8004b9c <_malloc_r>
 80052ea:	b92a      	cbnz	r2, 80052f8 <_realloc_r+0x24>
 80052ec:	f7ff fbea 	bl	8004ac4 <_free_r>
 80052f0:	2400      	movs	r4, #0
 80052f2:	4620      	mov	r0, r4
 80052f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f8:	f000 f81a 	bl	8005330 <_malloc_usable_size_r>
 80052fc:	4285      	cmp	r5, r0
 80052fe:	4606      	mov	r6, r0
 8005300:	d802      	bhi.n	8005308 <_realloc_r+0x34>
 8005302:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005306:	d8f4      	bhi.n	80052f2 <_realloc_r+0x1e>
 8005308:	4629      	mov	r1, r5
 800530a:	4640      	mov	r0, r8
 800530c:	f7ff fc46 	bl	8004b9c <_malloc_r>
 8005310:	4607      	mov	r7, r0
 8005312:	2800      	cmp	r0, #0
 8005314:	d0ec      	beq.n	80052f0 <_realloc_r+0x1c>
 8005316:	42b5      	cmp	r5, r6
 8005318:	462a      	mov	r2, r5
 800531a:	4621      	mov	r1, r4
 800531c:	bf28      	it	cs
 800531e:	4632      	movcs	r2, r6
 8005320:	f7ff fbc2 	bl	8004aa8 <memcpy>
 8005324:	4621      	mov	r1, r4
 8005326:	4640      	mov	r0, r8
 8005328:	f7ff fbcc 	bl	8004ac4 <_free_r>
 800532c:	463c      	mov	r4, r7
 800532e:	e7e0      	b.n	80052f2 <_realloc_r+0x1e>

08005330 <_malloc_usable_size_r>:
 8005330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005334:	1f18      	subs	r0, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	bfbc      	itt	lt
 800533a:	580b      	ldrlt	r3, [r1, r0]
 800533c:	18c0      	addlt	r0, r0, r3
 800533e:	4770      	bx	lr

08005340 <_init>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr

0800534c <_fini>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr
