
RTOS_1.0_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005178  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005308  08005308  00006308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f8  080053f8  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080053f8  080053f8  000063f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005400  08005400  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005400  08005400  00006400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005404  08005404  00006404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005408  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  20000060  08005468  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  08005468  00007258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dba  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f91  00000000  00000000  0001ce4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0001fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb8  00000000  00000000  000210d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002227e  00000000  00000000  00021f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d33  00000000  00000000  00044206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1c0a  00000000  00000000  00059f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bb43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d8  00000000  00000000  0012bb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00130f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052f0 	.word	0x080052f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080052f0 	.word	0x080052f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	2000011c 	.word	0x2000011c

080005a4 <send_deftask>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_deftask(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
	 The uint8_t *data pointer is initialised directly to the string literal "Hello from DEFTASK\r\n".
	 strlen((const char *)data) is used to determine the length of the string, excluding the null terminator, and this length is passed to HAL_UART_Transmit.
	 This method avoids the need to explicitly specify the size of an array and ensures that only the characters of the string literal are transmitted without the null terminator.
	 */

	const uint8_t *data = (const uint8_t*) "Hello from DEFTASK\r\n";
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <send_deftask+0x50>)
 80005ac:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, data, strlen((const char*) data), 500);
 80005ae:	6978      	ldr	r0, [r7, #20]
 80005b0:	f7ff fe0e 	bl	80001d0 <strlen>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005bc:	6979      	ldr	r1, [r7, #20]
 80005be:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <send_deftask+0x54>)
 80005c0:	f002 fa44 	bl	8002a4c <HAL_UART_Transmit>

	//The following code transmits the value of the variable number via the UART
	char buffer[20]; // buffer is an array of characters to hold the string representation of the number
	sprintf(buffer, "%lu\r\n", number); // Convert number to string and stores in the array called buffer
 80005c4:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <send_deftask+0x58>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	463b      	mov	r3, r7
 80005ca:	490d      	ldr	r1, [pc, #52]	@ (8000600 <send_deftask+0x5c>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 f999 	bl	8004904 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer),
 80005d2:	463b      	mov	r3, r7
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fdfb 	bl	80001d0 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4639      	mov	r1, r7
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <send_deftask+0x54>)
 80005e6:	f002 fa31 	bl	8002a4c <HAL_UART_Transmit>
	HAL_MAX_DELAY); // Transmit the string via UART
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08005308 	.word	0x08005308
 80005f8:	2000031c 	.word	0x2000031c
 80005fc:	200003ac 	.word	0x200003ac
 8000600:	08005320 	.word	0x08005320

08000604 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b08e      	sub	sp, #56	@ 0x38
 8000608:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060a:	f000 fb02 	bl	8000c12 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800060e:	f000 f835 	bl	800067c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000612:	f000 f8b5 	bl	8000780 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000616:	f000 f883 	bl	8000720 <MX_USART2_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <main+0x68>)
 800061c:	f107 041c 	add.w	r4, r7, #28
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fef3 	bl	8003420 <osThreadCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0c      	ldr	r2, [pc, #48]	@ (8000670 <main+0x6c>)
 800063e:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task2 */
	osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <main+0x70>)
 8000642:	463c      	mov	r4, r7
 8000644:	461d      	mov	r5, r3
 8000646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000652:	463b      	mov	r3, r7
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fee2 	bl	8003420 <osThreadCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	4a06      	ldr	r2, [pc, #24]	@ (8000678 <main+0x74>)
 8000660:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000662:	f002 fed6 	bl	8003412 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <main+0x62>
 800066a:	bf00      	nop
 800066c:	08005334 	.word	0x08005334
 8000670:	200003a4 	.word	0x200003a4
 8000674:	08005358 	.word	0x08005358
 8000678:	200003a8 	.word	0x200003a8

0800067c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	@ 0x58
 8000680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	@ 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 f95a 	bl	8004944 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800069e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a2:	f000 fd7b 	bl	800119c <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80006ac:	f000 f914 	bl	80008d8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fdb2 	bl	8001248 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x72>
		Error_Handler();
 80006ea:	f000 f8f5 	bl	80008d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000702:	463b      	mov	r3, r7
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f9b2 	bl	8001a70 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
		Error_Handler();
 8000712:	f000 f8e1 	bl	80008d8 <Error_Handler>
	}
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	@ 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	@ (800077c <MX_USART2_UART_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000764:	f002 f924 	bl	80029b0 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800076e:	f000 f8b3 	bl	80008d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000031c 	.word	0x2000031c
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <MX_GPIO_Init+0xb8>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a27      	ldr	r2, [pc, #156]	@ (8000838 <MX_GPIO_Init+0xb8>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <MX_GPIO_Init+0xb8>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <MX_GPIO_Init+0xb8>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <MX_GPIO_Init+0xb8>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <MX_GPIO_Init+0xb8>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_GPIO_Init+0xb8>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <MX_GPIO_Init+0xb8>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_GPIO_Init+0xb8>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2102      	movs	r1, #2
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f000 fc99 	bl	800111c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4813      	ldr	r0, [pc, #76]	@ (800083c <MX_GPIO_Init+0xbc>)
 80007f0:	f000 fc94 	bl	800111c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007f4:	2302      	movs	r3, #2
 80007f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080e:	f000 fb1b 	bl	8000e48 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_GPIO_Init+0xbc>)
 800082a:	f000 fb0d 	bl	8000e48 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400

08000840 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(PORTA, LED_Red);
 8000848:	2102      	movs	r1, #2
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f000 fc7d 	bl	800114c <HAL_GPIO_TogglePin>
		osDelay(300); //better than HAL_Delay(500)when using RTOS
 8000852:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000856:	f002 fe2f 	bl	80034b8 <osDelay>
		HAL_GPIO_TogglePin(PORTA, LED_Red);
 800085a:	2102      	movs	r1, #2
 800085c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000860:	f000 fc74 	bl	800114c <HAL_GPIO_TogglePin>
		osDelay(700); //better than HAL_Delay(1000) when using RTOS
 8000864:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000868:	f002 fe26 	bl	80034b8 <osDelay>

		send_deftask(); //call function to transmit text and numeric data
 800086c:	f7ff fe9a 	bl	80005a4 <send_deftask>
		number++; //increment the variable i.e. number
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <StartDefaultTask+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a02      	ldr	r2, [pc, #8]	@ (8000880 <StartDefaultTask+0x40>)
 8000878:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(PORTA, LED_Red);
 800087a:	bf00      	nop
 800087c:	e7e4      	b.n	8000848 <StartDefaultTask+0x8>
 800087e:	bf00      	nop
 8000880:	200003ac 	.word	0x200003ac

08000884 <Task2_init>:
 * @brief Function implementing the Task2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task2_init */
void Task2_init(void const *argument) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task2_init */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(PORTB, LED_Green);
 800088c:	2108      	movs	r1, #8
 800088e:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <Task2_init+0x2c>)
 8000890:	f000 fc5c 	bl	800114c <HAL_GPIO_TogglePin>
		osDelay(500); //better than HAL_Delay(500)when using RTOS
 8000894:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000898:	f002 fe0e 	bl	80034b8 <osDelay>
		HAL_GPIO_TogglePin(PORTB, LED_Green);
 800089c:	2108      	movs	r1, #8
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <Task2_init+0x2c>)
 80008a0:	f000 fc54 	bl	800114c <HAL_GPIO_TogglePin>
		osDelay(1000); //better than HAL_Delay(1000) when using RTOS
 80008a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a8:	f002 fe06 	bl	80034b8 <osDelay>
		HAL_GPIO_TogglePin(PORTB, LED_Green);
 80008ac:	bf00      	nop
 80008ae:	e7ed      	b.n	800088c <Task2_init+0x8>
 80008b0:	48000400 	.word	0x48000400

080008b4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008c6:	f000 f9bd 	bl	8000c44 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_MspInit+0x4c>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <HAL_MspInit+0x4c>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	@ 0x58
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <HAL_MspInit+0x4c>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	210f      	movs	r1, #15
 800091e:	f06f 0001 	mvn.w	r0, #1
 8000922:	f000 fa67 	bl	8000df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b09e      	sub	sp, #120	@ 0x78
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2254      	movs	r2, #84	@ 0x54
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f003 fff5 	bl	8004944 <memset>
  if(huart->Instance==USART2)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a28      	ldr	r2, [pc, #160]	@ (8000a00 <HAL_UART_MspInit+0xcc>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d148      	bne.n	80009f6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000968:	2300      	movs	r3, #0
 800096a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fad3 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800097c:	f7ff ffac 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000980:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <HAL_UART_MspInit+0xd0>)
 8000982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000984:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <HAL_UART_MspInit+0xd0>)
 8000986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800098a:	6593      	str	r3, [r2, #88]	@ 0x58
 800098c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <HAL_UART_MspInit+0xd0>)
 800098e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <HAL_UART_MspInit+0xd0>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099c:	4a19      	ldr	r2, [pc, #100]	@ (8000a04 <HAL_UART_MspInit+0xd0>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <HAL_UART_MspInit+0xd0>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009b0:	2304      	movs	r3, #4
 80009b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c0:	2307      	movs	r3, #7
 80009c2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009c8:	4619      	mov	r1, r3
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ce:	f000 fa3b 	bl	8000e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009e4:	2303      	movs	r3, #3
 80009e6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f000 fa29 	bl	8000e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3778      	adds	r7, #120	@ 0x78
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	@ 0x30
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <HAL_InitTick+0xc8>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad0 <HAL_InitTick+0xc8>)
 8000a1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <HAL_InitTick+0xc8>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a2e:	f107 020c 	add.w	r2, r7, #12
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 f9dd 	bl	8001df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a3e:	f001 f9c5 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8000a42:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a46:	4a23      	ldr	r2, [pc, #140]	@ (8000ad4 <HAL_InitTick+0xcc>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	0c9b      	lsrs	r3, r3, #18
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <HAL_InitTick+0xd0>)
 8000a54:	4a21      	ldr	r2, [pc, #132]	@ (8000adc <HAL_InitTick+0xd4>)
 8000a56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <HAL_InitTick+0xd0>)
 8000a5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a5e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a60:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad8 <HAL_InitTick+0xd0>)
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <HAL_InitTick+0xd0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <HAL_InitTick+0xd0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <HAL_InitTick+0xd0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a78:	4817      	ldr	r0, [pc, #92]	@ (8000ad8 <HAL_InitTick+0xd0>)
 8000a7a:	f001 fd37 	bl	80024ec <HAL_TIM_Base_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d11b      	bne.n	8000ac4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a8c:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <HAL_InitTick+0xd0>)
 8000a8e:	f001 fd8f 	bl	80025b0 <HAL_TIM_Base_Start_IT>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d111      	bne.n	8000ac4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000aa0:	2019      	movs	r0, #25
 8000aa2:	f000 f9c3 	bl	8000e2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d808      	bhi.n	8000abe <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2019      	movs	r0, #25
 8000ab2:	f000 f99f 	bl	8000df4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_InitTick+0xd8>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	e002      	b.n	8000ac4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3730      	adds	r7, #48	@ 0x30
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	431bde83 	.word	0x431bde83
 8000ad8:	200003b0 	.word	0x200003b0
 8000adc:	40012c00 	.word	0x40012c00
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b22:	f001 fd99 	bl	8002658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200003b0 	.word	0x200003b0

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f003 ff4e 	bl	8004a00 <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20010000 	.word	0x20010000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	200003fc 	.word	0x200003fc
 8000b98:	20001258 	.word	0x20001258

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff ffea 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f003 ff0d 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fd07 	bl	8000604 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c04:	08005408 	.word	0x08005408
  ldr r2, =_sbss
 8000c08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c0c:	20001258 	.word	0x20001258

08000c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>

08000c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f8de 	bl	8000dde <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c22:	200f      	movs	r0, #15
 8000c24:	f7ff fef0 	bl	8000a08 <HAL_InitTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	e001      	b.n	8000c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c34:	f7ff fe56 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000400 	.word	0x20000400

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000400 	.word	0x20000400

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	@ (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	@ (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	@ (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	@ 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff4c 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e06:	f7ff ff61 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f7ff ffb1 	bl	8000d78 <NVIC_EncodePriority>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff80 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff54 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	e148      	b.n	80010ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 813a 	beq.w	80010e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d005      	beq.n	8000e88 <HAL_GPIO_Init+0x40>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d130      	bne.n	8000eea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	f003 0201 	and.w	r2, r3, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d017      	beq.n	8000f26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d123      	bne.n	8000f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	6939      	ldr	r1, [r7, #16]
 8000f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0203 	and.w	r2, r3, #3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8094 	beq.w	80010e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	4b52      	ldr	r3, [pc, #328]	@ (8001108 <HAL_GPIO_Init+0x2c0>)
 8000fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc0:	4a51      	ldr	r2, [pc, #324]	@ (8001108 <HAL_GPIO_Init+0x2c0>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8001108 <HAL_GPIO_Init+0x2c0>)
 8000fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd4:	4a4d      	ldr	r2, [pc, #308]	@ (800110c <HAL_GPIO_Init+0x2c4>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1d4>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a43      	ldr	r2, [pc, #268]	@ (8001110 <HAL_GPIO_Init+0x2c8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1d0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a42      	ldr	r2, [pc, #264]	@ (8001114 <HAL_GPIO_Init+0x2cc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1cc>
 8001010:	2302      	movs	r3, #2
 8001012:	e004      	b.n	800101e <HAL_GPIO_Init+0x1d6>
 8001014:	2307      	movs	r3, #7
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x1d6>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <HAL_GPIO_Init+0x1d6>
 800101c:	2300      	movs	r3, #0
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	f002 0203 	and.w	r2, r2, #3
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	4093      	lsls	r3, r2
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800102e:	4937      	ldr	r1, [pc, #220]	@ (800110c <HAL_GPIO_Init+0x2c4>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800103c:	4b36      	ldr	r3, [pc, #216]	@ (8001118 <HAL_GPIO_Init+0x2d0>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001060:	4a2d      	ldr	r2, [pc, #180]	@ (8001118 <HAL_GPIO_Init+0x2d0>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001066:	4b2c      	ldr	r3, [pc, #176]	@ (8001118 <HAL_GPIO_Init+0x2d0>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800108a:	4a23      	ldr	r2, [pc, #140]	@ (8001118 <HAL_GPIO_Init+0x2d0>)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001090:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <HAL_GPIO_Init+0x2d0>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010b4:	4a18      	ldr	r2, [pc, #96]	@ (8001118 <HAL_GPIO_Init+0x2d0>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <HAL_GPIO_Init+0x2d0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <HAL_GPIO_Init+0x2d0>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f47f aeaf 	bne.w	8000e58 <HAL_GPIO_Init+0x10>
  }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000
 8001110:	48000400 	.word	0x48000400
 8001114:	48000800 	.word	0x48000800
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e002      	b.n	8001140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43d9      	mvns	r1, r3
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	400b      	ands	r3, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <HAL_PWREx_GetVoltageRange+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40007000 	.word	0x40007000

0800119c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011aa:	d130      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b8:	d038      	beq.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c2:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2232      	movs	r2, #50	@ 0x32
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	0c9b      	lsrs	r3, r3, #18
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e0:	e002      	b.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f4:	d102      	bne.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f2      	bne.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001208:	d110      	bne.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e00f      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121a:	d007      	beq.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001224:	4a05      	ldr	r2, [pc, #20]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	f000 bc02 	b.w	8001a60 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125c:	4b96      	ldr	r3, [pc, #600]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001266:	4b94      	ldr	r3, [pc, #592]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80e4 	beq.w	8001446 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <HAL_RCC_OscConfig+0x4c>
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b0c      	cmp	r3, #12
 8001288:	f040 808b 	bne.w	80013a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b01      	cmp	r3, #1
 8001290:	f040 8087 	bne.w	80013a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001294:	4b88      	ldr	r3, [pc, #544]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_OscConfig+0x64>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e3d9      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	4b81      	ldr	r3, [pc, #516]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <HAL_RCC_OscConfig+0x7e>
 80012bc:	4b7e      	ldr	r3, [pc, #504]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012c4:	e005      	b.n	80012d2 <HAL_RCC_OscConfig+0x8a>
 80012c6:	4b7c      	ldr	r3, [pc, #496]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d223      	bcs.n	800131e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fdbe 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e3ba      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ea:	4b73      	ldr	r3, [pc, #460]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a72      	ldr	r2, [pc, #456]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b70      	ldr	r3, [pc, #448]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	496d      	ldr	r1, [pc, #436]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001308:	4b6b      	ldr	r3, [pc, #428]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	4968      	ldr	r1, [pc, #416]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
 800131c:	e025      	b.n	800136a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131e:	4b66      	ldr	r3, [pc, #408]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a65      	ldr	r2, [pc, #404]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b63      	ldr	r3, [pc, #396]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4960      	ldr	r1, [pc, #384]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133c:	4b5e      	ldr	r3, [pc, #376]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	495b      	ldr	r1, [pc, #364]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fd7e 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e37a      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800136a:	f000 fc81 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 800136e:	4602      	mov	r2, r0
 8001370:	4b51      	ldr	r3, [pc, #324]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	4950      	ldr	r1, [pc, #320]	@ (80014bc <HAL_RCC_OscConfig+0x274>)
 800137c:	5ccb      	ldrb	r3, [r1, r3]
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	fa22 f303 	lsr.w	r3, r2, r3
 8001386:	4a4e      	ldr	r2, [pc, #312]	@ (80014c0 <HAL_RCC_OscConfig+0x278>)
 8001388:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800138a:	4b4e      	ldr	r3, [pc, #312]	@ (80014c4 <HAL_RCC_OscConfig+0x27c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fb3a 	bl	8000a08 <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d052      	beq.n	8001444 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	e35e      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d032      	beq.n	8001410 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013aa:	4b43      	ldr	r3, [pc, #268]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a42      	ldr	r2, [pc, #264]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fc59 	bl	8000c6c <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013be:	f7ff fc55 	bl	8000c6c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e347      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013d0:	4b39      	ldr	r3, [pc, #228]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013dc:	4b36      	ldr	r3, [pc, #216]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a35      	ldr	r2, [pc, #212]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4930      	ldr	r1, [pc, #192]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013fa:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	492b      	ldr	r1, [pc, #172]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
 800140e:	e01a      	b.n	8001446 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001410:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800141c:	f7ff fc26 	bl	8000c6c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001424:	f7ff fc22 	bl	8000c6c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e314      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x1dc>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d073      	beq.n	800153a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b08      	cmp	r3, #8
 8001456:	d005      	beq.n	8001464 <HAL_RCC_OscConfig+0x21c>
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d10e      	bne.n	800147c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d10b      	bne.n	800147c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d063      	beq.n	8001538 <HAL_RCC_OscConfig+0x2f0>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d15f      	bne.n	8001538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e2f1      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001484:	d106      	bne.n	8001494 <HAL_RCC_OscConfig+0x24c>
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e025      	b.n	80014e0 <HAL_RCC_OscConfig+0x298>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800149c:	d114      	bne.n	80014c8 <HAL_RCC_OscConfig+0x280>
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a02      	ldr	r2, [pc, #8]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e013      	b.n	80014e0 <HAL_RCC_OscConfig+0x298>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	0800537c 	.word	0x0800537c
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004
 80014c8:	4ba0      	ldr	r3, [pc, #640]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a9f      	ldr	r2, [pc, #636]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b9d      	ldr	r3, [pc, #628]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a9c      	ldr	r2, [pc, #624]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fbc0 	bl	8000c6c <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fbbc 	bl	8000c6c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	@ 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e2ae      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001502:	4b92      	ldr	r3, [pc, #584]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2a8>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fbac 	bl	8000c6c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fba8 	bl	8000c6c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	@ 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e29a      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152a:	4b88      	ldr	r3, [pc, #544]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d0>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d060      	beq.n	8001608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x310>
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d119      	bne.n	8001586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d116      	bne.n	8001586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001558:	4b7c      	ldr	r3, [pc, #496]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x328>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e277      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b76      	ldr	r3, [pc, #472]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	4973      	ldr	r1, [pc, #460]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001584:	e040      	b.n	8001608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d023      	beq.n	80015d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158e:	4b6f      	ldr	r3, [pc, #444]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6e      	ldr	r2, [pc, #440]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fb67 	bl	8000c6c <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fb63 	bl	8000c6c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e255      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b4:	4b65      	ldr	r3, [pc, #404]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b62      	ldr	r3, [pc, #392]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	495f      	ldr	r1, [pc, #380]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	e018      	b.n	8001608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a5c      	ldr	r2, [pc, #368]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb43 	bl	8000c6c <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff fb3f 	bl	8000c6c <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e231      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fc:	4b53      	ldr	r3, [pc, #332]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d03c      	beq.n	800168e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01c      	beq.n	8001656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161c:	4b4b      	ldr	r3, [pc, #300]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001622:	4a4a      	ldr	r2, [pc, #296]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fb1e 	bl	8000c6c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fb1a 	bl	8000c6c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e20c      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ef      	beq.n	8001634 <HAL_RCC_OscConfig+0x3ec>
 8001654:	e01b      	b.n	800168e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001656:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165c:	4a3b      	ldr	r2, [pc, #236]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff fb01 	bl	8000c6c <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fafd 	bl	8000c6c <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1ef      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001680:	4b32      	ldr	r3, [pc, #200]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1ef      	bne.n	800166e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80a6 	beq.w	80017e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10d      	bne.n	80016c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	4a26      	ldr	r2, [pc, #152]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c4:	2301      	movs	r3, #1
 80016c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d118      	bne.n	8001706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fac4 	bl	8000c6c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff fac0 	bl	8000c6c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1b2      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_RCC_OscConfig+0x4d8>
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171e:	e029      	b.n	8001774 <HAL_RCC_OscConfig+0x52c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d115      	bne.n	8001754 <HAL_RCC_OscConfig+0x50c>
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172e:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173e:	4a03      	ldr	r2, [pc, #12]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001748:	e014      	b.n	8001774 <HAL_RCC_OscConfig+0x52c>
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	40007000 	.word	0x40007000
 8001754:	4b9a      	ldr	r3, [pc, #616]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175a:	4a99      	ldr	r2, [pc, #612]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001764:	4b96      	ldr	r3, [pc, #600]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176a:	4a95      	ldr	r2, [pc, #596]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d016      	beq.n	80017aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fa76 	bl	8000c6c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fa72 	bl	8000c6c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e162      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179a:	4b89      	ldr	r3, [pc, #548]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0ed      	beq.n	8001784 <HAL_RCC_OscConfig+0x53c>
 80017a8:	e015      	b.n	80017d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fa5f 	bl	8000c6c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fa5b 	bl	8000c6c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e14b      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c8:	4b7d      	ldr	r3, [pc, #500]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ed      	bne.n	80017b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b78      	ldr	r3, [pc, #480]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	4a77      	ldr	r2, [pc, #476]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03c      	beq.n	800186e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01c      	beq.n	8001836 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017fc:	4b70      	ldr	r3, [pc, #448]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 80017fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001802:	4a6f      	ldr	r2, [pc, #444]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fa2e 	bl	8000c6c <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001814:	f7ff fa2a 	bl	8000c6c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e11c      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001828:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ef      	beq.n	8001814 <HAL_RCC_OscConfig+0x5cc>
 8001834:	e01b      	b.n	800186e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001836:	4b62      	ldr	r3, [pc, #392]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001838:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800183c:	4a60      	ldr	r2, [pc, #384]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fa11 	bl	8000c6c <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800184e:	f7ff fa0d 	bl	8000c6c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0ff      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001860:	4b57      	ldr	r3, [pc, #348]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001862:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ef      	bne.n	800184e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80f3 	beq.w	8001a5e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187c:	2b02      	cmp	r3, #2
 800187e:	f040 80c9 	bne.w	8001a14 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001882:	4b4f      	ldr	r3, [pc, #316]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0203 	and.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001892:	429a      	cmp	r2, r3
 8001894:	d12c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	3b01      	subs	r3, #1
 80018a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d123      	bne.n	80018f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d11b      	bne.n	80018f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d113      	bne.n	80018f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	3b01      	subs	r3, #1
 80018d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d109      	bne.n	80018f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d06b      	beq.n	80019c8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d062      	beq.n	80019bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018f6:	4b32      	ldr	r3, [pc, #200]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0ac      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001906:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a2d      	ldr	r2, [pc, #180]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800190c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001910:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001912:	f7ff f9ab 	bl	8000c6c <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191a:	f7ff f9a7 	bl	8000c6c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e099      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192c:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f0      	bne.n	800191a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001938:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <HAL_RCC_OscConfig+0x77c>)
 800193e:	4013      	ands	r3, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001948:	3a01      	subs	r2, #1
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	4311      	orrs	r1, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001952:	0212      	lsls	r2, r2, #8
 8001954:	4311      	orrs	r1, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800195a:	0852      	lsrs	r2, r2, #1
 800195c:	3a01      	subs	r2, #1
 800195e:	0552      	lsls	r2, r2, #21
 8001960:	4311      	orrs	r1, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001966:	0852      	lsrs	r2, r2, #1
 8001968:	3a01      	subs	r2, #1
 800196a:	0652      	lsls	r2, r2, #25
 800196c:	4311      	orrs	r1, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001972:	06d2      	lsls	r2, r2, #27
 8001974:	430a      	orrs	r2, r1
 8001976:	4912      	ldr	r1, [pc, #72]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0f      	ldr	r2, [pc, #60]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a0c      	ldr	r2, [pc, #48]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001994:	f7ff f96a 	bl	8000c6c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f966 	bl	8000c6c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e058      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <HAL_RCC_OscConfig+0x778>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ba:	e050      	b.n	8001a5e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e04f      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
 80019c0:	40021000 	.word	0x40021000
 80019c4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c8:	4b27      	ldr	r3, [pc, #156]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d144      	bne.n	8001a5e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a23      	ldr	r2, [pc, #140]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 80019da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a20      	ldr	r2, [pc, #128]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019ec:	f7ff f93e 	bl	8000c6c <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f93a 	bl	8000c6c <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e02c      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x7ac>
 8001a12:	e024      	b.n	8001a5e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d01f      	beq.n	8001a5a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 8001a20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff f921 	bl	8000c6c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff f91d 	bl	8000c6c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e00f      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4905      	ldr	r1, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x820>)
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_OscConfig+0x824>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e001      	b.n	8001a5e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	feeefffc 	.word	0xfeeefffc

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0e7      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b75      	ldr	r3, [pc, #468]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b72      	ldr	r3, [pc, #456]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4970      	ldr	r1, [pc, #448]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cf      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b66      	ldr	r3, [pc, #408]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4960      	ldr	r1, [pc, #384]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d04c      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d121      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0a6      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0e:	4b54      	ldr	r3, [pc, #336]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e09a      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b26:	4b4e      	ldr	r3, [pc, #312]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e08e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b36:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e086      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b46      	ldr	r3, [pc, #280]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4943      	ldr	r1, [pc, #268]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff f888 	bl	8000c6c <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f884 	bl	8000c6c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e06e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d208      	bcs.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	492b      	ldr	r1, [pc, #172]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d210      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 0207 	bic.w	r2, r3, #7
 8001bcc:	4923      	ldr	r1, [pc, #140]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e036      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4918      	ldr	r1, [pc, #96]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4910      	ldr	r1, [pc, #64]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c24:	f000 f824 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	490b      	ldr	r1, [pc, #44]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f4>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1fc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fedd 	bl	8000a08 <HAL_InitTick>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	0800537c 	.word	0x0800537c
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c88:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d121      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d11e      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca4:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	e004      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d134      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d003      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xac>
 8001d14:	e005      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d18:	617b      	str	r3, [r7, #20]
      break;
 8001d1a:	e005      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e002      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	fb03 f202 	mul.w	r2, r3, r2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	0e5b      	lsrs	r3, r3, #25
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d68:	69bb      	ldr	r3, [r7, #24]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08005394 	.word	0x08005394
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200

08001d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4904      	ldr	r1, [pc, #16]	@ (8001dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	0800538c 	.word	0x0800538c

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd0:	f7ff ffda 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0adb      	lsrs	r3, r3, #11
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4904      	ldr	r1, [pc, #16]	@ (8001df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	0800538c 	.word	0x0800538c

08001df8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	220f      	movs	r2, #15
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e3a:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <HAL_RCC_GetClockConfig+0x60>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0207 	and.w	r2, r3, #7
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	601a      	str	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40022000 	.word	0x40022000

08001e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e74:	f7ff f984 	bl	8001180 <HAL_PWREx_GetVoltageRange>
 8001e78:	6178      	str	r0, [r7, #20]
 8001e7a:	e014      	b.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	4a24      	ldr	r2, [pc, #144]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e88:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e94:	f7ff f974 	bl	8001180 <HAL_PWREx_GetVoltageRange>
 8001e98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eac:	d10b      	bne.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	@ 0x80
 8001eb2:	d919      	bls.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eb8:	d902      	bls.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e013      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e010      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	@ 0x80
 8001eca:	d902      	bls.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ecc:	2303      	movs	r3, #3
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e00a      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	@ 0x80
 8001ed6:	d102      	bne.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed8:	2302      	movs	r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e004      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b70      	cmp	r3, #112	@ 0x70
 8001ee2:	d101      	bne.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 0207 	bic.w	r2, r3, #7
 8001ef0:	4909      	ldr	r1, [pc, #36]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef8:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f24:	2300      	movs	r3, #0
 8001f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f28:	2300      	movs	r3, #0
 8001f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d031      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f40:	d01a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f46:	d814      	bhi.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f50:	d10f      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f52:	4b5d      	ldr	r3, [pc, #372]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	4a5c      	ldr	r2, [pc, #368]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5e:	e00c      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3304      	adds	r3, #4
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f9ce 	bl	8002308 <RCCEx_PLLSAI1_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f70:	e003      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	74fb      	strb	r3, [r7, #19]
      break;
 8001f76:	e000      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10b      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f80:	4b51      	ldr	r3, [pc, #324]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8e:	494e      	ldr	r1, [pc, #312]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f96:	e001      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 809e 	beq.w	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fae:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	4a3f      	ldr	r2, [pc, #252]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a39      	ldr	r2, [pc, #228]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fec:	f7fe fe3e 	bl	8000c6c <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ff2:	e009      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7fe fe3a 	bl	8000c6c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d902      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	74fb      	strb	r3, [r7, #19]
        break;
 8002006:	e005      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002008:	4b30      	ldr	r3, [pc, #192]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ef      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d15a      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800201a:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002020:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002024:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01e      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	429a      	cmp	r2, r3
 8002034:	d019      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002036:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002040:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002048:	4a1f      	ldr	r2, [pc, #124]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002052:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002058:	4a1b      	ldr	r2, [pc, #108]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800205e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002062:	4a19      	ldr	r2, [pc, #100]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d016      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe fdfa 	bl	8000c6c <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	e00b      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7fe fdf6 	bl	8000c6c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d902      	bls.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	74fb      	strb	r3, [r7, #19]
            break;
 8002092:	e006      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002094:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0ec      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10b      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a8:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b6:	4904      	ldr	r1, [pc, #16]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	74bb      	strb	r3, [r7, #18]
 80020c4:	e006      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d4:	7c7b      	ldrb	r3, [r7, #17]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020da:	4b8a      	ldr	r3, [pc, #552]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	4a89      	ldr	r2, [pc, #548]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f2:	4b84      	ldr	r3, [pc, #528]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	f023 0203 	bic.w	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4980      	ldr	r1, [pc, #512]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002114:	4b7b      	ldr	r3, [pc, #492]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	f023 020c 	bic.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	4978      	ldr	r1, [pc, #480]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002136:	4b73      	ldr	r3, [pc, #460]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	496f      	ldr	r1, [pc, #444]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002158:	4b6a      	ldr	r3, [pc, #424]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002166:	4967      	ldr	r1, [pc, #412]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800217a:	4b62      	ldr	r3, [pc, #392]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002180:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	495e      	ldr	r1, [pc, #376]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219c:	4b59      	ldr	r3, [pc, #356]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	4956      	ldr	r1, [pc, #344]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021be:	4b51      	ldr	r3, [pc, #324]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021cc:	494d      	ldr	r1, [pc, #308]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d028      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e0:	4b48      	ldr	r3, [pc, #288]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	4945      	ldr	r1, [pc, #276]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021fe:	d106      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002200:	4b40      	ldr	r3, [pc, #256]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a3f      	ldr	r2, [pc, #252]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800220a:	60d3      	str	r3, [r2, #12]
 800220c:	e011      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002216:	d10c      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	2101      	movs	r1, #1
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f872 	bl	8002308 <RCCEx_PLLSAI1_Config>
 8002224:	4603      	mov	r3, r0
 8002226:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800222e:	7cfb      	ldrb	r3, [r7, #19]
 8002230:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d028      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800223e:	4b31      	ldr	r3, [pc, #196]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002244:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	492d      	ldr	r1, [pc, #180]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800225c:	d106      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800225e:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4a28      	ldr	r2, [pc, #160]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002268:	60d3      	str	r3, [r2, #12]
 800226a:	e011      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002274:	d10c      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f843 	bl	8002308 <RCCEx_PLLSAI1_Config>
 8002282:	4603      	mov	r3, r0
 8002284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01c      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800229c:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022aa:	4916      	ldr	r1, [pc, #88]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3304      	adds	r3, #4
 80022c0:	2102      	movs	r1, #2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f820 	bl	8002308 <RCCEx_PLLSAI1_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80022d2:	7cfb      	ldrb	r3, [r7, #19]
 80022d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022e2:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f0:	4904      	ldr	r1, [pc, #16]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002316:	4b74      	ldr	r3, [pc, #464]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d018      	beq.n	8002354 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002322:	4b71      	ldr	r3, [pc, #452]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0203 	and.w	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d10d      	bne.n	800234e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
       ||
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800233a:	4b6b      	ldr	r3, [pc, #428]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
       ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d047      	beq.n	80023de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	e044      	b.n	80023de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d018      	beq.n	800238e <RCCEx_PLLSAI1_Config+0x86>
 800235c:	2b03      	cmp	r3, #3
 800235e:	d825      	bhi.n	80023ac <RCCEx_PLLSAI1_Config+0xa4>
 8002360:	2b01      	cmp	r3, #1
 8002362:	d002      	beq.n	800236a <RCCEx_PLLSAI1_Config+0x62>
 8002364:	2b02      	cmp	r3, #2
 8002366:	d009      	beq.n	800237c <RCCEx_PLLSAI1_Config+0x74>
 8002368:	e020      	b.n	80023ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800236a:	4b5f      	ldr	r3, [pc, #380]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11d      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237a:	e01a      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800237c:	4b5a      	ldr	r3, [pc, #360]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d116      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238c:	e013      	b.n	80023b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800238e:	4b56      	ldr	r3, [pc, #344]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10f      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800239a:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023aa:	e006      	b.n	80023ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      break;
 80023b0:	e004      	b.n	80023bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b2:	bf00      	nop
 80023b4:	e002      	b.n	80023bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b6:	bf00      	nop
 80023b8:	e000      	b.n	80023bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023c2:	4b49      	ldr	r3, [pc, #292]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	430b      	orrs	r3, r1
 80023d8:	4943      	ldr	r1, [pc, #268]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d17c      	bne.n	80024de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023e4:	4b40      	ldr	r3, [pc, #256]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a3f      	ldr	r2, [pc, #252]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f0:	f7fe fc3c 	bl	8000c6c <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023f6:	e009      	b.n	800240c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f8:	f7fe fc38 	bl	8000c6c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d902      	bls.n	800240c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	73fb      	strb	r3, [r7, #15]
        break;
 800240a:	e005      	b.n	8002418 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800240c:	4b36      	ldr	r3, [pc, #216]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ef      	bne.n	80023f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d15f      	bne.n	80024de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d110      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002424:	4b30      	ldr	r3, [pc, #192]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800242c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6892      	ldr	r2, [r2, #8]
 8002434:	0211      	lsls	r1, r2, #8
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68d2      	ldr	r2, [r2, #12]
 800243a:	06d2      	lsls	r2, r2, #27
 800243c:	430a      	orrs	r2, r1
 800243e:	492a      	ldr	r1, [pc, #168]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002440:	4313      	orrs	r3, r2
 8002442:	610b      	str	r3, [r1, #16]
 8002444:	e027      	b.n	8002496 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d112      	bne.n	8002472 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800244c:	4b26      	ldr	r3, [pc, #152]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002454:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6892      	ldr	r2, [r2, #8]
 800245c:	0211      	lsls	r1, r2, #8
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6912      	ldr	r2, [r2, #16]
 8002462:	0852      	lsrs	r2, r2, #1
 8002464:	3a01      	subs	r2, #1
 8002466:	0552      	lsls	r2, r2, #21
 8002468:	430a      	orrs	r2, r1
 800246a:	491f      	ldr	r1, [pc, #124]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	610b      	str	r3, [r1, #16]
 8002470:	e011      	b.n	8002496 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002472:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800247a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6892      	ldr	r2, [r2, #8]
 8002482:	0211      	lsls	r1, r2, #8
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6952      	ldr	r2, [r2, #20]
 8002488:	0852      	lsrs	r2, r2, #1
 800248a:	3a01      	subs	r2, #1
 800248c:	0652      	lsls	r2, r2, #25
 800248e:	430a      	orrs	r2, r1
 8002490:	4915      	ldr	r1, [pc, #84]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002492:	4313      	orrs	r3, r2
 8002494:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002496:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a13      	ldr	r2, [pc, #76]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800249c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fbe3 	bl	8000c6c <HAL_GetTick>
 80024a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a8:	e009      	b.n	80024be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024aa:	f7fe fbdf 	bl	8000c6c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d902      	bls.n	80024be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	73fb      	strb	r3, [r7, #15]
          break;
 80024bc:	e005      	b.n	80024ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ef      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4903      	ldr	r1, [pc, #12]	@ (80024e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000

080024ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e049      	b.n	8002592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f841 	bl	800259a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f000 f9be 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d001      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e03b      	b.n	8002640 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a19      	ldr	r2, [pc, #100]	@ (800264c <HAL_TIM_Base_Start_IT+0x9c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d009      	beq.n	80025fe <HAL_TIM_Base_Start_IT+0x4e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f2:	d004      	beq.n	80025fe <HAL_TIM_Base_Start_IT+0x4e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a15      	ldr	r2, [pc, #84]	@ (8002650 <HAL_TIM_Base_Start_IT+0xa0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d115      	bne.n	800262a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <HAL_TIM_Base_Start_IT+0xa4>)
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b06      	cmp	r3, #6
 800260e:	d015      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x8c>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002616:	d011      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002628:	e008      	b.n	800263c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e000      	b.n	800263e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40014000 	.word	0x40014000
 8002654:	00010007 	.word	0x00010007

08002658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d020      	beq.n	80026bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01b      	beq.n	80026bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0202 	mvn.w	r2, #2
 800268c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f8e4 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f8d6 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f8e7 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d020      	beq.n	8002708 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01b      	beq.n	8002708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0204 	mvn.w	r2, #4
 80026d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8be 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 80026f4:	e005      	b.n	8002702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8b0 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f8c1 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d020      	beq.n	8002754 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01b      	beq.n	8002754 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0208 	mvn.w	r2, #8
 8002724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2204      	movs	r2, #4
 800272a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f898 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 8002740:	e005      	b.n	800274e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f88a 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f89b 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	d020      	beq.n	80027a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01b      	beq.n	80027a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0210 	mvn.w	r2, #16
 8002770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2208      	movs	r2, #8
 8002776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f872 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f864 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f875 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0201 	mvn.w	r2, #1
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe f878 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8d0 	bl	8002988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00c      	beq.n	800280c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8c8 	bl	800299c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f834 	bl	8002898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0220 	mvn.w	r2, #32
 800284c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f890 	bl	8002974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a2a      	ldr	r2, [pc, #168]	@ (8002968 <TIM_Base_SetConfig+0xbc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0x20>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ca:	d108      	bne.n	80028de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a21      	ldr	r2, [pc, #132]	@ (8002968 <TIM_Base_SetConfig+0xbc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00b      	beq.n	80028fe <TIM_Base_SetConfig+0x52>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ec:	d007      	beq.n	80028fe <TIM_Base_SetConfig+0x52>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1e      	ldr	r2, [pc, #120]	@ (800296c <TIM_Base_SetConfig+0xc0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d003      	beq.n	80028fe <TIM_Base_SetConfig+0x52>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002970 <TIM_Base_SetConfig+0xc4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d108      	bne.n	8002910 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a0c      	ldr	r2, [pc, #48]	@ (8002968 <TIM_Base_SetConfig+0xbc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <TIM_Base_SetConfig+0xa0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <TIM_Base_SetConfig+0xc0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d003      	beq.n	800294c <TIM_Base_SetConfig+0xa0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <TIM_Base_SetConfig+0xc4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d103      	bne.n	8002954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	615a      	str	r2, [r3, #20]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400

08002974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e040      	b.n	8002a44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd ffae 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	@ 0x24
 80029dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fade 	bl	8002fb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f8af 	bl	8002b60 <UART_SetConfig>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e01b      	b.n	8002a44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fb5d 	bl	80030fc <UART_CheckIdleState>
 8002a42:	4603      	mov	r3, r0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	@ 0x28
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d177      	bne.n	8002b54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_UART_Transmit+0x24>
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e070      	b.n	8002b56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2221      	movs	r2, #33	@ 0x21
 8002a80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a82:	f7fe f8f3 	bl	8000c6c <HAL_GetTick>
 8002a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa0:	d108      	bne.n	8002ab4 <HAL_UART_Transmit+0x68>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e003      	b.n	8002abc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002abc:	e02f      	b.n	8002b1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2180      	movs	r1, #128	@ 0x80
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fbbf 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e03b      	b.n	8002b56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af0:	b292      	uxth	r2, r2
 8002af2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	3302      	adds	r3, #2
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e007      	b.n	8002b0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1c9      	bne.n	8002abe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2140      	movs	r1, #64	@ 0x40
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fb89 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e005      	b.n	8002b56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b08a      	sub	sp, #40	@ 0x28
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4bb4      	ldr	r3, [pc, #720]	@ (8002e60 <UART_SetConfig+0x300>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4aa9      	ldr	r2, [pc, #676]	@ (8002e64 <UART_SetConfig+0x304>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4aa0      	ldr	r2, [pc, #640]	@ (8002e68 <UART_SetConfig+0x308>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d126      	bne.n	8002c38 <UART_SetConfig+0xd8>
 8002bea:	4ba0      	ldr	r3, [pc, #640]	@ (8002e6c <UART_SetConfig+0x30c>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d81b      	bhi.n	8002c30 <UART_SetConfig+0xd0>
 8002bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8002c00 <UART_SetConfig+0xa0>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c21 	.word	0x08002c21
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c29 	.word	0x08002c29
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c16:	e080      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c1e:	e07c      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002c20:	2304      	movs	r3, #4
 8002c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c26:	e078      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002c28:	2308      	movs	r3, #8
 8002c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c2e:	e074      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002c30:	2310      	movs	r3, #16
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c36:	e070      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a8c      	ldr	r2, [pc, #560]	@ (8002e70 <UART_SetConfig+0x310>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d138      	bne.n	8002cb4 <UART_SetConfig+0x154>
 8002c42:	4b8a      	ldr	r3, [pc, #552]	@ (8002e6c <UART_SetConfig+0x30c>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d82d      	bhi.n	8002cac <UART_SetConfig+0x14c>
 8002c50:	a201      	add	r2, pc, #4	@ (adr r2, 8002c58 <UART_SetConfig+0xf8>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c8d 	.word	0x08002c8d
 8002c5c:	08002cad 	.word	0x08002cad
 8002c60:	08002cad 	.word	0x08002cad
 8002c64:	08002cad 	.word	0x08002cad
 8002c68:	08002c9d 	.word	0x08002c9d
 8002c6c:	08002cad 	.word	0x08002cad
 8002c70:	08002cad 	.word	0x08002cad
 8002c74:	08002cad 	.word	0x08002cad
 8002c78:	08002c95 	.word	0x08002c95
 8002c7c:	08002cad 	.word	0x08002cad
 8002c80:	08002cad 	.word	0x08002cad
 8002c84:	08002cad 	.word	0x08002cad
 8002c88:	08002ca5 	.word	0x08002ca5
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c92:	e042      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002c94:	2302      	movs	r3, #2
 8002c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c9a:	e03e      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ca2:	e03a      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002caa:	e036      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002cac:	2310      	movs	r3, #16
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cb2:	e032      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e64 <UART_SetConfig+0x304>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12a      	bne.n	8002d14 <UART_SetConfig+0x1b4>
 8002cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8002e6c <UART_SetConfig+0x30c>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ccc:	d01a      	beq.n	8002d04 <UART_SetConfig+0x1a4>
 8002cce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002cd2:	d81b      	bhi.n	8002d0c <UART_SetConfig+0x1ac>
 8002cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cd8:	d00c      	beq.n	8002cf4 <UART_SetConfig+0x194>
 8002cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cde:	d815      	bhi.n	8002d0c <UART_SetConfig+0x1ac>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <UART_SetConfig+0x18c>
 8002ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce8:	d008      	beq.n	8002cfc <UART_SetConfig+0x19c>
 8002cea:	e00f      	b.n	8002d0c <UART_SetConfig+0x1ac>
 8002cec:	2300      	movs	r3, #0
 8002cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cf2:	e012      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cfa:	e00e      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d02:	e00a      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002d04:	2308      	movs	r3, #8
 8002d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d0a:	e006      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d12:	e002      	b.n	8002d1a <UART_SetConfig+0x1ba>
 8002d14:	2310      	movs	r3, #16
 8002d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a51      	ldr	r2, [pc, #324]	@ (8002e64 <UART_SetConfig+0x304>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d17a      	bne.n	8002e1a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d824      	bhi.n	8002d76 <UART_SetConfig+0x216>
 8002d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d34 <UART_SetConfig+0x1d4>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d59 	.word	0x08002d59
 8002d38:	08002d77 	.word	0x08002d77
 8002d3c:	08002d61 	.word	0x08002d61
 8002d40:	08002d77 	.word	0x08002d77
 8002d44:	08002d67 	.word	0x08002d67
 8002d48:	08002d77 	.word	0x08002d77
 8002d4c:	08002d77 	.word	0x08002d77
 8002d50:	08002d77 	.word	0x08002d77
 8002d54:	08002d6f 	.word	0x08002d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d58:	f7ff f822 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002d5c:	61f8      	str	r0, [r7, #28]
        break;
 8002d5e:	e010      	b.n	8002d82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d60:	4b44      	ldr	r3, [pc, #272]	@ (8002e74 <UART_SetConfig+0x314>)
 8002d62:	61fb      	str	r3, [r7, #28]
        break;
 8002d64:	e00d      	b.n	8002d82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d66:	f7fe ff83 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002d6a:	61f8      	str	r0, [r7, #28]
        break;
 8002d6c:	e009      	b.n	8002d82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d72:	61fb      	str	r3, [r7, #28]
        break;
 8002d74:	e005      	b.n	8002d82 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8107 	beq.w	8002f98 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d305      	bcc.n	8002da6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d903      	bls.n	8002dae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002dac:	e0f4      	b.n	8002f98 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2200      	movs	r2, #0
 8002db2:	461c      	mov	r4, r3
 8002db4:	4615      	mov	r5, r2
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	022b      	lsls	r3, r5, #8
 8002dc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002dc4:	0222      	lsls	r2, r4, #8
 8002dc6:	68f9      	ldr	r1, [r7, #12]
 8002dc8:	6849      	ldr	r1, [r1, #4]
 8002dca:	0849      	lsrs	r1, r1, #1
 8002dcc:	2000      	movs	r0, #0
 8002dce:	4688      	mov	r8, r1
 8002dd0:	4681      	mov	r9, r0
 8002dd2:	eb12 0a08 	adds.w	sl, r2, r8
 8002dd6:	eb43 0b09 	adc.w	fp, r3, r9
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002de8:	4650      	mov	r0, sl
 8002dea:	4659      	mov	r1, fp
 8002dec:	f7fd fa48 	bl	8000280 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dfe:	d308      	bcc.n	8002e12 <UART_SetConfig+0x2b2>
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e06:	d204      	bcs.n	8002e12 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	60da      	str	r2, [r3, #12]
 8002e10:	e0c2      	b.n	8002f98 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e18:	e0be      	b.n	8002f98 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e22:	d16a      	bne.n	8002efa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002e24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d834      	bhi.n	8002e96 <UART_SetConfig+0x336>
 8002e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e34 <UART_SetConfig+0x2d4>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e59 	.word	0x08002e59
 8002e38:	08002e79 	.word	0x08002e79
 8002e3c:	08002e81 	.word	0x08002e81
 8002e40:	08002e97 	.word	0x08002e97
 8002e44:	08002e87 	.word	0x08002e87
 8002e48:	08002e97 	.word	0x08002e97
 8002e4c:	08002e97 	.word	0x08002e97
 8002e50:	08002e97 	.word	0x08002e97
 8002e54:	08002e8f 	.word	0x08002e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e58:	f7fe ffa2 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002e5c:	61f8      	str	r0, [r7, #28]
        break;
 8002e5e:	e020      	b.n	8002ea2 <UART_SetConfig+0x342>
 8002e60:	efff69f3 	.word	0xefff69f3
 8002e64:	40008000 	.word	0x40008000
 8002e68:	40013800 	.word	0x40013800
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40004400 	.word	0x40004400
 8002e74:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e78:	f7fe ffa8 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8002e7c:	61f8      	str	r0, [r7, #28]
        break;
 8002e7e:	e010      	b.n	8002ea2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e80:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb4 <UART_SetConfig+0x454>)
 8002e82:	61fb      	str	r3, [r7, #28]
        break;
 8002e84:	e00d      	b.n	8002ea2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e86:	f7fe fef3 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002e8a:	61f8      	str	r0, [r7, #28]
        break;
 8002e8c:	e009      	b.n	8002ea2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e92:	61fb      	str	r3, [r7, #28]
        break;
 8002e94:	e005      	b.n	8002ea2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d077      	beq.n	8002f98 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005a      	lsls	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b0f      	cmp	r3, #15
 8002ec2:	d916      	bls.n	8002ef2 <UART_SetConfig+0x392>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eca:	d212      	bcs.n	8002ef2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f023 030f 	bic.w	r3, r3, #15
 8002ed4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	8afb      	ldrh	r3, [r7, #22]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	8afa      	ldrh	r2, [r7, #22]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	e052      	b.n	8002f98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ef8:	e04e      	b.n	8002f98 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002efa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d827      	bhi.n	8002f52 <UART_SetConfig+0x3f2>
 8002f02:	a201      	add	r2, pc, #4	@ (adr r2, 8002f08 <UART_SetConfig+0x3a8>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f2d 	.word	0x08002f2d
 8002f0c:	08002f35 	.word	0x08002f35
 8002f10:	08002f3d 	.word	0x08002f3d
 8002f14:	08002f53 	.word	0x08002f53
 8002f18:	08002f43 	.word	0x08002f43
 8002f1c:	08002f53 	.word	0x08002f53
 8002f20:	08002f53 	.word	0x08002f53
 8002f24:	08002f53 	.word	0x08002f53
 8002f28:	08002f4b 	.word	0x08002f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f2c:	f7fe ff38 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002f30:	61f8      	str	r0, [r7, #28]
        break;
 8002f32:	e014      	b.n	8002f5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f34:	f7fe ff4a 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8002f38:	61f8      	str	r0, [r7, #28]
        break;
 8002f3a:	e010      	b.n	8002f5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <UART_SetConfig+0x454>)
 8002f3e:	61fb      	str	r3, [r7, #28]
        break;
 8002f40:	e00d      	b.n	8002f5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f42:	f7fe fe95 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002f46:	61f8      	str	r0, [r7, #28]
        break;
 8002f48:	e009      	b.n	8002f5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f4e:	61fb      	str	r3, [r7, #28]
        break;
 8002f50:	e005      	b.n	8002f5e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f5c:	bf00      	nop
    }

    if (pclk != 0U)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d019      	beq.n	8002f98 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	085a      	lsrs	r2, r3, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	441a      	add	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d909      	bls.n	8002f92 <UART_SetConfig+0x432>
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f84:	d205      	bcs.n	8002f92 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	e002      	b.n	8002f98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fa4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3728      	adds	r7, #40	@ 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	00f42400 	.word	0x00f42400

08002fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01a      	beq.n	80030ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030b6:	d10a      	bne.n	80030ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b098      	sub	sp, #96	@ 0x60
 8003100:	af02      	add	r7, sp, #8
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800310c:	f7fd fdae 	bl	8000c6c <HAL_GetTick>
 8003110:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b08      	cmp	r3, #8
 800311e:	d12e      	bne.n	800317e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003120:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003128:	2200      	movs	r2, #0
 800312a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f88c 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d021      	beq.n	800317e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003142:	e853 3f00 	ldrex	r3, [r3]
 8003146:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800314e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003158:	647b      	str	r3, [r7, #68]	@ 0x44
 800315a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800315e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003160:	e841 2300 	strex	r3, r2, [r1]
 8003164:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e6      	bne.n	800313a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e062      	b.n	8003244 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d149      	bne.n	8003220 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800318c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003194:	2200      	movs	r2, #0
 8003196:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f856 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d03c      	beq.n	8003220 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	623b      	str	r3, [r7, #32]
   return(result);
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e6      	bne.n	80031a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3308      	adds	r3, #8
 80031de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3308      	adds	r3, #8
 80031f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031f8:	61fa      	str	r2, [r7, #28]
 80031fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	69b9      	ldr	r1, [r7, #24]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	617b      	str	r3, [r7, #20]
   return(result);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e5      	bne.n	80031d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e011      	b.n	8003244 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3758      	adds	r7, #88	@ 0x58
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325c:	e049      	b.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d045      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fd fd01 	bl	8000c6c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <UART_WaitOnFlagUntilTimeout+0x30>
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e048      	b.n	8003312 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d031      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b08      	cmp	r3, #8
 800329a:	d110      	bne.n	80032be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2208      	movs	r2, #8
 80032a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f838 	bl	800331a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2208      	movs	r2, #8
 80032ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e029      	b.n	8003312 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032cc:	d111      	bne.n	80032f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f81e 	bl	800331a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e00f      	b.n	8003312 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	bf0c      	ite	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	2300      	movne	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	429a      	cmp	r2, r3
 800330e:	d0a6      	beq.n	800325e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800331a:	b480      	push	{r7}
 800331c:	b095      	sub	sp, #84	@ 0x54
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332a:	e853 3f00 	ldrex	r3, [r3]
 800332e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003340:	643b      	str	r3, [r7, #64]	@ 0x40
 8003342:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003348:	e841 2300 	strex	r3, r2, [r1]
 800334c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800334e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e6      	bne.n	8003322 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3308      	adds	r3, #8
 800335a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	61fb      	str	r3, [r7, #28]
   return(result);
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3308      	adds	r3, #8
 8003372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003374:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800337a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e5      	bne.n	8003354 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338c:	2b01      	cmp	r3, #1
 800338e:	d118      	bne.n	80033c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	60bb      	str	r3, [r7, #8]
   return(result);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f023 0310 	bic.w	r3, r3, #16
 80033a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	6979      	ldr	r1, [r7, #20]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	613b      	str	r3, [r7, #16]
   return(result);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e6      	bne.n	8003390 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80033d6:	bf00      	nop
 80033d8:	3754      	adds	r7, #84	@ 0x54
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f4:	2b84      	cmp	r3, #132	@ 0x84
 80033f6:	d005      	beq.n	8003404 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	3303      	adds	r3, #3
 8003402:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003404:	68fb      	ldr	r3, [r7, #12]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003416:	f000 fafd 	bl	8003a14 <vTaskStartScheduler>
  
  return osOK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}

08003420 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003422:	b089      	sub	sp, #36	@ 0x24
 8003424:	af04      	add	r7, sp, #16
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d020      	beq.n	8003474 <osThreadCreate+0x54>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01c      	beq.n	8003474 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685c      	ldr	r4, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691e      	ldr	r6, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ffc8 	bl	80033e2 <makeFreeRtosPriority>
 8003452:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800345c:	9202      	str	r2, [sp, #8]
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	9100      	str	r1, [sp, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	4632      	mov	r2, r6
 8003466:	4629      	mov	r1, r5
 8003468:	4620      	mov	r0, r4
 800346a:	f000 f8ed 	bl	8003648 <xTaskCreateStatic>
 800346e:	4603      	mov	r3, r0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e01c      	b.n	80034ae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685c      	ldr	r4, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003480:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ffaa 	bl	80033e2 <makeFreeRtosPriority>
 800348e:	4602      	mov	r2, r0
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	9200      	str	r2, [sp, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4632      	mov	r2, r6
 800349c:	4629      	mov	r1, r5
 800349e:	4620      	mov	r0, r4
 80034a0:	f000 f932 	bl	8003708 <xTaskCreate>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d001      	beq.n	80034ae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <osDelay+0x16>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	e000      	b.n	80034d0 <osDelay+0x18>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fa69 	bl	80039a8 <vTaskDelay>
  
  return osOK;
 80034d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f103 0208 	add.w	r2, r3, #8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f103 0208 	add.w	r2, r3, #8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f103 0208 	add.w	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	601a      	str	r2, [r3, #0]
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d103      	bne.n	80035a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e00c      	b.n	80035bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3308      	adds	r3, #8
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e002      	b.n	80035b0 <vListInsert+0x2e>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d2f6      	bcs.n	80035aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	601a      	str	r2, [r3, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6892      	ldr	r2, [r2, #8]
 800360a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6852      	ldr	r2, [r2, #4]
 8003614:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d103      	bne.n	8003628 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1e5a      	subs	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08e      	sub	sp, #56	@ 0x38
 800364c:	af04      	add	r7, sp, #16
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10b      	bne.n	8003692 <xTaskCreateStatic+0x4a>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	61fb      	str	r3, [r7, #28]
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	e7fd      	b.n	800368e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003692:	23a0      	movs	r3, #160	@ 0xa0
 8003694:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2ba0      	cmp	r3, #160	@ 0xa0
 800369a:	d00b      	beq.n	80036b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	61bb      	str	r3, [r7, #24]
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01e      	beq.n	80036fa <xTaskCreateStatic+0xb2>
 80036bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01b      	beq.n	80036fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036d4:	2300      	movs	r3, #0
 80036d6:	9303      	str	r3, [sp, #12]
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	9302      	str	r3, [sp, #8]
 80036dc:	f107 0314 	add.w	r3, r7, #20
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f851 	bl	8003794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036f4:	f000 f8ee 	bl	80038d4 <prvAddNewTaskToReadyList>
 80036f8:	e001      	b.n	80036fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036fe:	697b      	ldr	r3, [r7, #20]
	}
 8003700:	4618      	mov	r0, r3
 8003702:	3728      	adds	r7, #40	@ 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	@ 0x30
 800370c:	af04      	add	r7, sp, #16
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f000 ff03 	bl	8004528 <pvPortMalloc>
 8003722:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800372a:	20a0      	movs	r0, #160	@ 0xa0
 800372c:	f000 fefc 	bl	8004528 <pvPortMalloc>
 8003730:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	631a      	str	r2, [r3, #48]	@ 0x30
 800373e:	e005      	b.n	800374c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003740:	6978      	ldr	r0, [r7, #20]
 8003742:	f000 ffbf 	bl	80046c4 <vPortFree>
 8003746:	e001      	b.n	800374c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d017      	beq.n	8003782 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	2300      	movs	r3, #0
 800375e:	9303      	str	r3, [sp, #12]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	9302      	str	r3, [sp, #8]
 8003764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f80f 	bl	8003794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003776:	69f8      	ldr	r0, [r7, #28]
 8003778:	f000 f8ac 	bl	80038d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800377c:	2301      	movs	r3, #1
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	e002      	b.n	8003788 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
 8003786:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003788:	69bb      	ldr	r3, [r7, #24]
	}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037ac:	3b01      	subs	r3, #1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <prvInitialiseNewTask+0x4a>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	617b      	str	r3, [r7, #20]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01f      	beq.n	8003824 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e012      	b.n	8003810 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	7819      	ldrb	r1, [r3, #0]
 80037f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	3334      	adds	r3, #52	@ 0x34
 80037fa:	460a      	mov	r2, r1
 80037fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d006      	beq.n	8003818 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3301      	adds	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	d9e9      	bls.n	80037ea <prvInitialiseNewTask+0x56>
 8003816:	e000      	b.n	800381a <prvInitialiseNewTask+0x86>
			{
				break;
 8003818:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003822:	e003      	b.n	800382c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382e:	2b06      	cmp	r3, #6
 8003830:	d901      	bls.n	8003836 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003832:	2306      	movs	r3, #6
 8003834:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800383a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	2200      	movs	r2, #0
 8003846:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	3304      	adds	r3, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fe67 	bl	8003520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003854:	3318      	adds	r3, #24
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fe62 	bl	8003520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003860:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	f1c3 0207 	rsb	r2, r3, #7
 8003868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003870:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003874:	2200      	movs	r2, #0
 8003876:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387c:	2200      	movs	r2, #0
 800387e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	334c      	adds	r3, #76	@ 0x4c
 8003886:	224c      	movs	r2, #76	@ 0x4c
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f85a 	bl	8004944 <memset>
 8003890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003892:	4a0d      	ldr	r2, [pc, #52]	@ (80038c8 <prvInitialiseNewTask+0x134>)
 8003894:	651a      	str	r2, [r3, #80]	@ 0x50
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	4a0c      	ldr	r2, [pc, #48]	@ (80038cc <prvInitialiseNewTask+0x138>)
 800389a:	655a      	str	r2, [r3, #84]	@ 0x54
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	4a0c      	ldr	r2, [pc, #48]	@ (80038d0 <prvInitialiseNewTask+0x13c>)
 80038a0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	69b8      	ldr	r0, [r7, #24]
 80038a8:	f000 fc2a 	bl	8004100 <pxPortInitialiseStack>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038be:	bf00      	nop
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20001110 	.word	0x20001110
 80038cc:	20001178 	.word	0x20001178
 80038d0:	200011e0 	.word	0x200011e0

080038d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038dc:	f000 fd44 	bl	8004368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038e0:	4b2a      	ldr	r3, [pc, #168]	@ (800398c <prvAddNewTaskToReadyList+0xb8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	4a29      	ldr	r2, [pc, #164]	@ (800398c <prvAddNewTaskToReadyList+0xb8>)
 80038e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038ea:	4b29      	ldr	r3, [pc, #164]	@ (8003990 <prvAddNewTaskToReadyList+0xbc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038f2:	4a27      	ldr	r2, [pc, #156]	@ (8003990 <prvAddNewTaskToReadyList+0xbc>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038f8:	4b24      	ldr	r3, [pc, #144]	@ (800398c <prvAddNewTaskToReadyList+0xb8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d110      	bne.n	8003922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003900:	f000 fad4 	bl	8003eac <prvInitialiseTaskLists>
 8003904:	e00d      	b.n	8003922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003906:	4b23      	ldr	r3, [pc, #140]	@ (8003994 <prvAddNewTaskToReadyList+0xc0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800390e:	4b20      	ldr	r3, [pc, #128]	@ (8003990 <prvAddNewTaskToReadyList+0xbc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	429a      	cmp	r2, r3
 800391a:	d802      	bhi.n	8003922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800391c:	4a1c      	ldr	r2, [pc, #112]	@ (8003990 <prvAddNewTaskToReadyList+0xbc>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003922:	4b1d      	ldr	r3, [pc, #116]	@ (8003998 <prvAddNewTaskToReadyList+0xc4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	4a1b      	ldr	r2, [pc, #108]	@ (8003998 <prvAddNewTaskToReadyList+0xc4>)
 800392a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	2201      	movs	r2, #1
 8003932:	409a      	lsls	r2, r3
 8003934:	4b19      	ldr	r3, [pc, #100]	@ (800399c <prvAddNewTaskToReadyList+0xc8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	4a18      	ldr	r2, [pc, #96]	@ (800399c <prvAddNewTaskToReadyList+0xc8>)
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <prvAddNewTaskToReadyList+0xcc>)
 800394c:	441a      	add	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f7ff fdf0 	bl	800353a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800395a:	f000 fd37 	bl	80043cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800395e:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <prvAddNewTaskToReadyList+0xc0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00e      	beq.n	8003984 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003966:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <prvAddNewTaskToReadyList+0xbc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	429a      	cmp	r2, r3
 8003972:	d207      	bcs.n	8003984 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <prvAddNewTaskToReadyList+0xd0>)
 8003976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000504 	.word	0x20000504
 8003990:	20000404 	.word	0x20000404
 8003994:	20000510 	.word	0x20000510
 8003998:	20000520 	.word	0x20000520
 800399c:	2000050c 	.word	0x2000050c
 80039a0:	20000408 	.word	0x20000408
 80039a4:	e000ed04 	.word	0xe000ed04

080039a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d018      	beq.n	80039ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039ba:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <vTaskDelay+0x64>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <vTaskDelay+0x32>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	60bb      	str	r3, [r7, #8]
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	e7fd      	b.n	80039d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039da:	f000 f885 	bl	8003ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039de:	2100      	movs	r1, #0
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fb27 	bl	8004034 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039e6:	f000 f88d 	bl	8003b04 <xTaskResumeAll>
 80039ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d107      	bne.n	8003a02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80039f2:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <vTaskDelay+0x68>)
 80039f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2000052c 	.word	0x2000052c
 8003a10:	e000ed04 	.word	0xe000ed04

08003a14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	@ 0x28
 8003a18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a22:	463a      	mov	r2, r7
 8003a24:	1d39      	adds	r1, r7, #4
 8003a26:	f107 0308 	add.w	r3, r7, #8
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fda0 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	9202      	str	r2, [sp, #8]
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	460a      	mov	r2, r1
 8003a42:	4921      	ldr	r1, [pc, #132]	@ (8003ac8 <vTaskStartScheduler+0xb4>)
 8003a44:	4821      	ldr	r0, [pc, #132]	@ (8003acc <vTaskStartScheduler+0xb8>)
 8003a46:	f7ff fdff 	bl	8003648 <xTaskCreateStatic>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4a20      	ldr	r2, [pc, #128]	@ (8003ad0 <vTaskStartScheduler+0xbc>)
 8003a4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <vTaskStartScheduler+0xbc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e001      	b.n	8003a62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d11b      	bne.n	8003aa0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	613b      	str	r3, [r7, #16]
}
 8003a7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a7c:	4b15      	ldr	r3, [pc, #84]	@ (8003ad4 <vTaskStartScheduler+0xc0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	334c      	adds	r3, #76	@ 0x4c
 8003a82:	4a15      	ldr	r2, [pc, #84]	@ (8003ad8 <vTaskStartScheduler+0xc4>)
 8003a84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a86:	4b15      	ldr	r3, [pc, #84]	@ (8003adc <vTaskStartScheduler+0xc8>)
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <vTaskStartScheduler+0xcc>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a94:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <vTaskStartScheduler+0xd0>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a9a:	f000 fbc1 	bl	8004220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a9e:	e00f      	b.n	8003ac0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d10b      	bne.n	8003ac0 <vTaskStartScheduler+0xac>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60fb      	str	r3, [r7, #12]
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <vTaskStartScheduler+0xa8>
}
 8003ac0:	bf00      	nop
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	08005374 	.word	0x08005374
 8003acc:	08003e7d 	.word	0x08003e7d
 8003ad0:	20000528 	.word	0x20000528
 8003ad4:	20000404 	.word	0x20000404
 8003ad8:	20000010 	.word	0x20000010
 8003adc:	20000524 	.word	0x20000524
 8003ae0:	20000510 	.word	0x20000510
 8003ae4:	20000508 	.word	0x20000508

08003ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003aec:	4b04      	ldr	r3, [pc, #16]	@ (8003b00 <vTaskSuspendAll+0x18>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3301      	adds	r3, #1
 8003af2:	4a03      	ldr	r2, [pc, #12]	@ (8003b00 <vTaskSuspendAll+0x18>)
 8003af4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	2000052c 	.word	0x2000052c

08003b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b12:	4b42      	ldr	r3, [pc, #264]	@ (8003c1c <xTaskResumeAll+0x118>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10b      	bne.n	8003b32 <xTaskResumeAll+0x2e>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	603b      	str	r3, [r7, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	e7fd      	b.n	8003b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b32:	f000 fc19 	bl	8004368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b36:	4b39      	ldr	r3, [pc, #228]	@ (8003c1c <xTaskResumeAll+0x118>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	4a37      	ldr	r2, [pc, #220]	@ (8003c1c <xTaskResumeAll+0x118>)
 8003b3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b40:	4b36      	ldr	r3, [pc, #216]	@ (8003c1c <xTaskResumeAll+0x118>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d161      	bne.n	8003c0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b48:	4b35      	ldr	r3, [pc, #212]	@ (8003c20 <xTaskResumeAll+0x11c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d05d      	beq.n	8003c0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b50:	e02e      	b.n	8003bb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b52:	4b34      	ldr	r3, [pc, #208]	@ (8003c24 <xTaskResumeAll+0x120>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3318      	adds	r3, #24
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fd48 	bl	80035f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fd43 	bl	80035f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	2201      	movs	r2, #1
 8003b74:	409a      	lsls	r2, r3
 8003b76:	4b2c      	ldr	r3, [pc, #176]	@ (8003c28 <xTaskResumeAll+0x124>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003c28 <xTaskResumeAll+0x124>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4a27      	ldr	r2, [pc, #156]	@ (8003c2c <xTaskResumeAll+0x128>)
 8003b8e:	441a      	add	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7ff fccf 	bl	800353a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba0:	4b23      	ldr	r3, [pc, #140]	@ (8003c30 <xTaskResumeAll+0x12c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003baa:	4b22      	ldr	r3, [pc, #136]	@ (8003c34 <xTaskResumeAll+0x130>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <xTaskResumeAll+0x120>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1cc      	bne.n	8003b52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bbe:	f000 fa19 	bl	8003ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <xTaskResumeAll+0x134>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d010      	beq.n	8003bf0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bce:	f000 f837 	bl	8003c40 <xTaskIncrementTick>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003bd8:	4b16      	ldr	r3, [pc, #88]	@ (8003c34 <xTaskResumeAll+0x130>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f1      	bne.n	8003bce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003bea:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <xTaskResumeAll+0x134>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bf0:	4b10      	ldr	r3, [pc, #64]	@ (8003c34 <xTaskResumeAll+0x130>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003c3c <xTaskResumeAll+0x138>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c0c:	f000 fbde 	bl	80043cc <vPortExitCritical>

	return xAlreadyYielded;
 8003c10:	68bb      	ldr	r3, [r7, #8]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	2000052c 	.word	0x2000052c
 8003c20:	20000504 	.word	0x20000504
 8003c24:	200004c4 	.word	0x200004c4
 8003c28:	2000050c 	.word	0x2000050c
 8003c2c:	20000408 	.word	0x20000408
 8003c30:	20000404 	.word	0x20000404
 8003c34:	20000518 	.word	0x20000518
 8003c38:	20000514 	.word	0x20000514
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8003d88 <xTaskIncrementTick+0x148>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 808f 	bne.w	8003d72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c54:	4b4d      	ldr	r3, [pc, #308]	@ (8003d8c <xTaskIncrementTick+0x14c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d8c <xTaskIncrementTick+0x14c>)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d121      	bne.n	8003cac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c68:	4b49      	ldr	r3, [pc, #292]	@ (8003d90 <xTaskIncrementTick+0x150>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	603b      	str	r3, [r7, #0]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <xTaskIncrementTick+0x46>
 8003c8a:	4b41      	ldr	r3, [pc, #260]	@ (8003d90 <xTaskIncrementTick+0x150>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	4b40      	ldr	r3, [pc, #256]	@ (8003d94 <xTaskIncrementTick+0x154>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a3e      	ldr	r2, [pc, #248]	@ (8003d90 <xTaskIncrementTick+0x150>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4a3e      	ldr	r2, [pc, #248]	@ (8003d94 <xTaskIncrementTick+0x154>)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d98 <xTaskIncrementTick+0x158>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8003d98 <xTaskIncrementTick+0x158>)
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	f000 f9a4 	bl	8003ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cac:	4b3b      	ldr	r3, [pc, #236]	@ (8003d9c <xTaskIncrementTick+0x15c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d348      	bcc.n	8003d48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb6:	4b36      	ldr	r3, [pc, #216]	@ (8003d90 <xTaskIncrementTick+0x150>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc0:	4b36      	ldr	r3, [pc, #216]	@ (8003d9c <xTaskIncrementTick+0x15c>)
 8003cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc6:	601a      	str	r2, [r3, #0]
					break;
 8003cc8:	e03e      	b.n	8003d48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cca:	4b31      	ldr	r3, [pc, #196]	@ (8003d90 <xTaskIncrementTick+0x150>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d203      	bcs.n	8003cea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8003d9c <xTaskIncrementTick+0x15c>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ce8:	e02e      	b.n	8003d48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fc80 	bl	80035f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fc77 	bl	80035f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	4b24      	ldr	r3, [pc, #144]	@ (8003da0 <xTaskIncrementTick+0x160>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	4a22      	ldr	r2, [pc, #136]	@ (8003da0 <xTaskIncrementTick+0x160>)
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4a1f      	ldr	r2, [pc, #124]	@ (8003da4 <xTaskIncrementTick+0x164>)
 8003d26:	441a      	add	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f7ff fc03 	bl	800353a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d38:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <xTaskIncrementTick+0x168>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d3b9      	bcc.n	8003cb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d42:	2301      	movs	r3, #1
 8003d44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d46:	e7b6      	b.n	8003cb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d48:	4b17      	ldr	r3, [pc, #92]	@ (8003da8 <xTaskIncrementTick+0x168>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4e:	4915      	ldr	r1, [pc, #84]	@ (8003da4 <xTaskIncrementTick+0x164>)
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d901      	bls.n	8003d64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d64:	4b11      	ldr	r3, [pc, #68]	@ (8003dac <xTaskIncrementTick+0x16c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e004      	b.n	8003d7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d72:	4b0f      	ldr	r3, [pc, #60]	@ (8003db0 <xTaskIncrementTick+0x170>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3301      	adds	r3, #1
 8003d78:	4a0d      	ldr	r2, [pc, #52]	@ (8003db0 <xTaskIncrementTick+0x170>)
 8003d7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d7c:	697b      	ldr	r3, [r7, #20]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2000052c 	.word	0x2000052c
 8003d8c:	20000508 	.word	0x20000508
 8003d90:	200004bc 	.word	0x200004bc
 8003d94:	200004c0 	.word	0x200004c0
 8003d98:	2000051c 	.word	0x2000051c
 8003d9c:	20000524 	.word	0x20000524
 8003da0:	2000050c 	.word	0x2000050c
 8003da4:	20000408 	.word	0x20000408
 8003da8:	20000404 	.word	0x20000404
 8003dac:	20000518 	.word	0x20000518
 8003db0:	20000514 	.word	0x20000514

08003db4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dba:	4b2a      	ldr	r3, [pc, #168]	@ (8003e64 <vTaskSwitchContext+0xb0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dc2:	4b29      	ldr	r3, [pc, #164]	@ (8003e68 <vTaskSwitchContext+0xb4>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dc8:	e045      	b.n	8003e56 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003dca:	4b27      	ldr	r3, [pc, #156]	@ (8003e68 <vTaskSwitchContext+0xb4>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd0:	4b26      	ldr	r3, [pc, #152]	@ (8003e6c <vTaskSwitchContext+0xb8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003dde:	7afb      	ldrb	r3, [r7, #11]
 8003de0:	f1c3 031f 	rsb	r3, r3, #31
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	4922      	ldr	r1, [pc, #136]	@ (8003e70 <vTaskSwitchContext+0xbc>)
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10b      	bne.n	8003e12 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	607b      	str	r3, [r7, #4]
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	e7fd      	b.n	8003e0e <vTaskSwitchContext+0x5a>
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4a14      	ldr	r2, [pc, #80]	@ (8003e70 <vTaskSwitchContext+0xbc>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	605a      	str	r2, [r3, #4]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	3308      	adds	r3, #8
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d104      	bne.n	8003e42 <vTaskSwitchContext+0x8e>
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a0a      	ldr	r2, [pc, #40]	@ (8003e74 <vTaskSwitchContext+0xc0>)
 8003e4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e4c:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <vTaskSwitchContext+0xc0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	334c      	adds	r3, #76	@ 0x4c
 8003e52:	4a09      	ldr	r2, [pc, #36]	@ (8003e78 <vTaskSwitchContext+0xc4>)
 8003e54:	6013      	str	r3, [r2, #0]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	2000052c 	.word	0x2000052c
 8003e68:	20000518 	.word	0x20000518
 8003e6c:	2000050c 	.word	0x2000050c
 8003e70:	20000408 	.word	0x20000408
 8003e74:	20000404 	.word	0x20000404
 8003e78:	20000010 	.word	0x20000010

08003e7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e84:	f000 f852 	bl	8003f2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e88:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <prvIdleTask+0x28>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d9f9      	bls.n	8003e84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e90:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <prvIdleTask+0x2c>)
 8003e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ea0:	e7f0      	b.n	8003e84 <prvIdleTask+0x8>
 8003ea2:	bf00      	nop
 8003ea4:	20000408 	.word	0x20000408
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	e00c      	b.n	8003ed2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4a12      	ldr	r2, [pc, #72]	@ (8003f0c <prvInitialiseTaskLists+0x60>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fb0a 	bl	80034e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d9ef      	bls.n	8003eb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ed8:	480d      	ldr	r0, [pc, #52]	@ (8003f10 <prvInitialiseTaskLists+0x64>)
 8003eda:	f7ff fb01 	bl	80034e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ede:	480d      	ldr	r0, [pc, #52]	@ (8003f14 <prvInitialiseTaskLists+0x68>)
 8003ee0:	f7ff fafe 	bl	80034e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ee4:	480c      	ldr	r0, [pc, #48]	@ (8003f18 <prvInitialiseTaskLists+0x6c>)
 8003ee6:	f7ff fafb 	bl	80034e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eea:	480c      	ldr	r0, [pc, #48]	@ (8003f1c <prvInitialiseTaskLists+0x70>)
 8003eec:	f7ff faf8 	bl	80034e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ef0:	480b      	ldr	r0, [pc, #44]	@ (8003f20 <prvInitialiseTaskLists+0x74>)
 8003ef2:	f7ff faf5 	bl	80034e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <prvInitialiseTaskLists+0x78>)
 8003ef8:	4a05      	ldr	r2, [pc, #20]	@ (8003f10 <prvInitialiseTaskLists+0x64>)
 8003efa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003efc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <prvInitialiseTaskLists+0x7c>)
 8003efe:	4a05      	ldr	r2, [pc, #20]	@ (8003f14 <prvInitialiseTaskLists+0x68>)
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000408 	.word	0x20000408
 8003f10:	20000494 	.word	0x20000494
 8003f14:	200004a8 	.word	0x200004a8
 8003f18:	200004c4 	.word	0x200004c4
 8003f1c:	200004d8 	.word	0x200004d8
 8003f20:	200004f0 	.word	0x200004f0
 8003f24:	200004bc 	.word	0x200004bc
 8003f28:	200004c0 	.word	0x200004c0

08003f2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f32:	e019      	b.n	8003f68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f34:	f000 fa18 	bl	8004368 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f38:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <prvCheckTasksWaitingTermination+0x50>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fb55 	bl	80035f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <prvCheckTasksWaitingTermination+0x54>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	4a0b      	ldr	r2, [pc, #44]	@ (8003f80 <prvCheckTasksWaitingTermination+0x54>)
 8003f52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f54:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <prvCheckTasksWaitingTermination+0x58>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <prvCheckTasksWaitingTermination+0x58>)
 8003f5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f5e:	f000 fa35 	bl	80043cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f810 	bl	8003f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <prvCheckTasksWaitingTermination+0x58>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e1      	bne.n	8003f34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200004d8 	.word	0x200004d8
 8003f80:	20000504 	.word	0x20000504
 8003f84:	200004ec 	.word	0x200004ec

08003f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	334c      	adds	r3, #76	@ 0x4c
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fcdd 	bl	8004954 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d108      	bne.n	8003fb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fb8b 	bl	80046c4 <vPortFree>
				vPortFree( pxTCB );
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fb88 	bl	80046c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fb4:	e019      	b.n	8003fea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d103      	bne.n	8003fc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fb7f 	bl	80046c4 <vPortFree>
	}
 8003fc6:	e010      	b.n	8003fea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d00b      	beq.n	8003fea <prvDeleteTCB+0x62>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	60fb      	str	r3, [r7, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <prvDeleteTCB+0x5e>
	}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <prvResetNextTaskUnblockTime+0x38>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004004:	4b0a      	ldr	r3, [pc, #40]	@ (8004030 <prvResetNextTaskUnblockTime+0x3c>)
 8004006:	f04f 32ff 	mov.w	r2, #4294967295
 800400a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800400c:	e008      	b.n	8004020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400e:	4b07      	ldr	r3, [pc, #28]	@ (800402c <prvResetNextTaskUnblockTime+0x38>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a04      	ldr	r2, [pc, #16]	@ (8004030 <prvResetNextTaskUnblockTime+0x3c>)
 800401e:	6013      	str	r3, [r2, #0]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	200004bc 	.word	0x200004bc
 8004030:	20000524 	.word	0x20000524

08004034 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800403e:	4b29      	ldr	r3, [pc, #164]	@ (80040e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004044:	4b28      	ldr	r3, [pc, #160]	@ (80040e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3304      	adds	r3, #4
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fad2 	bl	80035f4 <uxListRemove>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004056:	4b24      	ldr	r3, [pc, #144]	@ (80040e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	2201      	movs	r2, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43da      	mvns	r2, r3
 8004064:	4b21      	ldr	r3, [pc, #132]	@ (80040ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4013      	ands	r3, r2
 800406a:	4a20      	ldr	r2, [pc, #128]	@ (80040ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800406c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d10a      	bne.n	800408c <prvAddCurrentTaskToDelayedList+0x58>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800407c:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	481a      	ldr	r0, [pc, #104]	@ (80040f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004086:	f7ff fa58 	bl	800353a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800408a:	e026      	b.n	80040da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004094:	4b14      	ldr	r3, [pc, #80]	@ (80040e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d209      	bcs.n	80040b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a4:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b0f      	ldr	r3, [pc, #60]	@ (80040e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7ff fa66 	bl	8003582 <vListInsert>
}
 80040b6:	e010      	b.n	80040da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040b8:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f7ff fa5c 	bl	8003582 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040ca:	4b0c      	ldr	r3, [pc, #48]	@ (80040fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d202      	bcs.n	80040da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80040d4:	4a09      	ldr	r2, [pc, #36]	@ (80040fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6013      	str	r3, [r2, #0]
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000508 	.word	0x20000508
 80040e8:	20000404 	.word	0x20000404
 80040ec:	2000050c 	.word	0x2000050c
 80040f0:	200004f0 	.word	0x200004f0
 80040f4:	200004c0 	.word	0x200004c0
 80040f8:	200004bc 	.word	0x200004bc
 80040fc:	20000524 	.word	0x20000524

08004100 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3b04      	subs	r3, #4
 8004110:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3b04      	subs	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b04      	subs	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004130:	4a0c      	ldr	r2, [pc, #48]	@ (8004164 <pxPortInitialiseStack+0x64>)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3b14      	subs	r3, #20
 800413a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3b04      	subs	r3, #4
 8004146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f06f 0202 	mvn.w	r2, #2
 800414e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b20      	subs	r3, #32
 8004154:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	08004169 	.word	0x08004169

08004168 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004172:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <prvTaskExitError+0x58>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d00b      	beq.n	8004194 <prvTaskExitError+0x2c>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	60fb      	str	r3, [r7, #12]
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <prvTaskExitError+0x28>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	60bb      	str	r3, [r7, #8]
}
 80041a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041a8:	bf00      	nop
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0fc      	beq.n	80041aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	2000000c 	.word	0x2000000c
	...

080041d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <pxCurrentTCBConst2>)
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	6808      	ldr	r0, [r1, #0]
 80041d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041da:	f380 8809 	msr	PSP, r0
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8811 	msr	BASEPRI, r0
 80041ea:	4770      	bx	lr
 80041ec:	f3af 8000 	nop.w

080041f0 <pxCurrentTCBConst2>:
 80041f0:	20000404 	.word	0x20000404
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041f8:	4808      	ldr	r0, [pc, #32]	@ (800421c <prvPortStartFirstTask+0x24>)
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	6800      	ldr	r0, [r0, #0]
 80041fe:	f380 8808 	msr	MSP, r0
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8814 	msr	CONTROL, r0
 800420a:	b662      	cpsie	i
 800420c:	b661      	cpsie	f
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	df00      	svc	0
 8004218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800421a:	bf00      	nop
 800421c:	e000ed08 	.word	0xe000ed08

08004220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004226:	4b47      	ldr	r3, [pc, #284]	@ (8004344 <xPortStartScheduler+0x124>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a47      	ldr	r2, [pc, #284]	@ (8004348 <xPortStartScheduler+0x128>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10b      	bne.n	8004248 <xPortStartScheduler+0x28>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	613b      	str	r3, [r7, #16]
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004248:	4b3e      	ldr	r3, [pc, #248]	@ (8004344 <xPortStartScheduler+0x124>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a3f      	ldr	r2, [pc, #252]	@ (800434c <xPortStartScheduler+0x12c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d10b      	bne.n	800426a <xPortStartScheduler+0x4a>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	60fb      	str	r3, [r7, #12]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800426a:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <xPortStartScheduler+0x130>)
 800426c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	22ff      	movs	r2, #255	@ 0xff
 800427a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4b31      	ldr	r3, [pc, #196]	@ (8004354 <xPortStartScheduler+0x134>)
 8004290:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004292:	4b31      	ldr	r3, [pc, #196]	@ (8004358 <xPortStartScheduler+0x138>)
 8004294:	2207      	movs	r2, #7
 8004296:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004298:	e009      	b.n	80042ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <xPortStartScheduler+0x138>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004358 <xPortStartScheduler+0x138>)
 80042a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b6:	2b80      	cmp	r3, #128	@ 0x80
 80042b8:	d0ef      	beq.n	800429a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ba:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <xPortStartScheduler+0x138>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f1c3 0307 	rsb	r3, r3, #7
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d00b      	beq.n	80042de <xPortStartScheduler+0xbe>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60bb      	str	r3, [r7, #8]
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	e7fd      	b.n	80042da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042de:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <xPortStartScheduler+0x138>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004358 <xPortStartScheduler+0x138>)
 80042e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <xPortStartScheduler+0x138>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042f0:	4a19      	ldr	r2, [pc, #100]	@ (8004358 <xPortStartScheduler+0x138>)
 80042f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <xPortStartScheduler+0x13c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a16      	ldr	r2, [pc, #88]	@ (800435c <xPortStartScheduler+0x13c>)
 8004302:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004308:	4b14      	ldr	r3, [pc, #80]	@ (800435c <xPortStartScheduler+0x13c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a13      	ldr	r2, [pc, #76]	@ (800435c <xPortStartScheduler+0x13c>)
 800430e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004314:	f000 f8da 	bl	80044cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004318:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <xPortStartScheduler+0x140>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800431e:	f000 f8f9 	bl	8004514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004322:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <xPortStartScheduler+0x144>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a0f      	ldr	r2, [pc, #60]	@ (8004364 <xPortStartScheduler+0x144>)
 8004328:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800432c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800432e:	f7ff ff63 	bl	80041f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004332:	f7ff fd3f 	bl	8003db4 <vTaskSwitchContext>
	prvTaskExitError();
 8004336:	f7ff ff17 	bl	8004168 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	e000ed00 	.word	0xe000ed00
 8004348:	410fc271 	.word	0x410fc271
 800434c:	410fc270 	.word	0x410fc270
 8004350:	e000e400 	.word	0xe000e400
 8004354:	20000530 	.word	0x20000530
 8004358:	20000534 	.word	0x20000534
 800435c:	e000ed20 	.word	0xe000ed20
 8004360:	2000000c 	.word	0x2000000c
 8004364:	e000ef34 	.word	0xe000ef34

08004368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	607b      	str	r3, [r7, #4]
}
 8004380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004382:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <vPortEnterCritical+0x5c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3301      	adds	r3, #1
 8004388:	4a0e      	ldr	r2, [pc, #56]	@ (80043c4 <vPortEnterCritical+0x5c>)
 800438a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800438c:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <vPortEnterCritical+0x5c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d110      	bne.n	80043b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004394:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <vPortEnterCritical+0x60>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	603b      	str	r3, [r7, #0]
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	e7fd      	b.n	80043b2 <vPortEnterCritical+0x4a>
	}
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000000c 	.word	0x2000000c
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <vPortExitCritical+0x50>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <vPortExitCritical+0x26>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	607b      	str	r3, [r7, #4]
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	e7fd      	b.n	80043ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043f2:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <vPortExitCritical+0x50>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	4a08      	ldr	r2, [pc, #32]	@ (800441c <vPortExitCritical+0x50>)
 80043fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043fc:	4b07      	ldr	r3, [pc, #28]	@ (800441c <vPortExitCritical+0x50>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <vPortExitCritical+0x44>
 8004404:	2300      	movs	r3, #0
 8004406:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800440e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	2000000c 	.word	0x2000000c

08004420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004420:	f3ef 8009 	mrs	r0, PSP
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <pxCurrentTCBConst>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f01e 0f10 	tst.w	lr, #16
 8004430:	bf08      	it	eq
 8004432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	6010      	str	r0, [r2, #0]
 800443c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004444:	f380 8811 	msr	BASEPRI, r0
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f7ff fcb0 	bl	8003db4 <vTaskSwitchContext>
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f380 8811 	msr	BASEPRI, r0
 800445c:	bc09      	pop	{r0, r3}
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004466:	f01e 0f10 	tst.w	lr, #16
 800446a:	bf08      	it	eq
 800446c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004470:	f380 8809 	msr	PSP, r0
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst>:
 8004480:	20000404 	.word	0x20000404
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	607b      	str	r3, [r7, #4]
}
 80044a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044a2:	f7ff fbcd 	bl	8003c40 <xTaskIncrementTick>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044ac:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <SysTick_Handler+0x40>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f383 8811 	msr	BASEPRI, r3
}
 80044be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <vPortSetupTimerInterrupt+0x38>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <vPortSetupTimerInterrupt+0x3c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <vPortSetupTimerInterrupt+0x40>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	4a09      	ldr	r2, [pc, #36]	@ (8004510 <vPortSetupTimerInterrupt+0x44>)
 80044ea:	3b01      	subs	r3, #1
 80044ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ee:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010
 8004504:	e000e018 	.word	0xe000e018
 8004508:	20000000 	.word	0x20000000
 800450c:	10624dd3 	.word	0x10624dd3
 8004510:	e000e014 	.word	0xe000e014

08004514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004524 <vPortEnableVFP+0x10>
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800451e:	6001      	str	r1, [r0, #0]
 8004520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004522:	bf00      	nop
 8004524:	e000ed88 	.word	0xe000ed88

08004528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	@ 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004534:	f7ff fad8 	bl	8003ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004538:	4b5c      	ldr	r3, [pc, #368]	@ (80046ac <pvPortMalloc+0x184>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004540:	f000 f924 	bl	800478c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004544:	4b5a      	ldr	r3, [pc, #360]	@ (80046b0 <pvPortMalloc+0x188>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 8095 	bne.w	800467c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01e      	beq.n	8004596 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004558:	2208      	movs	r2, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b00      	cmp	r3, #0
 8004568:	d015      	beq.n	8004596 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f023 0307 	bic.w	r3, r3, #7
 8004570:	3308      	adds	r3, #8
 8004572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <pvPortMalloc+0x6e>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	617b      	str	r3, [r7, #20]
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d06f      	beq.n	800467c <pvPortMalloc+0x154>
 800459c:	4b45      	ldr	r3, [pc, #276]	@ (80046b4 <pvPortMalloc+0x18c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d86a      	bhi.n	800467c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045a6:	4b44      	ldr	r3, [pc, #272]	@ (80046b8 <pvPortMalloc+0x190>)
 80045a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045aa:	4b43      	ldr	r3, [pc, #268]	@ (80046b8 <pvPortMalloc+0x190>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045b0:	e004      	b.n	80045bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d903      	bls.n	80045ce <pvPortMalloc+0xa6>
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f1      	bne.n	80045b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045ce:	4b37      	ldr	r3, [pc, #220]	@ (80046ac <pvPortMalloc+0x184>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d051      	beq.n	800467c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2208      	movs	r2, #8
 80045de:	4413      	add	r3, r2
 80045e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	1ad2      	subs	r2, r2, r3
 80045f2:	2308      	movs	r3, #8
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d920      	bls.n	800463c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <pvPortMalloc+0xfc>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	613b      	str	r3, [r7, #16]
}
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	e7fd      	b.n	8004620 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad2      	subs	r2, r2, r3
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004636:	69b8      	ldr	r0, [r7, #24]
 8004638:	f000 f90a 	bl	8004850 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800463c:	4b1d      	ldr	r3, [pc, #116]	@ (80046b4 <pvPortMalloc+0x18c>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	4a1b      	ldr	r2, [pc, #108]	@ (80046b4 <pvPortMalloc+0x18c>)
 8004648:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800464a:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <pvPortMalloc+0x18c>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b1b      	ldr	r3, [pc, #108]	@ (80046bc <pvPortMalloc+0x194>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d203      	bcs.n	800465e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004656:	4b17      	ldr	r3, [pc, #92]	@ (80046b4 <pvPortMalloc+0x18c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a18      	ldr	r2, [pc, #96]	@ (80046bc <pvPortMalloc+0x194>)
 800465c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	4b13      	ldr	r3, [pc, #76]	@ (80046b0 <pvPortMalloc+0x188>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	431a      	orrs	r2, r3
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004672:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <pvPortMalloc+0x198>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	4a11      	ldr	r2, [pc, #68]	@ (80046c0 <pvPortMalloc+0x198>)
 800467a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800467c:	f7ff fa42 	bl	8003b04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <pvPortMalloc+0x17a>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	60fb      	str	r3, [r7, #12]
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	e7fd      	b.n	800469e <pvPortMalloc+0x176>
	return pvReturn;
 80046a2:	69fb      	ldr	r3, [r7, #28]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	@ 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	200010f8 	.word	0x200010f8
 80046b0:	2000110c 	.word	0x2000110c
 80046b4:	200010fc 	.word	0x200010fc
 80046b8:	200010f0 	.word	0x200010f0
 80046bc:	20001100 	.word	0x20001100
 80046c0:	20001104 	.word	0x20001104

080046c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d04f      	beq.n	8004776 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046d6:	2308      	movs	r3, #8
 80046d8:	425b      	negs	r3, r3
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	4b25      	ldr	r3, [pc, #148]	@ (8004780 <vPortFree+0xbc>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <vPortFree+0x46>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	60fb      	str	r3, [r7, #12]
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	e7fd      	b.n	8004706 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <vPortFree+0x66>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	60bb      	str	r3, [r7, #8]
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	e7fd      	b.n	8004726 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	4b14      	ldr	r3, [pc, #80]	@ (8004780 <vPortFree+0xbc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4013      	ands	r3, r2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01e      	beq.n	8004776 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11a      	bne.n	8004776 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <vPortFree+0xbc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	43db      	mvns	r3, r3
 800474a:	401a      	ands	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004750:	f7ff f9ca 	bl	8003ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <vPortFree+0xc0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4413      	add	r3, r2
 800475e:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <vPortFree+0xc0>)
 8004760:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004762:	6938      	ldr	r0, [r7, #16]
 8004764:	f000 f874 	bl	8004850 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004768:	4b07      	ldr	r3, [pc, #28]	@ (8004788 <vPortFree+0xc4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	4a06      	ldr	r2, [pc, #24]	@ (8004788 <vPortFree+0xc4>)
 8004770:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004772:	f7ff f9c7 	bl	8003b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	2000110c 	.word	0x2000110c
 8004784:	200010fc 	.word	0x200010fc
 8004788:	20001108 	.word	0x20001108

0800478c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004792:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004796:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004798:	4b27      	ldr	r3, [pc, #156]	@ (8004838 <prvHeapInit+0xac>)
 800479a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3307      	adds	r3, #7
 80047aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004838 <prvHeapInit+0xac>)
 80047bc:	4413      	add	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047c4:	4a1d      	ldr	r2, [pc, #116]	@ (800483c <prvHeapInit+0xb0>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047ca:	4b1c      	ldr	r3, [pc, #112]	@ (800483c <prvHeapInit+0xb0>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4413      	add	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047d8:	2208      	movs	r2, #8
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a15      	ldr	r2, [pc, #84]	@ (8004840 <prvHeapInit+0xb4>)
 80047ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047ee:	4b14      	ldr	r3, [pc, #80]	@ (8004840 <prvHeapInit+0xb4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047f6:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <prvHeapInit+0xb4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	1ad2      	subs	r2, r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800480c:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <prvHeapInit+0xb4>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <prvHeapInit+0xb8>)
 800481a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a09      	ldr	r2, [pc, #36]	@ (8004848 <prvHeapInit+0xbc>)
 8004822:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004824:	4b09      	ldr	r3, [pc, #36]	@ (800484c <prvHeapInit+0xc0>)
 8004826:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800482a:	601a      	str	r2, [r3, #0]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	20000538 	.word	0x20000538
 800483c:	200010f0 	.word	0x200010f0
 8004840:	200010f8 	.word	0x200010f8
 8004844:	20001100 	.word	0x20001100
 8004848:	200010fc 	.word	0x200010fc
 800484c:	2000110c 	.word	0x2000110c

08004850 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004858:	4b28      	ldr	r3, [pc, #160]	@ (80048fc <prvInsertBlockIntoFreeList+0xac>)
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e002      	b.n	8004864 <prvInsertBlockIntoFreeList+0x14>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	429a      	cmp	r2, r3
 800486c:	d8f7      	bhi.n	800485e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	4413      	add	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	d108      	bne.n	8004892 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	441a      	add	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	441a      	add	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d118      	bne.n	80048d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <prvInsertBlockIntoFreeList+0xb0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d00d      	beq.n	80048ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	441a      	add	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	e008      	b.n	80048e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <prvInsertBlockIntoFreeList+0xb0>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e003      	b.n	80048e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d002      	beq.n	80048ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	200010f0 	.word	0x200010f0
 8004900:	200010f8 	.word	0x200010f8

08004904 <siprintf>:
 8004904:	b40e      	push	{r1, r2, r3}
 8004906:	b500      	push	{lr}
 8004908:	b09c      	sub	sp, #112	@ 0x70
 800490a:	ab1d      	add	r3, sp, #116	@ 0x74
 800490c:	9002      	str	r0, [sp, #8]
 800490e:	9006      	str	r0, [sp, #24]
 8004910:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004914:	4809      	ldr	r0, [pc, #36]	@ (800493c <siprintf+0x38>)
 8004916:	9107      	str	r1, [sp, #28]
 8004918:	9104      	str	r1, [sp, #16]
 800491a:	4909      	ldr	r1, [pc, #36]	@ (8004940 <siprintf+0x3c>)
 800491c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004920:	9105      	str	r1, [sp, #20]
 8004922:	6800      	ldr	r0, [r0, #0]
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	a902      	add	r1, sp, #8
 8004928:	f000 f9f8 	bl	8004d1c <_svfiprintf_r>
 800492c:	9b02      	ldr	r3, [sp, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	b01c      	add	sp, #112	@ 0x70
 8004934:	f85d eb04 	ldr.w	lr, [sp], #4
 8004938:	b003      	add	sp, #12
 800493a:	4770      	bx	lr
 800493c:	20000010 	.word	0x20000010
 8004940:	ffff0208 	.word	0xffff0208

08004944 <memset>:
 8004944:	4402      	add	r2, r0
 8004946:	4603      	mov	r3, r0
 8004948:	4293      	cmp	r3, r2
 800494a:	d100      	bne.n	800494e <memset+0xa>
 800494c:	4770      	bx	lr
 800494e:	f803 1b01 	strb.w	r1, [r3], #1
 8004952:	e7f9      	b.n	8004948 <memset+0x4>

08004954 <_reclaim_reent>:
 8004954:	4b29      	ldr	r3, [pc, #164]	@ (80049fc <_reclaim_reent+0xa8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4283      	cmp	r3, r0
 800495a:	b570      	push	{r4, r5, r6, lr}
 800495c:	4604      	mov	r4, r0
 800495e:	d04b      	beq.n	80049f8 <_reclaim_reent+0xa4>
 8004960:	69c3      	ldr	r3, [r0, #28]
 8004962:	b1ab      	cbz	r3, 8004990 <_reclaim_reent+0x3c>
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	b16b      	cbz	r3, 8004984 <_reclaim_reent+0x30>
 8004968:	2500      	movs	r5, #0
 800496a:	69e3      	ldr	r3, [r4, #28]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	5959      	ldr	r1, [r3, r5]
 8004970:	2900      	cmp	r1, #0
 8004972:	d13b      	bne.n	80049ec <_reclaim_reent+0x98>
 8004974:	3504      	adds	r5, #4
 8004976:	2d80      	cmp	r5, #128	@ 0x80
 8004978:	d1f7      	bne.n	800496a <_reclaim_reent+0x16>
 800497a:	69e3      	ldr	r3, [r4, #28]
 800497c:	4620      	mov	r0, r4
 800497e:	68d9      	ldr	r1, [r3, #12]
 8004980:	f000 f878 	bl	8004a74 <_free_r>
 8004984:	69e3      	ldr	r3, [r4, #28]
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	b111      	cbz	r1, 8004990 <_reclaim_reent+0x3c>
 800498a:	4620      	mov	r0, r4
 800498c:	f000 f872 	bl	8004a74 <_free_r>
 8004990:	6961      	ldr	r1, [r4, #20]
 8004992:	b111      	cbz	r1, 800499a <_reclaim_reent+0x46>
 8004994:	4620      	mov	r0, r4
 8004996:	f000 f86d 	bl	8004a74 <_free_r>
 800499a:	69e1      	ldr	r1, [r4, #28]
 800499c:	b111      	cbz	r1, 80049a4 <_reclaim_reent+0x50>
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 f868 	bl	8004a74 <_free_r>
 80049a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80049a6:	b111      	cbz	r1, 80049ae <_reclaim_reent+0x5a>
 80049a8:	4620      	mov	r0, r4
 80049aa:	f000 f863 	bl	8004a74 <_free_r>
 80049ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049b0:	b111      	cbz	r1, 80049b8 <_reclaim_reent+0x64>
 80049b2:	4620      	mov	r0, r4
 80049b4:	f000 f85e 	bl	8004a74 <_free_r>
 80049b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80049ba:	b111      	cbz	r1, 80049c2 <_reclaim_reent+0x6e>
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 f859 	bl	8004a74 <_free_r>
 80049c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80049c4:	b111      	cbz	r1, 80049cc <_reclaim_reent+0x78>
 80049c6:	4620      	mov	r0, r4
 80049c8:	f000 f854 	bl	8004a74 <_free_r>
 80049cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80049ce:	b111      	cbz	r1, 80049d6 <_reclaim_reent+0x82>
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 f84f 	bl	8004a74 <_free_r>
 80049d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80049d8:	b111      	cbz	r1, 80049e0 <_reclaim_reent+0x8c>
 80049da:	4620      	mov	r0, r4
 80049dc:	f000 f84a 	bl	8004a74 <_free_r>
 80049e0:	6a23      	ldr	r3, [r4, #32]
 80049e2:	b14b      	cbz	r3, 80049f8 <_reclaim_reent+0xa4>
 80049e4:	4620      	mov	r0, r4
 80049e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049ea:	4718      	bx	r3
 80049ec:	680e      	ldr	r6, [r1, #0]
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 f840 	bl	8004a74 <_free_r>
 80049f4:	4631      	mov	r1, r6
 80049f6:	e7bb      	b.n	8004970 <_reclaim_reent+0x1c>
 80049f8:	bd70      	pop	{r4, r5, r6, pc}
 80049fa:	bf00      	nop
 80049fc:	20000010 	.word	0x20000010

08004a00 <__errno>:
 8004a00:	4b01      	ldr	r3, [pc, #4]	@ (8004a08 <__errno+0x8>)
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000010 	.word	0x20000010

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	@ (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1b64      	subs	r4, r4, r5
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2600      	movs	r6, #0
 8004a18:	42a6      	cmp	r6, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8004a50 <__libc_init_array+0x44>)
 8004a20:	f000 fc66 	bl	80052f0 <_init>
 8004a24:	1b64      	subs	r4, r4, r5
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2600      	movs	r6, #0
 8004a2a:	42a6      	cmp	r6, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a34:	4798      	blx	r3
 8004a36:	3601      	adds	r6, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3e:	4798      	blx	r3
 8004a40:	3601      	adds	r6, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	08005400 	.word	0x08005400
 8004a48:	08005400 	.word	0x08005400
 8004a4c:	08005400 	.word	0x08005400
 8004a50:	08005404 	.word	0x08005404

08004a54 <__retarget_lock_acquire_recursive>:
 8004a54:	4770      	bx	lr

08004a56 <__retarget_lock_release_recursive>:
 8004a56:	4770      	bx	lr

08004a58 <memcpy>:
 8004a58:	440a      	add	r2, r1
 8004a5a:	4291      	cmp	r1, r2
 8004a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a60:	d100      	bne.n	8004a64 <memcpy+0xc>
 8004a62:	4770      	bx	lr
 8004a64:	b510      	push	{r4, lr}
 8004a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a6e:	4291      	cmp	r1, r2
 8004a70:	d1f9      	bne.n	8004a66 <memcpy+0xe>
 8004a72:	bd10      	pop	{r4, pc}

08004a74 <_free_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4605      	mov	r5, r0
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	d041      	beq.n	8004b00 <_free_r+0x8c>
 8004a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a80:	1f0c      	subs	r4, r1, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bfb8      	it	lt
 8004a86:	18e4      	addlt	r4, r4, r3
 8004a88:	f000 f8e0 	bl	8004c4c <__malloc_lock>
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b04 <_free_r+0x90>)
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	b933      	cbnz	r3, 8004aa0 <_free_r+0x2c>
 8004a92:	6063      	str	r3, [r4, #4]
 8004a94:	6014      	str	r4, [r2, #0]
 8004a96:	4628      	mov	r0, r5
 8004a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a9c:	f000 b8dc 	b.w	8004c58 <__malloc_unlock>
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	d908      	bls.n	8004ab6 <_free_r+0x42>
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	1821      	adds	r1, r4, r0
 8004aa8:	428b      	cmp	r3, r1
 8004aaa:	bf01      	itttt	eq
 8004aac:	6819      	ldreq	r1, [r3, #0]
 8004aae:	685b      	ldreq	r3, [r3, #4]
 8004ab0:	1809      	addeq	r1, r1, r0
 8004ab2:	6021      	streq	r1, [r4, #0]
 8004ab4:	e7ed      	b.n	8004a92 <_free_r+0x1e>
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	b10b      	cbz	r3, 8004ac0 <_free_r+0x4c>
 8004abc:	42a3      	cmp	r3, r4
 8004abe:	d9fa      	bls.n	8004ab6 <_free_r+0x42>
 8004ac0:	6811      	ldr	r1, [r2, #0]
 8004ac2:	1850      	adds	r0, r2, r1
 8004ac4:	42a0      	cmp	r0, r4
 8004ac6:	d10b      	bne.n	8004ae0 <_free_r+0x6c>
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	4401      	add	r1, r0
 8004acc:	1850      	adds	r0, r2, r1
 8004ace:	4283      	cmp	r3, r0
 8004ad0:	6011      	str	r1, [r2, #0]
 8004ad2:	d1e0      	bne.n	8004a96 <_free_r+0x22>
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	6053      	str	r3, [r2, #4]
 8004ada:	4408      	add	r0, r1
 8004adc:	6010      	str	r0, [r2, #0]
 8004ade:	e7da      	b.n	8004a96 <_free_r+0x22>
 8004ae0:	d902      	bls.n	8004ae8 <_free_r+0x74>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	e7d6      	b.n	8004a96 <_free_r+0x22>
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	1821      	adds	r1, r4, r0
 8004aec:	428b      	cmp	r3, r1
 8004aee:	bf04      	itt	eq
 8004af0:	6819      	ldreq	r1, [r3, #0]
 8004af2:	685b      	ldreq	r3, [r3, #4]
 8004af4:	6063      	str	r3, [r4, #4]
 8004af6:	bf04      	itt	eq
 8004af8:	1809      	addeq	r1, r1, r0
 8004afa:	6021      	streq	r1, [r4, #0]
 8004afc:	6054      	str	r4, [r2, #4]
 8004afe:	e7ca      	b.n	8004a96 <_free_r+0x22>
 8004b00:	bd38      	pop	{r3, r4, r5, pc}
 8004b02:	bf00      	nop
 8004b04:	20001254 	.word	0x20001254

08004b08 <sbrk_aligned>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	4e0f      	ldr	r6, [pc, #60]	@ (8004b48 <sbrk_aligned+0x40>)
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	6831      	ldr	r1, [r6, #0]
 8004b10:	4605      	mov	r5, r0
 8004b12:	b911      	cbnz	r1, 8004b1a <sbrk_aligned+0x12>
 8004b14:	f000 fba6 	bl	8005264 <_sbrk_r>
 8004b18:	6030      	str	r0, [r6, #0]
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f000 fba1 	bl	8005264 <_sbrk_r>
 8004b22:	1c43      	adds	r3, r0, #1
 8004b24:	d103      	bne.n	8004b2e <sbrk_aligned+0x26>
 8004b26:	f04f 34ff 	mov.w	r4, #4294967295
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	bd70      	pop	{r4, r5, r6, pc}
 8004b2e:	1cc4      	adds	r4, r0, #3
 8004b30:	f024 0403 	bic.w	r4, r4, #3
 8004b34:	42a0      	cmp	r0, r4
 8004b36:	d0f8      	beq.n	8004b2a <sbrk_aligned+0x22>
 8004b38:	1a21      	subs	r1, r4, r0
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f000 fb92 	bl	8005264 <_sbrk_r>
 8004b40:	3001      	adds	r0, #1
 8004b42:	d1f2      	bne.n	8004b2a <sbrk_aligned+0x22>
 8004b44:	e7ef      	b.n	8004b26 <sbrk_aligned+0x1e>
 8004b46:	bf00      	nop
 8004b48:	20001250 	.word	0x20001250

08004b4c <_malloc_r>:
 8004b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b50:	1ccd      	adds	r5, r1, #3
 8004b52:	f025 0503 	bic.w	r5, r5, #3
 8004b56:	3508      	adds	r5, #8
 8004b58:	2d0c      	cmp	r5, #12
 8004b5a:	bf38      	it	cc
 8004b5c:	250c      	movcc	r5, #12
 8004b5e:	2d00      	cmp	r5, #0
 8004b60:	4606      	mov	r6, r0
 8004b62:	db01      	blt.n	8004b68 <_malloc_r+0x1c>
 8004b64:	42a9      	cmp	r1, r5
 8004b66:	d904      	bls.n	8004b72 <_malloc_r+0x26>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c48 <_malloc_r+0xfc>
 8004b76:	f000 f869 	bl	8004c4c <__malloc_lock>
 8004b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b7e:	461c      	mov	r4, r3
 8004b80:	bb44      	cbnz	r4, 8004bd4 <_malloc_r+0x88>
 8004b82:	4629      	mov	r1, r5
 8004b84:	4630      	mov	r0, r6
 8004b86:	f7ff ffbf 	bl	8004b08 <sbrk_aligned>
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	d158      	bne.n	8004c42 <_malloc_r+0xf6>
 8004b90:	f8d8 4000 	ldr.w	r4, [r8]
 8004b94:	4627      	mov	r7, r4
 8004b96:	2f00      	cmp	r7, #0
 8004b98:	d143      	bne.n	8004c22 <_malloc_r+0xd6>
 8004b9a:	2c00      	cmp	r4, #0
 8004b9c:	d04b      	beq.n	8004c36 <_malloc_r+0xea>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	4639      	mov	r1, r7
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	eb04 0903 	add.w	r9, r4, r3
 8004ba8:	f000 fb5c 	bl	8005264 <_sbrk_r>
 8004bac:	4581      	cmp	r9, r0
 8004bae:	d142      	bne.n	8004c36 <_malloc_r+0xea>
 8004bb0:	6821      	ldr	r1, [r4, #0]
 8004bb2:	1a6d      	subs	r5, r5, r1
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f7ff ffa6 	bl	8004b08 <sbrk_aligned>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d03a      	beq.n	8004c36 <_malloc_r+0xea>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	442b      	add	r3, r5
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	bb62      	cbnz	r2, 8004c28 <_malloc_r+0xdc>
 8004bce:	f8c8 7000 	str.w	r7, [r8]
 8004bd2:	e00f      	b.n	8004bf4 <_malloc_r+0xa8>
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	1b52      	subs	r2, r2, r5
 8004bd8:	d420      	bmi.n	8004c1c <_malloc_r+0xd0>
 8004bda:	2a0b      	cmp	r2, #11
 8004bdc:	d917      	bls.n	8004c0e <_malloc_r+0xc2>
 8004bde:	1961      	adds	r1, r4, r5
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	6025      	str	r5, [r4, #0]
 8004be4:	bf18      	it	ne
 8004be6:	6059      	strne	r1, [r3, #4]
 8004be8:	6863      	ldr	r3, [r4, #4]
 8004bea:	bf08      	it	eq
 8004bec:	f8c8 1000 	streq.w	r1, [r8]
 8004bf0:	5162      	str	r2, [r4, r5]
 8004bf2:	604b      	str	r3, [r1, #4]
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 f82f 	bl	8004c58 <__malloc_unlock>
 8004bfa:	f104 000b 	add.w	r0, r4, #11
 8004bfe:	1d23      	adds	r3, r4, #4
 8004c00:	f020 0007 	bic.w	r0, r0, #7
 8004c04:	1ac2      	subs	r2, r0, r3
 8004c06:	bf1c      	itt	ne
 8004c08:	1a1b      	subne	r3, r3, r0
 8004c0a:	50a3      	strne	r3, [r4, r2]
 8004c0c:	e7af      	b.n	8004b6e <_malloc_r+0x22>
 8004c0e:	6862      	ldr	r2, [r4, #4]
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	bf0c      	ite	eq
 8004c14:	f8c8 2000 	streq.w	r2, [r8]
 8004c18:	605a      	strne	r2, [r3, #4]
 8004c1a:	e7eb      	b.n	8004bf4 <_malloc_r+0xa8>
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	6864      	ldr	r4, [r4, #4]
 8004c20:	e7ae      	b.n	8004b80 <_malloc_r+0x34>
 8004c22:	463c      	mov	r4, r7
 8004c24:	687f      	ldr	r7, [r7, #4]
 8004c26:	e7b6      	b.n	8004b96 <_malloc_r+0x4a>
 8004c28:	461a      	mov	r2, r3
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	d1fb      	bne.n	8004c28 <_malloc_r+0xdc>
 8004c30:	2300      	movs	r3, #0
 8004c32:	6053      	str	r3, [r2, #4]
 8004c34:	e7de      	b.n	8004bf4 <_malloc_r+0xa8>
 8004c36:	230c      	movs	r3, #12
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f000 f80c 	bl	8004c58 <__malloc_unlock>
 8004c40:	e794      	b.n	8004b6c <_malloc_r+0x20>
 8004c42:	6005      	str	r5, [r0, #0]
 8004c44:	e7d6      	b.n	8004bf4 <_malloc_r+0xa8>
 8004c46:	bf00      	nop
 8004c48:	20001254 	.word	0x20001254

08004c4c <__malloc_lock>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	@ (8004c54 <__malloc_lock+0x8>)
 8004c4e:	f7ff bf01 	b.w	8004a54 <__retarget_lock_acquire_recursive>
 8004c52:	bf00      	nop
 8004c54:	2000124c 	.word	0x2000124c

08004c58 <__malloc_unlock>:
 8004c58:	4801      	ldr	r0, [pc, #4]	@ (8004c60 <__malloc_unlock+0x8>)
 8004c5a:	f7ff befc 	b.w	8004a56 <__retarget_lock_release_recursive>
 8004c5e:	bf00      	nop
 8004c60:	2000124c 	.word	0x2000124c

08004c64 <__ssputs_r>:
 8004c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	688e      	ldr	r6, [r1, #8]
 8004c6a:	461f      	mov	r7, r3
 8004c6c:	42be      	cmp	r6, r7
 8004c6e:	680b      	ldr	r3, [r1, #0]
 8004c70:	4682      	mov	sl, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	4690      	mov	r8, r2
 8004c76:	d82d      	bhi.n	8004cd4 <__ssputs_r+0x70>
 8004c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c80:	d026      	beq.n	8004cd0 <__ssputs_r+0x6c>
 8004c82:	6965      	ldr	r5, [r4, #20]
 8004c84:	6909      	ldr	r1, [r1, #16]
 8004c86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c8a:	eba3 0901 	sub.w	r9, r3, r1
 8004c8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c92:	1c7b      	adds	r3, r7, #1
 8004c94:	444b      	add	r3, r9
 8004c96:	106d      	asrs	r5, r5, #1
 8004c98:	429d      	cmp	r5, r3
 8004c9a:	bf38      	it	cc
 8004c9c:	461d      	movcc	r5, r3
 8004c9e:	0553      	lsls	r3, r2, #21
 8004ca0:	d527      	bpl.n	8004cf2 <__ssputs_r+0x8e>
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	f7ff ff52 	bl	8004b4c <_malloc_r>
 8004ca8:	4606      	mov	r6, r0
 8004caa:	b360      	cbz	r0, 8004d06 <__ssputs_r+0xa2>
 8004cac:	6921      	ldr	r1, [r4, #16]
 8004cae:	464a      	mov	r2, r9
 8004cb0:	f7ff fed2 	bl	8004a58 <memcpy>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	6126      	str	r6, [r4, #16]
 8004cc2:	6165      	str	r5, [r4, #20]
 8004cc4:	444e      	add	r6, r9
 8004cc6:	eba5 0509 	sub.w	r5, r5, r9
 8004cca:	6026      	str	r6, [r4, #0]
 8004ccc:	60a5      	str	r5, [r4, #8]
 8004cce:	463e      	mov	r6, r7
 8004cd0:	42be      	cmp	r6, r7
 8004cd2:	d900      	bls.n	8004cd6 <__ssputs_r+0x72>
 8004cd4:	463e      	mov	r6, r7
 8004cd6:	6820      	ldr	r0, [r4, #0]
 8004cd8:	4632      	mov	r2, r6
 8004cda:	4641      	mov	r1, r8
 8004cdc:	f000 faa8 	bl	8005230 <memmove>
 8004ce0:	68a3      	ldr	r3, [r4, #8]
 8004ce2:	1b9b      	subs	r3, r3, r6
 8004ce4:	60a3      	str	r3, [r4, #8]
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	4433      	add	r3, r6
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	2000      	movs	r0, #0
 8004cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf2:	462a      	mov	r2, r5
 8004cf4:	f000 fac6 	bl	8005284 <_realloc_r>
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d1e0      	bne.n	8004cc0 <__ssputs_r+0x5c>
 8004cfe:	6921      	ldr	r1, [r4, #16]
 8004d00:	4650      	mov	r0, sl
 8004d02:	f7ff feb7 	bl	8004a74 <_free_r>
 8004d06:	230c      	movs	r3, #12
 8004d08:	f8ca 3000 	str.w	r3, [sl]
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	e7e9      	b.n	8004cee <__ssputs_r+0x8a>
	...

08004d1c <_svfiprintf_r>:
 8004d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d20:	4698      	mov	r8, r3
 8004d22:	898b      	ldrh	r3, [r1, #12]
 8004d24:	061b      	lsls	r3, r3, #24
 8004d26:	b09d      	sub	sp, #116	@ 0x74
 8004d28:	4607      	mov	r7, r0
 8004d2a:	460d      	mov	r5, r1
 8004d2c:	4614      	mov	r4, r2
 8004d2e:	d510      	bpl.n	8004d52 <_svfiprintf_r+0x36>
 8004d30:	690b      	ldr	r3, [r1, #16]
 8004d32:	b973      	cbnz	r3, 8004d52 <_svfiprintf_r+0x36>
 8004d34:	2140      	movs	r1, #64	@ 0x40
 8004d36:	f7ff ff09 	bl	8004b4c <_malloc_r>
 8004d3a:	6028      	str	r0, [r5, #0]
 8004d3c:	6128      	str	r0, [r5, #16]
 8004d3e:	b930      	cbnz	r0, 8004d4e <_svfiprintf_r+0x32>
 8004d40:	230c      	movs	r3, #12
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	b01d      	add	sp, #116	@ 0x74
 8004d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4e:	2340      	movs	r3, #64	@ 0x40
 8004d50:	616b      	str	r3, [r5, #20]
 8004d52:	2300      	movs	r3, #0
 8004d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d56:	2320      	movs	r3, #32
 8004d58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d60:	2330      	movs	r3, #48	@ 0x30
 8004d62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f00 <_svfiprintf_r+0x1e4>
 8004d66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d6a:	f04f 0901 	mov.w	r9, #1
 8004d6e:	4623      	mov	r3, r4
 8004d70:	469a      	mov	sl, r3
 8004d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d76:	b10a      	cbz	r2, 8004d7c <_svfiprintf_r+0x60>
 8004d78:	2a25      	cmp	r2, #37	@ 0x25
 8004d7a:	d1f9      	bne.n	8004d70 <_svfiprintf_r+0x54>
 8004d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d80:	d00b      	beq.n	8004d9a <_svfiprintf_r+0x7e>
 8004d82:	465b      	mov	r3, fp
 8004d84:	4622      	mov	r2, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	4638      	mov	r0, r7
 8004d8a:	f7ff ff6b 	bl	8004c64 <__ssputs_r>
 8004d8e:	3001      	adds	r0, #1
 8004d90:	f000 80a7 	beq.w	8004ee2 <_svfiprintf_r+0x1c6>
 8004d94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d96:	445a      	add	r2, fp
 8004d98:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 809f 	beq.w	8004ee2 <_svfiprintf_r+0x1c6>
 8004da4:	2300      	movs	r3, #0
 8004da6:	f04f 32ff 	mov.w	r2, #4294967295
 8004daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dae:	f10a 0a01 	add.w	sl, sl, #1
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	9307      	str	r3, [sp, #28]
 8004db6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dba:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dbc:	4654      	mov	r4, sl
 8004dbe:	2205      	movs	r2, #5
 8004dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc4:	484e      	ldr	r0, [pc, #312]	@ (8004f00 <_svfiprintf_r+0x1e4>)
 8004dc6:	f7fb fa0b 	bl	80001e0 <memchr>
 8004dca:	9a04      	ldr	r2, [sp, #16]
 8004dcc:	b9d8      	cbnz	r0, 8004e06 <_svfiprintf_r+0xea>
 8004dce:	06d0      	lsls	r0, r2, #27
 8004dd0:	bf44      	itt	mi
 8004dd2:	2320      	movmi	r3, #32
 8004dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dd8:	0711      	lsls	r1, r2, #28
 8004dda:	bf44      	itt	mi
 8004ddc:	232b      	movmi	r3, #43	@ 0x2b
 8004dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004de2:	f89a 3000 	ldrb.w	r3, [sl]
 8004de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004de8:	d015      	beq.n	8004e16 <_svfiprintf_r+0xfa>
 8004dea:	9a07      	ldr	r2, [sp, #28]
 8004dec:	4654      	mov	r4, sl
 8004dee:	2000      	movs	r0, #0
 8004df0:	f04f 0c0a 	mov.w	ip, #10
 8004df4:	4621      	mov	r1, r4
 8004df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dfa:	3b30      	subs	r3, #48	@ 0x30
 8004dfc:	2b09      	cmp	r3, #9
 8004dfe:	d94b      	bls.n	8004e98 <_svfiprintf_r+0x17c>
 8004e00:	b1b0      	cbz	r0, 8004e30 <_svfiprintf_r+0x114>
 8004e02:	9207      	str	r2, [sp, #28]
 8004e04:	e014      	b.n	8004e30 <_svfiprintf_r+0x114>
 8004e06:	eba0 0308 	sub.w	r3, r0, r8
 8004e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	46a2      	mov	sl, r4
 8004e14:	e7d2      	b.n	8004dbc <_svfiprintf_r+0xa0>
 8004e16:	9b03      	ldr	r3, [sp, #12]
 8004e18:	1d19      	adds	r1, r3, #4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	9103      	str	r1, [sp, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bfbb      	ittet	lt
 8004e22:	425b      	neglt	r3, r3
 8004e24:	f042 0202 	orrlt.w	r2, r2, #2
 8004e28:	9307      	strge	r3, [sp, #28]
 8004e2a:	9307      	strlt	r3, [sp, #28]
 8004e2c:	bfb8      	it	lt
 8004e2e:	9204      	strlt	r2, [sp, #16]
 8004e30:	7823      	ldrb	r3, [r4, #0]
 8004e32:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e34:	d10a      	bne.n	8004e4c <_svfiprintf_r+0x130>
 8004e36:	7863      	ldrb	r3, [r4, #1]
 8004e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e3a:	d132      	bne.n	8004ea2 <_svfiprintf_r+0x186>
 8004e3c:	9b03      	ldr	r3, [sp, #12]
 8004e3e:	1d1a      	adds	r2, r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	9203      	str	r2, [sp, #12]
 8004e44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e48:	3402      	adds	r4, #2
 8004e4a:	9305      	str	r3, [sp, #20]
 8004e4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f10 <_svfiprintf_r+0x1f4>
 8004e50:	7821      	ldrb	r1, [r4, #0]
 8004e52:	2203      	movs	r2, #3
 8004e54:	4650      	mov	r0, sl
 8004e56:	f7fb f9c3 	bl	80001e0 <memchr>
 8004e5a:	b138      	cbz	r0, 8004e6c <_svfiprintf_r+0x150>
 8004e5c:	9b04      	ldr	r3, [sp, #16]
 8004e5e:	eba0 000a 	sub.w	r0, r0, sl
 8004e62:	2240      	movs	r2, #64	@ 0x40
 8004e64:	4082      	lsls	r2, r0
 8004e66:	4313      	orrs	r3, r2
 8004e68:	3401      	adds	r4, #1
 8004e6a:	9304      	str	r3, [sp, #16]
 8004e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e70:	4824      	ldr	r0, [pc, #144]	@ (8004f04 <_svfiprintf_r+0x1e8>)
 8004e72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e76:	2206      	movs	r2, #6
 8004e78:	f7fb f9b2 	bl	80001e0 <memchr>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d036      	beq.n	8004eee <_svfiprintf_r+0x1d2>
 8004e80:	4b21      	ldr	r3, [pc, #132]	@ (8004f08 <_svfiprintf_r+0x1ec>)
 8004e82:	bb1b      	cbnz	r3, 8004ecc <_svfiprintf_r+0x1b0>
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	3307      	adds	r3, #7
 8004e88:	f023 0307 	bic.w	r3, r3, #7
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	9303      	str	r3, [sp, #12]
 8004e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e92:	4433      	add	r3, r6
 8004e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e96:	e76a      	b.n	8004d6e <_svfiprintf_r+0x52>
 8004e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	e7a8      	b.n	8004df4 <_svfiprintf_r+0xd8>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	3401      	adds	r4, #1
 8004ea6:	9305      	str	r3, [sp, #20]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f04f 0c0a 	mov.w	ip, #10
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eb4:	3a30      	subs	r2, #48	@ 0x30
 8004eb6:	2a09      	cmp	r2, #9
 8004eb8:	d903      	bls.n	8004ec2 <_svfiprintf_r+0x1a6>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0c6      	beq.n	8004e4c <_svfiprintf_r+0x130>
 8004ebe:	9105      	str	r1, [sp, #20]
 8004ec0:	e7c4      	b.n	8004e4c <_svfiprintf_r+0x130>
 8004ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e7f0      	b.n	8004eae <_svfiprintf_r+0x192>
 8004ecc:	ab03      	add	r3, sp, #12
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	462a      	mov	r2, r5
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <_svfiprintf_r+0x1f0>)
 8004ed4:	a904      	add	r1, sp, #16
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f3af 8000 	nop.w
 8004edc:	1c42      	adds	r2, r0, #1
 8004ede:	4606      	mov	r6, r0
 8004ee0:	d1d6      	bne.n	8004e90 <_svfiprintf_r+0x174>
 8004ee2:	89ab      	ldrh	r3, [r5, #12]
 8004ee4:	065b      	lsls	r3, r3, #25
 8004ee6:	f53f af2d 	bmi.w	8004d44 <_svfiprintf_r+0x28>
 8004eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004eec:	e72c      	b.n	8004d48 <_svfiprintf_r+0x2c>
 8004eee:	ab03      	add	r3, sp, #12
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	462a      	mov	r2, r5
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <_svfiprintf_r+0x1f0>)
 8004ef6:	a904      	add	r1, sp, #16
 8004ef8:	4638      	mov	r0, r7
 8004efa:	f000 f879 	bl	8004ff0 <_printf_i>
 8004efe:	e7ed      	b.n	8004edc <_svfiprintf_r+0x1c0>
 8004f00:	080053c4 	.word	0x080053c4
 8004f04:	080053ce 	.word	0x080053ce
 8004f08:	00000000 	.word	0x00000000
 8004f0c:	08004c65 	.word	0x08004c65
 8004f10:	080053ca 	.word	0x080053ca

08004f14 <_printf_common>:
 8004f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f18:	4616      	mov	r6, r2
 8004f1a:	4698      	mov	r8, r3
 8004f1c:	688a      	ldr	r2, [r1, #8]
 8004f1e:	690b      	ldr	r3, [r1, #16]
 8004f20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bfb8      	it	lt
 8004f28:	4613      	movlt	r3, r2
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f30:	4607      	mov	r7, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	b10a      	cbz	r2, 8004f3a <_printf_common+0x26>
 8004f36:	3301      	adds	r3, #1
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	0699      	lsls	r1, r3, #26
 8004f3e:	bf42      	ittt	mi
 8004f40:	6833      	ldrmi	r3, [r6, #0]
 8004f42:	3302      	addmi	r3, #2
 8004f44:	6033      	strmi	r3, [r6, #0]
 8004f46:	6825      	ldr	r5, [r4, #0]
 8004f48:	f015 0506 	ands.w	r5, r5, #6
 8004f4c:	d106      	bne.n	8004f5c <_printf_common+0x48>
 8004f4e:	f104 0a19 	add.w	sl, r4, #25
 8004f52:	68e3      	ldr	r3, [r4, #12]
 8004f54:	6832      	ldr	r2, [r6, #0]
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	42ab      	cmp	r3, r5
 8004f5a:	dc26      	bgt.n	8004faa <_printf_common+0x96>
 8004f5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	3b00      	subs	r3, #0
 8004f64:	bf18      	it	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	0692      	lsls	r2, r2, #26
 8004f6a:	d42b      	bmi.n	8004fc4 <_printf_common+0xb0>
 8004f6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f70:	4641      	mov	r1, r8
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c8      	blx	r9
 8004f76:	3001      	adds	r0, #1
 8004f78:	d01e      	beq.n	8004fb8 <_printf_common+0xa4>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	6922      	ldr	r2, [r4, #16]
 8004f7e:	f003 0306 	and.w	r3, r3, #6
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	bf02      	ittt	eq
 8004f86:	68e5      	ldreq	r5, [r4, #12]
 8004f88:	6833      	ldreq	r3, [r6, #0]
 8004f8a:	1aed      	subeq	r5, r5, r3
 8004f8c:	68a3      	ldr	r3, [r4, #8]
 8004f8e:	bf0c      	ite	eq
 8004f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f94:	2500      	movne	r5, #0
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bfc4      	itt	gt
 8004f9a:	1a9b      	subgt	r3, r3, r2
 8004f9c:	18ed      	addgt	r5, r5, r3
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	341a      	adds	r4, #26
 8004fa2:	42b5      	cmp	r5, r6
 8004fa4:	d11a      	bne.n	8004fdc <_printf_common+0xc8>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e008      	b.n	8004fbc <_printf_common+0xa8>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4652      	mov	r2, sl
 8004fae:	4641      	mov	r1, r8
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	47c8      	blx	r9
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d103      	bne.n	8004fc0 <_printf_common+0xac>
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	3501      	adds	r5, #1
 8004fc2:	e7c6      	b.n	8004f52 <_printf_common+0x3e>
 8004fc4:	18e1      	adds	r1, r4, r3
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	2030      	movs	r0, #48	@ 0x30
 8004fca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fce:	4422      	add	r2, r4
 8004fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fd8:	3302      	adds	r3, #2
 8004fda:	e7c7      	b.n	8004f6c <_printf_common+0x58>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4622      	mov	r2, r4
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c8      	blx	r9
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d0e6      	beq.n	8004fb8 <_printf_common+0xa4>
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7d9      	b.n	8004fa2 <_printf_common+0x8e>
	...

08004ff0 <_printf_i>:
 8004ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	7e0f      	ldrb	r7, [r1, #24]
 8004ff6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ff8:	2f78      	cmp	r7, #120	@ 0x78
 8004ffa:	4691      	mov	r9, r2
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	469a      	mov	sl, r3
 8005002:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005006:	d807      	bhi.n	8005018 <_printf_i+0x28>
 8005008:	2f62      	cmp	r7, #98	@ 0x62
 800500a:	d80a      	bhi.n	8005022 <_printf_i+0x32>
 800500c:	2f00      	cmp	r7, #0
 800500e:	f000 80d2 	beq.w	80051b6 <_printf_i+0x1c6>
 8005012:	2f58      	cmp	r7, #88	@ 0x58
 8005014:	f000 80b9 	beq.w	800518a <_printf_i+0x19a>
 8005018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800501c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005020:	e03a      	b.n	8005098 <_printf_i+0xa8>
 8005022:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005026:	2b15      	cmp	r3, #21
 8005028:	d8f6      	bhi.n	8005018 <_printf_i+0x28>
 800502a:	a101      	add	r1, pc, #4	@ (adr r1, 8005030 <_printf_i+0x40>)
 800502c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005030:	08005089 	.word	0x08005089
 8005034:	0800509d 	.word	0x0800509d
 8005038:	08005019 	.word	0x08005019
 800503c:	08005019 	.word	0x08005019
 8005040:	08005019 	.word	0x08005019
 8005044:	08005019 	.word	0x08005019
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005019 	.word	0x08005019
 8005050:	08005019 	.word	0x08005019
 8005054:	08005019 	.word	0x08005019
 8005058:	08005019 	.word	0x08005019
 800505c:	0800519d 	.word	0x0800519d
 8005060:	080050c7 	.word	0x080050c7
 8005064:	08005157 	.word	0x08005157
 8005068:	08005019 	.word	0x08005019
 800506c:	08005019 	.word	0x08005019
 8005070:	080051bf 	.word	0x080051bf
 8005074:	08005019 	.word	0x08005019
 8005078:	080050c7 	.word	0x080050c7
 800507c:	08005019 	.word	0x08005019
 8005080:	08005019 	.word	0x08005019
 8005084:	0800515f 	.word	0x0800515f
 8005088:	6833      	ldr	r3, [r6, #0]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6032      	str	r2, [r6, #0]
 8005090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005094:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005098:	2301      	movs	r3, #1
 800509a:	e09d      	b.n	80051d8 <_printf_i+0x1e8>
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1d19      	adds	r1, r3, #4
 80050a2:	6031      	str	r1, [r6, #0]
 80050a4:	0606      	lsls	r6, r0, #24
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0xbc>
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	e003      	b.n	80050b4 <_printf_i+0xc4>
 80050ac:	0645      	lsls	r5, r0, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0xb8>
 80050b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	da03      	bge.n	80050c0 <_printf_i+0xd0>
 80050b8:	232d      	movs	r3, #45	@ 0x2d
 80050ba:	426d      	negs	r5, r5
 80050bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c0:	4859      	ldr	r0, [pc, #356]	@ (8005228 <_printf_i+0x238>)
 80050c2:	230a      	movs	r3, #10
 80050c4:	e011      	b.n	80050ea <_printf_i+0xfa>
 80050c6:	6821      	ldr	r1, [r4, #0]
 80050c8:	6833      	ldr	r3, [r6, #0]
 80050ca:	0608      	lsls	r0, r1, #24
 80050cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80050d0:	d402      	bmi.n	80050d8 <_printf_i+0xe8>
 80050d2:	0649      	lsls	r1, r1, #25
 80050d4:	bf48      	it	mi
 80050d6:	b2ad      	uxthmi	r5, r5
 80050d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050da:	4853      	ldr	r0, [pc, #332]	@ (8005228 <_printf_i+0x238>)
 80050dc:	6033      	str	r3, [r6, #0]
 80050de:	bf14      	ite	ne
 80050e0:	230a      	movne	r3, #10
 80050e2:	2308      	moveq	r3, #8
 80050e4:	2100      	movs	r1, #0
 80050e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ea:	6866      	ldr	r6, [r4, #4]
 80050ec:	60a6      	str	r6, [r4, #8]
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	bfa2      	ittt	ge
 80050f2:	6821      	ldrge	r1, [r4, #0]
 80050f4:	f021 0104 	bicge.w	r1, r1, #4
 80050f8:	6021      	strge	r1, [r4, #0]
 80050fa:	b90d      	cbnz	r5, 8005100 <_printf_i+0x110>
 80050fc:	2e00      	cmp	r6, #0
 80050fe:	d04b      	beq.n	8005198 <_printf_i+0x1a8>
 8005100:	4616      	mov	r6, r2
 8005102:	fbb5 f1f3 	udiv	r1, r5, r3
 8005106:	fb03 5711 	mls	r7, r3, r1, r5
 800510a:	5dc7      	ldrb	r7, [r0, r7]
 800510c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005110:	462f      	mov	r7, r5
 8005112:	42bb      	cmp	r3, r7
 8005114:	460d      	mov	r5, r1
 8005116:	d9f4      	bls.n	8005102 <_printf_i+0x112>
 8005118:	2b08      	cmp	r3, #8
 800511a:	d10b      	bne.n	8005134 <_printf_i+0x144>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	07df      	lsls	r7, r3, #31
 8005120:	d508      	bpl.n	8005134 <_printf_i+0x144>
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	6861      	ldr	r1, [r4, #4]
 8005126:	4299      	cmp	r1, r3
 8005128:	bfde      	ittt	le
 800512a:	2330      	movle	r3, #48	@ 0x30
 800512c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005130:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005134:	1b92      	subs	r2, r2, r6
 8005136:	6122      	str	r2, [r4, #16]
 8005138:	f8cd a000 	str.w	sl, [sp]
 800513c:	464b      	mov	r3, r9
 800513e:	aa03      	add	r2, sp, #12
 8005140:	4621      	mov	r1, r4
 8005142:	4640      	mov	r0, r8
 8005144:	f7ff fee6 	bl	8004f14 <_printf_common>
 8005148:	3001      	adds	r0, #1
 800514a:	d14a      	bne.n	80051e2 <_printf_i+0x1f2>
 800514c:	f04f 30ff 	mov.w	r0, #4294967295
 8005150:	b004      	add	sp, #16
 8005152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	f043 0320 	orr.w	r3, r3, #32
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	4833      	ldr	r0, [pc, #204]	@ (800522c <_printf_i+0x23c>)
 8005160:	2778      	movs	r7, #120	@ 0x78
 8005162:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	6831      	ldr	r1, [r6, #0]
 800516a:	061f      	lsls	r7, r3, #24
 800516c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005170:	d402      	bmi.n	8005178 <_printf_i+0x188>
 8005172:	065f      	lsls	r7, r3, #25
 8005174:	bf48      	it	mi
 8005176:	b2ad      	uxthmi	r5, r5
 8005178:	6031      	str	r1, [r6, #0]
 800517a:	07d9      	lsls	r1, r3, #31
 800517c:	bf44      	itt	mi
 800517e:	f043 0320 	orrmi.w	r3, r3, #32
 8005182:	6023      	strmi	r3, [r4, #0]
 8005184:	b11d      	cbz	r5, 800518e <_printf_i+0x19e>
 8005186:	2310      	movs	r3, #16
 8005188:	e7ac      	b.n	80050e4 <_printf_i+0xf4>
 800518a:	4827      	ldr	r0, [pc, #156]	@ (8005228 <_printf_i+0x238>)
 800518c:	e7e9      	b.n	8005162 <_printf_i+0x172>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f023 0320 	bic.w	r3, r3, #32
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	e7f6      	b.n	8005186 <_printf_i+0x196>
 8005198:	4616      	mov	r6, r2
 800519a:	e7bd      	b.n	8005118 <_printf_i+0x128>
 800519c:	6833      	ldr	r3, [r6, #0]
 800519e:	6825      	ldr	r5, [r4, #0]
 80051a0:	6961      	ldr	r1, [r4, #20]
 80051a2:	1d18      	adds	r0, r3, #4
 80051a4:	6030      	str	r0, [r6, #0]
 80051a6:	062e      	lsls	r6, r5, #24
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	d501      	bpl.n	80051b0 <_printf_i+0x1c0>
 80051ac:	6019      	str	r1, [r3, #0]
 80051ae:	e002      	b.n	80051b6 <_printf_i+0x1c6>
 80051b0:	0668      	lsls	r0, r5, #25
 80051b2:	d5fb      	bpl.n	80051ac <_printf_i+0x1bc>
 80051b4:	8019      	strh	r1, [r3, #0]
 80051b6:	2300      	movs	r3, #0
 80051b8:	6123      	str	r3, [r4, #16]
 80051ba:	4616      	mov	r6, r2
 80051bc:	e7bc      	b.n	8005138 <_printf_i+0x148>
 80051be:	6833      	ldr	r3, [r6, #0]
 80051c0:	1d1a      	adds	r2, r3, #4
 80051c2:	6032      	str	r2, [r6, #0]
 80051c4:	681e      	ldr	r6, [r3, #0]
 80051c6:	6862      	ldr	r2, [r4, #4]
 80051c8:	2100      	movs	r1, #0
 80051ca:	4630      	mov	r0, r6
 80051cc:	f7fb f808 	bl	80001e0 <memchr>
 80051d0:	b108      	cbz	r0, 80051d6 <_printf_i+0x1e6>
 80051d2:	1b80      	subs	r0, r0, r6
 80051d4:	6060      	str	r0, [r4, #4]
 80051d6:	6863      	ldr	r3, [r4, #4]
 80051d8:	6123      	str	r3, [r4, #16]
 80051da:	2300      	movs	r3, #0
 80051dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e0:	e7aa      	b.n	8005138 <_printf_i+0x148>
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	4632      	mov	r2, r6
 80051e6:	4649      	mov	r1, r9
 80051e8:	4640      	mov	r0, r8
 80051ea:	47d0      	blx	sl
 80051ec:	3001      	adds	r0, #1
 80051ee:	d0ad      	beq.n	800514c <_printf_i+0x15c>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	079b      	lsls	r3, r3, #30
 80051f4:	d413      	bmi.n	800521e <_printf_i+0x22e>
 80051f6:	68e0      	ldr	r0, [r4, #12]
 80051f8:	9b03      	ldr	r3, [sp, #12]
 80051fa:	4298      	cmp	r0, r3
 80051fc:	bfb8      	it	lt
 80051fe:	4618      	movlt	r0, r3
 8005200:	e7a6      	b.n	8005150 <_printf_i+0x160>
 8005202:	2301      	movs	r3, #1
 8005204:	4632      	mov	r2, r6
 8005206:	4649      	mov	r1, r9
 8005208:	4640      	mov	r0, r8
 800520a:	47d0      	blx	sl
 800520c:	3001      	adds	r0, #1
 800520e:	d09d      	beq.n	800514c <_printf_i+0x15c>
 8005210:	3501      	adds	r5, #1
 8005212:	68e3      	ldr	r3, [r4, #12]
 8005214:	9903      	ldr	r1, [sp, #12]
 8005216:	1a5b      	subs	r3, r3, r1
 8005218:	42ab      	cmp	r3, r5
 800521a:	dcf2      	bgt.n	8005202 <_printf_i+0x212>
 800521c:	e7eb      	b.n	80051f6 <_printf_i+0x206>
 800521e:	2500      	movs	r5, #0
 8005220:	f104 0619 	add.w	r6, r4, #25
 8005224:	e7f5      	b.n	8005212 <_printf_i+0x222>
 8005226:	bf00      	nop
 8005228:	080053d5 	.word	0x080053d5
 800522c:	080053e6 	.word	0x080053e6

08005230 <memmove>:
 8005230:	4288      	cmp	r0, r1
 8005232:	b510      	push	{r4, lr}
 8005234:	eb01 0402 	add.w	r4, r1, r2
 8005238:	d902      	bls.n	8005240 <memmove+0x10>
 800523a:	4284      	cmp	r4, r0
 800523c:	4623      	mov	r3, r4
 800523e:	d807      	bhi.n	8005250 <memmove+0x20>
 8005240:	1e43      	subs	r3, r0, #1
 8005242:	42a1      	cmp	r1, r4
 8005244:	d008      	beq.n	8005258 <memmove+0x28>
 8005246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800524a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800524e:	e7f8      	b.n	8005242 <memmove+0x12>
 8005250:	4402      	add	r2, r0
 8005252:	4601      	mov	r1, r0
 8005254:	428a      	cmp	r2, r1
 8005256:	d100      	bne.n	800525a <memmove+0x2a>
 8005258:	bd10      	pop	{r4, pc}
 800525a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800525e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005262:	e7f7      	b.n	8005254 <memmove+0x24>

08005264 <_sbrk_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4d06      	ldr	r5, [pc, #24]	@ (8005280 <_sbrk_r+0x1c>)
 8005268:	2300      	movs	r3, #0
 800526a:	4604      	mov	r4, r0
 800526c:	4608      	mov	r0, r1
 800526e:	602b      	str	r3, [r5, #0]
 8005270:	f7fb fc5e 	bl	8000b30 <_sbrk>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_sbrk_r+0x1a>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b103      	cbz	r3, 800527e <_sbrk_r+0x1a>
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	20001248 	.word	0x20001248

08005284 <_realloc_r>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	4680      	mov	r8, r0
 800528a:	4615      	mov	r5, r2
 800528c:	460c      	mov	r4, r1
 800528e:	b921      	cbnz	r1, 800529a <_realloc_r+0x16>
 8005290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005294:	4611      	mov	r1, r2
 8005296:	f7ff bc59 	b.w	8004b4c <_malloc_r>
 800529a:	b92a      	cbnz	r2, 80052a8 <_realloc_r+0x24>
 800529c:	f7ff fbea 	bl	8004a74 <_free_r>
 80052a0:	2400      	movs	r4, #0
 80052a2:	4620      	mov	r0, r4
 80052a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a8:	f000 f81a 	bl	80052e0 <_malloc_usable_size_r>
 80052ac:	4285      	cmp	r5, r0
 80052ae:	4606      	mov	r6, r0
 80052b0:	d802      	bhi.n	80052b8 <_realloc_r+0x34>
 80052b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052b6:	d8f4      	bhi.n	80052a2 <_realloc_r+0x1e>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4640      	mov	r0, r8
 80052bc:	f7ff fc46 	bl	8004b4c <_malloc_r>
 80052c0:	4607      	mov	r7, r0
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d0ec      	beq.n	80052a0 <_realloc_r+0x1c>
 80052c6:	42b5      	cmp	r5, r6
 80052c8:	462a      	mov	r2, r5
 80052ca:	4621      	mov	r1, r4
 80052cc:	bf28      	it	cs
 80052ce:	4632      	movcs	r2, r6
 80052d0:	f7ff fbc2 	bl	8004a58 <memcpy>
 80052d4:	4621      	mov	r1, r4
 80052d6:	4640      	mov	r0, r8
 80052d8:	f7ff fbcc 	bl	8004a74 <_free_r>
 80052dc:	463c      	mov	r4, r7
 80052de:	e7e0      	b.n	80052a2 <_realloc_r+0x1e>

080052e0 <_malloc_usable_size_r>:
 80052e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e4:	1f18      	subs	r0, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfbc      	itt	lt
 80052ea:	580b      	ldrlt	r3, [r1, r0]
 80052ec:	18c0      	addlt	r0, r0, r3
 80052ee:	4770      	bx	lr

080052f0 <_init>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr

080052fc <_fini>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr
