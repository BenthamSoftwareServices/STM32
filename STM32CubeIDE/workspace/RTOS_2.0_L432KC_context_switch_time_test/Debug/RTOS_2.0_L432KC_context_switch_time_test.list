
RTOS_2.0_L432KC_context_switch_time_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004b70  08004b70  00005b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  08004c58  08004c58  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c58  08004c58  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004c60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b58  20000060  08004cc0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bb8  08004cc0  00006bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e95  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef7  00000000  00000000  0001af25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0001de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e94  00000000  00000000  0001f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e03  00000000  00000000  0001ffa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140f3  00000000  00000000  00022da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce3af  00000000  00000000  00036e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e0  00000000  00000000  0010528c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0010a46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b58 	.word	0x08004b58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004b58 	.word	0x08004b58

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa2f 	bl	8000636 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f832 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f882 	bl	80002e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e0:	f001 fe24 	bl	8001e2c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001e4:	4a0d      	ldr	r2, [pc, #52]	@ (800021c <main+0x4c>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	480d      	ldr	r0, [pc, #52]	@ (8000220 <main+0x50>)
 80001ea:	f001 fe69 	bl	8001ec0 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000224 <main+0x54>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* creation of Task01 */
  Task01Handle = osThreadNew(Task01_init, NULL, &Task01_attributes);
 80001f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000228 <main+0x58>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	480c      	ldr	r0, [pc, #48]	@ (800022c <main+0x5c>)
 80001fa:	f001 fe61 	bl	8001ec0 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a0b      	ldr	r2, [pc, #44]	@ (8000230 <main+0x60>)
 8000202:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(Task02_init, NULL, &Task02_attributes);
 8000204:	4a0b      	ldr	r2, [pc, #44]	@ (8000234 <main+0x64>)
 8000206:	2100      	movs	r1, #0
 8000208:	480b      	ldr	r0, [pc, #44]	@ (8000238 <main+0x68>)
 800020a:	f001 fe59 	bl	8001ec0 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a0a      	ldr	r2, [pc, #40]	@ (800023c <main+0x6c>)
 8000212:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000214:	f001 fe2e 	bl	8001e74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000218:	bf00      	nop
 800021a:	e7fd      	b.n	8000218 <main+0x48>
 800021c:	08004ba4 	.word	0x08004ba4
 8000220:	080003c1 	.word	0x080003c1
 8000224:	2000007c 	.word	0x2000007c
 8000228:	08004bc8 	.word	0x08004bc8
 800022c:	080003d1 	.word	0x080003d1
 8000230:	20000080 	.word	0x20000080
 8000234:	08004bec 	.word	0x08004bec
 8000238:	080003e9 	.word	0x080003e9
 800023c:	20000084 	.word	0x20000084

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	@ 0x58
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2244      	movs	r2, #68	@ 0x44
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f004 fb9a 	bl	8004988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000262:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000266:	f000 fc91 	bl	8000b8c <HAL_PWREx_ControlVoltageScaling>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000270:	f000 f8d8 	bl	8000424 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000274:	2302      	movs	r3, #2
 8000276:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800027c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	2310      	movs	r3, #16
 8000280:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800028e:	230a      	movs	r3, #10
 8000290:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000292:	2307      	movs	r3, #7
 8000294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fcc8 	bl	8000c38 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ae:	f000 f8b9 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2303      	movs	r3, #3
 80002b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002c6:	463b      	mov	r3, r7
 80002c8:	2104      	movs	r1, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 f8c8 	bl	8001460 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002d6:	f000 f8a5 	bl	8000424 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3758      	adds	r7, #88	@ 0x58
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 030c 	add.w	r3, r7, #12
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fa:	4b2f      	ldr	r3, [pc, #188]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fe:	4a2e      	ldr	r2, [pc, #184]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030a:	f003 0304 	and.w	r3, r3, #4
 800030e:	60bb      	str	r3, [r7, #8]
 8000310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	4b29      	ldr	r3, [pc, #164]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000316:	4a28      	ldr	r2, [pc, #160]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800031e:	4b26      	ldr	r3, [pc, #152]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b23      	ldr	r3, [pc, #140]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032e:	4a22      	ldr	r2, [pc, #136]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 8000330:	f043 0302 	orr.w	r3, r3, #2
 8000334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000336:	4b20      	ldr	r3, [pc, #128]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033a:	f003 0302 	and.w	r3, r3, #2
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2108      	movs	r1, #8
 8000346:	481d      	ldr	r0, [pc, #116]	@ (80003bc <MX_GPIO_Init+0xd8>)
 8000348:	f000 fbfa 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 800034c:	2304      	movs	r3, #4
 800034e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000350:	2302      	movs	r3, #2
 8000352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000358:	2303      	movs	r3, #3
 800035a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800035c:	2307      	movs	r3, #7
 800035e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 030c 	add.w	r3, r7, #12
 8000364:	4619      	mov	r1, r3
 8000366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800036a:	f000 fa7f 	bl	800086c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800036e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000374:	2302      	movs	r3, #2
 8000376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800037c:	2303      	movs	r3, #3
 800037e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000380:	2303      	movs	r3, #3
 8000382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	4619      	mov	r1, r3
 800038a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800038e:	f000 fa6d 	bl	800086c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000392:	2308      	movs	r3, #8
 8000394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80003a2:	f107 030c 	add.w	r3, r7, #12
 80003a6:	4619      	mov	r1, r3
 80003a8:	4804      	ldr	r0, [pc, #16]	@ (80003bc <MX_GPIO_Init+0xd8>)
 80003aa:	f000 fa5f 	bl	800086c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ae:	bf00      	nop
 80003b0:	3720      	adds	r7, #32
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000
 80003bc:	48000400 	.word	0x48000400

080003c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1); //The value of this delay has no effect unless the DefaultTask is started when other tasks are doing nothing.
 80003c8:	2001      	movs	r0, #1
 80003ca:	f001 fe0b 	bl	8001fe4 <osDelay>
 80003ce:	e7fb      	b.n	80003c8 <StartDefaultTask+0x8>

080003d0 <Task01_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task01_init */
void Task01_init(void *argument)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01_init */
	/* Infinite loop */
	for (;;) {

		HAL_GPIO_WritePin(PORTB, LED_Green, 1); //Turn on LED_Green
 80003d8:	2201      	movs	r2, #1
 80003da:	2108      	movs	r1, #8
 80003dc:	4801      	ldr	r0, [pc, #4]	@ (80003e4 <Task01_init+0x14>)
 80003de:	f000 fbaf 	bl	8000b40 <HAL_GPIO_WritePin>
 80003e2:	e7f9      	b.n	80003d8 <Task01_init+0x8>
 80003e4:	48000400 	.word	0x48000400

080003e8 <Task02_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task02_init */
void Task02_init(void *argument)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_init */
	/* Infinite loop */
	for (;;) {

		HAL_GPIO_WritePin(PORTB, LED_Green, 0); //Turn off LED_Green
 80003f0:	2200      	movs	r2, #0
 80003f2:	2108      	movs	r1, #8
 80003f4:	4801      	ldr	r0, [pc, #4]	@ (80003fc <Task02_init+0x14>)
 80003f6:	f000 fba3 	bl	8000b40 <HAL_GPIO_WritePin>
 80003fa:	e7f9      	b.n	80003f0 <Task02_init+0x8>
 80003fc:	48000400 	.word	0x48000400

08000400 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a04      	ldr	r2, [pc, #16]	@ (8000420 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d101      	bne.n	8000416 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000412:	f000 f929 	bl	8000668 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40001000 	.word	0x40001000

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <Error_Handler+0x8>

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b11      	ldr	r3, [pc, #68]	@ (800047c <HAL_MspInit+0x4c>)
 8000438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800043a:	4a10      	ldr	r2, [pc, #64]	@ (800047c <HAL_MspInit+0x4c>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6613      	str	r3, [r2, #96]	@ 0x60
 8000442:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <HAL_MspInit+0x4c>)
 8000444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <HAL_MspInit+0x4c>)
 8000450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000452:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <HAL_MspInit+0x4c>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000458:	6593      	str	r3, [r2, #88]	@ 0x58
 800045a:	4b08      	ldr	r3, [pc, #32]	@ (800047c <HAL_MspInit+0x4c>)
 800045c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800045e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	210f      	movs	r1, #15
 800046a:	f06f 0001 	mvn.w	r0, #1
 800046e:	f000 f9d3 	bl	8000818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08e      	sub	sp, #56	@ 0x38
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000488:	2300      	movs	r3, #0
 800048a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800048e:	4b34      	ldr	r3, [pc, #208]	@ (8000560 <HAL_InitTick+0xe0>)
 8000490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000492:	4a33      	ldr	r2, [pc, #204]	@ (8000560 <HAL_InitTick+0xe0>)
 8000494:	f043 0310 	orr.w	r3, r3, #16
 8000498:	6593      	str	r3, [r2, #88]	@ 0x58
 800049a:	4b31      	ldr	r3, [pc, #196]	@ (8000560 <HAL_InitTick+0xe0>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049e:	f003 0310 	and.w	r3, r3, #16
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004a6:	f107 0210 	add.w	r2, r7, #16
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 f983 	bl	80017bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004b6:	6a3b      	ldr	r3, [r7, #32]
 80004b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d103      	bne.n	80004c8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004c0:	f001 f966 	bl	8001790 <HAL_RCC_GetPCLK1Freq>
 80004c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80004c6:	e004      	b.n	80004d2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004c8:	f001 f962 	bl	8001790 <HAL_RCC_GetPCLK1Freq>
 80004cc:	4603      	mov	r3, r0
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004d4:	4a23      	ldr	r2, [pc, #140]	@ (8000564 <HAL_InitTick+0xe4>)
 80004d6:	fba2 2303 	umull	r2, r3, r2, r3
 80004da:	0c9b      	lsrs	r3, r3, #18
 80004dc:	3b01      	subs	r3, #1
 80004de:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80004e0:	4b21      	ldr	r3, [pc, #132]	@ (8000568 <HAL_InitTick+0xe8>)
 80004e2:	4a22      	ldr	r2, [pc, #136]	@ (800056c <HAL_InitTick+0xec>)
 80004e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80004e6:	4b20      	ldr	r3, [pc, #128]	@ (8000568 <HAL_InitTick+0xe8>)
 80004e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80004ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000568 <HAL_InitTick+0xe8>)
 80004f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <HAL_InitTick+0xe8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <HAL_InitTick+0xe8>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000500:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <HAL_InitTick+0xe8>)
 8000502:	2200      	movs	r2, #0
 8000504:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000506:	4818      	ldr	r0, [pc, #96]	@ (8000568 <HAL_InitTick+0xe8>)
 8000508:	f001 f9ea 	bl	80018e0 <HAL_TIM_Base_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000512:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000516:	2b00      	cmp	r3, #0
 8000518:	d11b      	bne.n	8000552 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800051a:	4813      	ldr	r0, [pc, #76]	@ (8000568 <HAL_InitTick+0xe8>)
 800051c:	f001 fa42 	bl	80019a4 <HAL_TIM_Base_Start_IT>
 8000520:	4603      	mov	r3, r0
 8000522:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000526:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800052a:	2b00      	cmp	r3, #0
 800052c:	d111      	bne.n	8000552 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800052e:	2036      	movs	r0, #54	@ 0x36
 8000530:	f000 f98e 	bl	8000850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b0f      	cmp	r3, #15
 8000538:	d808      	bhi.n	800054c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800053a:	2200      	movs	r2, #0
 800053c:	6879      	ldr	r1, [r7, #4]
 800053e:	2036      	movs	r0, #54	@ 0x36
 8000540:	f000 f96a 	bl	8000818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000544:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <HAL_InitTick+0xf0>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	e002      	b.n	8000552 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000552:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000556:	4618      	mov	r0, r3
 8000558:	3738      	adds	r7, #56	@ 0x38
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	431bde83 	.word	0x431bde83
 8000568:	20000088 	.word	0x20000088
 800056c:	40001000 	.word	0x40001000
 8000570:	20000004 	.word	0x20000004

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <NMI_Handler+0x4>

0800057c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <MemManage_Handler+0x4>

0800058c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <BusFault_Handler+0x4>

08000594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <UsageFault_Handler+0x4>

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <TIM6_DAC_IRQHandler+0x10>)
 80005b2:	f001 fa4b 	bl	8001a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000088 	.word	0x20000088

080005c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <SystemInit+0x20>)
 80005c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ca:	4a05      	ldr	r2, [pc, #20]	@ (80005e0 <SystemInit+0x20>)
 80005cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800061c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e8:	f7ff ffea 	bl	80005c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	@ (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	@ (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f004 fa17 	bl	8004a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000616:	f7ff fddb 	bl	80001d0 <main>

0800061a <LoopForever>:

LoopForever:
    b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800061c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000628:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 800062c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000630:	20001bb8 	.word	0x20001bb8

08000634 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_IRQHandler>

08000636 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800063c:	2300      	movs	r3, #0
 800063e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f8de 	bl	8000802 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000646:	200f      	movs	r0, #15
 8000648:	f7ff ff1a 	bl	8000480 <HAL_InitTick>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	e001      	b.n	800065c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000658:	f7ff feea 	bl	8000430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065c:	79fb      	ldrb	r3, [r7, #7]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_IncTick+0x20>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <HAL_IncTick+0x24>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	4a04      	ldr	r2, [pc, #16]	@ (800068c <HAL_IncTick+0x24>)
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	200000d4 	.word	0x200000d4

08000690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return uwTick;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <HAL_GetTick+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	200000d4 	.word	0x200000d4

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	@ (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	@ (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	@ (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	@ 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	@ 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff4c 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800082a:	f7ff ff61 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 800082e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	68b9      	ldr	r1, [r7, #8]
 8000834:	6978      	ldr	r0, [r7, #20]
 8000836:	f7ff ffb1 	bl	800079c <NVIC_EncodePriority>
 800083a:	4602      	mov	r2, r0
 800083c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff80 	bl	8000748 <__NVIC_SetPriority>
}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff54 	bl	800070c <__NVIC_EnableIRQ>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087a:	e148      	b.n	8000b0e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	2101      	movs	r1, #1
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 813a 	beq.w	8000b08 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0303 	and.w	r3, r3, #3
 800089c:	2b01      	cmp	r3, #1
 800089e:	d005      	beq.n	80008ac <HAL_GPIO_Init+0x40>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f003 0303 	and.w	r3, r3, #3
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d130      	bne.n	800090e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	2203      	movs	r2, #3
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008e2:	2201      	movs	r2, #1
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	f003 0201 	and.w	r2, r3, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b03      	cmp	r3, #3
 8000918:	d017      	beq.n	800094a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2203      	movs	r2, #3
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	2b02      	cmp	r3, #2
 8000954:	d123      	bne.n	800099e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	08da      	lsrs	r2, r3, #3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3208      	adds	r2, #8
 800095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	220f      	movs	r2, #15
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	691a      	ldr	r2, [r3, #16]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	08da      	lsrs	r2, r3, #3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3208      	adds	r2, #8
 8000998:	6939      	ldr	r1, [r7, #16]
 800099a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 0203 	and.w	r2, r3, #3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 8094 	beq.w	8000b08 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e0:	4b52      	ldr	r3, [pc, #328]	@ (8000b2c <HAL_GPIO_Init+0x2c0>)
 80009e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e4:	4a51      	ldr	r2, [pc, #324]	@ (8000b2c <HAL_GPIO_Init+0x2c0>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ec:	4b4f      	ldr	r3, [pc, #316]	@ (8000b2c <HAL_GPIO_Init+0x2c0>)
 80009ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f8:	4a4d      	ldr	r2, [pc, #308]	@ (8000b30 <HAL_GPIO_Init+0x2c4>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a22:	d00d      	beq.n	8000a40 <HAL_GPIO_Init+0x1d4>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a43      	ldr	r2, [pc, #268]	@ (8000b34 <HAL_GPIO_Init+0x2c8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d007      	beq.n	8000a3c <HAL_GPIO_Init+0x1d0>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a42      	ldr	r2, [pc, #264]	@ (8000b38 <HAL_GPIO_Init+0x2cc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d101      	bne.n	8000a38 <HAL_GPIO_Init+0x1cc>
 8000a34:	2302      	movs	r3, #2
 8000a36:	e004      	b.n	8000a42 <HAL_GPIO_Init+0x1d6>
 8000a38:	2307      	movs	r3, #7
 8000a3a:	e002      	b.n	8000a42 <HAL_GPIO_Init+0x1d6>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <HAL_GPIO_Init+0x1d6>
 8000a40:	2300      	movs	r3, #0
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	f002 0203 	and.w	r2, r2, #3
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	4093      	lsls	r3, r2
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a52:	4937      	ldr	r1, [pc, #220]	@ (8000b30 <HAL_GPIO_Init+0x2c4>)
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	3302      	adds	r3, #2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a60:	4b36      	ldr	r3, [pc, #216]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a84:	4a2d      	ldr	r2, [pc, #180]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aae:	4a23      	ldr	r2, [pc, #140]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ad8:	4a18      	ldr	r2, [pc, #96]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ade:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b02:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	fa22 f303 	lsr.w	r3, r2, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f47f aeaf 	bne.w	800087c <HAL_GPIO_Init+0x10>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	371c      	adds	r7, #28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	48000400 	.word	0x48000400
 8000b38:	48000800 	.word	0x48000800
 8000b3c:	40010400 	.word	0x40010400

08000b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b50:	787b      	ldrb	r3, [r7, #1]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b5c:	e002      	b.n	8000b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40007000 	.word	0x40007000

08000b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b9a:	d130      	bne.n	8000bfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b9c:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ba8:	d038      	beq.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2232      	movs	r2, #50	@ 0x32
 8000bc0:	fb02 f303 	mul.w	r3, r2, r3
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	0c9b      	lsrs	r3, r3, #18
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd0:	e002      	b.n	8000bd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000be4:	d102      	bne.n	8000bec <HAL_PWREx_ControlVoltageScaling+0x60>
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f2      	bne.n	8000bd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bf8:	d110      	bne.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e00f      	b.n	8000c1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c0a:	d007      	beq.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c14:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40007000 	.word	0x40007000
 8000c30:	20000000 	.word	0x20000000
 8000c34:	431bde83 	.word	0x431bde83

08000c38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	f000 bc02 	b.w	8001450 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c4c:	4b96      	ldr	r3, [pc, #600]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f003 030c 	and.w	r3, r3, #12
 8000c54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c56:	4b94      	ldr	r3, [pc, #592]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0310 	and.w	r3, r3, #16
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 80e4 	beq.w	8000e36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <HAL_RCC_OscConfig+0x4c>
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	2b0c      	cmp	r3, #12
 8000c78:	f040 808b 	bne.w	8000d92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	f040 8087 	bne.w	8000d92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c84:	4b88      	ldr	r3, [pc, #544]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d005      	beq.n	8000c9c <HAL_RCC_OscConfig+0x64>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e3d9      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a1a      	ldr	r2, [r3, #32]
 8000ca0:	4b81      	ldr	r3, [pc, #516]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d004      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x7e>
 8000cac:	4b7e      	ldr	r3, [pc, #504]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cb4:	e005      	b.n	8000cc2 <HAL_RCC_OscConfig+0x8a>
 8000cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d223      	bcs.n	8000d0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a1b      	ldr	r3, [r3, #32]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fda8 	bl	8001820 <RCC_SetFlashLatencyFromMSIRange>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e3ba      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cda:	4b73      	ldr	r3, [pc, #460]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a72      	ldr	r2, [pc, #456]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b70      	ldr	r3, [pc, #448]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	496d      	ldr	r1, [pc, #436]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cf8:	4b6b      	ldr	r3, [pc, #428]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	4968      	ldr	r1, [pc, #416]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	604b      	str	r3, [r1, #4]
 8000d0c:	e025      	b.n	8000d5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d0e:	4b66      	ldr	r3, [pc, #408]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a65      	ldr	r2, [pc, #404]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	4b63      	ldr	r3, [pc, #396]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	4960      	ldr	r1, [pc, #384]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	495b      	ldr	r1, [pc, #364]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d109      	bne.n	8000d5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fd68 	bl	8001820 <RCC_SetFlashLatencyFromMSIRange>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e37a      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d5a:	f000 fc81 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	4b51      	ldr	r3, [pc, #324]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	4950      	ldr	r1, [pc, #320]	@ (8000eac <HAL_RCC_OscConfig+0x274>)
 8000d6c:	5ccb      	ldrb	r3, [r1, r3]
 8000d6e:	f003 031f 	and.w	r3, r3, #31
 8000d72:	fa22 f303 	lsr.w	r3, r2, r3
 8000d76:	4a4e      	ldr	r2, [pc, #312]	@ (8000eb0 <HAL_RCC_OscConfig+0x278>)
 8000d78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8000eb4 <HAL_RCC_OscConfig+0x27c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fb7e 	bl	8000480 <HAL_InitTick>
 8000d84:	4603      	mov	r3, r0
 8000d86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d052      	beq.n	8000e34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	e35e      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d032      	beq.n	8000e00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d9a:	4b43      	ldr	r3, [pc, #268]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a42      	ldr	r2, [pc, #264]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000da6:	f7ff fc73 	bl	8000690 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dae:	f7ff fc6f 	bl	8000690 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e347      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dc0:	4b39      	ldr	r3, [pc, #228]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f0      	beq.n	8000dae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dcc:	4b36      	ldr	r3, [pc, #216]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a35      	ldr	r2, [pc, #212]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b33      	ldr	r3, [pc, #204]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	4930      	ldr	r1, [pc, #192]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	492b      	ldr	r1, [pc, #172]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	604b      	str	r3, [r1, #4]
 8000dfe:	e01a      	b.n	8000e36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e00:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a28      	ldr	r2, [pc, #160]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fc40 	bl	8000690 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e14:	f7ff fc3c 	bl	8000690 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e314      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e26:	4b20      	ldr	r3, [pc, #128]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x1dc>
 8000e32:	e000      	b.n	8000e36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d073      	beq.n	8000f2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d005      	beq.n	8000e54 <HAL_RCC_OscConfig+0x21c>
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2b0c      	cmp	r3, #12
 8000e4c:	d10e      	bne.n	8000e6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d10b      	bne.n	8000e6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e54:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d063      	beq.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d15f      	bne.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e2f1      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e74:	d106      	bne.n	8000e84 <HAL_RCC_OscConfig+0x24c>
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e025      	b.n	8000ed0 <HAL_RCC_OscConfig+0x298>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e8c:	d114      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x280>
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a02      	ldr	r2, [pc, #8]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e013      	b.n	8000ed0 <HAL_RCC_OscConfig+0x298>
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	08004c10 	.word	0x08004c10
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000004 	.word	0x20000004
 8000eb8:	4ba0      	ldr	r3, [pc, #640]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a9f      	ldr	r2, [pc, #636]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b9d      	ldr	r3, [pc, #628]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a9c      	ldr	r2, [pc, #624]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d013      	beq.n	8000f00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fbda 	bl	8000690 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fbd6 	bl	8000690 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	@ 0x64
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e2ae      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ef2:	4b92      	ldr	r3, [pc, #584]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f0      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x2a8>
 8000efe:	e014      	b.n	8000f2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f00:	f7ff fbc6 	bl	8000690 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fbc2 	bl	8000690 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	@ 0x64
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e29a      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f1a:	4b88      	ldr	r3, [pc, #544]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f0      	bne.n	8000f08 <HAL_RCC_OscConfig+0x2d0>
 8000f26:	e000      	b.n	8000f2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d060      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x310>
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b0c      	cmp	r3, #12
 8000f40:	d119      	bne.n	8000f76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d116      	bne.n	8000f76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f48:	4b7c      	ldr	r3, [pc, #496]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <HAL_RCC_OscConfig+0x328>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e277      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f60:	4b76      	ldr	r3, [pc, #472]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	061b      	lsls	r3, r3, #24
 8000f6e:	4973      	ldr	r1, [pc, #460]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f74:	e040      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d023      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a6e      	ldr	r2, [pc, #440]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fb81 	bl	8000690 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f92:	f7ff fb7d 	bl	8000690 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e255      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa4:	4b65      	ldr	r3, [pc, #404]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb0:	4b62      	ldr	r3, [pc, #392]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	061b      	lsls	r3, r3, #24
 8000fbe:	495f      	ldr	r1, [pc, #380]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
 8000fc4:	e018      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a5c      	ldr	r2, [pc, #368]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fb5d 	bl	8000690 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fb59 	bl	8000690 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e231      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fec:	4b53      	ldr	r3, [pc, #332]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f0      	bne.n	8000fda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d03c      	beq.n	800107e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01c      	beq.n	8001046 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100c:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800100e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001012:	4a4a      	ldr	r2, [pc, #296]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800101c:	f7ff fb38 	bl	8000690 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff fb34 	bl	8000690 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e20c      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001036:	4b41      	ldr	r3, [pc, #260]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0ef      	beq.n	8001024 <HAL_RCC_OscConfig+0x3ec>
 8001044:	e01b      	b.n	800107e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001046:	4b3d      	ldr	r3, [pc, #244]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800104c:	4a3b      	ldr	r2, [pc, #236]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001056:	f7ff fb1b 	bl	8000690 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105e:	f7ff fb17 	bl	8000690 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1ef      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1ef      	bne.n	800105e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80a6 	beq.w	80011d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800108c:	2300      	movs	r3, #0
 800108e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10d      	bne.n	80010b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a0:	4a26      	ldr	r2, [pc, #152]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010b4:	2301      	movs	r3, #1
 80010b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <HAL_RCC_OscConfig+0x508>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d118      	bne.n	80010f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_RCC_OscConfig+0x508>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001140 <HAL_RCC_OscConfig+0x508>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d0:	f7ff fade 	bl	8000690 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d8:	f7ff fada 	bl	8000690 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e1b2      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_RCC_OscConfig+0x508>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d108      	bne.n	8001110 <HAL_RCC_OscConfig+0x4d8>
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800110e:	e029      	b.n	8001164 <HAL_RCC_OscConfig+0x52c>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d115      	bne.n	8001144 <HAL_RCC_OscConfig+0x50c>
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800111e:	4a07      	ldr	r2, [pc, #28]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800112a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800112e:	4a03      	ldr	r2, [pc, #12]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001138:	e014      	b.n	8001164 <HAL_RCC_OscConfig+0x52c>
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	40007000 	.word	0x40007000
 8001144:	4b9a      	ldr	r3, [pc, #616]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 8001146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800114a:	4a99      	ldr	r2, [pc, #612]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001154:	4b96      	ldr	r3, [pc, #600]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 8001156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800115a:	4a95      	ldr	r2, [pc, #596]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d016      	beq.n	800119a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116c:	f7ff fa90 	bl	8000690 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001172:	e00a      	b.n	800118a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001174:	f7ff fa8c 	bl	8000690 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e162      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800118a:	4b89      	ldr	r3, [pc, #548]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 800118c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0ed      	beq.n	8001174 <HAL_RCC_OscConfig+0x53c>
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119a:	f7ff fa79 	bl	8000690 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a2:	f7ff fa75 	bl	8000690 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e14b      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011b8:	4b7d      	ldr	r3, [pc, #500]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 80011ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ed      	bne.n	80011a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d105      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011cc:	4b78      	ldr	r3, [pc, #480]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d0:	4a77      	ldr	r2, [pc, #476]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 80011d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0320 	and.w	r3, r3, #32
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d03c      	beq.n	800125e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d01c      	beq.n	8001226 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011ec:	4b70      	ldr	r3, [pc, #448]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 80011ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011f2:	4a6f      	ldr	r2, [pc, #444]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fc:	f7ff fa48 	bl	8000690 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001204:	f7ff fa44 	bl	8000690 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e11c      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001216:	4b66      	ldr	r3, [pc, #408]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 8001218:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0ef      	beq.n	8001204 <HAL_RCC_OscConfig+0x5cc>
 8001224:	e01b      	b.n	800125e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001226:	4b62      	ldr	r3, [pc, #392]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 8001228:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800122c:	4a60      	ldr	r2, [pc, #384]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001236:	f7ff fa2b 	bl	8000690 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800123e:	f7ff fa27 	bl	8000690 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e0ff      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001250:	4b57      	ldr	r3, [pc, #348]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 8001252:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1ef      	bne.n	800123e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 80f3 	beq.w	800144e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	2b02      	cmp	r3, #2
 800126e:	f040 80c9 	bne.w	8001404 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001272:	4b4f      	ldr	r3, [pc, #316]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0203 	and.w	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001282:	429a      	cmp	r2, r3
 8001284:	d12c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001290:	3b01      	subs	r3, #1
 8001292:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001294:	429a      	cmp	r2, r3
 8001296:	d123      	bne.n	80012e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d11b      	bne.n	80012e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d113      	bne.n	80012e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c2:	085b      	lsrs	r3, r3, #1
 80012c4:	3b01      	subs	r3, #1
 80012c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d109      	bne.n	80012e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	085b      	lsrs	r3, r3, #1
 80012d8:	3b01      	subs	r3, #1
 80012da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012dc:	429a      	cmp	r2, r3
 80012de:	d06b      	beq.n	80013b8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d062      	beq.n	80013ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012e6:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0ac      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012f6:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a2d      	ldr	r2, [pc, #180]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 80012fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001300:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001302:	f7ff f9c5 	bl	8000690 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff f9c1 	bl	8000690 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e099      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800131c:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <HAL_RCC_OscConfig+0x77c>)
 800132e:	4013      	ands	r3, r2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001338:	3a01      	subs	r2, #1
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	4311      	orrs	r1, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001342:	0212      	lsls	r2, r2, #8
 8001344:	4311      	orrs	r1, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800134a:	0852      	lsrs	r2, r2, #1
 800134c:	3a01      	subs	r2, #1
 800134e:	0552      	lsls	r2, r2, #21
 8001350:	4311      	orrs	r1, r2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001356:	0852      	lsrs	r2, r2, #1
 8001358:	3a01      	subs	r2, #1
 800135a:	0652      	lsls	r2, r2, #25
 800135c:	4311      	orrs	r1, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001362:	06d2      	lsls	r2, r2, #27
 8001364:	430a      	orrs	r2, r1
 8001366:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 8001368:	4313      	orrs	r3, r2
 800136a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800136c:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0f      	ldr	r2, [pc, #60]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 8001372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001376:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a0c      	ldr	r2, [pc, #48]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 800137e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001382:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001384:	f7ff f984 	bl	8000690 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff f980 	bl	8000690 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e058      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139e:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <HAL_RCC_OscConfig+0x778>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013aa:	e050      	b.n	800144e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e04f      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
 80013b0:	40021000 	.word	0x40021000
 80013b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d144      	bne.n	800144e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 80013ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 80013d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013dc:	f7ff f958 	bl	8000690 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff f954 	bl	8000690 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e02c      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x7ac>
 8001402:	e024      	b.n	800144e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2b0c      	cmp	r3, #12
 8001408:	d01f      	beq.n	800144a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 8001410:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff f93b 	bl	8000690 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff f937 	bl	8000690 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e00f      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	4905      	ldr	r1, [pc, #20]	@ (8001458 <HAL_RCC_OscConfig+0x820>)
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_RCC_OscConfig+0x824>)
 8001444:	4013      	ands	r3, r2
 8001446:	60cb      	str	r3, [r1, #12]
 8001448:	e001      	b.n	800144e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	feeefffc 	.word	0xfeeefffc

08001460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0e7      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4b75      	ldr	r3, [pc, #468]	@ (800164c <HAL_RCC_ClockConfig+0x1ec>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d910      	bls.n	80014a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b72      	ldr	r3, [pc, #456]	@ (800164c <HAL_RCC_ClockConfig+0x1ec>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 0207 	bic.w	r2, r3, #7
 800148a:	4970      	ldr	r1, [pc, #448]	@ (800164c <HAL_RCC_ClockConfig+0x1ec>)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b6e      	ldr	r3, [pc, #440]	@ (800164c <HAL_RCC_ClockConfig+0x1ec>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0cf      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d010      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	4b66      	ldr	r3, [pc, #408]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014bc:	429a      	cmp	r2, r3
 80014be:	d908      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c0:	4b63      	ldr	r3, [pc, #396]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4960      	ldr	r1, [pc, #384]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d04c      	beq.n	8001578 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d121      	bne.n	8001536 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0a6      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	4b54      	ldr	r3, [pc, #336]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d115      	bne.n	8001536 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e09a      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001516:	4b4e      	ldr	r3, [pc, #312]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e08e      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001526:	4b4a      	ldr	r3, [pc, #296]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e086      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001536:	4b46      	ldr	r3, [pc, #280]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f023 0203 	bic.w	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4943      	ldr	r1, [pc, #268]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 8001544:	4313      	orrs	r3, r2
 8001546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001548:	f7ff f8a2 	bl	8000690 <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	e00a      	b.n	8001566 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff f89e 	bl	8000690 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e06e      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	4b3a      	ldr	r3, [pc, #232]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 020c 	and.w	r2, r3, #12
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	429a      	cmp	r2, r3
 8001576:	d1eb      	bne.n	8001550 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d010      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001590:	429a      	cmp	r2, r3
 8001592:	d208      	bcs.n	80015a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	492b      	ldr	r1, [pc, #172]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a6:	4b29      	ldr	r3, [pc, #164]	@ (800164c <HAL_RCC_ClockConfig+0x1ec>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d210      	bcs.n	80015d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b4:	4b25      	ldr	r3, [pc, #148]	@ (800164c <HAL_RCC_ClockConfig+0x1ec>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 0207 	bic.w	r2, r3, #7
 80015bc:	4923      	ldr	r1, [pc, #140]	@ (800164c <HAL_RCC_ClockConfig+0x1ec>)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c4:	4b21      	ldr	r3, [pc, #132]	@ (800164c <HAL_RCC_ClockConfig+0x1ec>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e036      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	4918      	ldr	r1, [pc, #96]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4910      	ldr	r1, [pc, #64]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 8001610:	4313      	orrs	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001614:	f000 f824 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 8001618:	4602      	mov	r2, r0
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <HAL_RCC_ClockConfig+0x1f0>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	490b      	ldr	r1, [pc, #44]	@ (8001654 <HAL_RCC_ClockConfig+0x1f4>)
 8001626:	5ccb      	ldrb	r3, [r1, r3]
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	4a09      	ldr	r2, [pc, #36]	@ (8001658 <HAL_RCC_ClockConfig+0x1f8>)
 8001632:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_RCC_ClockConfig+0x1fc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff21 	bl	8000480 <HAL_InitTick>
 800163e:	4603      	mov	r3, r0
 8001640:	72fb      	strb	r3, [r7, #11]

  return status;
 8001642:	7afb      	ldrb	r3, [r7, #11]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40022000 	.word	0x40022000
 8001650:	40021000 	.word	0x40021000
 8001654:	08004c10 	.word	0x08004c10
 8001658:	20000000 	.word	0x20000000
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166e:	4b3e      	ldr	r3, [pc, #248]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x108>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x108>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x34>
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d121      	bne.n	80016d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d11e      	bne.n	80016d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001694:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x108>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016a0:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x108>)
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	e005      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016bc:	4a2b      	ldr	r2, [pc, #172]	@ (800176c <HAL_RCC_GetSysClockFreq+0x10c>)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10d      	bne.n	80016e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d102      	bne.n	80016de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x110>)
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	e004      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016e4:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x114>)
 80016e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d134      	bne.n	8001758 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d003      	beq.n	8001706 <HAL_RCC_GetSysClockFreq+0xa6>
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d003      	beq.n	800170c <HAL_RCC_GetSysClockFreq+0xac>
 8001704:	e005      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x110>)
 8001708:	617b      	str	r3, [r7, #20]
      break;
 800170a:	e005      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x114>)
 800170e:	617b      	str	r3, [r7, #20]
      break;
 8001710:	e002      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	617b      	str	r3, [r7, #20]
      break;
 8001716:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x108>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	3301      	adds	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x108>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	fb03 f202 	mul.w	r2, r3, r2
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	fbb2 f3f3 	udiv	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800173e:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x108>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	0e5b      	lsrs	r3, r3, #25
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	3301      	adds	r3, #1
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001758:	69bb      	ldr	r3, [r7, #24]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	@ 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	08004c28 	.word	0x08004c28
 8001770:	00f42400 	.word	0x00f42400
 8001774:	007a1200 	.word	0x007a1200

08001778 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800177c:	4b03      	ldr	r3, [pc, #12]	@ (800178c <HAL_RCC_GetHCLKFreq+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000000 	.word	0x20000000

08001790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001794:	f7ff fff0 	bl	8001778 <HAL_RCC_GetHCLKFreq>
 8001798:	4602      	mov	r2, r0
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	4904      	ldr	r1, [pc, #16]	@ (80017b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017a6:	5ccb      	ldrb	r3, [r1, r3]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	08004c20 	.word	0x08004c20

080017bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	220f      	movs	r2, #15
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_RCC_GetClockConfig+0x5c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0203 	and.w	r2, r3, #3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <HAL_RCC_GetClockConfig+0x5c>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_RCC_GetClockConfig+0x5c>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_RCC_GetClockConfig+0x5c>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <HAL_RCC_GetClockConfig+0x60>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0207 	and.w	r2, r3, #7
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	40022000 	.word	0x40022000

08001820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800182c:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001838:	f7ff f99a 	bl	8000b70 <HAL_PWREx_GetVoltageRange>
 800183c:	6178      	str	r0, [r7, #20]
 800183e:	e014      	b.n	800186a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800184a:	6593      	str	r3, [r2, #88]	@ 0x58
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001858:	f7ff f98a 	bl	8000b70 <HAL_PWREx_GetVoltageRange>
 800185c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001868:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001870:	d10b      	bne.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b80      	cmp	r3, #128	@ 0x80
 8001876:	d919      	bls.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2ba0      	cmp	r3, #160	@ 0xa0
 800187c:	d902      	bls.n	8001884 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800187e:	2302      	movs	r3, #2
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	e013      	b.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001884:	2301      	movs	r3, #1
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e010      	b.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b80      	cmp	r3, #128	@ 0x80
 800188e:	d902      	bls.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001890:	2303      	movs	r3, #3
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	e00a      	b.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b80      	cmp	r3, #128	@ 0x80
 800189a:	d102      	bne.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800189c:	2302      	movs	r3, #2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	e004      	b.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b70      	cmp	r3, #112	@ 0x70
 80018a6:	d101      	bne.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018a8:	2301      	movs	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 0207 	bic.w	r2, r3, #7
 80018b4:	4909      	ldr	r1, [pc, #36]	@ (80018dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018bc:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e049      	b.n	8001986 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f841 	bl	800198e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3304      	adds	r3, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f000 f9be 	bl	8001ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d001      	beq.n	80019bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e03b      	b.n	8001a34 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a19      	ldr	r2, [pc, #100]	@ (8001a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d009      	beq.n	80019f2 <HAL_TIM_Base_Start_IT+0x4e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e6:	d004      	beq.n	80019f2 <HAL_TIM_Base_Start_IT+0x4e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a15      	ldr	r2, [pc, #84]	@ (8001a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d115      	bne.n	8001a1e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <HAL_TIM_Base_Start_IT+0xa4>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b06      	cmp	r3, #6
 8001a02:	d015      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x8c>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a0a:	d011      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1c:	e008      	b.n	8001a30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e000      	b.n	8001a32 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40014000 	.word	0x40014000
 8001a48:	00010007 	.word	0x00010007

08001a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d020      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01b      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0202 	mvn.w	r2, #2
 8001a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8e4 	bl	8001c64 <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8d6 	bl	8001c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8e7 	bl	8001c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d020      	beq.n	8001afc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01b      	beq.n	8001afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0204 	mvn.w	r2, #4
 8001acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8be 	bl	8001c64 <HAL_TIM_IC_CaptureCallback>
 8001ae8:	e005      	b.n	8001af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f8b0 	bl	8001c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8c1 	bl	8001c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d020      	beq.n	8001b48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01b      	beq.n	8001b48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0208 	mvn.w	r2, #8
 8001b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f898 	bl	8001c64 <HAL_TIM_IC_CaptureCallback>
 8001b34:	e005      	b.n	8001b42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f88a 	bl	8001c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f89b 	bl	8001c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d020      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01b      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0210 	mvn.w	r2, #16
 8001b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2208      	movs	r2, #8
 8001b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f872 	bl	8001c64 <HAL_TIM_IC_CaptureCallback>
 8001b80:	e005      	b.n	8001b8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f864 	bl	8001c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f875 	bl	8001c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0201 	mvn.w	r2, #1
 8001bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fc24 	bl	8000400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8d0 	bl	8001d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8c8 	bl	8001d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f834 	bl	8001c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0220 	mvn.w	r2, #32
 8001c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f890 	bl	8001d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d5c <TIM_Base_SetConfig+0xbc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <TIM_Base_SetConfig+0x20>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cbe:	d108      	bne.n	8001cd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a21      	ldr	r2, [pc, #132]	@ (8001d5c <TIM_Base_SetConfig+0xbc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00b      	beq.n	8001cf2 <TIM_Base_SetConfig+0x52>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ce0:	d007      	beq.n	8001cf2 <TIM_Base_SetConfig+0x52>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d60 <TIM_Base_SetConfig+0xc0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d003      	beq.n	8001cf2 <TIM_Base_SetConfig+0x52>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a1d      	ldr	r2, [pc, #116]	@ (8001d64 <TIM_Base_SetConfig+0xc4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d108      	bne.n	8001d04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d5c <TIM_Base_SetConfig+0xbc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <TIM_Base_SetConfig+0xa0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a0b      	ldr	r2, [pc, #44]	@ (8001d60 <TIM_Base_SetConfig+0xc0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d003      	beq.n	8001d40 <TIM_Base_SetConfig+0xa0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <TIM_Base_SetConfig+0xc4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d103      	bne.n	8001d48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	615a      	str	r2, [r3, #20]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400

08001d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <__NVIC_SetPriority>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	@ (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	@ (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <SysTick_Handler+0x1c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e00:	f001 fd46 	bl	8003890 <xTaskGetSchedulerState>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d001      	beq.n	8001e0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e0a:	f002 fb3d 	bl	8004488 <xPortSysTickHandler>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f06f 0004 	mvn.w	r0, #4
 8001e22:	f7ff ffbf 	bl	8001da4 <__NVIC_SetPriority>
#endif
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e32:	f3ef 8305 	mrs	r3, IPSR
 8001e36:	603b      	str	r3, [r7, #0]
  return(result);
 8001e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e3e:	f06f 0305 	mvn.w	r3, #5
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	e00c      	b.n	8001e60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <osKernelInitialize+0x44>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <osKernelInitialize+0x44>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	e002      	b.n	8001e60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	200000d8 	.word	0x200000d8

08001e74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e7a:	f3ef 8305 	mrs	r3, IPSR
 8001e7e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e86:	f06f 0305 	mvn.w	r3, #5
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	e010      	b.n	8001eb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <osKernelStart+0x48>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d109      	bne.n	8001eaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e96:	f7ff ffbf 	bl	8001e18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <osKernelStart+0x48>)
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001ea0:	f001 f892 	bl	8002fc8 <vTaskStartScheduler>
      stat = osOK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	e002      	b.n	8001eb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200000d8 	.word	0x200000d8

08001ec0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	@ 0x38
 8001ec4:	af04      	add	r7, sp, #16
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ed0:	f3ef 8305 	mrs	r3, IPSR
 8001ed4:	617b      	str	r3, [r7, #20]
  return(result);
 8001ed6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d17e      	bne.n	8001fda <osThreadNew+0x11a>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d07b      	beq.n	8001fda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001ee6:	2318      	movs	r3, #24
 8001ee8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d045      	beq.n	8001f86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <osThreadNew+0x48>
        name = attr->name;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <osThreadNew+0x6e>
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b38      	cmp	r3, #56	@ 0x38
 8001f20:	d805      	bhi.n	8001f2e <osThreadNew+0x6e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <osThreadNew+0x72>
        return (NULL);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e054      	b.n	8001fdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00e      	beq.n	8001f68 <osThreadNew+0xa8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2ba7      	cmp	r3, #167	@ 0xa7
 8001f50:	d90a      	bls.n	8001f68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <osThreadNew+0xa8>
        mem = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e010      	b.n	8001f8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10c      	bne.n	8001f8a <osThreadNew+0xca>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d108      	bne.n	8001f8a <osThreadNew+0xca>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <osThreadNew+0xca>
          mem = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e001      	b.n	8001f8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d110      	bne.n	8001fb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f98:	9202      	str	r2, [sp, #8]
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6a3a      	ldr	r2, [r7, #32]
 8001fa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fe1a 	bl	8002be0 <xTaskCreateStatic>
 8001fac:	4603      	mov	r3, r0
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e013      	b.n	8001fda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d110      	bne.n	8001fda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fe68 	bl	8002ca0 <xTaskCreate>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <osThreadNew+0x11a>
            hTask = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fda:	693b      	ldr	r3, [r7, #16]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3728      	adds	r7, #40	@ 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fec:	f3ef 8305 	mrs	r3, IPSR
 8001ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <osDelay+0x1c>
    stat = osErrorISR;
 8001ff8:	f06f 0305 	mvn.w	r3, #5
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	e007      	b.n	8002010 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <osDelay+0x2c>
      vTaskDelay(ticks);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 ffa6 	bl	8002f5c <vTaskDelay>
    }
  }

  return (stat);
 8002010:	68fb      	ldr	r3, [r7, #12]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <vApplicationGetIdleTaskMemory+0x2c>)
 800202c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	4a06      	ldr	r2, [pc, #24]	@ (800204c <vApplicationGetIdleTaskMemory+0x30>)
 8002032:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2280      	movs	r2, #128	@ 0x80
 8002038:	601a      	str	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	200000dc 	.word	0x200000dc
 800204c:	20000184 	.word	0x20000184

08002050 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a07      	ldr	r2, [pc, #28]	@ (800207c <vApplicationGetTimerTaskMemory+0x2c>)
 8002060:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4a06      	ldr	r2, [pc, #24]	@ (8002080 <vApplicationGetTimerTaskMemory+0x30>)
 8002066:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800206e:	601a      	str	r2, [r3, #0]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	20000384 	.word	0x20000384
 8002080:	2000042c 	.word	0x2000042c

08002084 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f103 0208 	add.w	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f103 0208 	add.w	r2, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f103 0208 	add.w	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020de:	b480      	push	{r7}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d103      	bne.n	8002146 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e00c      	b.n	8002160 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3308      	adds	r3, #8
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e002      	b.n	8002154 <vListInsert+0x2e>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d2f6      	bcs.n	800214e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	601a      	str	r2, [r3, #0]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6892      	ldr	r2, [r2, #8]
 80021ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6852      	ldr	r2, [r2, #4]
 80021b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d103      	bne.n	80021cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1e5a      	subs	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002218:	f002 f8a6 	bl	8004368 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	68f9      	ldr	r1, [r7, #12]
 8002226:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	441a      	add	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002248:	3b01      	subs	r3, #1
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	441a      	add	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	22ff      	movs	r2, #255	@ 0xff
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	22ff      	movs	r2, #255	@ 0xff
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d114      	bne.n	8002298 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01a      	beq.n	80022ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3310      	adds	r3, #16
 800227a:	4618      	mov	r0, r3
 800227c:	f001 f942 	bl	8003504 <xTaskRemoveFromEventList>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d012      	beq.n	80022ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <xQueueGenericReset+0xd0>)
 8002288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	e009      	b.n	80022ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3310      	adds	r3, #16
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fef1 	bl	8002084 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3324      	adds	r3, #36	@ 0x24
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff feec 	bl	8002084 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022ac:	f002 f88e 	bl	80043cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022b0:	2301      	movs	r3, #1
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	e000ed04 	.word	0xe000ed04

080022c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08e      	sub	sp, #56	@ 0x38
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	e7fd      	b.n	8002306 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <xQueueGenericCreateStatic+0x56>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <xQueueGenericCreateStatic+0x5a>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <xQueueGenericCreateStatic+0x5c>
 800231a:	2300      	movs	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10b      	bne.n	8002338 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	623b      	str	r3, [r7, #32]
}
 8002332:	bf00      	nop
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <xQueueGenericCreateStatic+0x84>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <xQueueGenericCreateStatic+0x88>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <xQueueGenericCreateStatic+0x8a>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800234e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	61fb      	str	r3, [r7, #28]
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	e7fd      	b.n	8002362 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002366:	2350      	movs	r3, #80	@ 0x50
 8002368:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b50      	cmp	r3, #80	@ 0x50
 800236e:	d00b      	beq.n	8002388 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	61bb      	str	r3, [r7, #24]
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002388:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800238e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800239c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80023a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f805 	bl	80023ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3730      	adds	r7, #48	@ 0x30
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e002      	b.n	80023dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023e8:	2101      	movs	r1, #1
 80023ea:	69b8      	ldr	r0, [r7, #24]
 80023ec:	f7ff fefe 	bl	80021ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08e      	sub	sp, #56	@ 0x38
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <xQueueGenericSend+0x34>
	__asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <xQueueGenericSend+0x42>
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <xQueueGenericSend+0x46>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <xQueueGenericSend+0x48>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <xQueueGenericSend+0x64>
	__asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d103      	bne.n	8002472 <xQueueGenericSend+0x72>
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <xQueueGenericSend+0x76>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <xQueueGenericSend+0x78>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <xQueueGenericSend+0x94>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	623b      	str	r3, [r7, #32]
}
 800248e:	bf00      	nop
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002494:	f001 f9fc 	bl	8003890 <xTaskGetSchedulerState>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <xQueueGenericSend+0xa4>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <xQueueGenericSend+0xa8>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <xQueueGenericSend+0xaa>
 80024a8:	2300      	movs	r3, #0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10b      	bne.n	80024c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80024ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	61fb      	str	r3, [r7, #28]
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	e7fd      	b.n	80024c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024c6:	f001 ff4f 	bl	8004368 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <xQueueGenericSend+0xdc>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d129      	bne.n	8002530 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024e2:	f000 fa0f 	bl	8002904 <prvCopyDataToQueue>
 80024e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	3324      	adds	r3, #36	@ 0x24
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 f805 	bl	8003504 <xTaskRemoveFromEventList>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002500:	4b3f      	ldr	r3, [pc, #252]	@ (8002600 <xQueueGenericSend+0x200>)
 8002502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	e00a      	b.n	8002528 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002518:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <xQueueGenericSend+0x200>)
 800251a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002528:	f001 ff50 	bl	80043cc <vPortExitCritical>
				return pdPASS;
 800252c:	2301      	movs	r3, #1
 800252e:	e063      	b.n	80025f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002536:	f001 ff49 	bl	80043cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800253a:	2300      	movs	r3, #0
 800253c:	e05c      	b.n	80025f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800253e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4618      	mov	r0, r3
 800254a:	f001 f83f 	bl	80035cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800254e:	2301      	movs	r3, #1
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002552:	f001 ff3b 	bl	80043cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002556:	f000 fda7 	bl	80030a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800255a:	f001 ff05 	bl	8004368 <vPortEnterCritical>
 800255e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002564:	b25b      	sxtb	r3, r3
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256a:	d103      	bne.n	8002574 <xQueueGenericSend+0x174>
 800256c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800257a:	b25b      	sxtb	r3, r3
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d103      	bne.n	800258a <xQueueGenericSend+0x18a>
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800258a:	f001 ff1f 	bl	80043cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800258e:	1d3a      	adds	r2, r7, #4
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f001 f82e 	bl	80035f8 <xTaskCheckForTimeOut>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d124      	bne.n	80025ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025a4:	f000 faa6 	bl	8002af4 <prvIsQueueFull>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d018      	beq.n	80025e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	3310      	adds	r3, #16
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 ff52 	bl	8003460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025be:	f000 fa31 	bl	8002a24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025c2:	f000 fd7f 	bl	80030c4 <xTaskResumeAll>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f47f af7c 	bne.w	80024c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80025ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <xQueueGenericSend+0x200>)
 80025d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	e772      	b.n	80024c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025e2:	f000 fa1f 	bl	8002a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025e6:	f000 fd6d 	bl	80030c4 <xTaskResumeAll>
 80025ea:	e76c      	b.n	80024c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025ee:	f000 fa19 	bl	8002a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025f2:	f000 fd67 	bl	80030c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3738      	adds	r7, #56	@ 0x38
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	e000ed04 	.word	0xe000ed04

08002604 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b090      	sub	sp, #64	@ 0x40
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800261c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800262e:	bf00      	nop
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <xQueueGenericSendFromISR+0x3e>
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <xQueueGenericSendFromISR+0x42>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <xQueueGenericSendFromISR+0x44>
 8002646:	2300      	movs	r3, #0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d103      	bne.n	8002672 <xQueueGenericSendFromISR+0x6e>
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <xQueueGenericSendFromISR+0x72>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <xQueueGenericSendFromISR+0x74>
 8002676:	2300      	movs	r3, #0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	623b      	str	r3, [r7, #32]
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002694:	f001 ff48 	bl	8004528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002698:	f3ef 8211 	mrs	r2, BASEPRI
 800269c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	61fa      	str	r2, [r7, #28]
 80026ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026bc:	429a      	cmp	r2, r3
 80026be:	d302      	bcc.n	80026c6 <xQueueGenericSendFromISR+0xc2>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d12f      	bne.n	8002726 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80026dc:	f000 f912 	bl	8002904 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d112      	bne.n	8002710 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f4:	3324      	adds	r3, #36	@ 0x24
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 ff04 	bl	8003504 <xTaskRemoveFromEventList>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00e      	beq.n	8002720 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e007      	b.n	8002720 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002710:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002714:	3301      	adds	r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	b25a      	sxtb	r2, r3
 800271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002720:	2301      	movs	r3, #1
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002724:	e001      	b.n	800272a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002726:	2300      	movs	r3, #0
 8002728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800272a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002734:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002738:	4618      	mov	r0, r3
 800273a:	3740      	adds	r7, #64	@ 0x40
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08c      	sub	sp, #48	@ 0x30
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <xQueueReceive+0x32>
	__asm volatile
 800275a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	623b      	str	r3, [r7, #32]
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	e7fd      	b.n	800276e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <xQueueReceive+0x40>
 8002778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <xQueueReceive+0x44>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <xQueueReceive+0x46>
 8002784:	2300      	movs	r3, #0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10b      	bne.n	80027a2 <xQueueReceive+0x62>
	__asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	61fb      	str	r3, [r7, #28]
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	e7fd      	b.n	800279e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027a2:	f001 f875 	bl	8003890 <xTaskGetSchedulerState>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <xQueueReceive+0x72>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <xQueueReceive+0x76>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <xQueueReceive+0x78>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10b      	bne.n	80027d4 <xQueueReceive+0x94>
	__asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	61bb      	str	r3, [r7, #24]
}
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027d4:	f001 fdc8 	bl	8004368 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01f      	beq.n	8002824 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027e8:	f000 f8f6 	bl	80029d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	1e5a      	subs	r2, r3, #1
 80027f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00f      	beq.n	800281c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	3310      	adds	r3, #16
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fe7f 	bl	8003504 <xTaskRemoveFromEventList>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800280c:	4b3c      	ldr	r3, [pc, #240]	@ (8002900 <xQueueReceive+0x1c0>)
 800280e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800281c:	f001 fdd6 	bl	80043cc <vPortExitCritical>
				return pdPASS;
 8002820:	2301      	movs	r3, #1
 8002822:	e069      	b.n	80028f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800282a:	f001 fdcf 	bl	80043cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800282e:	2300      	movs	r3, #0
 8002830:	e062      	b.n	80028f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d106      	bne.n	8002846 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fec5 	bl	80035cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002842:	2301      	movs	r3, #1
 8002844:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002846:	f001 fdc1 	bl	80043cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800284a:	f000 fc2d 	bl	80030a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800284e:	f001 fd8b 	bl	8004368 <vPortEnterCritical>
 8002852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002858:	b25b      	sxtb	r3, r3
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d103      	bne.n	8002868 <xQueueReceive+0x128>
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800286e:	b25b      	sxtb	r3, r3
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d103      	bne.n	800287e <xQueueReceive+0x13e>
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800287e:	f001 fda5 	bl	80043cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002882:	1d3a      	adds	r2, r7, #4
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f000 feb4 	bl	80035f8 <xTaskCheckForTimeOut>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d123      	bne.n	80028de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002898:	f000 f916 	bl	8002ac8 <prvIsQueueEmpty>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d017      	beq.n	80028d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a4:	3324      	adds	r3, #36	@ 0x24
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fdd8 	bl	8003460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028b2:	f000 f8b7 	bl	8002a24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028b6:	f000 fc05 	bl	80030c4 <xTaskResumeAll>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d189      	bne.n	80027d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80028c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <xQueueReceive+0x1c0>)
 80028c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	e780      	b.n	80027d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028d4:	f000 f8a6 	bl	8002a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028d8:	f000 fbf4 	bl	80030c4 <xTaskResumeAll>
 80028dc:	e77a      	b.n	80027d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028e0:	f000 f8a0 	bl	8002a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028e4:	f000 fbee 	bl	80030c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028ea:	f000 f8ed 	bl	8002ac8 <prvIsQueueEmpty>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f43f af6f 	beq.w	80027d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3730      	adds	r7, #48	@ 0x30
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10d      	bne.n	800293e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d14d      	bne.n	80029c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 ffcc 	bl	80038cc <xTaskPriorityDisinherit>
 8002934:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	e043      	b.n	80029c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d119      	bne.n	8002978 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6858      	ldr	r0, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	461a      	mov	r2, r3
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	f002 f89e 	bl	8004a90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	441a      	add	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	429a      	cmp	r2, r3
 800296c:	d32b      	bcc.n	80029c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	e026      	b.n	80029c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68d8      	ldr	r0, [r3, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	461a      	mov	r2, r3
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	f002 f884 	bl	8004a90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	425b      	negs	r3, r3
 8002992:	441a      	add	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d207      	bcs.n	80029b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	425b      	negs	r3, r3
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d105      	bne.n	80029c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80029ce:	697b      	ldr	r3, [r7, #20]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d018      	beq.n	8002a1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	441a      	add	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d303      	bcc.n	8002a0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68d9      	ldr	r1, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	461a      	mov	r2, r3
 8002a16:	6838      	ldr	r0, [r7, #0]
 8002a18:	f002 f83a 	bl	8004a90 <memcpy>
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a2c:	f001 fc9c 	bl	8004368 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a38:	e011      	b.n	8002a5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d012      	beq.n	8002a68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3324      	adds	r3, #36	@ 0x24
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fd5c 	bl	8003504 <xTaskRemoveFromEventList>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a52:	f000 fe35 	bl	80036c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	dce9      	bgt.n	8002a3a <prvUnlockQueue+0x16>
 8002a66:	e000      	b.n	8002a6a <prvUnlockQueue+0x46>
					break;
 8002a68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	22ff      	movs	r2, #255	@ 0xff
 8002a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002a72:	f001 fcab 	bl	80043cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a76:	f001 fc77 	bl	8004368 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a82:	e011      	b.n	8002aa8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d012      	beq.n	8002ab2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3310      	adds	r3, #16
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fd37 	bl	8003504 <xTaskRemoveFromEventList>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a9c:	f000 fe10 	bl	80036c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	dce9      	bgt.n	8002a84 <prvUnlockQueue+0x60>
 8002ab0:	e000      	b.n	8002ab4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ab2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	22ff      	movs	r2, #255	@ 0xff
 8002ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002abc:	f001 fc86 	bl	80043cc <vPortExitCritical>
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ad0:	f001 fc4a 	bl	8004368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e001      	b.n	8002ae6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ae6:	f001 fc71 	bl	80043cc <vPortExitCritical>

	return xReturn;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002afc:	f001 fc34 	bl	8004368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d102      	bne.n	8002b12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e001      	b.n	8002b16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b16:	f001 fc59 	bl	80043cc <vPortExitCritical>

	return xReturn;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e014      	b.n	8002b5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b34:	4a0f      	ldr	r2, [pc, #60]	@ (8002b74 <vQueueAddToRegistry+0x50>)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10b      	bne.n	8002b58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b40:	490c      	ldr	r1, [pc, #48]	@ (8002b74 <vQueueAddToRegistry+0x50>)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <vQueueAddToRegistry+0x50>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b56:	e006      	b.n	8002b66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b07      	cmp	r3, #7
 8002b62:	d9e7      	bls.n	8002b34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	2000082c 	.word	0x2000082c

08002b78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b88:	f001 fbee 	bl	8004368 <vPortEnterCritical>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b92:	b25b      	sxtb	r3, r3
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d103      	bne.n	8002ba2 <vQueueWaitForMessageRestricted+0x2a>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ba8:	b25b      	sxtb	r3, r3
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d103      	bne.n	8002bb8 <vQueueWaitForMessageRestricted+0x40>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bb8:	f001 fc08 	bl	80043cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d106      	bne.n	8002bd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3324      	adds	r3, #36	@ 0x24
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fc6d 	bl	80034ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f7ff ff26 	bl	8002a24 <prvUnlockQueue>
	}
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08e      	sub	sp, #56	@ 0x38
 8002be4:	af04      	add	r7, sp, #16
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	623b      	str	r3, [r7, #32]
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10b      	bne.n	8002c2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	61fb      	str	r3, [r7, #28]
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	e7fd      	b.n	8002c26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c2a:	23a8      	movs	r3, #168	@ 0xa8
 8002c2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2ba8      	cmp	r3, #168	@ 0xa8
 8002c32:	d00b      	beq.n	8002c4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	61bb      	str	r3, [r7, #24]
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01e      	beq.n	8002c92 <xTaskCreateStatic+0xb2>
 8002c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01b      	beq.n	8002c92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9303      	str	r3, [sp, #12]
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f851 	bl	8002d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c8c:	f000 f8f6 	bl	8002e7c <prvAddNewTaskToReadyList>
 8002c90:	e001      	b.n	8002c96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c96:	697b      	ldr	r3, [r7, #20]
	}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3728      	adds	r7, #40	@ 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	@ 0x30
 8002ca4:	af04      	add	r7, sp, #16
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 fc79 	bl	80045ac <pvPortMalloc>
 8002cba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00e      	beq.n	8002ce0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cc2:	20a8      	movs	r0, #168	@ 0xa8
 8002cc4:	f001 fc72 	bl	80045ac <pvPortMalloc>
 8002cc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cd6:	e005      	b.n	8002ce4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f001 fd35 	bl	8004748 <vPortFree>
 8002cde:	e001      	b.n	8002ce4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d017      	beq.n	8002d1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9303      	str	r3, [sp, #12]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	9302      	str	r3, [sp, #8]
 8002cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f80f 	bl	8002d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d0e:	69f8      	ldr	r0, [r7, #28]
 8002d10:	f000 f8b4 	bl	8002e7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d14:	2301      	movs	r3, #1
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	e002      	b.n	8002d20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d20:	69bb      	ldr	r3, [r7, #24]
	}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	461a      	mov	r2, r3
 8002d44:	21a5      	movs	r1, #165	@ 0xa5
 8002d46:	f001 fe1f 	bl	8004988 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d54:	3b01      	subs	r3, #1
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f023 0307 	bic.w	r3, r3, #7
 8002d62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	617b      	str	r3, [r7, #20]
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	e7fd      	b.n	8002d82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01f      	beq.n	8002dcc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	e012      	b.n	8002db8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	7819      	ldrb	r1, [r3, #0]
 8002d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3334      	adds	r3, #52	@ 0x34
 8002da2:	460a      	mov	r2, r1
 8002da4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	d9e9      	bls.n	8002d92 <prvInitialiseNewTask+0x66>
 8002dbe:	e000      	b.n	8002dc2 <prvInitialiseNewTask+0x96>
			{
				break;
 8002dc0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dca:	e003      	b.n	8002dd4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd6:	2b37      	cmp	r3, #55	@ 0x37
 8002dd8:	d901      	bls.n	8002dde <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dda:	2337      	movs	r3, #55	@ 0x37
 8002ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002de8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	2200      	movs	r2, #0
 8002dee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df2:	3304      	adds	r3, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff f965 	bl	80020c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f960 	bl	80020c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	3354      	adds	r3, #84	@ 0x54
 8002e2e:	224c      	movs	r2, #76	@ 0x4c
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 fda8 	bl	8004988 <memset>
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e70 <prvInitialiseNewTask+0x144>)
 8002e3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	4a0c      	ldr	r2, [pc, #48]	@ (8002e74 <prvInitialiseNewTask+0x148>)
 8002e42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	4a0c      	ldr	r2, [pc, #48]	@ (8002e78 <prvInitialiseNewTask+0x14c>)
 8002e48:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	69b8      	ldr	r0, [r7, #24]
 8002e50:	f001 f95a 	bl	8004108 <pxPortInitialiseStack>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20001a78 	.word	0x20001a78
 8002e74:	20001ae0 	.word	0x20001ae0
 8002e78:	20001b48 	.word	0x20001b48

08002e7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e84:	f001 fa70 	bl	8004368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e88:	4b2d      	ldr	r3, [pc, #180]	@ (8002f40 <prvAddNewTaskToReadyList+0xc4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f40 <prvAddNewTaskToReadyList+0xc4>)
 8002e90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e92:	4b2c      	ldr	r3, [pc, #176]	@ (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ea0:	4b27      	ldr	r3, [pc, #156]	@ (8002f40 <prvAddNewTaskToReadyList+0xc4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d110      	bne.n	8002eca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ea8:	f000 fc2e 	bl	8003708 <prvInitialiseTaskLists>
 8002eac:	e00d      	b.n	8002eca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002eae:	4b26      	ldr	r3, [pc, #152]	@ (8002f48 <prvAddNewTaskToReadyList+0xcc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eb6:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d802      	bhi.n	8002eca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002eca:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <prvAddNewTaskToReadyList+0xd0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f4c <prvAddNewTaskToReadyList+0xd0>)
 8002ed2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <prvAddNewTaskToReadyList+0xd0>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <prvAddNewTaskToReadyList+0xd4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d903      	bls.n	8002ef0 <prvAddNewTaskToReadyList+0x74>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <prvAddNewTaskToReadyList+0xd4>)
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4a15      	ldr	r2, [pc, #84]	@ (8002f54 <prvAddNewTaskToReadyList+0xd8>)
 8002efe:	441a      	add	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7ff f8e9 	bl	80020de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f0c:	f001 fa5e 	bl	80043cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f10:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <prvAddNewTaskToReadyList+0xcc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00e      	beq.n	8002f36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f18:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d207      	bcs.n	8002f36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f26:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <prvAddNewTaskToReadyList+0xdc>)
 8002f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000d40 	.word	0x20000d40
 8002f44:	2000086c 	.word	0x2000086c
 8002f48:	20000d4c 	.word	0x20000d4c
 8002f4c:	20000d5c 	.word	0x20000d5c
 8002f50:	20000d48 	.word	0x20000d48
 8002f54:	20000870 	.word	0x20000870
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d018      	beq.n	8002fa0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f6e:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <vTaskDelay+0x64>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <vTaskDelay+0x32>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	60bb      	str	r3, [r7, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	e7fd      	b.n	8002f8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f8e:	f000 f88b 	bl	80030a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f92:	2100      	movs	r1, #0
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fd09 	bl	80039ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f9a:	f000 f893 	bl	80030c4 <xTaskResumeAll>
 8002f9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d107      	bne.n	8002fb6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002fa6:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <vTaskDelay+0x68>)
 8002fa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000d68 	.word	0x20000d68
 8002fc4:	e000ed04 	.word	0xe000ed04

08002fc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	@ 0x28
 8002fcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fd6:	463a      	mov	r2, r7
 8002fd8:	1d39      	adds	r1, r7, #4
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f81c 	bl	800201c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fe4:	6839      	ldr	r1, [r7, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	9202      	str	r2, [sp, #8]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	4924      	ldr	r1, [pc, #144]	@ (8003088 <vTaskStartScheduler+0xc0>)
 8002ff8:	4824      	ldr	r0, [pc, #144]	@ (800308c <vTaskStartScheduler+0xc4>)
 8002ffa:	f7ff fdf1 	bl	8002be0 <xTaskCreateStatic>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a23      	ldr	r2, [pc, #140]	@ (8003090 <vTaskStartScheduler+0xc8>)
 8003002:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003004:	4b22      	ldr	r3, [pc, #136]	@ (8003090 <vTaskStartScheduler+0xc8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800300c:	2301      	movs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e001      	b.n	8003016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800301c:	f000 fd1a 	bl	8003a54 <xTimerCreateTimerTask>
 8003020:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11b      	bne.n	8003060 <vTaskStartScheduler+0x98>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	613b      	str	r3, [r7, #16]
}
 800303a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800303c:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <vTaskStartScheduler+0xcc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3354      	adds	r3, #84	@ 0x54
 8003042:	4a15      	ldr	r2, [pc, #84]	@ (8003098 <vTaskStartScheduler+0xd0>)
 8003044:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003046:	4b15      	ldr	r3, [pc, #84]	@ (800309c <vTaskStartScheduler+0xd4>)
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800304e:	4b14      	ldr	r3, [pc, #80]	@ (80030a0 <vTaskStartScheduler+0xd8>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003054:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <vTaskStartScheduler+0xdc>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800305a:	f001 f8e1 	bl	8004220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800305e:	e00f      	b.n	8003080 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d10b      	bne.n	8003080 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	60fb      	str	r3, [r7, #12]
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <vTaskStartScheduler+0xb4>
}
 8003080:	bf00      	nop
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	08004b8c 	.word	0x08004b8c
 800308c:	080036d9 	.word	0x080036d9
 8003090:	20000d64 	.word	0x20000d64
 8003094:	2000086c 	.word	0x2000086c
 8003098:	20000010 	.word	0x20000010
 800309c:	20000d60 	.word	0x20000d60
 80030a0:	20000d4c 	.word	0x20000d4c
 80030a4:	20000d44 	.word	0x20000d44

080030a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030ac:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <vTaskSuspendAll+0x18>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	4a03      	ldr	r2, [pc, #12]	@ (80030c0 <vTaskSuspendAll+0x18>)
 80030b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	20000d68 	.word	0x20000d68

080030c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030d2:	4b42      	ldr	r3, [pc, #264]	@ (80031dc <xTaskResumeAll+0x118>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	603b      	str	r3, [r7, #0]
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	e7fd      	b.n	80030ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030f2:	f001 f939 	bl	8004368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030f6:	4b39      	ldr	r3, [pc, #228]	@ (80031dc <xTaskResumeAll+0x118>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	4a37      	ldr	r2, [pc, #220]	@ (80031dc <xTaskResumeAll+0x118>)
 80030fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003100:	4b36      	ldr	r3, [pc, #216]	@ (80031dc <xTaskResumeAll+0x118>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d162      	bne.n	80031ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003108:	4b35      	ldr	r3, [pc, #212]	@ (80031e0 <xTaskResumeAll+0x11c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d05e      	beq.n	80031ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003110:	e02f      	b.n	8003172 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003112:	4b34      	ldr	r3, [pc, #208]	@ (80031e4 <xTaskResumeAll+0x120>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3318      	adds	r3, #24
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f83a 	bl	8002198 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3304      	adds	r3, #4
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f835 	bl	8002198 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003132:	4b2d      	ldr	r3, [pc, #180]	@ (80031e8 <xTaskResumeAll+0x124>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d903      	bls.n	8003142 <xTaskResumeAll+0x7e>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	4a2a      	ldr	r2, [pc, #168]	@ (80031e8 <xTaskResumeAll+0x124>)
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4a27      	ldr	r2, [pc, #156]	@ (80031ec <xTaskResumeAll+0x128>)
 8003150:	441a      	add	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f7fe ffc0 	bl	80020de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003162:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <xTaskResumeAll+0x12c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800316c:	4b21      	ldr	r3, [pc, #132]	@ (80031f4 <xTaskResumeAll+0x130>)
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003172:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <xTaskResumeAll+0x120>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1cb      	bne.n	8003112 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003180:	f000 fb66 	bl	8003850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003184:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <xTaskResumeAll+0x134>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003190:	f000 f846 	bl	8003220 <xTaskIncrementTick>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800319a:	4b16      	ldr	r3, [pc, #88]	@ (80031f4 <xTaskResumeAll+0x130>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f1      	bne.n	8003190 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80031ac:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <xTaskResumeAll+0x134>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031b2:	4b10      	ldr	r3, [pc, #64]	@ (80031f4 <xTaskResumeAll+0x130>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031be:	4b0f      	ldr	r3, [pc, #60]	@ (80031fc <xTaskResumeAll+0x138>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031ce:	f001 f8fd 	bl	80043cc <vPortExitCritical>

	return xAlreadyYielded;
 80031d2:	68bb      	ldr	r3, [r7, #8]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000d68 	.word	0x20000d68
 80031e0:	20000d40 	.word	0x20000d40
 80031e4:	20000d00 	.word	0x20000d00
 80031e8:	20000d48 	.word	0x20000d48
 80031ec:	20000870 	.word	0x20000870
 80031f0:	2000086c 	.word	0x2000086c
 80031f4:	20000d54 	.word	0x20000d54
 80031f8:	20000d50 	.word	0x20000d50
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003206:	4b05      	ldr	r3, [pc, #20]	@ (800321c <xTaskGetTickCount+0x1c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800320c:	687b      	ldr	r3, [r7, #4]
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000d44 	.word	0x20000d44

08003220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322a:	4b4f      	ldr	r3, [pc, #316]	@ (8003368 <xTaskIncrementTick+0x148>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 8090 	bne.w	8003354 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003234:	4b4d      	ldr	r3, [pc, #308]	@ (800336c <xTaskIncrementTick+0x14c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800323c:	4a4b      	ldr	r2, [pc, #300]	@ (800336c <xTaskIncrementTick+0x14c>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d121      	bne.n	800328c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003248:	4b49      	ldr	r3, [pc, #292]	@ (8003370 <xTaskIncrementTick+0x150>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	603b      	str	r3, [r7, #0]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <xTaskIncrementTick+0x46>
 800326a:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <xTaskIncrementTick+0x150>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	4b40      	ldr	r3, [pc, #256]	@ (8003374 <xTaskIncrementTick+0x154>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3e      	ldr	r2, [pc, #248]	@ (8003370 <xTaskIncrementTick+0x150>)
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4a3e      	ldr	r2, [pc, #248]	@ (8003374 <xTaskIncrementTick+0x154>)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b3e      	ldr	r3, [pc, #248]	@ (8003378 <xTaskIncrementTick+0x158>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	4a3c      	ldr	r2, [pc, #240]	@ (8003378 <xTaskIncrementTick+0x158>)
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	f000 fae2 	bl	8003850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800328c:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <xTaskIncrementTick+0x15c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	429a      	cmp	r2, r3
 8003294:	d349      	bcc.n	800332a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003296:	4b36      	ldr	r3, [pc, #216]	@ (8003370 <xTaskIncrementTick+0x150>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a0:	4b36      	ldr	r3, [pc, #216]	@ (800337c <xTaskIncrementTick+0x15c>)
 80032a2:	f04f 32ff 	mov.w	r2, #4294967295
 80032a6:	601a      	str	r2, [r3, #0]
					break;
 80032a8:	e03f      	b.n	800332a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032aa:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <xTaskIncrementTick+0x150>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d203      	bcs.n	80032ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032c2:	4a2e      	ldr	r2, [pc, #184]	@ (800337c <xTaskIncrementTick+0x15c>)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032c8:	e02f      	b.n	800332a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	3304      	adds	r3, #4
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe ff62 	bl	8002198 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3318      	adds	r3, #24
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe ff59 	bl	8002198 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ea:	4b25      	ldr	r3, [pc, #148]	@ (8003380 <xTaskIncrementTick+0x160>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d903      	bls.n	80032fa <xTaskIncrementTick+0xda>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	4a22      	ldr	r2, [pc, #136]	@ (8003380 <xTaskIncrementTick+0x160>)
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <xTaskIncrementTick+0x164>)
 8003308:	441a      	add	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3304      	adds	r3, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f7fe fee4 	bl	80020de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800331a:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <xTaskIncrementTick+0x168>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	429a      	cmp	r2, r3
 8003322:	d3b8      	bcc.n	8003296 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003328:	e7b5      	b.n	8003296 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800332a:	4b17      	ldr	r3, [pc, #92]	@ (8003388 <xTaskIncrementTick+0x168>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003330:	4914      	ldr	r1, [pc, #80]	@ (8003384 <xTaskIncrementTick+0x164>)
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d901      	bls.n	8003346 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003342:	2301      	movs	r3, #1
 8003344:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <xTaskIncrementTick+0x16c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800334e:	2301      	movs	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e004      	b.n	800335e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003354:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <xTaskIncrementTick+0x170>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	4a0d      	ldr	r2, [pc, #52]	@ (8003390 <xTaskIncrementTick+0x170>)
 800335c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800335e:	697b      	ldr	r3, [r7, #20]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000d68 	.word	0x20000d68
 800336c:	20000d44 	.word	0x20000d44
 8003370:	20000cf8 	.word	0x20000cf8
 8003374:	20000cfc 	.word	0x20000cfc
 8003378:	20000d58 	.word	0x20000d58
 800337c:	20000d60 	.word	0x20000d60
 8003380:	20000d48 	.word	0x20000d48
 8003384:	20000870 	.word	0x20000870
 8003388:	2000086c 	.word	0x2000086c
 800338c:	20000d54 	.word	0x20000d54
 8003390:	20000d50 	.word	0x20000d50

08003394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800339a:	4b2b      	ldr	r3, [pc, #172]	@ (8003448 <vTaskSwitchContext+0xb4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033a2:	4b2a      	ldr	r3, [pc, #168]	@ (800344c <vTaskSwitchContext+0xb8>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033a8:	e047      	b.n	800343a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80033aa:	4b28      	ldr	r3, [pc, #160]	@ (800344c <vTaskSwitchContext+0xb8>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b0:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <vTaskSwitchContext+0xbc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e011      	b.n	80033dc <vTaskSwitchContext+0x48>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	607b      	str	r3, [r7, #4]
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	e7fd      	b.n	80033d2 <vTaskSwitchContext+0x3e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3b01      	subs	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	491d      	ldr	r1, [pc, #116]	@ (8003454 <vTaskSwitchContext+0xc0>)
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0e3      	beq.n	80033b8 <vTaskSwitchContext+0x24>
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4a16      	ldr	r2, [pc, #88]	@ (8003454 <vTaskSwitchContext+0xc0>)
 80033fc:	4413      	add	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3308      	adds	r3, #8
 8003412:	429a      	cmp	r2, r3
 8003414:	d104      	bne.n	8003420 <vTaskSwitchContext+0x8c>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4a0c      	ldr	r2, [pc, #48]	@ (8003458 <vTaskSwitchContext+0xc4>)
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4a09      	ldr	r2, [pc, #36]	@ (8003450 <vTaskSwitchContext+0xbc>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003430:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <vTaskSwitchContext+0xc4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3354      	adds	r3, #84	@ 0x54
 8003436:	4a09      	ldr	r2, [pc, #36]	@ (800345c <vTaskSwitchContext+0xc8>)
 8003438:	6013      	str	r3, [r2, #0]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000d68 	.word	0x20000d68
 800344c:	20000d54 	.word	0x20000d54
 8003450:	20000d48 	.word	0x20000d48
 8003454:	20000870 	.word	0x20000870
 8003458:	2000086c 	.word	0x2000086c
 800345c:	20000010 	.word	0x20000010

08003460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	60fb      	str	r3, [r7, #12]
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003488:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <vTaskPlaceOnEventList+0x48>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3318      	adds	r3, #24
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7fe fe48 	bl	8002126 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003496:	2101      	movs	r1, #1
 8003498:	6838      	ldr	r0, [r7, #0]
 800349a:	f000 fa87 	bl	80039ac <prvAddCurrentTaskToDelayedList>
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2000086c 	.word	0x2000086c

080034ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	617b      	str	r3, [r7, #20]
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	e7fd      	b.n	80034d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003500 <vTaskPlaceOnEventListRestricted+0x54>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3318      	adds	r3, #24
 80034dc:	4619      	mov	r1, r3
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7fe fdfd 	bl	80020de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	68b8      	ldr	r0, [r7, #8]
 80034f4:	f000 fa5a 	bl	80039ac <prvAddCurrentTaskToDelayedList>
	}
 80034f8:	bf00      	nop
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	2000086c 	.word	0x2000086c

08003504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10b      	bne.n	8003532 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	60fb      	str	r3, [r7, #12]
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	e7fd      	b.n	800352e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	3318      	adds	r3, #24
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fe2e 	bl	8002198 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800353c:	4b1d      	ldr	r3, [pc, #116]	@ (80035b4 <xTaskRemoveFromEventList+0xb0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d11d      	bne.n	8003580 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3304      	adds	r3, #4
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fe25 	bl	8002198 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003552:	4b19      	ldr	r3, [pc, #100]	@ (80035b8 <xTaskRemoveFromEventList+0xb4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d903      	bls.n	8003562 <xTaskRemoveFromEventList+0x5e>
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	4a16      	ldr	r2, [pc, #88]	@ (80035b8 <xTaskRemoveFromEventList+0xb4>)
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4a13      	ldr	r2, [pc, #76]	@ (80035bc <xTaskRemoveFromEventList+0xb8>)
 8003570:	441a      	add	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	3304      	adds	r3, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f7fe fdb0 	bl	80020de <vListInsertEnd>
 800357e:	e005      	b.n	800358c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	3318      	adds	r3, #24
 8003584:	4619      	mov	r1, r3
 8003586:	480e      	ldr	r0, [pc, #56]	@ (80035c0 <xTaskRemoveFromEventList+0xbc>)
 8003588:	f7fe fda9 	bl	80020de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003590:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <xTaskRemoveFromEventList+0xc0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003596:	429a      	cmp	r2, r3
 8003598:	d905      	bls.n	80035a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800359a:	2301      	movs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800359e:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <xTaskRemoveFromEventList+0xc4>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e001      	b.n	80035aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80035aa:	697b      	ldr	r3, [r7, #20]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000d68 	.word	0x20000d68
 80035b8:	20000d48 	.word	0x20000d48
 80035bc:	20000870 	.word	0x20000870
 80035c0:	20000d00 	.word	0x20000d00
 80035c4:	2000086c 	.word	0x2000086c
 80035c8:	20000d54 	.word	0x20000d54

080035cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035d4:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <vTaskInternalSetTimeOutState+0x24>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <vTaskInternalSetTimeOutState+0x28>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20000d58 	.word	0x20000d58
 80035f4:	20000d44 	.word	0x20000d44

080035f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	613b      	str	r3, [r7, #16]
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	60fb      	str	r3, [r7, #12]
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800363e:	f000 fe93 	bl	8004368 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003642:	4b1d      	ldr	r3, [pc, #116]	@ (80036b8 <xTaskCheckForTimeOut+0xc0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d102      	bne.n	8003662 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	e023      	b.n	80036aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <xTaskCheckForTimeOut+0xc4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d007      	beq.n	800367e <xTaskCheckForTimeOut+0x86>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	429a      	cmp	r2, r3
 8003676:	d302      	bcc.n	800367e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003678:	2301      	movs	r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	e015      	b.n	80036aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	429a      	cmp	r2, r3
 8003686:	d20b      	bcs.n	80036a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	1ad2      	subs	r2, r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff ff99 	bl	80035cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e004      	b.n	80036aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036a6:	2301      	movs	r3, #1
 80036a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036aa:	f000 fe8f 	bl	80043cc <vPortExitCritical>

	return xReturn;
 80036ae:	69fb      	ldr	r3, [r7, #28]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000d44 	.word	0x20000d44
 80036bc:	20000d58 	.word	0x20000d58

080036c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <vTaskMissedYield+0x14>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	20000d54 	.word	0x20000d54

080036d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036e0:	f000 f852 	bl	8003788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <prvIdleTask+0x28>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d9f9      	bls.n	80036e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <prvIdleTask+0x2c>)
 80036ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036fc:	e7f0      	b.n	80036e0 <prvIdleTask+0x8>
 80036fe:	bf00      	nop
 8003700:	20000870 	.word	0x20000870
 8003704:	e000ed04 	.word	0xe000ed04

08003708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	e00c      	b.n	800372e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4a12      	ldr	r2, [pc, #72]	@ (8003768 <prvInitialiseTaskLists+0x60>)
 8003720:	4413      	add	r3, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fcae 	bl	8002084 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3301      	adds	r3, #1
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b37      	cmp	r3, #55	@ 0x37
 8003732:	d9ef      	bls.n	8003714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003734:	480d      	ldr	r0, [pc, #52]	@ (800376c <prvInitialiseTaskLists+0x64>)
 8003736:	f7fe fca5 	bl	8002084 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800373a:	480d      	ldr	r0, [pc, #52]	@ (8003770 <prvInitialiseTaskLists+0x68>)
 800373c:	f7fe fca2 	bl	8002084 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003740:	480c      	ldr	r0, [pc, #48]	@ (8003774 <prvInitialiseTaskLists+0x6c>)
 8003742:	f7fe fc9f 	bl	8002084 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003746:	480c      	ldr	r0, [pc, #48]	@ (8003778 <prvInitialiseTaskLists+0x70>)
 8003748:	f7fe fc9c 	bl	8002084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800374c:	480b      	ldr	r0, [pc, #44]	@ (800377c <prvInitialiseTaskLists+0x74>)
 800374e:	f7fe fc99 	bl	8002084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003752:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <prvInitialiseTaskLists+0x78>)
 8003754:	4a05      	ldr	r2, [pc, #20]	@ (800376c <prvInitialiseTaskLists+0x64>)
 8003756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003758:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <prvInitialiseTaskLists+0x7c>)
 800375a:	4a05      	ldr	r2, [pc, #20]	@ (8003770 <prvInitialiseTaskLists+0x68>)
 800375c:	601a      	str	r2, [r3, #0]
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000870 	.word	0x20000870
 800376c:	20000cd0 	.word	0x20000cd0
 8003770:	20000ce4 	.word	0x20000ce4
 8003774:	20000d00 	.word	0x20000d00
 8003778:	20000d14 	.word	0x20000d14
 800377c:	20000d2c 	.word	0x20000d2c
 8003780:	20000cf8 	.word	0x20000cf8
 8003784:	20000cfc 	.word	0x20000cfc

08003788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800378e:	e019      	b.n	80037c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003790:	f000 fdea 	bl	8004368 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003794:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <prvCheckTasksWaitingTermination+0x50>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe fcf9 	bl	8002198 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037a6:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <prvCheckTasksWaitingTermination+0x54>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	4a0b      	ldr	r2, [pc, #44]	@ (80037dc <prvCheckTasksWaitingTermination+0x54>)
 80037ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037b0:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <prvCheckTasksWaitingTermination+0x58>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	4a0a      	ldr	r2, [pc, #40]	@ (80037e0 <prvCheckTasksWaitingTermination+0x58>)
 80037b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037ba:	f000 fe07 	bl	80043cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f810 	bl	80037e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037c4:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <prvCheckTasksWaitingTermination+0x58>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e1      	bne.n	8003790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000d14 	.word	0x20000d14
 80037dc:	20000d40 	.word	0x20000d40
 80037e0:	20000d28 	.word	0x20000d28

080037e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3354      	adds	r3, #84	@ 0x54
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 f8d1 	bl	8004998 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d108      	bne.n	8003812 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	4618      	mov	r0, r3
 8003806:	f000 ff9f 	bl	8004748 <vPortFree>
				vPortFree( pxTCB );
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 ff9c 	bl	8004748 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003810:	e019      	b.n	8003846 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003818:	2b01      	cmp	r3, #1
 800381a:	d103      	bne.n	8003824 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 ff93 	bl	8004748 <vPortFree>
	}
 8003822:	e010      	b.n	8003846 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800382a:	2b02      	cmp	r3, #2
 800382c:	d00b      	beq.n	8003846 <prvDeleteTCB+0x62>
	__asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	60fb      	str	r3, [r7, #12]
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	e7fd      	b.n	8003842 <prvDeleteTCB+0x5e>
	}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003856:	4b0c      	ldr	r3, [pc, #48]	@ (8003888 <prvResetNextTaskUnblockTime+0x38>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003860:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <prvResetNextTaskUnblockTime+0x3c>)
 8003862:	f04f 32ff 	mov.w	r2, #4294967295
 8003866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003868:	e008      	b.n	800387c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386a:	4b07      	ldr	r3, [pc, #28]	@ (8003888 <prvResetNextTaskUnblockTime+0x38>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4a04      	ldr	r2, [pc, #16]	@ (800388c <prvResetNextTaskUnblockTime+0x3c>)
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	20000cf8 	.word	0x20000cf8
 800388c:	20000d60 	.word	0x20000d60

08003890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003896:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <xTaskGetSchedulerState+0x34>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800389e:	2301      	movs	r3, #1
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	e008      	b.n	80038b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038a4:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <xTaskGetSchedulerState+0x38>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038ac:	2302      	movs	r3, #2
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	e001      	b.n	80038b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038b6:	687b      	ldr	r3, [r7, #4]
	}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	20000d4c 	.word	0x20000d4c
 80038c8:	20000d68 	.word	0x20000d68

080038cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d058      	beq.n	8003994 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038e2:	4b2f      	ldr	r3, [pc, #188]	@ (80039a0 <xTaskPriorityDisinherit+0xd4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d00b      	beq.n	8003904 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	60fb      	str	r3, [r7, #12]
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	60bb      	str	r3, [r7, #8]
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003928:	1e5a      	subs	r2, r3, #1
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003936:	429a      	cmp	r2, r3
 8003938:	d02c      	beq.n	8003994 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393e:	2b00      	cmp	r3, #0
 8003940:	d128      	bne.n	8003994 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	3304      	adds	r3, #4
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fc26 	bl	8002198 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003964:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <xTaskPriorityDisinherit+0xd8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d903      	bls.n	8003974 <xTaskPriorityDisinherit+0xa8>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	4a0c      	ldr	r2, [pc, #48]	@ (80039a4 <xTaskPriorityDisinherit+0xd8>)
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <xTaskPriorityDisinherit+0xdc>)
 8003982:	441a      	add	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7fe fba7 	bl	80020de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003990:	2301      	movs	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003994:	697b      	ldr	r3, [r7, #20]
	}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	2000086c 	.word	0x2000086c
 80039a4:	20000d48 	.word	0x20000d48
 80039a8:	20000870 	.word	0x20000870

080039ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039b6:	4b21      	ldr	r3, [pc, #132]	@ (8003a3c <prvAddCurrentTaskToDelayedList+0x90>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039bc:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fbe8 	bl	8002198 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d10a      	bne.n	80039e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3304      	adds	r3, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4819      	ldr	r0, [pc, #100]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x98>)
 80039e0:	f7fe fb7d 	bl	80020de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039e4:	e026      	b.n	8003a34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039ee:	4b14      	ldr	r3, [pc, #80]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d209      	bcs.n	8003a12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fe:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b0f      	ldr	r3, [pc, #60]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f7fe fb8b 	bl	8002126 <vListInsert>
}
 8003a10:	e010      	b.n	8003a34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a12:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b0a      	ldr	r3, [pc, #40]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7fe fb81 	bl	8002126 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a24:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d202      	bcs.n	8003a34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a2e:	4a08      	ldr	r2, [pc, #32]	@ (8003a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	6013      	str	r3, [r2, #0]
}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000d44 	.word	0x20000d44
 8003a40:	2000086c 	.word	0x2000086c
 8003a44:	20000d2c 	.word	0x20000d2c
 8003a48:	20000cfc 	.word	0x20000cfc
 8003a4c:	20000cf8 	.word	0x20000cf8
 8003a50:	20000d60 	.word	0x20000d60

08003a54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	@ 0x28
 8003a58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a5e:	f000 fb13 	bl	8004088 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a62:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad8 <xTimerCreateTimerTask+0x84>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d021      	beq.n	8003aae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a72:	1d3a      	adds	r2, r7, #4
 8003a74:	f107 0108 	add.w	r1, r7, #8
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fae7 	bl	8002050 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	9202      	str	r2, [sp, #8]
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	460a      	mov	r2, r1
 8003a94:	4911      	ldr	r1, [pc, #68]	@ (8003adc <xTimerCreateTimerTask+0x88>)
 8003a96:	4812      	ldr	r0, [pc, #72]	@ (8003ae0 <xTimerCreateTimerTask+0x8c>)
 8003a98:	f7ff f8a2 	bl	8002be0 <xTaskCreateStatic>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4a11      	ldr	r2, [pc, #68]	@ (8003ae4 <xTimerCreateTimerTask+0x90>)
 8003aa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003aa2:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <xTimerCreateTimerTask+0x90>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	613b      	str	r3, [r7, #16]
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003acc:	697b      	ldr	r3, [r7, #20]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000d9c 	.word	0x20000d9c
 8003adc:	08004b94 	.word	0x08004b94
 8003ae0:	08003c21 	.word	0x08003c21
 8003ae4:	20000da0 	.word	0x20000da0

08003ae8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	@ 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <xTimerGenericCommand+0x30>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	623b      	str	r3, [r7, #32]
}
 8003b12:	bf00      	nop
 8003b14:	bf00      	nop
 8003b16:	e7fd      	b.n	8003b14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b18:	4b19      	ldr	r3, [pc, #100]	@ (8003b80 <xTimerGenericCommand+0x98>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02a      	beq.n	8003b76 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	dc18      	bgt.n	8003b64 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b32:	f7ff fead 	bl	8003890 <xTaskGetSchedulerState>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d109      	bne.n	8003b50 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b3c:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <xTimerGenericCommand+0x98>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	f107 0110 	add.w	r1, r7, #16
 8003b44:	2300      	movs	r3, #0
 8003b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b48:	f7fe fc5a 	bl	8002400 <xQueueGenericSend>
 8003b4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b4e:	e012      	b.n	8003b76 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b50:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <xTimerGenericCommand+0x98>)
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	f107 0110 	add.w	r1, r7, #16
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f7fe fc50 	bl	8002400 <xQueueGenericSend>
 8003b60:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b62:	e008      	b.n	8003b76 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <xTimerGenericCommand+0x98>)
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	f107 0110 	add.w	r1, r7, #16
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	f7fe fd48 	bl	8002604 <xQueueGenericSendFromISR>
 8003b74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3728      	adds	r7, #40	@ 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000d9c 	.word	0x20000d9c

08003b84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b8e:	4b23      	ldr	r3, [pc, #140]	@ (8003c1c <prvProcessExpiredTimer+0x98>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fafb 	bl	8002198 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d023      	beq.n	8003bf8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	18d1      	adds	r1, r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	6978      	ldr	r0, [r7, #20]
 8003bbe:	f000 f8d5 	bl	8003d6c <prvInsertTimerInActiveList>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d020      	beq.n	8003c0a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	6978      	ldr	r0, [r7, #20]
 8003bd4:	f7ff ff88 	bl	8003ae8 <xTimerGenericCommand>
 8003bd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d114      	bne.n	8003c0a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	60fb      	str	r3, [r7, #12]
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	6978      	ldr	r0, [r7, #20]
 8003c10:	4798      	blx	r3
}
 8003c12:	bf00      	nop
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000d94 	.word	0x20000d94

08003c20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c28:	f107 0308 	add.w	r3, r7, #8
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 f859 	bl	8003ce4 <prvGetNextExpireTime>
 8003c32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4619      	mov	r1, r3
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f805 	bl	8003c48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c3e:	f000 f8d7 	bl	8003df0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c42:	bf00      	nop
 8003c44:	e7f0      	b.n	8003c28 <prvTimerTask+0x8>
	...

08003c48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c52:	f7ff fa29 	bl	80030a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c56:	f107 0308 	add.w	r3, r7, #8
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f866 	bl	8003d2c <prvSampleTimeNow>
 8003c60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d130      	bne.n	8003cca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <prvProcessTimerOrBlockTask+0x3c>
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d806      	bhi.n	8003c84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c76:	f7ff fa25 	bl	80030c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff81 	bl	8003b84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c82:	e024      	b.n	8003cce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c8a:	4b13      	ldr	r3, [pc, #76]	@ (8003cd8 <prvProcessTimerOrBlockTask+0x90>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <prvProcessTimerOrBlockTask+0x50>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <prvProcessTimerOrBlockTask+0x52>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <prvProcessTimerOrBlockTask+0x94>)
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f7fe ff65 	bl	8002b78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cae:	f7ff fa09 	bl	80030c4 <xTaskResumeAll>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003cb8:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <prvProcessTimerOrBlockTask+0x98>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
}
 8003cc8:	e001      	b.n	8003cce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cca:	f7ff f9fb 	bl	80030c4 <xTaskResumeAll>
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000d98 	.word	0x20000d98
 8003cdc:	20000d9c 	.word	0x20000d9c
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cec:	4b0e      	ldr	r3, [pc, #56]	@ (8003d28 <prvGetNextExpireTime+0x44>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <prvGetNextExpireTime+0x16>
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	e000      	b.n	8003cfc <prvGetNextExpireTime+0x18>
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <prvGetNextExpireTime+0x44>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e001      	b.n	8003d18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000d94 	.word	0x20000d94

08003d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d34:	f7ff fa64 	bl	8003200 <xTaskGetTickCount>
 8003d38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <prvSampleTimeNow+0x3c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d205      	bcs.n	8003d50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d44:	f000 f93a 	bl	8003fbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e002      	b.n	8003d56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d56:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <prvSampleTimeNow+0x3c>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000da4 	.word	0x20000da4

08003d6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d812      	bhi.n	8003db8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	1ad2      	subs	r2, r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d302      	bcc.n	8003da6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e01b      	b.n	8003dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003da6:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <prvInsertTimerInActiveList+0x7c>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f7fe f9b8 	bl	8002126 <vListInsert>
 8003db6:	e012      	b.n	8003dde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d206      	bcs.n	8003dce <prvInsertTimerInActiveList+0x62>
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d302      	bcc.n	8003dce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e007      	b.n	8003dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dce:	4b07      	ldr	r3, [pc, #28]	@ (8003dec <prvInsertTimerInActiveList+0x80>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f7fe f9a4 	bl	8002126 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003dde:	697b      	ldr	r3, [r7, #20]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000d98 	.word	0x20000d98
 8003dec:	20000d94 	.word	0x20000d94

08003df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08e      	sub	sp, #56	@ 0x38
 8003df4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003df6:	e0ce      	b.n	8003f96 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da19      	bge.n	8003e32 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	3304      	adds	r3, #4
 8003e02:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	61fb      	str	r3, [r7, #28]
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	e7fd      	b.n	8003e1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e28:	6850      	ldr	r0, [r2, #4]
 8003e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e2c:	6892      	ldr	r2, [r2, #8]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f2c0 80ae 	blt.w	8003f96 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe f9a4 	bl	8002198 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e50:	463b      	mov	r3, r7
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff6a 	bl	8003d2c <prvSampleTimeNow>
 8003e58:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	f200 8097 	bhi.w	8003f90 <prvProcessReceivedCommands+0x1a0>
 8003e62:	a201      	add	r2, pc, #4	@ (adr r2, 8003e68 <prvProcessReceivedCommands+0x78>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e91 	.word	0x08003e91
 8003e74:	08003f07 	.word	0x08003f07
 8003e78:	08003f1b 	.word	0x08003f1b
 8003e7c:	08003f67 	.word	0x08003f67
 8003e80:	08003e91 	.word	0x08003e91
 8003e84:	08003e91 	.word	0x08003e91
 8003e88:	08003f07 	.word	0x08003f07
 8003e8c:	08003f1b 	.word	0x08003f1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	18d1      	adds	r1, r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eb0:	f7ff ff5c 	bl	8003d6c <prvInsertTimerInActiveList>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d06c      	beq.n	8003f94 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ec0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d061      	beq.n	8003f94 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2300      	movs	r3, #0
 8003ede:	2100      	movs	r1, #0
 8003ee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee2:	f7ff fe01 	bl	8003ae8 <xTimerGenericCommand>
 8003ee6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d152      	bne.n	8003f94 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	61bb      	str	r3, [r7, #24]
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	e7fd      	b.n	8003f02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003f18:	e03d      	b.n	8003f96 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	617b      	str	r3, [r7, #20]
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	e7fd      	b.n	8003f4e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	18d1      	adds	r1, r2, r3
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f60:	f7ff ff04 	bl	8003d6c <prvInsertTimerInActiveList>
					break;
 8003f64:	e017      	b.n	8003f96 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003f74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f76:	f000 fbe7 	bl	8004748 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f7a:	e00c      	b.n	8003f96 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003f8e:	e002      	b.n	8003f96 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003f90:	bf00      	nop
 8003f92:	e000      	b.n	8003f96 <prvProcessReceivedCommands+0x1a6>
					break;
 8003f94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <prvProcessReceivedCommands+0x1c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	1d39      	adds	r1, r7, #4
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fbce 	bl	8002740 <xQueueReceive>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f47f af26 	bne.w	8003df8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3730      	adds	r7, #48	@ 0x30
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000d9c 	.word	0x20000d9c

08003fbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fc2:	e049      	b.n	8004058 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004080 <prvSwitchTimerLists+0xc4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fce:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <prvSwitchTimerLists+0xc4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe f8db 	bl	8002198 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d02f      	beq.n	8004058 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	429a      	cmp	r2, r3
 8004008:	d90e      	bls.n	8004028 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004016:	4b1a      	ldr	r3, [pc, #104]	@ (8004080 <prvSwitchTimerLists+0xc4>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3304      	adds	r3, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f7fe f880 	bl	8002126 <vListInsert>
 8004026:	e017      	b.n	8004058 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	2100      	movs	r1, #0
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff fd58 	bl	8003ae8 <xTimerGenericCommand>
 8004038:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	603b      	str	r3, [r7, #0]
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004058:	4b09      	ldr	r3, [pc, #36]	@ (8004080 <prvSwitchTimerLists+0xc4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1b0      	bne.n	8003fc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004062:	4b07      	ldr	r3, [pc, #28]	@ (8004080 <prvSwitchTimerLists+0xc4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004068:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <prvSwitchTimerLists+0xc8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a04      	ldr	r2, [pc, #16]	@ (8004080 <prvSwitchTimerLists+0xc4>)
 800406e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004070:	4a04      	ldr	r2, [pc, #16]	@ (8004084 <prvSwitchTimerLists+0xc8>)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	6013      	str	r3, [r2, #0]
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000d94 	.word	0x20000d94
 8004084:	20000d98 	.word	0x20000d98

08004088 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800408e:	f000 f96b 	bl	8004368 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004092:	4b15      	ldr	r3, [pc, #84]	@ (80040e8 <prvCheckForValidListAndQueue+0x60>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d120      	bne.n	80040dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800409a:	4814      	ldr	r0, [pc, #80]	@ (80040ec <prvCheckForValidListAndQueue+0x64>)
 800409c:	f7fd fff2 	bl	8002084 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040a0:	4813      	ldr	r0, [pc, #76]	@ (80040f0 <prvCheckForValidListAndQueue+0x68>)
 80040a2:	f7fd ffef 	bl	8002084 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040a6:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <prvCheckForValidListAndQueue+0x6c>)
 80040a8:	4a10      	ldr	r2, [pc, #64]	@ (80040ec <prvCheckForValidListAndQueue+0x64>)
 80040aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040ac:	4b12      	ldr	r3, [pc, #72]	@ (80040f8 <prvCheckForValidListAndQueue+0x70>)
 80040ae:	4a10      	ldr	r2, [pc, #64]	@ (80040f0 <prvCheckForValidListAndQueue+0x68>)
 80040b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040b2:	2300      	movs	r3, #0
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	4b11      	ldr	r3, [pc, #68]	@ (80040fc <prvCheckForValidListAndQueue+0x74>)
 80040b8:	4a11      	ldr	r2, [pc, #68]	@ (8004100 <prvCheckForValidListAndQueue+0x78>)
 80040ba:	2110      	movs	r1, #16
 80040bc:	200a      	movs	r0, #10
 80040be:	f7fe f8ff 	bl	80022c0 <xQueueGenericCreateStatic>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4a08      	ldr	r2, [pc, #32]	@ (80040e8 <prvCheckForValidListAndQueue+0x60>)
 80040c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040c8:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <prvCheckForValidListAndQueue+0x60>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <prvCheckForValidListAndQueue+0x60>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	490b      	ldr	r1, [pc, #44]	@ (8004104 <prvCheckForValidListAndQueue+0x7c>)
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe fd24 	bl	8002b24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040dc:	f000 f976 	bl	80043cc <vPortExitCritical>
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000d9c 	.word	0x20000d9c
 80040ec:	20000d6c 	.word	0x20000d6c
 80040f0:	20000d80 	.word	0x20000d80
 80040f4:	20000d94 	.word	0x20000d94
 80040f8:	20000d98 	.word	0x20000d98
 80040fc:	20000e48 	.word	0x20000e48
 8004100:	20000da8 	.word	0x20000da8
 8004104:	08004b9c 	.word	0x08004b9c

08004108 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3b04      	subs	r3, #4
 8004118:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3b04      	subs	r3, #4
 8004126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b04      	subs	r3, #4
 8004136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004138:	4a0c      	ldr	r2, [pc, #48]	@ (800416c <pxPortInitialiseStack+0x64>)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3b14      	subs	r3, #20
 8004142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3b04      	subs	r3, #4
 800414e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f06f 0202 	mvn.w	r2, #2
 8004156:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3b20      	subs	r3, #32
 800415c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800415e:	68fb      	ldr	r3, [r7, #12]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	08004171 	.word	0x08004171

08004170 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800417a:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <prvTaskExitError+0x58>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d00b      	beq.n	800419c <prvTaskExitError+0x2c>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	60fb      	str	r3, [r7, #12]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <prvTaskExitError+0x28>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	60bb      	str	r3, [r7, #8]
}
 80041ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041b0:	bf00      	nop
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0fc      	beq.n	80041b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	2000000c 	.word	0x2000000c
 80041cc:	00000000 	.word	0x00000000

080041d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <pxCurrentTCBConst2>)
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	6808      	ldr	r0, [r1, #0]
 80041d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041da:	f380 8809 	msr	PSP, r0
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8811 	msr	BASEPRI, r0
 80041ea:	4770      	bx	lr
 80041ec:	f3af 8000 	nop.w

080041f0 <pxCurrentTCBConst2>:
 80041f0:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041f8:	4808      	ldr	r0, [pc, #32]	@ (800421c <prvPortStartFirstTask+0x24>)
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	6800      	ldr	r0, [r0, #0]
 80041fe:	f380 8808 	msr	MSP, r0
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8814 	msr	CONTROL, r0
 800420a:	b662      	cpsie	i
 800420c:	b661      	cpsie	f
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	df00      	svc	0
 8004218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800421a:	bf00      	nop
 800421c:	e000ed08 	.word	0xe000ed08

08004220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004226:	4b47      	ldr	r3, [pc, #284]	@ (8004344 <xPortStartScheduler+0x124>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a47      	ldr	r2, [pc, #284]	@ (8004348 <xPortStartScheduler+0x128>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10b      	bne.n	8004248 <xPortStartScheduler+0x28>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	613b      	str	r3, [r7, #16]
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004248:	4b3e      	ldr	r3, [pc, #248]	@ (8004344 <xPortStartScheduler+0x124>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a3f      	ldr	r2, [pc, #252]	@ (800434c <xPortStartScheduler+0x12c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d10b      	bne.n	800426a <xPortStartScheduler+0x4a>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	60fb      	str	r3, [r7, #12]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800426a:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <xPortStartScheduler+0x130>)
 800426c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	22ff      	movs	r2, #255	@ 0xff
 800427a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4b31      	ldr	r3, [pc, #196]	@ (8004354 <xPortStartScheduler+0x134>)
 8004290:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004292:	4b31      	ldr	r3, [pc, #196]	@ (8004358 <xPortStartScheduler+0x138>)
 8004294:	2207      	movs	r2, #7
 8004296:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004298:	e009      	b.n	80042ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <xPortStartScheduler+0x138>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004358 <xPortStartScheduler+0x138>)
 80042a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b6:	2b80      	cmp	r3, #128	@ 0x80
 80042b8:	d0ef      	beq.n	800429a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ba:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <xPortStartScheduler+0x138>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f1c3 0307 	rsb	r3, r3, #7
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d00b      	beq.n	80042de <xPortStartScheduler+0xbe>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60bb      	str	r3, [r7, #8]
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	e7fd      	b.n	80042da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042de:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <xPortStartScheduler+0x138>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004358 <xPortStartScheduler+0x138>)
 80042e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <xPortStartScheduler+0x138>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042f0:	4a19      	ldr	r2, [pc, #100]	@ (8004358 <xPortStartScheduler+0x138>)
 80042f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <xPortStartScheduler+0x13c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a16      	ldr	r2, [pc, #88]	@ (800435c <xPortStartScheduler+0x13c>)
 8004302:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004308:	4b14      	ldr	r3, [pc, #80]	@ (800435c <xPortStartScheduler+0x13c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a13      	ldr	r2, [pc, #76]	@ (800435c <xPortStartScheduler+0x13c>)
 800430e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004314:	f000 f8da 	bl	80044cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004318:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <xPortStartScheduler+0x140>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800431e:	f000 f8f9 	bl	8004514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004322:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <xPortStartScheduler+0x144>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a0f      	ldr	r2, [pc, #60]	@ (8004364 <xPortStartScheduler+0x144>)
 8004328:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800432c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800432e:	f7ff ff63 	bl	80041f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004332:	f7ff f82f 	bl	8003394 <vTaskSwitchContext>
	prvTaskExitError();
 8004336:	f7ff ff1b 	bl	8004170 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	e000ed00 	.word	0xe000ed00
 8004348:	410fc271 	.word	0x410fc271
 800434c:	410fc270 	.word	0x410fc270
 8004350:	e000e400 	.word	0xe000e400
 8004354:	20000e98 	.word	0x20000e98
 8004358:	20000e9c 	.word	0x20000e9c
 800435c:	e000ed20 	.word	0xe000ed20
 8004360:	2000000c 	.word	0x2000000c
 8004364:	e000ef34 	.word	0xe000ef34

08004368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	607b      	str	r3, [r7, #4]
}
 8004380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004382:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <vPortEnterCritical+0x5c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3301      	adds	r3, #1
 8004388:	4a0e      	ldr	r2, [pc, #56]	@ (80043c4 <vPortEnterCritical+0x5c>)
 800438a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800438c:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <vPortEnterCritical+0x5c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d110      	bne.n	80043b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004394:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <vPortEnterCritical+0x60>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	603b      	str	r3, [r7, #0]
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	e7fd      	b.n	80043b2 <vPortEnterCritical+0x4a>
	}
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000000c 	.word	0x2000000c
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <vPortExitCritical+0x50>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <vPortExitCritical+0x26>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	607b      	str	r3, [r7, #4]
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	e7fd      	b.n	80043ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043f2:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <vPortExitCritical+0x50>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	4a08      	ldr	r2, [pc, #32]	@ (800441c <vPortExitCritical+0x50>)
 80043fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043fc:	4b07      	ldr	r3, [pc, #28]	@ (800441c <vPortExitCritical+0x50>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <vPortExitCritical+0x44>
 8004404:	2300      	movs	r3, #0
 8004406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f383 8811 	msr	BASEPRI, r3
}
 800440e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	2000000c 	.word	0x2000000c

08004420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004420:	f3ef 8009 	mrs	r0, PSP
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <pxCurrentTCBConst>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f01e 0f10 	tst.w	lr, #16
 8004430:	bf08      	it	eq
 8004432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	6010      	str	r0, [r2, #0]
 800443c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004444:	f380 8811 	msr	BASEPRI, r0
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f7fe ffa0 	bl	8003394 <vTaskSwitchContext>
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f380 8811 	msr	BASEPRI, r0
 800445c:	bc09      	pop	{r0, r3}
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004466:	f01e 0f10 	tst.w	lr, #16
 800446a:	bf08      	it	eq
 800446c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004470:	f380 8809 	msr	PSP, r0
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst>:
 8004480:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	607b      	str	r3, [r7, #4]
}
 80044a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044a2:	f7fe febd 	bl	8003220 <xTaskIncrementTick>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044ac:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <xPortSysTickHandler+0x40>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f383 8811 	msr	BASEPRI, r3
}
 80044be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <vPortSetupTimerInterrupt+0x38>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <vPortSetupTimerInterrupt+0x3c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <vPortSetupTimerInterrupt+0x40>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	4a09      	ldr	r2, [pc, #36]	@ (8004510 <vPortSetupTimerInterrupt+0x44>)
 80044ea:	3b01      	subs	r3, #1
 80044ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ee:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010
 8004504:	e000e018 	.word	0xe000e018
 8004508:	20000000 	.word	0x20000000
 800450c:	10624dd3 	.word	0x10624dd3
 8004510:	e000e014 	.word	0xe000e014

08004514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004524 <vPortEnableVFP+0x10>
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800451e:	6001      	str	r1, [r0, #0]
 8004520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004522:	bf00      	nop
 8004524:	e000ed88 	.word	0xe000ed88

08004528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800452e:	f3ef 8305 	mrs	r3, IPSR
 8004532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d915      	bls.n	8004566 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800453a:	4a18      	ldr	r2, [pc, #96]	@ (800459c <vPortValidateInterruptPriority+0x74>)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004544:	4b16      	ldr	r3, [pc, #88]	@ (80045a0 <vPortValidateInterruptPriority+0x78>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	7afa      	ldrb	r2, [r7, #11]
 800454a:	429a      	cmp	r2, r3
 800454c:	d20b      	bcs.n	8004566 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	e7fd      	b.n	8004562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004566:	4b0f      	ldr	r3, [pc, #60]	@ (80045a4 <vPortValidateInterruptPriority+0x7c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800456e:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <vPortValidateInterruptPriority+0x80>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d90b      	bls.n	800458e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	603b      	str	r3, [r7, #0]
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	e7fd      	b.n	800458a <vPortValidateInterruptPriority+0x62>
	}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000e3f0 	.word	0xe000e3f0
 80045a0:	20000e98 	.word	0x20000e98
 80045a4:	e000ed0c 	.word	0xe000ed0c
 80045a8:	20000e9c 	.word	0x20000e9c

080045ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	@ 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045b8:	f7fe fd76 	bl	80030a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004730 <pvPortMalloc+0x184>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045c4:	f000 f924 	bl	8004810 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004734 <pvPortMalloc+0x188>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 8095 	bne.w	8004700 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01e      	beq.n	800461a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80045dc:	2208      	movs	r2, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d015      	beq.n	800461a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f023 0307 	bic.w	r3, r3, #7
 80045f4:	3308      	adds	r3, #8
 80045f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <pvPortMalloc+0x6e>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	617b      	str	r3, [r7, #20]
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	e7fd      	b.n	8004616 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d06f      	beq.n	8004700 <pvPortMalloc+0x154>
 8004620:	4b45      	ldr	r3, [pc, #276]	@ (8004738 <pvPortMalloc+0x18c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d86a      	bhi.n	8004700 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800462a:	4b44      	ldr	r3, [pc, #272]	@ (800473c <pvPortMalloc+0x190>)
 800462c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800462e:	4b43      	ldr	r3, [pc, #268]	@ (800473c <pvPortMalloc+0x190>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004634:	e004      	b.n	8004640 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	429a      	cmp	r2, r3
 8004648:	d903      	bls.n	8004652 <pvPortMalloc+0xa6>
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f1      	bne.n	8004636 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004652:	4b37      	ldr	r3, [pc, #220]	@ (8004730 <pvPortMalloc+0x184>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004658:	429a      	cmp	r2, r3
 800465a:	d051      	beq.n	8004700 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2208      	movs	r2, #8
 8004662:	4413      	add	r3, r2
 8004664:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	1ad2      	subs	r2, r2, r3
 8004676:	2308      	movs	r3, #8
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	429a      	cmp	r2, r3
 800467c:	d920      	bls.n	80046c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800467e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <pvPortMalloc+0xfc>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	1ad2      	subs	r2, r2, r3
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046ba:	69b8      	ldr	r0, [r7, #24]
 80046bc:	f000 f90a 	bl	80048d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <pvPortMalloc+0x18c>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004738 <pvPortMalloc+0x18c>)
 80046cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004738 <pvPortMalloc+0x18c>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <pvPortMalloc+0x194>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d203      	bcs.n	80046e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046da:	4b17      	ldr	r3, [pc, #92]	@ (8004738 <pvPortMalloc+0x18c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a18      	ldr	r2, [pc, #96]	@ (8004740 <pvPortMalloc+0x194>)
 80046e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4b13      	ldr	r3, [pc, #76]	@ (8004734 <pvPortMalloc+0x188>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046f6:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <pvPortMalloc+0x198>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	4a11      	ldr	r2, [pc, #68]	@ (8004744 <pvPortMalloc+0x198>)
 80046fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004700:	f7fe fce0 	bl	80030c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <pvPortMalloc+0x17a>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60fb      	str	r3, [r7, #12]
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	e7fd      	b.n	8004722 <pvPortMalloc+0x176>
	return pvReturn;
 8004726:	69fb      	ldr	r3, [r7, #28]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	@ 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20001a60 	.word	0x20001a60
 8004734:	20001a74 	.word	0x20001a74
 8004738:	20001a64 	.word	0x20001a64
 800473c:	20001a58 	.word	0x20001a58
 8004740:	20001a68 	.word	0x20001a68
 8004744:	20001a6c 	.word	0x20001a6c

08004748 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04f      	beq.n	80047fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800475a:	2308      	movs	r3, #8
 800475c:	425b      	negs	r3, r3
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4413      	add	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	4b25      	ldr	r3, [pc, #148]	@ (8004804 <vPortFree+0xbc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10b      	bne.n	800478e <vPortFree+0x46>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	60fb      	str	r3, [r7, #12]
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	e7fd      	b.n	800478a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <vPortFree+0x66>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60bb      	str	r3, [r7, #8]
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	4b14      	ldr	r3, [pc, #80]	@ (8004804 <vPortFree+0xbc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01e      	beq.n	80047fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d11a      	bne.n	80047fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <vPortFree+0xbc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	401a      	ands	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047d4:	f7fe fc68 	bl	80030a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004808 <vPortFree+0xc0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4413      	add	r3, r2
 80047e2:	4a09      	ldr	r2, [pc, #36]	@ (8004808 <vPortFree+0xc0>)
 80047e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047e6:	6938      	ldr	r0, [r7, #16]
 80047e8:	f000 f874 	bl	80048d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047ec:	4b07      	ldr	r3, [pc, #28]	@ (800480c <vPortFree+0xc4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	4a06      	ldr	r2, [pc, #24]	@ (800480c <vPortFree+0xc4>)
 80047f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047f6:	f7fe fc65 	bl	80030c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047fa:	bf00      	nop
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20001a74 	.word	0x20001a74
 8004808:	20001a64 	.word	0x20001a64
 800480c:	20001a70 	.word	0x20001a70

08004810 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004816:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800481a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800481c:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <prvHeapInit+0xac>)
 800481e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00c      	beq.n	8004844 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3307      	adds	r3, #7
 800482e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0307 	bic.w	r3, r3, #7
 8004836:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <prvHeapInit+0xac>)
 8004840:	4413      	add	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004848:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <prvHeapInit+0xb0>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800484e:	4b1c      	ldr	r3, [pc, #112]	@ (80048c0 <prvHeapInit+0xb0>)
 8004850:	2200      	movs	r2, #0
 8004852:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4413      	add	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800485c:	2208      	movs	r2, #8
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0307 	bic.w	r3, r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a15      	ldr	r2, [pc, #84]	@ (80048c4 <prvHeapInit+0xb4>)
 8004870:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004872:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <prvHeapInit+0xb4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2200      	movs	r2, #0
 8004878:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800487a:	4b12      	ldr	r3, [pc, #72]	@ (80048c4 <prvHeapInit+0xb4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004890:	4b0c      	ldr	r3, [pc, #48]	@ (80048c4 <prvHeapInit+0xb4>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <prvHeapInit+0xb8>)
 800489e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a09      	ldr	r2, [pc, #36]	@ (80048cc <prvHeapInit+0xbc>)
 80048a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048a8:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <prvHeapInit+0xc0>)
 80048aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80048ae:	601a      	str	r2, [r3, #0]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	20000ea0 	.word	0x20000ea0
 80048c0:	20001a58 	.word	0x20001a58
 80048c4:	20001a60 	.word	0x20001a60
 80048c8:	20001a68 	.word	0x20001a68
 80048cc:	20001a64 	.word	0x20001a64
 80048d0:	20001a74 	.word	0x20001a74

080048d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048dc:	4b28      	ldr	r3, [pc, #160]	@ (8004980 <prvInsertBlockIntoFreeList+0xac>)
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e002      	b.n	80048e8 <prvInsertBlockIntoFreeList+0x14>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d8f7      	bhi.n	80048e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	4413      	add	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d108      	bne.n	8004916 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	441a      	add	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	441a      	add	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d118      	bne.n	800495c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b15      	ldr	r3, [pc, #84]	@ (8004984 <prvInsertBlockIntoFreeList+0xb0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d00d      	beq.n	8004952 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	441a      	add	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e008      	b.n	8004964 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004952:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <prvInsertBlockIntoFreeList+0xb0>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e003      	b.n	8004964 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d002      	beq.n	8004972 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20001a58 	.word	0x20001a58
 8004984:	20001a60 	.word	0x20001a60

08004988 <memset>:
 8004988:	4402      	add	r2, r0
 800498a:	4603      	mov	r3, r0
 800498c:	4293      	cmp	r3, r2
 800498e:	d100      	bne.n	8004992 <memset+0xa>
 8004990:	4770      	bx	lr
 8004992:	f803 1b01 	strb.w	r1, [r3], #1
 8004996:	e7f9      	b.n	800498c <memset+0x4>

08004998 <_reclaim_reent>:
 8004998:	4b29      	ldr	r3, [pc, #164]	@ (8004a40 <_reclaim_reent+0xa8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4283      	cmp	r3, r0
 800499e:	b570      	push	{r4, r5, r6, lr}
 80049a0:	4604      	mov	r4, r0
 80049a2:	d04b      	beq.n	8004a3c <_reclaim_reent+0xa4>
 80049a4:	69c3      	ldr	r3, [r0, #28]
 80049a6:	b1ab      	cbz	r3, 80049d4 <_reclaim_reent+0x3c>
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	b16b      	cbz	r3, 80049c8 <_reclaim_reent+0x30>
 80049ac:	2500      	movs	r5, #0
 80049ae:	69e3      	ldr	r3, [r4, #28]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	5959      	ldr	r1, [r3, r5]
 80049b4:	2900      	cmp	r1, #0
 80049b6:	d13b      	bne.n	8004a30 <_reclaim_reent+0x98>
 80049b8:	3504      	adds	r5, #4
 80049ba:	2d80      	cmp	r5, #128	@ 0x80
 80049bc:	d1f7      	bne.n	80049ae <_reclaim_reent+0x16>
 80049be:	69e3      	ldr	r3, [r4, #28]
 80049c0:	4620      	mov	r0, r4
 80049c2:	68d9      	ldr	r1, [r3, #12]
 80049c4:	f000 f872 	bl	8004aac <_free_r>
 80049c8:	69e3      	ldr	r3, [r4, #28]
 80049ca:	6819      	ldr	r1, [r3, #0]
 80049cc:	b111      	cbz	r1, 80049d4 <_reclaim_reent+0x3c>
 80049ce:	4620      	mov	r0, r4
 80049d0:	f000 f86c 	bl	8004aac <_free_r>
 80049d4:	6961      	ldr	r1, [r4, #20]
 80049d6:	b111      	cbz	r1, 80049de <_reclaim_reent+0x46>
 80049d8:	4620      	mov	r0, r4
 80049da:	f000 f867 	bl	8004aac <_free_r>
 80049de:	69e1      	ldr	r1, [r4, #28]
 80049e0:	b111      	cbz	r1, 80049e8 <_reclaim_reent+0x50>
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 f862 	bl	8004aac <_free_r>
 80049e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80049ea:	b111      	cbz	r1, 80049f2 <_reclaim_reent+0x5a>
 80049ec:	4620      	mov	r0, r4
 80049ee:	f000 f85d 	bl	8004aac <_free_r>
 80049f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049f4:	b111      	cbz	r1, 80049fc <_reclaim_reent+0x64>
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 f858 	bl	8004aac <_free_r>
 80049fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80049fe:	b111      	cbz	r1, 8004a06 <_reclaim_reent+0x6e>
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 f853 	bl	8004aac <_free_r>
 8004a06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004a08:	b111      	cbz	r1, 8004a10 <_reclaim_reent+0x78>
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f000 f84e 	bl	8004aac <_free_r>
 8004a10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004a12:	b111      	cbz	r1, 8004a1a <_reclaim_reent+0x82>
 8004a14:	4620      	mov	r0, r4
 8004a16:	f000 f849 	bl	8004aac <_free_r>
 8004a1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004a1c:	b111      	cbz	r1, 8004a24 <_reclaim_reent+0x8c>
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 f844 	bl	8004aac <_free_r>
 8004a24:	6a23      	ldr	r3, [r4, #32]
 8004a26:	b14b      	cbz	r3, 8004a3c <_reclaim_reent+0xa4>
 8004a28:	4620      	mov	r0, r4
 8004a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a2e:	4718      	bx	r3
 8004a30:	680e      	ldr	r6, [r1, #0]
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 f83a 	bl	8004aac <_free_r>
 8004a38:	4631      	mov	r1, r6
 8004a3a:	e7bb      	b.n	80049b4 <_reclaim_reent+0x1c>
 8004a3c:	bd70      	pop	{r4, r5, r6, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000010 	.word	0x20000010

08004a44 <__libc_init_array>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4d0d      	ldr	r5, [pc, #52]	@ (8004a7c <__libc_init_array+0x38>)
 8004a48:	4c0d      	ldr	r4, [pc, #52]	@ (8004a80 <__libc_init_array+0x3c>)
 8004a4a:	1b64      	subs	r4, r4, r5
 8004a4c:	10a4      	asrs	r4, r4, #2
 8004a4e:	2600      	movs	r6, #0
 8004a50:	42a6      	cmp	r6, r4
 8004a52:	d109      	bne.n	8004a68 <__libc_init_array+0x24>
 8004a54:	4d0b      	ldr	r5, [pc, #44]	@ (8004a84 <__libc_init_array+0x40>)
 8004a56:	4c0c      	ldr	r4, [pc, #48]	@ (8004a88 <__libc_init_array+0x44>)
 8004a58:	f000 f87e 	bl	8004b58 <_init>
 8004a5c:	1b64      	subs	r4, r4, r5
 8004a5e:	10a4      	asrs	r4, r4, #2
 8004a60:	2600      	movs	r6, #0
 8004a62:	42a6      	cmp	r6, r4
 8004a64:	d105      	bne.n	8004a72 <__libc_init_array+0x2e>
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6c:	4798      	blx	r3
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7ee      	b.n	8004a50 <__libc_init_array+0xc>
 8004a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a76:	4798      	blx	r3
 8004a78:	3601      	adds	r6, #1
 8004a7a:	e7f2      	b.n	8004a62 <__libc_init_array+0x1e>
 8004a7c:	08004c58 	.word	0x08004c58
 8004a80:	08004c58 	.word	0x08004c58
 8004a84:	08004c58 	.word	0x08004c58
 8004a88:	08004c5c 	.word	0x08004c5c

08004a8c <__retarget_lock_acquire_recursive>:
 8004a8c:	4770      	bx	lr

08004a8e <__retarget_lock_release_recursive>:
 8004a8e:	4770      	bx	lr

08004a90 <memcpy>:
 8004a90:	440a      	add	r2, r1
 8004a92:	4291      	cmp	r1, r2
 8004a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a98:	d100      	bne.n	8004a9c <memcpy+0xc>
 8004a9a:	4770      	bx	lr
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aa6:	4291      	cmp	r1, r2
 8004aa8:	d1f9      	bne.n	8004a9e <memcpy+0xe>
 8004aaa:	bd10      	pop	{r4, pc}

08004aac <_free_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4605      	mov	r5, r0
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	d041      	beq.n	8004b38 <_free_r+0x8c>
 8004ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab8:	1f0c      	subs	r4, r1, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bfb8      	it	lt
 8004abe:	18e4      	addlt	r4, r4, r3
 8004ac0:	f000 f83e 	bl	8004b40 <__malloc_lock>
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <_free_r+0x90>)
 8004ac6:	6813      	ldr	r3, [r2, #0]
 8004ac8:	b933      	cbnz	r3, 8004ad8 <_free_r+0x2c>
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	6014      	str	r4, [r2, #0]
 8004ace:	4628      	mov	r0, r5
 8004ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ad4:	f000 b83a 	b.w	8004b4c <__malloc_unlock>
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	d908      	bls.n	8004aee <_free_r+0x42>
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	1821      	adds	r1, r4, r0
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	bf01      	itttt	eq
 8004ae4:	6819      	ldreq	r1, [r3, #0]
 8004ae6:	685b      	ldreq	r3, [r3, #4]
 8004ae8:	1809      	addeq	r1, r1, r0
 8004aea:	6021      	streq	r1, [r4, #0]
 8004aec:	e7ed      	b.n	8004aca <_free_r+0x1e>
 8004aee:	461a      	mov	r2, r3
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	b10b      	cbz	r3, 8004af8 <_free_r+0x4c>
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d9fa      	bls.n	8004aee <_free_r+0x42>
 8004af8:	6811      	ldr	r1, [r2, #0]
 8004afa:	1850      	adds	r0, r2, r1
 8004afc:	42a0      	cmp	r0, r4
 8004afe:	d10b      	bne.n	8004b18 <_free_r+0x6c>
 8004b00:	6820      	ldr	r0, [r4, #0]
 8004b02:	4401      	add	r1, r0
 8004b04:	1850      	adds	r0, r2, r1
 8004b06:	4283      	cmp	r3, r0
 8004b08:	6011      	str	r1, [r2, #0]
 8004b0a:	d1e0      	bne.n	8004ace <_free_r+0x22>
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	6053      	str	r3, [r2, #4]
 8004b12:	4408      	add	r0, r1
 8004b14:	6010      	str	r0, [r2, #0]
 8004b16:	e7da      	b.n	8004ace <_free_r+0x22>
 8004b18:	d902      	bls.n	8004b20 <_free_r+0x74>
 8004b1a:	230c      	movs	r3, #12
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	e7d6      	b.n	8004ace <_free_r+0x22>
 8004b20:	6820      	ldr	r0, [r4, #0]
 8004b22:	1821      	adds	r1, r4, r0
 8004b24:	428b      	cmp	r3, r1
 8004b26:	bf04      	itt	eq
 8004b28:	6819      	ldreq	r1, [r3, #0]
 8004b2a:	685b      	ldreq	r3, [r3, #4]
 8004b2c:	6063      	str	r3, [r4, #4]
 8004b2e:	bf04      	itt	eq
 8004b30:	1809      	addeq	r1, r1, r0
 8004b32:	6021      	streq	r1, [r4, #0]
 8004b34:	6054      	str	r4, [r2, #4]
 8004b36:	e7ca      	b.n	8004ace <_free_r+0x22>
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20001bb4 	.word	0x20001bb4

08004b40 <__malloc_lock>:
 8004b40:	4801      	ldr	r0, [pc, #4]	@ (8004b48 <__malloc_lock+0x8>)
 8004b42:	f7ff bfa3 	b.w	8004a8c <__retarget_lock_acquire_recursive>
 8004b46:	bf00      	nop
 8004b48:	20001bb0 	.word	0x20001bb0

08004b4c <__malloc_unlock>:
 8004b4c:	4801      	ldr	r0, [pc, #4]	@ (8004b54 <__malloc_unlock+0x8>)
 8004b4e:	f7ff bf9e 	b.w	8004a8e <__retarget_lock_release_recursive>
 8004b52:	bf00      	nop
 8004b54:	20001bb0 	.word	0x20001bb0

08004b58 <_init>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr

08004b64 <_fini>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr
