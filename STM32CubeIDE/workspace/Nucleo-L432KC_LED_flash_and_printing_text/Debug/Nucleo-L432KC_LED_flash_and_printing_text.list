
Nucleo-L432KC_LED_flash_and_printing_text.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08004f0c  08004f0c  00005f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d8  080050d8  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080050d8  080050d8  000060d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050e0  080050e0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e0  080050e0  000060e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050e4  080050e4  000060e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080050e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000068  08005150  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08005150  0000731c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f301  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b2  00000000  00000000  00016399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00018950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a71  00000000  00000000  000196f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021871  00000000  00000000  0001a161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011393  00000000  00000000  0003b9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3e48  00000000  00000000  0004cd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110bad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  00110bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00114c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ef4 	.word	0x08004ef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004ef4 	.word	0x08004ef4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f023 030f 	bic.w	r3, r3, #15
 80005bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	f043 030c 	orr.w	r3, r3, #12
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80005d8:	7bbb      	ldrb	r3, [r7, #14]
 80005da:	f043 030c 	orr.w	r3, r3, #12
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005ec:	f107 0208 	add.w	r2, r7, #8
 80005f0:	2364      	movs	r3, #100	@ 0x64
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2304      	movs	r3, #4
 80005f6:	214e      	movs	r1, #78	@ 0x4e
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <lcd_send_cmd+0x5c>)
 80005fa:	f001 f889 	bl	8001710 <HAL_I2C_Master_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000084 	.word	0x20000084

0800060c <lcd_send_data>:

void lcd_send_data (char data)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f023 030f 	bic.w	r3, r3, #15
 800061c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	011b      	lsls	r3, r3, #4
 8000622:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	f043 030d 	orr.w	r3, r3, #13
 800062a:	b2db      	uxtb	r3, r3
 800062c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	f043 0309 	orr.w	r3, r3, #9
 8000634:	b2db      	uxtb	r3, r3
 8000636:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	f043 030d 	orr.w	r3, r3, #13
 800063e:	b2db      	uxtb	r3, r3
 8000640:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	f043 0309 	orr.w	r3, r3, #9
 8000648:	b2db      	uxtb	r3, r3
 800064a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	2364      	movs	r3, #100	@ 0x64
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2304      	movs	r3, #4
 8000656:	214e      	movs	r1, #78	@ 0x4e
 8000658:	4803      	ldr	r0, [pc, #12]	@ (8000668 <lcd_send_data+0x5c>)
 800065a:	f001 f859 	bl	8001710 <HAL_I2C_Master_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000084 	.word	0x20000084

0800066c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    switch (row)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d003      	beq.n	8000684 <lcd_put_cur+0x18>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d005      	beq.n	800068e <lcd_put_cur+0x22>
 8000682:	e009      	b.n	8000698 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800068a:	603b      	str	r3, [r7, #0]
            break;
 800068c:	e004      	b.n	8000698 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000694:	603b      	str	r3, [r7, #0]
            break;
 8000696:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff85 	bl	80005ac <lcd_send_cmd>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <lcd_init>:


void lcd_init (void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006ae:	2032      	movs	r0, #50	@ 0x32
 80006b0:	f000 fcd4 	bl	800105c <HAL_Delay>
	lcd_send_cmd (0x30);
 80006b4:	2030      	movs	r0, #48	@ 0x30
 80006b6:	f7ff ff79 	bl	80005ac <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006ba:	2005      	movs	r0, #5
 80006bc:	f000 fcce 	bl	800105c <HAL_Delay>
	lcd_send_cmd (0x30);
 80006c0:	2030      	movs	r0, #48	@ 0x30
 80006c2:	f7ff ff73 	bl	80005ac <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 fcc8 	bl	800105c <HAL_Delay>
	lcd_send_cmd (0x30);
 80006cc:	2030      	movs	r0, #48	@ 0x30
 80006ce:	f7ff ff6d 	bl	80005ac <lcd_send_cmd>
	HAL_Delay(10);
 80006d2:	200a      	movs	r0, #10
 80006d4:	f000 fcc2 	bl	800105c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006d8:	2020      	movs	r0, #32
 80006da:	f7ff ff67 	bl	80005ac <lcd_send_cmd>
	HAL_Delay(10);
 80006de:	200a      	movs	r0, #10
 80006e0:	f000 fcbc 	bl	800105c <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006e4:	2028      	movs	r0, #40	@ 0x28
 80006e6:	f7ff ff61 	bl	80005ac <lcd_send_cmd>
	HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fcb6 	bl	800105c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006f0:	2008      	movs	r0, #8
 80006f2:	f7ff ff5b 	bl	80005ac <lcd_send_cmd>
	HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fcb0 	bl	800105c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ff55 	bl	80005ac <lcd_send_cmd>
	HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fcaa 	bl	800105c <HAL_Delay>
	HAL_Delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fca7 	bl	800105c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800070e:	2006      	movs	r0, #6
 8000710:	f7ff ff4c 	bl	80005ac <lcd_send_cmd>
	HAL_Delay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fca1 	bl	800105c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800071a:	200c      	movs	r0, #12
 800071c:	f7ff ff46 	bl	80005ac <lcd_send_cmd>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800072c:	e006      	b.n	800073c <lcd_send_string+0x18>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff68 	bl	800060c <lcd_send_data>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f4      	bne.n	800072e <lcd_send_string+0xa>
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <LED_Toggle>:
  * @brief  Toggle the LED with delay
  * @param  delay_ms: Delay in milliseconds between toggles
  * @retval None
  */
void LED_Toggle(uint32_t delay_ms)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000758:	2108      	movs	r1, #8
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <LED_Toggle+0x20>)
 800075c:	f000 ff22 	bl	80015a4 <HAL_GPIO_TogglePin>
  HAL_Delay(delay_ms);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 fc7b 	bl	800105c <HAL_Delay>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	48000400 	.word	0x48000400

08000774 <LED_GetState>:
/**
  * @brief  Get the current state of the LED
  * @retval GPIO_PinState: Current LED state
  */
GPIO_PinState LED_GetState(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000778:	2108      	movs	r1, #8
 800077a:	4803      	ldr	r0, [pc, #12]	@ (8000788 <LED_GetState+0x14>)
 800077c:	f000 fee2 	bl	8001544 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	48000400 	.word	0x48000400

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 fbee 	bl	8000f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f853 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 f923 	bl	80009e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800079e:	f000 f8f1 	bl	8000984 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007a2:	f000 f8af 	bl	8000904 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 80007a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007aa:	f000 fc57 	bl	800105c <HAL_Delay>
	UART_PrintWelcomeMessage(); //Code is in uart_control.c
 80007ae:	f000 fb49 	bl	8000e44 <UART_PrintWelcomeMessage>
	HAL_Delay(500);
 80007b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007b6:	f000 fc51 	bl	800105c <HAL_Delay>

	// Display Strings to LCD
	lcd_init(); // Initialise the LCD
 80007ba:	f7ff ff76 	bl	80006aa <lcd_init>
	lcd_put_cur(0, 0); // Move the cursor to the first column in the first row
 80007be:	2100      	movs	r1, #0
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ff53 	bl	800066c <lcd_put_cur>
	lcd_send_string("HELLO WORLD"); //Call the function lcd_send_string, in i2c-lcd.c, to send the text to the LCD via I2C
 80007c6:	481a      	ldr	r0, [pc, #104]	@ (8000830 <main+0xa4>)
 80007c8:	f7ff ffac 	bl	8000724 <lcd_send_string>
	lcd_put_cur(1, 0); // Move the cursor to the first column in the second row
 80007cc:	2100      	movs	r1, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff ff4c 	bl	800066c <lcd_put_cur>
	lcd_send_string("from Steve"); //Call the function lcd_send_string, in i2c-lcd.c, to send the text to the LCD via I2C
 80007d4:	4817      	ldr	r0, [pc, #92]	@ (8000834 <main+0xa8>)
 80007d6:	f7ff ffa5 	bl	8000724 <lcd_send_string>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		LED_Toggle(200); //Toggle LD3 LED Pin, with 1 second delay. Code is in led.control.c
 80007da:	20c8      	movs	r0, #200	@ 0xc8
 80007dc:	f7ff ffb8 	bl	8000750 <LED_Toggle>
		HAL_Delay(100);
 80007e0:	2064      	movs	r0, #100	@ 0x64
 80007e2:	f000 fc3b 	bl	800105c <HAL_Delay>
		UART_PrintLEDStatus(counter++, LED_GetState()); //Print LED status information & counter value. Code is in uart_control.c
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <main+0xac>)
 80007e8:	681c      	ldr	r4, [r3, #0]
 80007ea:	1c63      	adds	r3, r4, #1
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <main+0xac>)
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	f7ff ffc0 	bl	8000774 <LED_GetState>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4619      	mov	r1, r3
 80007f8:	4620      	mov	r0, r4
 80007fa:	f000 fb4b 	bl	8000e94 <UART_PrintLEDStatus>
		HAL_Delay(100);
 80007fe:	2064      	movs	r0, #100	@ 0x64
 8000800:	f000 fc2c 	bl	800105c <HAL_Delay>
		UART_PrintSystemInfo(); //Print system information. Code is in uart_control.c
 8000804:	f000 fb66 	bl	8000ed4 <UART_PrintSystemInfo>
		HAL_Delay(100);
 8000808:	2064      	movs	r0, #100	@ 0x64
 800080a:	f000 fc27 	bl	800105c <HAL_Delay>

		// Display counter value on LCD
		char numChar[5]; // Create an array called numChar that can hold 5 characters
		sprintf(numChar, "%ld", counter); //string print formatted the value of counter to numChar using long int format
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <main+0xac>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	463b      	mov	r3, r7
 8000814:	4909      	ldr	r1, [pc, #36]	@ (800083c <main+0xb0>)
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fb3a 	bl	8003e90 <siprintf>
		lcd_put_cur(1, 11); // Move the cursor to column 12 on the second row of the LCD
 800081c:	210b      	movs	r1, #11
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff ff24 	bl	800066c <lcd_put_cur>
		lcd_send_string(numChar); // Call the function lcd_send_string, in i2c-lcd.c, to send the content of the numChar array to the LCD via I2C
 8000824:	463b      	mov	r3, r7
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff7c 	bl	8000724 <lcd_send_string>
	while (1) {
 800082c:	bf00      	nop
 800082e:	e7d4      	b.n	80007da <main+0x4e>
 8000830:	08004f0c 	.word	0x08004f0c
 8000834:	08004f18 	.word	0x08004f18
 8000838:	20000160 	.word	0x20000160
 800083c:	08004f24 	.word	0x08004f24

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	@ 0x58
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2244      	movs	r2, #68	@ 0x44
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f003 fc18 	bl	8004084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000862:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000866:	f001 fb3b 	bl	8001ee0 <HAL_PWREx_ControlVoltageScaling>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000870:	f000 f902 	bl	8000a78 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000874:	f001 fb16 	bl	8001ea4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000878:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <SystemClock_Config+0xc0>)
 800087a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800087e:	4a20      	ldr	r2, [pc, #128]	@ (8000900 <SystemClock_Config+0xc0>)
 8000880:	f023 0318 	bic.w	r3, r3, #24
 8000884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000888:	2314      	movs	r3, #20
 800088a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000898:	2360      	movs	r3, #96	@ 0x60
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008a0:	2301      	movs	r3, #1
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ac:	2307      	movs	r3, #7
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fb65 	bl	8001f8c <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008c8:	f000 f8d6 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2303      	movs	r3, #3
 80008d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	2101      	movs	r1, #1
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 ff65 	bl	80027b4 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008f0:	f000 f8c2 	bl	8000a78 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008f4:	f002 fb78 	bl	8002fe8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008f8:	bf00      	nop
 80008fa:	3758      	adds	r7, #88	@ 0x58
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_I2C1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_I2C1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_I2C1_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093e:	480e      	ldr	r0, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000940:	f000 fe4a 	bl	80015d8 <HAL_I2C_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 f895 	bl	8000a78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000952:	f001 fa0f 	bl	8001d74 <HAL_I2CEx_ConfigAnalogFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 f88c 	bl	8000a78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000964:	f001 fa51 	bl	8001e0a <HAL_I2CEx_ConfigDigitalFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 f883 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000084 	.word	0x20000084
 800097c:	40005400 	.word	0x40005400
 8000980:	00b07cb4 	.word	0x00b07cb4

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	@ (80009e0 <MX_USART2_UART_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_USART2_UART_Init+0x58>)
 80009c8:	f002 fc10 	bl	80031ec <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f851 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000d8 	.word	0x200000d8
 80009e0:	40004400 	.word	0x40004400

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <MX_GPIO_Init+0x8c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000a70 <MX_GPIO_Init+0x8c>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_GPIO_Init+0x8c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_GPIO_Init+0x8c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <MX_GPIO_Init+0x8c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_GPIO_Init+0x8c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_GPIO_Init+0x8c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <MX_GPIO_Init+0x8c>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_GPIO_Init+0x8c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2108      	movs	r1, #8
 8000a46:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <MX_GPIO_Init+0x90>)
 8000a48:	f000 fd94 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_GPIO_Init+0x90>)
 8000a64:	f000 fc04 	bl	8001270 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	48000400 	.word	0x48000400

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09e      	sub	sp, #120	@ 0x78
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2254      	movs	r2, #84	@ 0x54
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fac9 	bl	8004084 <memset>
  if(hi2c->Instance==I2C1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b74 <HAL_I2C_MspInit+0xa8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d137      	bne.n	8000b6c <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000afc:	2340      	movs	r3, #64	@ 0x40
 8000afe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 f877 	bl	8002bfc <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b14:	f7ff ffb0 	bl	8000a78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <HAL_I2C_MspInit+0xac>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	4a16      	ldr	r2, [pc, #88]	@ (8000b78 <HAL_I2C_MspInit+0xac>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <HAL_I2C_MspInit+0xac>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b30:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b34:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b36:	2312      	movs	r3, #18
 8000b38:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b42:	2304      	movs	r3, #4
 8000b44:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b50:	f000 fb8e 	bl	8001270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_I2C_MspInit+0xac>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_I2C_MspInit+0xac>)
 8000b5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <HAL_I2C_MspInit+0xac>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3778      	adds	r7, #120	@ 0x78
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40005400 	.word	0x40005400
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09e      	sub	sp, #120	@ 0x78
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	2254      	movs	r2, #84	@ 0x54
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 fa71 	bl	8004084 <memset>
  if(huart->Instance==USART2)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a28      	ldr	r2, [pc, #160]	@ (8000c48 <HAL_UART_MspInit+0xcc>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d148      	bne.n	8000c3e <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 f81f 	bl	8002bfc <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc4:	f7ff ff58 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc8:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <HAL_UART_MspInit+0xd0>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8000c4c <HAL_UART_MspInit+0xd0>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <HAL_UART_MspInit+0xd0>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <HAL_UART_MspInit+0xd0>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be4:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_UART_MspInit+0xd0>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bec:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <HAL_UART_MspInit+0xd0>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c16:	f000 fb2b 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3a:	f000 fb19 	bl	8001270 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c3e:	bf00      	nop
 8000c40:	3778      	adds	r7, #120	@ 0x78
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40004400 	.word	0x40004400
 8000c4c:	40021000 	.word	0x40021000

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <NMI_Handler+0x4>

08000c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <MemManage_Handler+0x4>

08000c68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca6:	f000 f9b9 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e00a      	b.n	8000cd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cc0:	f3af 8000 	nop.w
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	60ba      	str	r2, [r7, #8]
 8000ccc:	b2ca      	uxtb	r2, r1
 8000cce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dbf0      	blt.n	8000cc0 <_read+0x12>
  }

  return len;
 8000cde:	687b      	ldr	r3, [r7, #4]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e009      	b.n	8000d0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	60ba      	str	r2, [r7, #8]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f8fa 	bl	8000efc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbf1      	blt.n	8000cfa <_write+0x12>
  }
  return len;
 8000d16:	687b      	ldr	r3, [r7, #4]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_close>:

int _close(int file)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d48:	605a      	str	r2, [r3, #4]
  return 0;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_isatty>:

int _isatty(int file)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d60:	2301      	movs	r3, #1
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b085      	sub	sp, #20
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f003 f9b2 	bl	8004120 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000c000 	.word	0x2000c000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	20000164 	.word	0x20000164
 8000df0:	20000320 	.word	0x20000320

08000df4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <print_message>:
  * @brief  Print a message via UART
  * @param  msg: String to be printed
  * @retval None
  */
void print_message(const char* msg)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff f9d5 	bl	80001d0 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	4803      	ldr	r0, [pc, #12]	@ (8000e40 <print_message+0x28>)
 8000e32:	f002 fa29 	bl	8003288 <HAL_UART_Transmit>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000d8 	.word	0x200000d8

08000e44 <UART_PrintWelcomeMessage>:
/**
  * @brief  Print a welcome message
  * @retval None
  */
void UART_PrintWelcomeMessage(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  print_message("\r\n\r\n");
 8000e48:	480b      	ldr	r0, [pc, #44]	@ (8000e78 <UART_PrintWelcomeMessage+0x34>)
 8000e4a:	f7ff ffe5 	bl	8000e18 <print_message>
  print_message("*********************************\r\n");
 8000e4e:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <UART_PrintWelcomeMessage+0x38>)
 8000e50:	f7ff ffe2 	bl	8000e18 <print_message>
  print_message("* Nucleo L432KC UART Test       *\r\n");
 8000e54:	480a      	ldr	r0, [pc, #40]	@ (8000e80 <UART_PrintWelcomeMessage+0x3c>)
 8000e56:	f7ff ffdf 	bl	8000e18 <print_message>
  print_message("* System initialised            *\r\n");
 8000e5a:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <UART_PrintWelcomeMessage+0x40>)
 8000e5c:	f7ff ffdc 	bl	8000e18 <print_message>
  print_message("*********************************\r\n\r\n");
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <UART_PrintWelcomeMessage+0x44>)
 8000e62:	f7ff ffd9 	bl	8000e18 <print_message>

  printf("Printf is working via __io_putchar redirection\r\n");
 8000e66:	4809      	ldr	r0, [pc, #36]	@ (8000e8c <UART_PrintWelcomeMessage+0x48>)
 8000e68:	f003 f80a 	bl	8003e80 <puts>
  printf("Starting main loop now...\r\n\r\n");
 8000e6c:	4808      	ldr	r0, [pc, #32]	@ (8000e90 <UART_PrintWelcomeMessage+0x4c>)
 8000e6e:	f003 f807 	bl	8003e80 <puts>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	08004f28 	.word	0x08004f28
 8000e7c:	08004f30 	.word	0x08004f30
 8000e80:	08004f54 	.word	0x08004f54
 8000e84:	08004f78 	.word	0x08004f78
 8000e88:	08004f9c 	.word	0x08004f9c
 8000e8c:	08004fc4 	.word	0x08004fc4
 8000e90:	08004ff4 	.word	0x08004ff4

08000e94 <UART_PrintLEDStatus>:
  * @param  counter: Toggle counter
  * @param  ledState: Current state of the LED
  * @retval None
  */
void UART_PrintLEDStatus(uint32_t counter, GPIO_PinState ledState)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
  sprintf(message, "Toggle #%lu - LED is now %s\r\n",
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d101      	bne.n	8000eaa <UART_PrintLEDStatus+0x16>
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <UART_PrintLEDStatus+0x30>)
 8000ea8:	e000      	b.n	8000eac <UART_PrintLEDStatus+0x18>
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <UART_PrintLEDStatus+0x34>)
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4907      	ldr	r1, [pc, #28]	@ (8000ecc <UART_PrintLEDStatus+0x38>)
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <UART_PrintLEDStatus+0x3c>)
 8000eb2:	f002 ffed 	bl	8003e90 <siprintf>
          counter,
          ledState == GPIO_PIN_SET ? "ON" : "OFF");
  print_message(message);
 8000eb6:	4806      	ldr	r0, [pc, #24]	@ (8000ed0 <UART_PrintLEDStatus+0x3c>)
 8000eb8:	f7ff ffae 	bl	8000e18 <print_message>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	08005014 	.word	0x08005014
 8000ec8:	08005018 	.word	0x08005018
 8000ecc:	0800501c 	.word	0x0800501c
 8000ed0:	20000168 	.word	0x20000168

08000ed4 <UART_PrintSystemInfo>:
/**
  * @brief  Print system information
  * @retval None
  */
void UART_PrintSystemInfo(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  printf("System uptime: %lu seconds\r\n\r\n", HAL_GetTick() / 1000);
 8000ed8:	f000 f8b4 	bl	8001044 <HAL_GetTick>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <UART_PrintSystemInfo+0x20>)
 8000ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee4:	099b      	lsrs	r3, r3, #6
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4803      	ldr	r0, [pc, #12]	@ (8000ef8 <UART_PrintSystemInfo+0x24>)
 8000eea:	f002 ff61 	bl	8003db0 <iprintf>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	10624dd3 	.word	0x10624dd3
 8000ef8:	0800503c 	.word	0x0800503c

08000efc <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f04:	1d39      	adds	r1, r7, #4
 8000f06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <__io_putchar+0x20>)
 8000f0e:	f002 f9bb 	bl	8003288 <HAL_UART_Transmit>
  return ch;
 8000f12:	687b      	ldr	r3, [r7, #4]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000d8 	.word	0x200000d8

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ff66 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f003 f8ed 	bl	800412c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fc1b 	bl	800078c <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f58:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f64:	080050e8 	.word	0x080050e8
  ldr r2, =_sbss
 8000f68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f6c:	2000031c 	.word	0x2000031c

08000f70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_IRQHandler>

08000f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f943 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f80e 	bl	8000fa4 <HAL_InitTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e001      	b.n	8000f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f94:	f7ff fd76 	bl	8000a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f98:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_InitTick+0x6c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_InitTick+0x70>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_InitTick+0x6c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f941 	bl	8001256 <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10f      	bne.n	8000ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d809      	bhi.n	8000ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 f919 	bl	800121e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fec:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <HAL_InitTick+0x74>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e007      	b.n	8001004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e004      	b.n	8001004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	200001cc 	.word	0x200001cc

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001cc 	.word	0x200001cc

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff47 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5c 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127e:	e148      	b.n	8001512 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 813a 	beq.w	800150c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d005      	beq.n	80012b0 <HAL_GPIO_Init+0x40>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d130      	bne.n	8001312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e6:	2201      	movs	r2, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 0201 	and.w	r2, r3, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b03      	cmp	r3, #3
 800131c:	d017      	beq.n	800134e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d123      	bne.n	80013a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	6939      	ldr	r1, [r7, #16]
 800139e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0203 	and.w	r2, r3, #3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8094 	beq.w	800150c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e4:	4b52      	ldr	r3, [pc, #328]	@ (8001530 <HAL_GPIO_Init+0x2c0>)
 80013e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e8:	4a51      	ldr	r2, [pc, #324]	@ (8001530 <HAL_GPIO_Init+0x2c0>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80013f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001530 <HAL_GPIO_Init+0x2c0>)
 80013f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001534 <HAL_GPIO_Init+0x2c4>)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001426:	d00d      	beq.n	8001444 <HAL_GPIO_Init+0x1d4>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a43      	ldr	r2, [pc, #268]	@ (8001538 <HAL_GPIO_Init+0x2c8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x1d0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a42      	ldr	r2, [pc, #264]	@ (800153c <HAL_GPIO_Init+0x2cc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_GPIO_Init+0x1cc>
 8001438:	2302      	movs	r3, #2
 800143a:	e004      	b.n	8001446 <HAL_GPIO_Init+0x1d6>
 800143c:	2307      	movs	r3, #7
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x1d6>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_GPIO_Init+0x1d6>
 8001444:	2300      	movs	r3, #0
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	f002 0203 	and.w	r2, r2, #3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4093      	lsls	r3, r2
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001456:	4937      	ldr	r1, [pc, #220]	@ (8001534 <HAL_GPIO_Init+0x2c4>)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001464:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001488:	4a2d      	ldr	r2, [pc, #180]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800148e:	4b2c      	ldr	r3, [pc, #176]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b2:	4a23      	ldr	r2, [pc, #140]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014b8:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014dc:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001506:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f aeaf 	bne.w	8001280 <HAL_GPIO_Init+0x10>
  }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001590:	e002      	b.n	8001598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	041a      	lsls	r2, r3, #16
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43d9      	mvns	r1, r3
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	400b      	ands	r3, r1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e08d      	b.n	8001706 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fa64 	bl	8000acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2224      	movs	r2, #36	@ 0x24
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001628:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001638:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e006      	b.n	8001660 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800165e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d108      	bne.n	800167a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	e007      	b.n	800168a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001688:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800169c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69d9      	ldr	r1, [r3, #28]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1a      	ldr	r2, [r3, #32]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	461a      	mov	r2, r3
 800171c:	460b      	mov	r3, r1
 800171e:	817b      	strh	r3, [r7, #10]
 8001720:	4613      	mov	r3, r2
 8001722:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b20      	cmp	r3, #32
 800172e:	f040 80fd 	bne.w	800192c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_I2C_Master_Transmit+0x30>
 800173c:	2302      	movs	r3, #2
 800173e:	e0f6      	b.n	800192e <HAL_I2C_Master_Transmit+0x21e>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001748:	f7ff fc7c 	bl	8001044 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2319      	movs	r3, #25
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f914 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e0e1      	b.n	800192e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2221      	movs	r2, #33	@ 0x21
 800176e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2210      	movs	r2, #16
 8001776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	893a      	ldrh	r2, [r7, #8]
 800178a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001796:	b29b      	uxth	r3, r3
 8001798:	2bff      	cmp	r3, #255	@ 0xff
 800179a:	d906      	bls.n	80017aa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	22ff      	movs	r2, #255	@ 0xff
 80017a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80017a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e007      	b.n	80017ba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80017b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017b8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d024      	beq.n	800180c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017dc:	b29b      	uxth	r3, r3
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	8979      	ldrh	r1, [r7, #10]
 80017fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001938 <HAL_I2C_Master_Transmit+0x228>)
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 fa83 	bl	8001d10 <I2C_TransferConfig>
 800180a:	e066      	b.n	80018da <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001810:	b2da      	uxtb	r2, r3
 8001812:	8979      	ldrh	r1, [r7, #10]
 8001814:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <HAL_I2C_Master_Transmit+0x228>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fa78 	bl	8001d10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001820:	e05b      	b.n	80018da <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f907 	bl	8001a3a <I2C_WaitOnTXISFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e07b      	b.n	800192e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001850:	b29b      	uxth	r3, r3
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186a:	b29b      	uxth	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d034      	beq.n	80018da <HAL_I2C_Master_Transmit+0x1ca>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d130      	bne.n	80018da <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	2200      	movs	r2, #0
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f880 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e04d      	b.n	800192e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	2bff      	cmp	r3, #255	@ 0xff
 800189a:	d90e      	bls.n	80018ba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	22ff      	movs	r2, #255	@ 0xff
 80018a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fa2c 	bl	8001d10 <I2C_TransferConfig>
 80018b8:	e00f      	b.n	80018da <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	8979      	ldrh	r1, [r7, #10]
 80018cc:	2300      	movs	r3, #0
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fa1b 	bl	8001d10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d19e      	bne.n	8001822 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	6a39      	ldr	r1, [r7, #32]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f8ed 	bl	8001ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e01a      	b.n	800192e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2220      	movs	r2, #32
 80018fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6859      	ldr	r1, [r3, #4]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <HAL_I2C_Master_Transmit+0x22c>)
 800190c:	400b      	ands	r3, r1
 800190e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e000      	b.n	800192e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800192c:	2302      	movs	r3, #2
  }
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	80002000 	.word	0x80002000
 800193c:	fe00e800 	.word	0xfe00e800

08001940 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b02      	cmp	r3, #2
 8001954:	d103      	bne.n	800195e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d007      	beq.n	800197c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	619a      	str	r2, [r3, #24]
  }
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001998:	e03b      	b.n	8001a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f8d6 	bl	8001b50 <I2C_IsErrorOccurred>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e041      	b.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d02d      	beq.n	8001a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b6:	f7ff fb45 	bl	8001044 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d302      	bcc.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d122      	bne.n	8001a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4013      	ands	r3, r2
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d113      	bne.n	8001a12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f043 0220 	orr.w	r2, r3, #32
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d0b4      	beq.n	800199a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a46:	e033      	b.n	8001ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f87f 	bl	8001b50 <I2C_IsErrorOccurred>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e031      	b.n	8001ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a62:	d025      	beq.n	8001ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a64:	f7ff faee 	bl	8001044 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d302      	bcc.n	8001a7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11a      	bne.n	8001ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d013      	beq.n	8001ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e007      	b.n	8001ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d1c4      	bne.n	8001a48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad4:	e02f      	b.n	8001b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f838 	bl	8001b50 <I2C_IsErrorOccurred>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e02d      	b.n	8001b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aea:	f7ff faab 	bl	8001044 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d302      	bcc.n	8001b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d11a      	bne.n	8001b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d013      	beq.n	8001b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f043 0220 	orr.w	r2, r3, #32
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e007      	b.n	8001b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d1c8      	bne.n	8001ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d068      	beq.n	8001c4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2210      	movs	r2, #16
 8001b82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b84:	e049      	b.n	8001c1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d045      	beq.n	8001c1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b8e:	f7ff fa59 	bl	8001044 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <I2C_IsErrorOccurred+0x54>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d13a      	bne.n	8001c1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001bb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bc6:	d121      	bne.n	8001c0c <I2C_IsErrorOccurred+0xbc>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bce:	d01d      	beq.n	8001c0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001bd0:	7cfb      	ldrb	r3, [r7, #19]
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d01a      	beq.n	8001c0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001be4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001be6:	f7ff fa2d 	bl	8001044 <HAL_GetTick>
 8001bea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bec:	e00e      	b.n	8001c0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bee:	f7ff fa29 	bl	8001044 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b19      	cmp	r3, #25
 8001bfa:	d907      	bls.n	8001c0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	f043 0320 	orr.w	r3, r3, #32
 8001c02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001c0a:	e006      	b.n	8001c1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d1e9      	bne.n	8001bee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	d003      	beq.n	8001c30 <I2C_IsErrorOccurred+0xe0>
 8001c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0aa      	beq.n	8001b86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d103      	bne.n	8001c40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00b      	beq.n	8001c78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01c      	beq.n	8001cfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fe3b 	bl	8001940 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <I2C_IsErrorOccurred+0x1bc>)
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3728      	adds	r7, #40	@ 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	fe00e800 	.word	0xfe00e800

08001d10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	817b      	strh	r3, [r7, #10]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d28:	7a7b      	ldrb	r3, [r7, #9]
 8001d2a:	041b      	lsls	r3, r3, #16
 8001d2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	0d5b      	lsrs	r3, r3, #21
 8001d4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <I2C_TransferConfig+0x60>)
 8001d50:	430b      	orrs	r3, r1
 8001d52:	43db      	mvns	r3, r3
 8001d54:	ea02 0103 	and.w	r1, r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d62:	bf00      	nop
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	03ff63ff 	.word	0x03ff63ff

08001d74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d138      	bne.n	8001dfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e032      	b.n	8001dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	@ 0x24
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dfc:	2302      	movs	r3, #2
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d139      	bne.n	8001e94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e033      	b.n	8001e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2224      	movs	r2, #36	@ 0x24
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <HAL_PWREx_GetVoltageRange+0x18>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40007000 	.word	0x40007000

08001ee0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eee:	d130      	bne.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef0:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001efc:	d038      	beq.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f06:	4a1e      	ldr	r2, [pc, #120]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2232      	movs	r2, #50	@ 0x32
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	4a1b      	ldr	r2, [pc, #108]	@ (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9b      	lsrs	r3, r3, #18
 8001f20:	3301      	adds	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f24:	e002      	b.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f38:	d102      	bne.n	8001f40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f2      	bne.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4c:	d110      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e00f      	b.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f5e:	d007      	beq.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f60:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f68:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40007000 	.word	0x40007000
 8001f84:	20000000 	.word	0x20000000
 8001f88:	431bde83 	.word	0x431bde83

08001f8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f000 bc02 	b.w	80027a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa0:	4b96      	ldr	r3, [pc, #600]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001faa:	4b94      	ldr	r3, [pc, #592]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80e4 	beq.w	800218a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4c>
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	f040 808b 	bne.w	80020e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	f040 8087 	bne.w	80020e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fd8:	4b88      	ldr	r3, [pc, #544]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x64>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e3d9      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	4b81      	ldr	r3, [pc, #516]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d004      	beq.n	800200a <HAL_RCC_OscConfig+0x7e>
 8002000:	4b7e      	ldr	r3, [pc, #504]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002008:	e005      	b.n	8002016 <HAL_RCC_OscConfig+0x8a>
 800200a:	4b7c      	ldr	r3, [pc, #496]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800200c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002016:	4293      	cmp	r3, r2
 8002018:	d223      	bcs.n	8002062 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fd8c 	bl	8002b3c <RCC_SetFlashLatencyFromMSIRange>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e3ba      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800202e:	4b73      	ldr	r3, [pc, #460]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a72      	ldr	r2, [pc, #456]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b70      	ldr	r3, [pc, #448]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	496d      	ldr	r1, [pc, #436]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800204c:	4b6b      	ldr	r3, [pc, #428]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	4968      	ldr	r1, [pc, #416]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
 8002060:	e025      	b.n	80020ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002062:	4b66      	ldr	r3, [pc, #408]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a65      	ldr	r2, [pc, #404]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002068:	f043 0308 	orr.w	r3, r3, #8
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b63      	ldr	r3, [pc, #396]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4960      	ldr	r1, [pc, #384]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002080:	4b5e      	ldr	r3, [pc, #376]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	495b      	ldr	r1, [pc, #364]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fd4c 	bl	8002b3c <RCC_SetFlashLatencyFromMSIRange>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e37a      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ae:	f000 fc81 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b51      	ldr	r3, [pc, #324]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4950      	ldr	r1, [pc, #320]	@ (8002200 <HAL_RCC_OscConfig+0x274>)
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002204 <HAL_RCC_OscConfig+0x278>)
 80020cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002208 <HAL_RCC_OscConfig+0x27c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe ff66 	bl	8000fa4 <HAL_InitTick>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d052      	beq.n	8002188 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	e35e      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d032      	beq.n	8002154 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020ee:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a42      	ldr	r2, [pc, #264]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020fa:	f7fe ffa3 	bl	8001044 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002102:	f7fe ff9f 	bl	8001044 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e347      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002114:	4b39      	ldr	r3, [pc, #228]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002120:	4b36      	ldr	r3, [pc, #216]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a35      	ldr	r2, [pc, #212]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b33      	ldr	r3, [pc, #204]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4930      	ldr	r1, [pc, #192]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213e:	4b2f      	ldr	r3, [pc, #188]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	492b      	ldr	r1, [pc, #172]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
 8002152:	e01a      	b.n	800218a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002154:	4b29      	ldr	r3, [pc, #164]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a28      	ldr	r2, [pc, #160]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002160:	f7fe ff70 	bl	8001044 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002168:	f7fe ff6c 	bl	8001044 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e314      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800217a:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x1dc>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d073      	beq.n	800227e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_OscConfig+0x21c>
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d10e      	bne.n	80021c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d063      	beq.n	800227c <HAL_RCC_OscConfig+0x2f0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d15f      	bne.n	800227c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e2f1      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x24c>
 80021ca:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a0b      	ldr	r2, [pc, #44]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e025      	b.n	8002224 <HAL_RCC_OscConfig+0x298>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021e0:	d114      	bne.n	800220c <HAL_RCC_OscConfig+0x280>
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a05      	ldr	r2, [pc, #20]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a02      	ldr	r2, [pc, #8]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e013      	b.n	8002224 <HAL_RCC_OscConfig+0x298>
 80021fc:	40021000 	.word	0x40021000
 8002200:	0800505c 	.word	0x0800505c
 8002204:	20000000 	.word	0x20000000
 8002208:	20000004 	.word	0x20000004
 800220c:	4ba0      	ldr	r3, [pc, #640]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a9f      	ldr	r2, [pc, #636]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b9d      	ldr	r3, [pc, #628]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a9c      	ldr	r2, [pc, #624]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800221e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7fe ff0a 	bl	8001044 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7fe ff06 	bl	8001044 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	@ 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e2ae      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002246:	4b92      	ldr	r3, [pc, #584]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x2a8>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe fef6 	bl	8001044 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe fef2 	bl	8001044 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	@ 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e29a      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800226e:	4b88      	ldr	r3, [pc, #544]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x2d0>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d060      	beq.n	800234c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d005      	beq.n	800229c <HAL_RCC_OscConfig+0x310>
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d119      	bne.n	80022ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d116      	bne.n	80022ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800229c:	4b7c      	ldr	r3, [pc, #496]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_OscConfig+0x328>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e277      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b76      	ldr	r3, [pc, #472]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	4973      	ldr	r1, [pc, #460]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c8:	e040      	b.n	800234c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d023      	beq.n	800231a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7fe feb1 	bl	8001044 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e6:	f7fe fead 	bl	8001044 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e255      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f8:	4b65      	ldr	r3, [pc, #404]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	4b62      	ldr	r3, [pc, #392]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	061b      	lsls	r3, r3, #24
 8002312:	495f      	ldr	r1, [pc, #380]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	e018      	b.n	800234c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231a:	4b5d      	ldr	r3, [pc, #372]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a5c      	ldr	r2, [pc, #368]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe fe8d 	bl	8001044 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232e:	f7fe fe89 	bl	8001044 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e231      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002340:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d03c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01c      	beq.n	800239a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002360:	4b4b      	ldr	r3, [pc, #300]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002366:	4a4a      	ldr	r2, [pc, #296]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7fe fe68 	bl	8001044 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002378:	f7fe fe64 	bl	8001044 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e20c      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800238a:	4b41      	ldr	r3, [pc, #260]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800238c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ef      	beq.n	8002378 <HAL_RCC_OscConfig+0x3ec>
 8002398:	e01b      	b.n	80023d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239a:	4b3d      	ldr	r3, [pc, #244]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800239c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7fe fe4b 	bl	8001044 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b2:	f7fe fe47 	bl	8001044 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1ef      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c4:	4b32      	ldr	r3, [pc, #200]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ef      	bne.n	80023b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80a6 	beq.w	800252c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10d      	bne.n	800240c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f4:	4a26      	ldr	r2, [pc, #152]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80023f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80023fc:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002408:	2301      	movs	r3, #1
 800240a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240c:	4b21      	ldr	r3, [pc, #132]	@ (8002494 <HAL_RCC_OscConfig+0x508>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d118      	bne.n	800244a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002418:	4b1e      	ldr	r3, [pc, #120]	@ (8002494 <HAL_RCC_OscConfig+0x508>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1d      	ldr	r2, [pc, #116]	@ (8002494 <HAL_RCC_OscConfig+0x508>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002422:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002424:	f7fe fe0e 	bl	8001044 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242c:	f7fe fe0a 	bl	8001044 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1b2      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243e:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <HAL_RCC_OscConfig+0x508>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d108      	bne.n	8002464 <HAL_RCC_OscConfig+0x4d8>
 8002452:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002458:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002462:	e029      	b.n	80024b8 <HAL_RCC_OscConfig+0x52c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d115      	bne.n	8002498 <HAL_RCC_OscConfig+0x50c>
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002472:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800247c:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002482:	4a03      	ldr	r2, [pc, #12]	@ (8002490 <HAL_RCC_OscConfig+0x504>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x52c>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	40007000 	.word	0x40007000
 8002498:	4b9a      	ldr	r3, [pc, #616]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	4a99      	ldr	r2, [pc, #612]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a8:	4b96      	ldr	r3, [pc, #600]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ae:	4a95      	ldr	r2, [pc, #596]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d016      	beq.n	80024ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7fe fdc0 	bl	8001044 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7fe fdbc 	bl	8001044 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e162      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024de:	4b89      	ldr	r3, [pc, #548]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ed      	beq.n	80024c8 <HAL_RCC_OscConfig+0x53c>
 80024ec:	e015      	b.n	800251a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7fe fda9 	bl	8001044 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fda5 	bl	8001044 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e14b      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800250c:	4b7d      	ldr	r3, [pc, #500]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ed      	bne.n	80024f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800251a:	7ffb      	ldrb	r3, [r7, #31]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002520:	4b78      	ldr	r3, [pc, #480]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	4a77      	ldr	r2, [pc, #476]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 8002526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d03c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01c      	beq.n	800257a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002540:	4b70      	ldr	r3, [pc, #448]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 8002542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002546:	4a6f      	ldr	r2, [pc, #444]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fd78 	bl	8001044 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002558:	f7fe fd74 	bl	8001044 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e11c      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800256a:	4b66      	ldr	r3, [pc, #408]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 800256c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ef      	beq.n	8002558 <HAL_RCC_OscConfig+0x5cc>
 8002578:	e01b      	b.n	80025b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800257a:	4b62      	ldr	r3, [pc, #392]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 800257c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002580:	4a60      	ldr	r2, [pc, #384]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fd5b 	bl	8001044 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002592:	f7fe fd57 	bl	8001044 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0ff      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a4:	4b57      	ldr	r3, [pc, #348]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80025a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ef      	bne.n	8002592 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80f3 	beq.w	80027a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	f040 80c9 	bne.w	8002758 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0203 	and.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d12c      	bne.n	8002634 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e4:	3b01      	subs	r3, #1
 80025e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d123      	bne.n	8002634 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d11b      	bne.n	8002634 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002606:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d113      	bne.n	8002634 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	3b01      	subs	r3, #1
 800261a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d109      	bne.n	8002634 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	3b01      	subs	r3, #1
 800262e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d06b      	beq.n	800270c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d062      	beq.n	8002700 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800263a:	4b32      	ldr	r3, [pc, #200]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0ac      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800264a:	4b2e      	ldr	r3, [pc, #184]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2d      	ldr	r2, [pc, #180]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 8002650:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002654:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002656:	f7fe fcf5 	bl	8001044 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe fcf1 	bl	8001044 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e099      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267c:	4b21      	ldr	r3, [pc, #132]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <HAL_RCC_OscConfig+0x77c>)
 8002682:	4013      	ands	r3, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800268c:	3a01      	subs	r2, #1
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	4311      	orrs	r1, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002696:	0212      	lsls	r2, r2, #8
 8002698:	4311      	orrs	r1, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800269e:	0852      	lsrs	r2, r2, #1
 80026a0:	3a01      	subs	r2, #1
 80026a2:	0552      	lsls	r2, r2, #21
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0652      	lsls	r2, r2, #25
 80026b0:	4311      	orrs	r1, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026b6:	06d2      	lsls	r2, r2, #27
 80026b8:	430a      	orrs	r2, r1
 80026ba:	4912      	ldr	r1, [pc, #72]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026c0:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d8:	f7fe fcb4 	bl	8001044 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fcb0 	bl	8001044 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e058      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <HAL_RCC_OscConfig+0x778>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026fe:	e050      	b.n	80027a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e04f      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
 8002704:	40021000 	.word	0x40021000
 8002708:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270c:	4b27      	ldr	r3, [pc, #156]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d144      	bne.n	80027a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002718:	4b24      	ldr	r3, [pc, #144]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a23      	ldr	r2, [pc, #140]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002722:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002724:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a20      	ldr	r2, [pc, #128]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 800272a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800272e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002730:	f7fe fc88 	bl	8001044 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fc84 	bl	8001044 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e02c      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x7ac>
 8002756:	e024      	b.n	80027a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d01f      	beq.n	800279e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 8002764:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe fc6b 	bl	8001044 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fc67 	bl	8001044 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e00f      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002784:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	4905      	ldr	r1, [pc, #20]	@ (80027ac <HAL_RCC_OscConfig+0x820>)
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_RCC_OscConfig+0x824>)
 8002798:	4013      	ands	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
 800279c:	e001      	b.n	80027a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	feeefffc 	.word	0xfeeefffc

080027b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0e7      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c8:	4b75      	ldr	r3, [pc, #468]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d910      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b72      	ldr	r3, [pc, #456]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4970      	ldr	r1, [pc, #448]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b6e      	ldr	r3, [pc, #440]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cf      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	4b66      	ldr	r3, [pc, #408]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002810:	429a      	cmp	r2, r3
 8002812:	d908      	bls.n	8002826 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4960      	ldr	r1, [pc, #384]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d04c      	beq.n	80028cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283a:	4b5a      	ldr	r3, [pc, #360]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d121      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0a6      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	4b54      	ldr	r3, [pc, #336]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e09a      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800286a:	4b4e      	ldr	r3, [pc, #312]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e08e      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287a:	4b4a      	ldr	r3, [pc, #296]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e086      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b46      	ldr	r3, [pc, #280]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4943      	ldr	r1, [pc, #268]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe fbd2 	bl	8001044 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fe fbce 	bl	8001044 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e06e      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b3a      	ldr	r3, [pc, #232]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d208      	bcs.n	80028fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b2e      	ldr	r3, [pc, #184]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	492b      	ldr	r1, [pc, #172]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028fa:	4b29      	ldr	r3, [pc, #164]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d210      	bcs.n	800292a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002908:	4b25      	ldr	r3, [pc, #148]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 0207 	bic.w	r2, r3, #7
 8002910:	4923      	ldr	r1, [pc, #140]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002918:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e036      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4918      	ldr	r1, [pc, #96]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002954:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4910      	ldr	r1, [pc, #64]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002968:	f000 f824 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	490b      	ldr	r1, [pc, #44]	@ (80029a8 <HAL_RCC_ClockConfig+0x1f4>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 8002986:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_ClockConfig+0x1fc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fb09 	bl	8000fa4 <HAL_InitTick>
 8002992:	4603      	mov	r3, r0
 8002994:	72fb      	strb	r3, [r7, #11]

  return status;
 8002996:	7afb      	ldrb	r3, [r7, #11]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40021000 	.word	0x40021000
 80029a8:	0800505c 	.word	0x0800505c
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	@ 0x24
 80029b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c2:	4b3e      	ldr	r3, [pc, #248]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029cc:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x34>
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d121      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d11e      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029e8:	4b34      	ldr	r3, [pc, #208]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029f4:	4b31      	ldr	r3, [pc, #196]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e005      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a04:	4b2d      	ldr	r3, [pc, #180]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a10:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e004      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a38:	4b23      	ldr	r3, [pc, #140]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d134      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a42:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d003      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0xac>
 8002a58:	e005      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5c:	617b      	str	r3, [r7, #20]
      break;
 8002a5e:	e005      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a60:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a62:	617b      	str	r3, [r7, #20]
      break;
 8002a64:	e002      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	617b      	str	r3, [r7, #20]
      break;
 8002a6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	3301      	adds	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	fb03 f202 	mul.w	r2, r3, r2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	0e5b      	lsrs	r3, r3, #25
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aac:	69bb      	ldr	r3, [r7, #24]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	@ 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08005074 	.word	0x08005074
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	007a1200 	.word	0x007a1200

08002acc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	@ (8002ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ae8:	f7ff fff0 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4904      	ldr	r1, [pc, #16]	@ (8002b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	0800506c 	.word	0x0800506c

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b14:	f7ff ffda 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0adb      	lsrs	r3, r3, #11
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4904      	ldr	r1, [pc, #16]	@ (8002b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	0800506c 	.word	0x0800506c

08002b3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b48:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b54:	f7ff f9b6 	bl	8001ec4 <HAL_PWREx_GetVoltageRange>
 8002b58:	6178      	str	r0, [r7, #20]
 8002b5a:	e014      	b.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	4a24      	ldr	r2, [pc, #144]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b74:	f7ff f9a6 	bl	8001ec4 <HAL_PWREx_GetVoltageRange>
 8002b78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b8c:	d10b      	bne.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b80      	cmp	r3, #128	@ 0x80
 8002b92:	d919      	bls.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b98:	d902      	bls.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	e013      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e010      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b80      	cmp	r3, #128	@ 0x80
 8002baa:	d902      	bls.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bac:	2303      	movs	r3, #3
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e00a      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b80      	cmp	r3, #128	@ 0x80
 8002bb6:	d102      	bne.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb8:	2302      	movs	r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	e004      	b.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b70      	cmp	r3, #112	@ 0x70
 8002bc2:	d101      	bne.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 0207 	bic.w	r2, r3, #7
 8002bd0:	4909      	ldr	r1, [pc, #36]	@ (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bd8:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d001      	beq.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40022000 	.word	0x40022000

08002bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c04:	2300      	movs	r3, #0
 8002c06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d031      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c20:	d01a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c26:	d814      	bhi.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c30:	d10f      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c32:	4b5d      	ldr	r3, [pc, #372]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a5c      	ldr	r2, [pc, #368]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c3e:	e00c      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f9de 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c50:	e003      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	74fb      	strb	r3, [r7, #19]
      break;
 8002c56:	e000      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c60:	4b51      	ldr	r3, [pc, #324]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6e:	494e      	ldr	r1, [pc, #312]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c76:	e001      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 809e 	beq.w	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c8e:	4b46      	ldr	r3, [pc, #280]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	4b40      	ldr	r3, [pc, #256]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca8:	4a3f      	ldr	r2, [pc, #252]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a39      	ldr	r2, [pc, #228]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe f9ba 	bl	8001044 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd4:	f7fe f9b6 	bl	8001044 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ce8:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ef      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d15a      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01e      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d019      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d16:	4b24      	ldr	r3, [pc, #144]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d22:	4b21      	ldr	r3, [pc, #132]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d28:	4a1f      	ldr	r2, [pc, #124]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d32:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d38:	4a1b      	ldr	r2, [pc, #108]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d42:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d016      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe f976 	bl	8001044 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe f972 	bl	8001044 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d902      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	74fb      	strb	r3, [r7, #19]
            break;
 8002d72:	e006      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ec      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d88:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d96:	4904      	ldr	r1, [pc, #16]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d9e:	e009      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da0:	7cfb      	ldrb	r3, [r7, #19]
 8002da2:	74bb      	strb	r3, [r7, #18]
 8002da4:	e006      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db4:	7c7b      	ldrb	r3, [r7, #17]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	4a89      	ldr	r2, [pc, #548]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd2:	4b84      	ldr	r3, [pc, #528]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd8:	f023 0203 	bic.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4980      	ldr	r1, [pc, #512]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f023 020c 	bic.w	r2, r3, #12
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	4978      	ldr	r1, [pc, #480]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e16:	4b73      	ldr	r3, [pc, #460]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e24:	496f      	ldr	r1, [pc, #444]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e38:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	4967      	ldr	r1, [pc, #412]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e5a:	4b62      	ldr	r3, [pc, #392]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e68:	495e      	ldr	r1, [pc, #376]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	4956      	ldr	r1, [pc, #344]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e9e:	4b51      	ldr	r3, [pc, #324]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	494d      	ldr	r1, [pc, #308]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d028      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ec0:	4b48      	ldr	r3, [pc, #288]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	4945      	ldr	r1, [pc, #276]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ede:	d106      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee0:	4b40      	ldr	r3, [pc, #256]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a3f      	ldr	r2, [pc, #252]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eea:	60d3      	str	r3, [r2, #12]
 8002eec:	e011      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f882 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d028      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f1e:	4b31      	ldr	r3, [pc, #196]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2c:	492d      	ldr	r1, [pc, #180]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f3c:	d106      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f3e:	4b29      	ldr	r3, [pc, #164]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4a28      	ldr	r2, [pc, #160]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f48:	60d3      	str	r3, [r2, #12]
 8002f4a:	e011      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f853 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f66:	7cfb      	ldrb	r3, [r7, #19]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01c      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f8a:	4916      	ldr	r1, [pc, #88]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f830 	bl	8003008 <RCCEx_PLLSAI1_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fc2:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	4904      	ldr	r1, [pc, #16]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a04      	ldr	r2, [pc, #16]	@ (8003004 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000

08003008 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003016:	4b74      	ldr	r3, [pc, #464]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d018      	beq.n	8003054 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003022:	4b71      	ldr	r3, [pc, #452]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0203 	and.w	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d10d      	bne.n	800304e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
       ||
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800303a:	4b6b      	ldr	r3, [pc, #428]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
       ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d047      	beq.n	80030de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	e044      	b.n	80030de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d018      	beq.n	800308e <RCCEx_PLLSAI1_Config+0x86>
 800305c:	2b03      	cmp	r3, #3
 800305e:	d825      	bhi.n	80030ac <RCCEx_PLLSAI1_Config+0xa4>
 8003060:	2b01      	cmp	r3, #1
 8003062:	d002      	beq.n	800306a <RCCEx_PLLSAI1_Config+0x62>
 8003064:	2b02      	cmp	r3, #2
 8003066:	d009      	beq.n	800307c <RCCEx_PLLSAI1_Config+0x74>
 8003068:	e020      	b.n	80030ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800306a:	4b5f      	ldr	r3, [pc, #380]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d11d      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307a:	e01a      	b.n	80030b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800307c:	4b5a      	ldr	r3, [pc, #360]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d116      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308c:	e013      	b.n	80030b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800308e:	4b56      	ldr	r3, [pc, #344]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800309a:	4b53      	ldr	r3, [pc, #332]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030aa:	e006      	b.n	80030ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      break;
 80030b0:	e004      	b.n	80030bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10d      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030c2:	4b49      	ldr	r3, [pc, #292]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6819      	ldr	r1, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	430b      	orrs	r3, r1
 80030d8:	4943      	ldr	r1, [pc, #268]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d17c      	bne.n	80031de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030e4:	4b40      	ldr	r3, [pc, #256]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a3f      	ldr	r2, [pc, #252]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f0:	f7fd ffa8 	bl	8001044 <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030f6:	e009      	b.n	800310c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030f8:	f7fd ffa4 	bl	8001044 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d902      	bls.n	800310c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	73fb      	strb	r3, [r7, #15]
        break;
 800310a:	e005      	b.n	8003118 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800310c:	4b36      	ldr	r3, [pc, #216]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ef      	bne.n	80030f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d15f      	bne.n	80031de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d110      	bne.n	8003146 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003124:	4b30      	ldr	r3, [pc, #192]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800312c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6892      	ldr	r2, [r2, #8]
 8003134:	0211      	lsls	r1, r2, #8
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68d2      	ldr	r2, [r2, #12]
 800313a:	06d2      	lsls	r2, r2, #27
 800313c:	430a      	orrs	r2, r1
 800313e:	492a      	ldr	r1, [pc, #168]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003140:	4313      	orrs	r3, r2
 8003142:	610b      	str	r3, [r1, #16]
 8003144:	e027      	b.n	8003196 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d112      	bne.n	8003172 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800314c:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003154:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6892      	ldr	r2, [r2, #8]
 800315c:	0211      	lsls	r1, r2, #8
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6912      	ldr	r2, [r2, #16]
 8003162:	0852      	lsrs	r2, r2, #1
 8003164:	3a01      	subs	r2, #1
 8003166:	0552      	lsls	r2, r2, #21
 8003168:	430a      	orrs	r2, r1
 800316a:	491f      	ldr	r1, [pc, #124]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800316c:	4313      	orrs	r3, r2
 800316e:	610b      	str	r3, [r1, #16]
 8003170:	e011      	b.n	8003196 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003172:	4b1d      	ldr	r3, [pc, #116]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800317a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6892      	ldr	r2, [r2, #8]
 8003182:	0211      	lsls	r1, r2, #8
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6952      	ldr	r2, [r2, #20]
 8003188:	0852      	lsrs	r2, r2, #1
 800318a:	3a01      	subs	r2, #1
 800318c:	0652      	lsls	r2, r2, #25
 800318e:	430a      	orrs	r2, r1
 8003190:	4915      	ldr	r1, [pc, #84]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003192:	4313      	orrs	r3, r2
 8003194:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003196:	4b14      	ldr	r3, [pc, #80]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a13      	ldr	r2, [pc, #76]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800319c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fd ff4f 	bl	8001044 <HAL_GetTick>
 80031a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031a8:	e009      	b.n	80031be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031aa:	f7fd ff4b 	bl	8001044 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d902      	bls.n	80031be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	73fb      	strb	r3, [r7, #15]
          break;
 80031bc:	e005      	b.n	80031ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031be:	4b0a      	ldr	r3, [pc, #40]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0ef      	beq.n	80031aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d106      	bne.n	80031de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031d0:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	4903      	ldr	r1, [pc, #12]	@ (80031e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000

080031ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e040      	b.n	8003280 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd fcb4 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	@ 0x24
 8003218:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fade 	bl	80037f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f8af 	bl	800339c <UART_SetConfig>
 800323e:	4603      	mov	r3, r0
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e01b      	b.n	8003280 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fb5d 	bl	8003938 <UART_CheckIdleState>
 800327e:	4603      	mov	r3, r0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	@ 0x28
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800329c:	2b20      	cmp	r3, #32
 800329e:	d177      	bne.n	8003390 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_UART_Transmit+0x24>
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e070      	b.n	8003392 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2221      	movs	r2, #33	@ 0x21
 80032bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032be:	f7fd fec1 	bl	8001044 <HAL_GetTick>
 80032c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	88fa      	ldrh	r2, [r7, #6]
 80032c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032dc:	d108      	bne.n	80032f0 <HAL_UART_Transmit+0x68>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e003      	b.n	80032f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032f8:	e02f      	b.n	800335a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2180      	movs	r1, #128	@ 0x80
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fbbf 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e03b      	b.n	8003392 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	881a      	ldrh	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800332c:	b292      	uxth	r2, r2
 800332e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	3302      	adds	r3, #2
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e007      	b.n	8003348 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1c9      	bne.n	80032fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	2140      	movs	r1, #64	@ 0x40
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fb89 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e005      	b.n	8003392 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b08a      	sub	sp, #40	@ 0x28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4bb4      	ldr	r3, [pc, #720]	@ (800369c <UART_SetConfig+0x300>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4aa9      	ldr	r2, [pc, #676]	@ (80036a0 <UART_SetConfig+0x304>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	4313      	orrs	r3, r2
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4aa0      	ldr	r2, [pc, #640]	@ (80036a4 <UART_SetConfig+0x308>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d126      	bne.n	8003474 <UART_SetConfig+0xd8>
 8003426:	4ba0      	ldr	r3, [pc, #640]	@ (80036a8 <UART_SetConfig+0x30c>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b03      	cmp	r3, #3
 8003432:	d81b      	bhi.n	800346c <UART_SetConfig+0xd0>
 8003434:	a201      	add	r2, pc, #4	@ (adr r2, 800343c <UART_SetConfig+0xa0>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	0800344d 	.word	0x0800344d
 8003440:	0800345d 	.word	0x0800345d
 8003444:	08003455 	.word	0x08003455
 8003448:	08003465 	.word	0x08003465
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003452:	e080      	b.n	8003556 <UART_SetConfig+0x1ba>
 8003454:	2302      	movs	r3, #2
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345a:	e07c      	b.n	8003556 <UART_SetConfig+0x1ba>
 800345c:	2304      	movs	r3, #4
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003462:	e078      	b.n	8003556 <UART_SetConfig+0x1ba>
 8003464:	2308      	movs	r3, #8
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346a:	e074      	b.n	8003556 <UART_SetConfig+0x1ba>
 800346c:	2310      	movs	r3, #16
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003472:	e070      	b.n	8003556 <UART_SetConfig+0x1ba>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a8c      	ldr	r2, [pc, #560]	@ (80036ac <UART_SetConfig+0x310>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d138      	bne.n	80034f0 <UART_SetConfig+0x154>
 800347e:	4b8a      	ldr	r3, [pc, #552]	@ (80036a8 <UART_SetConfig+0x30c>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b0c      	cmp	r3, #12
 800348a:	d82d      	bhi.n	80034e8 <UART_SetConfig+0x14c>
 800348c:	a201      	add	r2, pc, #4	@ (adr r2, 8003494 <UART_SetConfig+0xf8>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034c9 	.word	0x080034c9
 8003498:	080034e9 	.word	0x080034e9
 800349c:	080034e9 	.word	0x080034e9
 80034a0:	080034e9 	.word	0x080034e9
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034e9 	.word	0x080034e9
 80034b0:	080034e9 	.word	0x080034e9
 80034b4:	080034d1 	.word	0x080034d1
 80034b8:	080034e9 	.word	0x080034e9
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	080034e9 	.word	0x080034e9
 80034c4:	080034e1 	.word	0x080034e1
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ce:	e042      	b.n	8003556 <UART_SetConfig+0x1ba>
 80034d0:	2302      	movs	r3, #2
 80034d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034d6:	e03e      	b.n	8003556 <UART_SetConfig+0x1ba>
 80034d8:	2304      	movs	r3, #4
 80034da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034de:	e03a      	b.n	8003556 <UART_SetConfig+0x1ba>
 80034e0:	2308      	movs	r3, #8
 80034e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034e6:	e036      	b.n	8003556 <UART_SetConfig+0x1ba>
 80034e8:	2310      	movs	r3, #16
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ee:	e032      	b.n	8003556 <UART_SetConfig+0x1ba>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6a      	ldr	r2, [pc, #424]	@ (80036a0 <UART_SetConfig+0x304>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d12a      	bne.n	8003550 <UART_SetConfig+0x1b4>
 80034fa:	4b6b      	ldr	r3, [pc, #428]	@ (80036a8 <UART_SetConfig+0x30c>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003500:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003504:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003508:	d01a      	beq.n	8003540 <UART_SetConfig+0x1a4>
 800350a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800350e:	d81b      	bhi.n	8003548 <UART_SetConfig+0x1ac>
 8003510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003514:	d00c      	beq.n	8003530 <UART_SetConfig+0x194>
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351a:	d815      	bhi.n	8003548 <UART_SetConfig+0x1ac>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <UART_SetConfig+0x18c>
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003524:	d008      	beq.n	8003538 <UART_SetConfig+0x19c>
 8003526:	e00f      	b.n	8003548 <UART_SetConfig+0x1ac>
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352e:	e012      	b.n	8003556 <UART_SetConfig+0x1ba>
 8003530:	2302      	movs	r3, #2
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003536:	e00e      	b.n	8003556 <UART_SetConfig+0x1ba>
 8003538:	2304      	movs	r3, #4
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800353e:	e00a      	b.n	8003556 <UART_SetConfig+0x1ba>
 8003540:	2308      	movs	r3, #8
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003546:	e006      	b.n	8003556 <UART_SetConfig+0x1ba>
 8003548:	2310      	movs	r3, #16
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354e:	e002      	b.n	8003556 <UART_SetConfig+0x1ba>
 8003550:	2310      	movs	r3, #16
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a51      	ldr	r2, [pc, #324]	@ (80036a0 <UART_SetConfig+0x304>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d17a      	bne.n	8003656 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003560:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003564:	2b08      	cmp	r3, #8
 8003566:	d824      	bhi.n	80035b2 <UART_SetConfig+0x216>
 8003568:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <UART_SetConfig+0x1d4>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003595 	.word	0x08003595
 8003574:	080035b3 	.word	0x080035b3
 8003578:	0800359d 	.word	0x0800359d
 800357c:	080035b3 	.word	0x080035b3
 8003580:	080035a3 	.word	0x080035a3
 8003584:	080035b3 	.word	0x080035b3
 8003588:	080035b3 	.word	0x080035b3
 800358c:	080035b3 	.word	0x080035b3
 8003590:	080035ab 	.word	0x080035ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003594:	f7ff faa6 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003598:	61f8      	str	r0, [r7, #28]
        break;
 800359a:	e010      	b.n	80035be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800359c:	4b44      	ldr	r3, [pc, #272]	@ (80036b0 <UART_SetConfig+0x314>)
 800359e:	61fb      	str	r3, [r7, #28]
        break;
 80035a0:	e00d      	b.n	80035be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a2:	f7ff fa07 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 80035a6:	61f8      	str	r0, [r7, #28]
        break;
 80035a8:	e009      	b.n	80035be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ae:	61fb      	str	r3, [r7, #28]
        break;
 80035b0:	e005      	b.n	80035be <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8107 	beq.w	80037d4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4413      	add	r3, r2
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d305      	bcc.n	80035e2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d903      	bls.n	80035ea <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035e8:	e0f4      	b.n	80037d4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2200      	movs	r2, #0
 80035ee:	461c      	mov	r4, r3
 80035f0:	4615      	mov	r5, r2
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	022b      	lsls	r3, r5, #8
 80035fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003600:	0222      	lsls	r2, r4, #8
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	6849      	ldr	r1, [r1, #4]
 8003606:	0849      	lsrs	r1, r1, #1
 8003608:	2000      	movs	r0, #0
 800360a:	4688      	mov	r8, r1
 800360c:	4681      	mov	r9, r0
 800360e:	eb12 0a08 	adds.w	sl, r2, r8
 8003612:	eb43 0b09 	adc.w	fp, r3, r9
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003624:	4650      	mov	r0, sl
 8003626:	4659      	mov	r1, fp
 8003628:	f7fc fe2a 	bl	8000280 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800363a:	d308      	bcc.n	800364e <UART_SetConfig+0x2b2>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003642:	d204      	bcs.n	800364e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	e0c2      	b.n	80037d4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003654:	e0be      	b.n	80037d4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800365e:	d16a      	bne.n	8003736 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003660:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003664:	2b08      	cmp	r3, #8
 8003666:	d834      	bhi.n	80036d2 <UART_SetConfig+0x336>
 8003668:	a201      	add	r2, pc, #4	@ (adr r2, 8003670 <UART_SetConfig+0x2d4>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003695 	.word	0x08003695
 8003674:	080036b5 	.word	0x080036b5
 8003678:	080036bd 	.word	0x080036bd
 800367c:	080036d3 	.word	0x080036d3
 8003680:	080036c3 	.word	0x080036c3
 8003684:	080036d3 	.word	0x080036d3
 8003688:	080036d3 	.word	0x080036d3
 800368c:	080036d3 	.word	0x080036d3
 8003690:	080036cb 	.word	0x080036cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7ff fa26 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003698:	61f8      	str	r0, [r7, #28]
        break;
 800369a:	e020      	b.n	80036de <UART_SetConfig+0x342>
 800369c:	efff69f3 	.word	0xefff69f3
 80036a0:	40008000 	.word	0x40008000
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40004400 	.word	0x40004400
 80036b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7ff fa2c 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 80036b8:	61f8      	str	r0, [r7, #28]
        break;
 80036ba:	e010      	b.n	80036de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036bc:	4b4c      	ldr	r3, [pc, #304]	@ (80037f0 <UART_SetConfig+0x454>)
 80036be:	61fb      	str	r3, [r7, #28]
        break;
 80036c0:	e00d      	b.n	80036de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c2:	f7ff f977 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 80036c6:	61f8      	str	r0, [r7, #28]
        break;
 80036c8:	e009      	b.n	80036de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ce:	61fb      	str	r3, [r7, #28]
        break;
 80036d0:	e005      	b.n	80036de <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d077      	beq.n	80037d4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	005a      	lsls	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	441a      	add	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d916      	bls.n	800372e <UART_SetConfig+0x392>
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003706:	d212      	bcs.n	800372e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	b29b      	uxth	r3, r3
 800370c:	f023 030f 	bic.w	r3, r3, #15
 8003710:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	b29b      	uxth	r3, r3
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	b29a      	uxth	r2, r3
 800371e:	8afb      	ldrh	r3, [r7, #22]
 8003720:	4313      	orrs	r3, r2
 8003722:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	8afa      	ldrh	r2, [r7, #22]
 800372a:	60da      	str	r2, [r3, #12]
 800372c:	e052      	b.n	80037d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003734:	e04e      	b.n	80037d4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003736:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800373a:	2b08      	cmp	r3, #8
 800373c:	d827      	bhi.n	800378e <UART_SetConfig+0x3f2>
 800373e:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <UART_SetConfig+0x3a8>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003769 	.word	0x08003769
 8003748:	08003771 	.word	0x08003771
 800374c:	08003779 	.word	0x08003779
 8003750:	0800378f 	.word	0x0800378f
 8003754:	0800377f 	.word	0x0800377f
 8003758:	0800378f 	.word	0x0800378f
 800375c:	0800378f 	.word	0x0800378f
 8003760:	0800378f 	.word	0x0800378f
 8003764:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7ff f9bc 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 800376c:	61f8      	str	r0, [r7, #28]
        break;
 800376e:	e014      	b.n	800379a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7ff f9ce 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8003774:	61f8      	str	r0, [r7, #28]
        break;
 8003776:	e010      	b.n	800379a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003778:	4b1d      	ldr	r3, [pc, #116]	@ (80037f0 <UART_SetConfig+0x454>)
 800377a:	61fb      	str	r3, [r7, #28]
        break;
 800377c:	e00d      	b.n	800379a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377e:	f7ff f919 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8003782:	61f8      	str	r0, [r7, #28]
        break;
 8003784:	e009      	b.n	800379a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378a:	61fb      	str	r3, [r7, #28]
        break;
 800378c:	e005      	b.n	800379a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003798:	bf00      	nop
    }

    if (pclk != 0U)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d019      	beq.n	80037d4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	085a      	lsrs	r2, r3, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	441a      	add	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b0f      	cmp	r3, #15
 80037b8:	d909      	bls.n	80037ce <UART_SetConfig+0x432>
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c0:	d205      	bcs.n	80037ce <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	e002      	b.n	80037d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3728      	adds	r7, #40	@ 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ee:	bf00      	nop
 80037f0:	00f42400 	.word	0x00f42400

080037f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01a      	beq.n	800390a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038f2:	d10a      	bne.n	800390a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b098      	sub	sp, #96	@ 0x60
 800393c:	af02      	add	r7, sp, #8
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003948:	f7fd fb7c 	bl	8001044 <HAL_GetTick>
 800394c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b08      	cmp	r3, #8
 800395a:	d12e      	bne.n	80039ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800395c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003964:	2200      	movs	r2, #0
 8003966:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f88c 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d021      	beq.n	80039ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800398a:	653b      	str	r3, [r7, #80]	@ 0x50
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003994:	647b      	str	r3, [r7, #68]	@ 0x44
 8003996:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800399a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e6      	bne.n	8003976 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e062      	b.n	8003a80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d149      	bne.n	8003a5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f856 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d03c      	beq.n	8003a5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	623b      	str	r3, [r7, #32]
   return(result);
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e6      	bne.n	80039e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a34:	61fa      	str	r2, [r7, #28]
 8003a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	617b      	str	r3, [r7, #20]
   return(result);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e011      	b.n	8003a80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3758      	adds	r7, #88	@ 0x58
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a98:	e04f      	b.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d04b      	beq.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fd facf 	bl	8001044 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e04e      	b.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d037      	beq.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b80      	cmp	r3, #128	@ 0x80
 8003ace:	d034      	beq.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d031      	beq.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d110      	bne.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f838 	bl	8003b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2208      	movs	r2, #8
 8003af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e029      	b.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b14:	d111      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f81e 	bl	8003b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e00f      	b.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d0a0      	beq.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b095      	sub	sp, #84	@ 0x54
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e6      	bne.n	8003b6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d118      	bne.n	8003c0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f023 0310 	bic.w	r3, r3, #16
 8003bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6979      	ldr	r1, [r7, #20]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	613b      	str	r3, [r7, #16]
   return(result);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e6      	bne.n	8003bd8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c1e:	bf00      	nop
 8003c20:	3754      	adds	r7, #84	@ 0x54
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <std>:
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	4604      	mov	r4, r0
 8003c32:	e9c0 3300 	strd	r3, r3, [r0]
 8003c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c3a:	6083      	str	r3, [r0, #8]
 8003c3c:	8181      	strh	r1, [r0, #12]
 8003c3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c40:	81c2      	strh	r2, [r0, #14]
 8003c42:	6183      	str	r3, [r0, #24]
 8003c44:	4619      	mov	r1, r3
 8003c46:	2208      	movs	r2, #8
 8003c48:	305c      	adds	r0, #92	@ 0x5c
 8003c4a:	f000 fa1b 	bl	8004084 <memset>
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <std+0x58>)
 8003c50:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <std+0x5c>)
 8003c54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <std+0x60>)
 8003c58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <std+0x64>)
 8003c5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <std+0x68>)
 8003c60:	6224      	str	r4, [r4, #32]
 8003c62:	429c      	cmp	r4, r3
 8003c64:	d006      	beq.n	8003c74 <std+0x48>
 8003c66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c6a:	4294      	cmp	r4, r2
 8003c6c:	d002      	beq.n	8003c74 <std+0x48>
 8003c6e:	33d0      	adds	r3, #208	@ 0xd0
 8003c70:	429c      	cmp	r4, r3
 8003c72:	d105      	bne.n	8003c80 <std+0x54>
 8003c74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c7c:	f000 ba7a 	b.w	8004174 <__retarget_lock_init_recursive>
 8003c80:	bd10      	pop	{r4, pc}
 8003c82:	bf00      	nop
 8003c84:	08003ed5 	.word	0x08003ed5
 8003c88:	08003ef7 	.word	0x08003ef7
 8003c8c:	08003f2f 	.word	0x08003f2f
 8003c90:	08003f53 	.word	0x08003f53
 8003c94:	200001d0 	.word	0x200001d0

08003c98 <stdio_exit_handler>:
 8003c98:	4a02      	ldr	r2, [pc, #8]	@ (8003ca4 <stdio_exit_handler+0xc>)
 8003c9a:	4903      	ldr	r1, [pc, #12]	@ (8003ca8 <stdio_exit_handler+0x10>)
 8003c9c:	4803      	ldr	r0, [pc, #12]	@ (8003cac <stdio_exit_handler+0x14>)
 8003c9e:	f000 b869 	b.w	8003d74 <_fwalk_sglue>
 8003ca2:	bf00      	nop
 8003ca4:	2000000c 	.word	0x2000000c
 8003ca8:	08004cc1 	.word	0x08004cc1
 8003cac:	2000001c 	.word	0x2000001c

08003cb0 <cleanup_stdio>:
 8003cb0:	6841      	ldr	r1, [r0, #4]
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <cleanup_stdio+0x34>)
 8003cb4:	4299      	cmp	r1, r3
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	4604      	mov	r4, r0
 8003cba:	d001      	beq.n	8003cc0 <cleanup_stdio+0x10>
 8003cbc:	f001 f800 	bl	8004cc0 <_fflush_r>
 8003cc0:	68a1      	ldr	r1, [r4, #8]
 8003cc2:	4b09      	ldr	r3, [pc, #36]	@ (8003ce8 <cleanup_stdio+0x38>)
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	d002      	beq.n	8003cce <cleanup_stdio+0x1e>
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 fff9 	bl	8004cc0 <_fflush_r>
 8003cce:	68e1      	ldr	r1, [r4, #12]
 8003cd0:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <cleanup_stdio+0x3c>)
 8003cd2:	4299      	cmp	r1, r3
 8003cd4:	d004      	beq.n	8003ce0 <cleanup_stdio+0x30>
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cdc:	f000 bff0 	b.w	8004cc0 <_fflush_r>
 8003ce0:	bd10      	pop	{r4, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200001d0 	.word	0x200001d0
 8003ce8:	20000238 	.word	0x20000238
 8003cec:	200002a0 	.word	0x200002a0

08003cf0 <global_stdio_init.part.0>:
 8003cf0:	b510      	push	{r4, lr}
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <global_stdio_init.part.0+0x30>)
 8003cf4:	4c0b      	ldr	r4, [pc, #44]	@ (8003d24 <global_stdio_init.part.0+0x34>)
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8003d28 <global_stdio_init.part.0+0x38>)
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2104      	movs	r1, #4
 8003d00:	f7ff ff94 	bl	8003c2c <std>
 8003d04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d08:	2201      	movs	r2, #1
 8003d0a:	2109      	movs	r1, #9
 8003d0c:	f7ff ff8e 	bl	8003c2c <std>
 8003d10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d14:	2202      	movs	r2, #2
 8003d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d1a:	2112      	movs	r1, #18
 8003d1c:	f7ff bf86 	b.w	8003c2c <std>
 8003d20:	20000308 	.word	0x20000308
 8003d24:	200001d0 	.word	0x200001d0
 8003d28:	08003c99 	.word	0x08003c99

08003d2c <__sfp_lock_acquire>:
 8003d2c:	4801      	ldr	r0, [pc, #4]	@ (8003d34 <__sfp_lock_acquire+0x8>)
 8003d2e:	f000 ba22 	b.w	8004176 <__retarget_lock_acquire_recursive>
 8003d32:	bf00      	nop
 8003d34:	20000311 	.word	0x20000311

08003d38 <__sfp_lock_release>:
 8003d38:	4801      	ldr	r0, [pc, #4]	@ (8003d40 <__sfp_lock_release+0x8>)
 8003d3a:	f000 ba1d 	b.w	8004178 <__retarget_lock_release_recursive>
 8003d3e:	bf00      	nop
 8003d40:	20000311 	.word	0x20000311

08003d44 <__sinit>:
 8003d44:	b510      	push	{r4, lr}
 8003d46:	4604      	mov	r4, r0
 8003d48:	f7ff fff0 	bl	8003d2c <__sfp_lock_acquire>
 8003d4c:	6a23      	ldr	r3, [r4, #32]
 8003d4e:	b11b      	cbz	r3, 8003d58 <__sinit+0x14>
 8003d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d54:	f7ff bff0 	b.w	8003d38 <__sfp_lock_release>
 8003d58:	4b04      	ldr	r3, [pc, #16]	@ (8003d6c <__sinit+0x28>)
 8003d5a:	6223      	str	r3, [r4, #32]
 8003d5c:	4b04      	ldr	r3, [pc, #16]	@ (8003d70 <__sinit+0x2c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f5      	bne.n	8003d50 <__sinit+0xc>
 8003d64:	f7ff ffc4 	bl	8003cf0 <global_stdio_init.part.0>
 8003d68:	e7f2      	b.n	8003d50 <__sinit+0xc>
 8003d6a:	bf00      	nop
 8003d6c:	08003cb1 	.word	0x08003cb1
 8003d70:	20000308 	.word	0x20000308

08003d74 <_fwalk_sglue>:
 8003d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d78:	4607      	mov	r7, r0
 8003d7a:	4688      	mov	r8, r1
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	2600      	movs	r6, #0
 8003d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d84:	f1b9 0901 	subs.w	r9, r9, #1
 8003d88:	d505      	bpl.n	8003d96 <_fwalk_sglue+0x22>
 8003d8a:	6824      	ldr	r4, [r4, #0]
 8003d8c:	2c00      	cmp	r4, #0
 8003d8e:	d1f7      	bne.n	8003d80 <_fwalk_sglue+0xc>
 8003d90:	4630      	mov	r0, r6
 8003d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d96:	89ab      	ldrh	r3, [r5, #12]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d907      	bls.n	8003dac <_fwalk_sglue+0x38>
 8003d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003da0:	3301      	adds	r3, #1
 8003da2:	d003      	beq.n	8003dac <_fwalk_sglue+0x38>
 8003da4:	4629      	mov	r1, r5
 8003da6:	4638      	mov	r0, r7
 8003da8:	47c0      	blx	r8
 8003daa:	4306      	orrs	r6, r0
 8003dac:	3568      	adds	r5, #104	@ 0x68
 8003dae:	e7e9      	b.n	8003d84 <_fwalk_sglue+0x10>

08003db0 <iprintf>:
 8003db0:	b40f      	push	{r0, r1, r2, r3}
 8003db2:	b507      	push	{r0, r1, r2, lr}
 8003db4:	4906      	ldr	r1, [pc, #24]	@ (8003dd0 <iprintf+0x20>)
 8003db6:	ab04      	add	r3, sp, #16
 8003db8:	6808      	ldr	r0, [r1, #0]
 8003dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dbe:	6881      	ldr	r1, [r0, #8]
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	f000 fc55 	bl	8004670 <_vfiprintf_r>
 8003dc6:	b003      	add	sp, #12
 8003dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dcc:	b004      	add	sp, #16
 8003dce:	4770      	bx	lr
 8003dd0:	20000018 	.word	0x20000018

08003dd4 <_puts_r>:
 8003dd4:	6a03      	ldr	r3, [r0, #32]
 8003dd6:	b570      	push	{r4, r5, r6, lr}
 8003dd8:	6884      	ldr	r4, [r0, #8]
 8003dda:	4605      	mov	r5, r0
 8003ddc:	460e      	mov	r6, r1
 8003dde:	b90b      	cbnz	r3, 8003de4 <_puts_r+0x10>
 8003de0:	f7ff ffb0 	bl	8003d44 <__sinit>
 8003de4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003de6:	07db      	lsls	r3, r3, #31
 8003de8:	d405      	bmi.n	8003df6 <_puts_r+0x22>
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	0598      	lsls	r0, r3, #22
 8003dee:	d402      	bmi.n	8003df6 <_puts_r+0x22>
 8003df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003df2:	f000 f9c0 	bl	8004176 <__retarget_lock_acquire_recursive>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	0719      	lsls	r1, r3, #28
 8003dfa:	d502      	bpl.n	8003e02 <_puts_r+0x2e>
 8003dfc:	6923      	ldr	r3, [r4, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d135      	bne.n	8003e6e <_puts_r+0x9a>
 8003e02:	4621      	mov	r1, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f000 f8e7 	bl	8003fd8 <__swsetup_r>
 8003e0a:	b380      	cbz	r0, 8003e6e <_puts_r+0x9a>
 8003e0c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e12:	07da      	lsls	r2, r3, #31
 8003e14:	d405      	bmi.n	8003e22 <_puts_r+0x4e>
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	059b      	lsls	r3, r3, #22
 8003e1a:	d402      	bmi.n	8003e22 <_puts_r+0x4e>
 8003e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e1e:	f000 f9ab 	bl	8004178 <__retarget_lock_release_recursive>
 8003e22:	4628      	mov	r0, r5
 8003e24:	bd70      	pop	{r4, r5, r6, pc}
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	da04      	bge.n	8003e34 <_puts_r+0x60>
 8003e2a:	69a2      	ldr	r2, [r4, #24]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	dc17      	bgt.n	8003e60 <_puts_r+0x8c>
 8003e30:	290a      	cmp	r1, #10
 8003e32:	d015      	beq.n	8003e60 <_puts_r+0x8c>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	6022      	str	r2, [r4, #0]
 8003e3a:	7019      	strb	r1, [r3, #0]
 8003e3c:	68a3      	ldr	r3, [r4, #8]
 8003e3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e42:	3b01      	subs	r3, #1
 8003e44:	60a3      	str	r3, [r4, #8]
 8003e46:	2900      	cmp	r1, #0
 8003e48:	d1ed      	bne.n	8003e26 <_puts_r+0x52>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	da11      	bge.n	8003e72 <_puts_r+0x9e>
 8003e4e:	4622      	mov	r2, r4
 8003e50:	210a      	movs	r1, #10
 8003e52:	4628      	mov	r0, r5
 8003e54:	f000 f881 	bl	8003f5a <__swbuf_r>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d0d7      	beq.n	8003e0c <_puts_r+0x38>
 8003e5c:	250a      	movs	r5, #10
 8003e5e:	e7d7      	b.n	8003e10 <_puts_r+0x3c>
 8003e60:	4622      	mov	r2, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 f879 	bl	8003f5a <__swbuf_r>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d1e7      	bne.n	8003e3c <_puts_r+0x68>
 8003e6c:	e7ce      	b.n	8003e0c <_puts_r+0x38>
 8003e6e:	3e01      	subs	r6, #1
 8003e70:	e7e4      	b.n	8003e3c <_puts_r+0x68>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	6022      	str	r2, [r4, #0]
 8003e78:	220a      	movs	r2, #10
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	e7ee      	b.n	8003e5c <_puts_r+0x88>
	...

08003e80 <puts>:
 8003e80:	4b02      	ldr	r3, [pc, #8]	@ (8003e8c <puts+0xc>)
 8003e82:	4601      	mov	r1, r0
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	f7ff bfa5 	b.w	8003dd4 <_puts_r>
 8003e8a:	bf00      	nop
 8003e8c:	20000018 	.word	0x20000018

08003e90 <siprintf>:
 8003e90:	b40e      	push	{r1, r2, r3}
 8003e92:	b510      	push	{r4, lr}
 8003e94:	b09d      	sub	sp, #116	@ 0x74
 8003e96:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e98:	9002      	str	r0, [sp, #8]
 8003e9a:	9006      	str	r0, [sp, #24]
 8003e9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ea0:	480a      	ldr	r0, [pc, #40]	@ (8003ecc <siprintf+0x3c>)
 8003ea2:	9107      	str	r1, [sp, #28]
 8003ea4:	9104      	str	r1, [sp, #16]
 8003ea6:	490a      	ldr	r1, [pc, #40]	@ (8003ed0 <siprintf+0x40>)
 8003ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eac:	9105      	str	r1, [sp, #20]
 8003eae:	2400      	movs	r4, #0
 8003eb0:	a902      	add	r1, sp, #8
 8003eb2:	6800      	ldr	r0, [r0, #0]
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003eb8:	f000 fab4 	bl	8004424 <_svfiprintf_r>
 8003ebc:	9b02      	ldr	r3, [sp, #8]
 8003ebe:	701c      	strb	r4, [r3, #0]
 8003ec0:	b01d      	add	sp, #116	@ 0x74
 8003ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec6:	b003      	add	sp, #12
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000018 	.word	0x20000018
 8003ed0:	ffff0208 	.word	0xffff0208

08003ed4 <__sread>:
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003edc:	f000 f8fc 	bl	80040d8 <_read_r>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	bfab      	itete	ge
 8003ee4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee8:	181b      	addge	r3, r3, r0
 8003eea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003eee:	bfac      	ite	ge
 8003ef0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ef2:	81a3      	strhlt	r3, [r4, #12]
 8003ef4:	bd10      	pop	{r4, pc}

08003ef6 <__swrite>:
 8003ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	461f      	mov	r7, r3
 8003efc:	898b      	ldrh	r3, [r1, #12]
 8003efe:	05db      	lsls	r3, r3, #23
 8003f00:	4605      	mov	r5, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	4616      	mov	r6, r2
 8003f06:	d505      	bpl.n	8003f14 <__swrite+0x1e>
 8003f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f000 f8d0 	bl	80040b4 <_lseek_r>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	4632      	mov	r2, r6
 8003f22:	463b      	mov	r3, r7
 8003f24:	4628      	mov	r0, r5
 8003f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2a:	f000 b8e7 	b.w	80040fc <_write_r>

08003f2e <__sseek>:
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	460c      	mov	r4, r1
 8003f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f36:	f000 f8bd 	bl	80040b4 <_lseek_r>
 8003f3a:	1c43      	adds	r3, r0, #1
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	bf15      	itete	ne
 8003f40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f4a:	81a3      	strheq	r3, [r4, #12]
 8003f4c:	bf18      	it	ne
 8003f4e:	81a3      	strhne	r3, [r4, #12]
 8003f50:	bd10      	pop	{r4, pc}

08003f52 <__sclose>:
 8003f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f56:	f000 b89d 	b.w	8004094 <_close_r>

08003f5a <__swbuf_r>:
 8003f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5c:	460e      	mov	r6, r1
 8003f5e:	4614      	mov	r4, r2
 8003f60:	4605      	mov	r5, r0
 8003f62:	b118      	cbz	r0, 8003f6c <__swbuf_r+0x12>
 8003f64:	6a03      	ldr	r3, [r0, #32]
 8003f66:	b90b      	cbnz	r3, 8003f6c <__swbuf_r+0x12>
 8003f68:	f7ff feec 	bl	8003d44 <__sinit>
 8003f6c:	69a3      	ldr	r3, [r4, #24]
 8003f6e:	60a3      	str	r3, [r4, #8]
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	071a      	lsls	r2, r3, #28
 8003f74:	d501      	bpl.n	8003f7a <__swbuf_r+0x20>
 8003f76:	6923      	ldr	r3, [r4, #16]
 8003f78:	b943      	cbnz	r3, 8003f8c <__swbuf_r+0x32>
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f000 f82b 	bl	8003fd8 <__swsetup_r>
 8003f82:	b118      	cbz	r0, 8003f8c <__swbuf_r+0x32>
 8003f84:	f04f 37ff 	mov.w	r7, #4294967295
 8003f88:	4638      	mov	r0, r7
 8003f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	6922      	ldr	r2, [r4, #16]
 8003f90:	1a98      	subs	r0, r3, r2
 8003f92:	6963      	ldr	r3, [r4, #20]
 8003f94:	b2f6      	uxtb	r6, r6
 8003f96:	4283      	cmp	r3, r0
 8003f98:	4637      	mov	r7, r6
 8003f9a:	dc05      	bgt.n	8003fa8 <__swbuf_r+0x4e>
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 fe8e 	bl	8004cc0 <_fflush_r>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d1ed      	bne.n	8003f84 <__swbuf_r+0x2a>
 8003fa8:	68a3      	ldr	r3, [r4, #8]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60a3      	str	r3, [r4, #8]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	6022      	str	r2, [r4, #0]
 8003fb4:	701e      	strb	r6, [r3, #0]
 8003fb6:	6962      	ldr	r2, [r4, #20]
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d004      	beq.n	8003fc8 <__swbuf_r+0x6e>
 8003fbe:	89a3      	ldrh	r3, [r4, #12]
 8003fc0:	07db      	lsls	r3, r3, #31
 8003fc2:	d5e1      	bpl.n	8003f88 <__swbuf_r+0x2e>
 8003fc4:	2e0a      	cmp	r6, #10
 8003fc6:	d1df      	bne.n	8003f88 <__swbuf_r+0x2e>
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 fe78 	bl	8004cc0 <_fflush_r>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d0d9      	beq.n	8003f88 <__swbuf_r+0x2e>
 8003fd4:	e7d6      	b.n	8003f84 <__swbuf_r+0x2a>
	...

08003fd8 <__swsetup_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4b29      	ldr	r3, [pc, #164]	@ (8004080 <__swsetup_r+0xa8>)
 8003fdc:	4605      	mov	r5, r0
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	b118      	cbz	r0, 8003fec <__swsetup_r+0x14>
 8003fe4:	6a03      	ldr	r3, [r0, #32]
 8003fe6:	b90b      	cbnz	r3, 8003fec <__swsetup_r+0x14>
 8003fe8:	f7ff feac 	bl	8003d44 <__sinit>
 8003fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ff0:	0719      	lsls	r1, r3, #28
 8003ff2:	d422      	bmi.n	800403a <__swsetup_r+0x62>
 8003ff4:	06da      	lsls	r2, r3, #27
 8003ff6:	d407      	bmi.n	8004008 <__swsetup_r+0x30>
 8003ff8:	2209      	movs	r2, #9
 8003ffa:	602a      	str	r2, [r5, #0]
 8003ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	f04f 30ff 	mov.w	r0, #4294967295
 8004006:	e033      	b.n	8004070 <__swsetup_r+0x98>
 8004008:	0758      	lsls	r0, r3, #29
 800400a:	d512      	bpl.n	8004032 <__swsetup_r+0x5a>
 800400c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800400e:	b141      	cbz	r1, 8004022 <__swsetup_r+0x4a>
 8004010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004014:	4299      	cmp	r1, r3
 8004016:	d002      	beq.n	800401e <__swsetup_r+0x46>
 8004018:	4628      	mov	r0, r5
 800401a:	f000 f8af 	bl	800417c <_free_r>
 800401e:	2300      	movs	r3, #0
 8004020:	6363      	str	r3, [r4, #52]	@ 0x34
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004028:	81a3      	strh	r3, [r4, #12]
 800402a:	2300      	movs	r3, #0
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	6923      	ldr	r3, [r4, #16]
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	89a3      	ldrh	r3, [r4, #12]
 8004034:	f043 0308 	orr.w	r3, r3, #8
 8004038:	81a3      	strh	r3, [r4, #12]
 800403a:	6923      	ldr	r3, [r4, #16]
 800403c:	b94b      	cbnz	r3, 8004052 <__swsetup_r+0x7a>
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004048:	d003      	beq.n	8004052 <__swsetup_r+0x7a>
 800404a:	4621      	mov	r1, r4
 800404c:	4628      	mov	r0, r5
 800404e:	f000 fe85 	bl	8004d5c <__smakebuf_r>
 8004052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004056:	f013 0201 	ands.w	r2, r3, #1
 800405a:	d00a      	beq.n	8004072 <__swsetup_r+0x9a>
 800405c:	2200      	movs	r2, #0
 800405e:	60a2      	str	r2, [r4, #8]
 8004060:	6962      	ldr	r2, [r4, #20]
 8004062:	4252      	negs	r2, r2
 8004064:	61a2      	str	r2, [r4, #24]
 8004066:	6922      	ldr	r2, [r4, #16]
 8004068:	b942      	cbnz	r2, 800407c <__swsetup_r+0xa4>
 800406a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800406e:	d1c5      	bne.n	8003ffc <__swsetup_r+0x24>
 8004070:	bd38      	pop	{r3, r4, r5, pc}
 8004072:	0799      	lsls	r1, r3, #30
 8004074:	bf58      	it	pl
 8004076:	6962      	ldrpl	r2, [r4, #20]
 8004078:	60a2      	str	r2, [r4, #8]
 800407a:	e7f4      	b.n	8004066 <__swsetup_r+0x8e>
 800407c:	2000      	movs	r0, #0
 800407e:	e7f7      	b.n	8004070 <__swsetup_r+0x98>
 8004080:	20000018 	.word	0x20000018

08004084 <memset>:
 8004084:	4402      	add	r2, r0
 8004086:	4603      	mov	r3, r0
 8004088:	4293      	cmp	r3, r2
 800408a:	d100      	bne.n	800408e <memset+0xa>
 800408c:	4770      	bx	lr
 800408e:	f803 1b01 	strb.w	r1, [r3], #1
 8004092:	e7f9      	b.n	8004088 <memset+0x4>

08004094 <_close_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4d06      	ldr	r5, [pc, #24]	@ (80040b0 <_close_r+0x1c>)
 8004098:	2300      	movs	r3, #0
 800409a:	4604      	mov	r4, r0
 800409c:	4608      	mov	r0, r1
 800409e:	602b      	str	r3, [r5, #0]
 80040a0:	f7fc fe3e 	bl	8000d20 <_close>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d102      	bne.n	80040ae <_close_r+0x1a>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	b103      	cbz	r3, 80040ae <_close_r+0x1a>
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	2000030c 	.word	0x2000030c

080040b4 <_lseek_r>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4d07      	ldr	r5, [pc, #28]	@ (80040d4 <_lseek_r+0x20>)
 80040b8:	4604      	mov	r4, r0
 80040ba:	4608      	mov	r0, r1
 80040bc:	4611      	mov	r1, r2
 80040be:	2200      	movs	r2, #0
 80040c0:	602a      	str	r2, [r5, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f7fc fe53 	bl	8000d6e <_lseek>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_lseek_r+0x1e>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_lseek_r+0x1e>
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	2000030c 	.word	0x2000030c

080040d8 <_read_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4d07      	ldr	r5, [pc, #28]	@ (80040f8 <_read_r+0x20>)
 80040dc:	4604      	mov	r4, r0
 80040de:	4608      	mov	r0, r1
 80040e0:	4611      	mov	r1, r2
 80040e2:	2200      	movs	r2, #0
 80040e4:	602a      	str	r2, [r5, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7fc fde1 	bl	8000cae <_read>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_read_r+0x1e>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_read_r+0x1e>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	2000030c 	.word	0x2000030c

080040fc <_write_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d07      	ldr	r5, [pc, #28]	@ (800411c <_write_r+0x20>)
 8004100:	4604      	mov	r4, r0
 8004102:	4608      	mov	r0, r1
 8004104:	4611      	mov	r1, r2
 8004106:	2200      	movs	r2, #0
 8004108:	602a      	str	r2, [r5, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f7fc fdec 	bl	8000ce8 <_write>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_write_r+0x1e>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_write_r+0x1e>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	2000030c 	.word	0x2000030c

08004120 <__errno>:
 8004120:	4b01      	ldr	r3, [pc, #4]	@ (8004128 <__errno+0x8>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000018 	.word	0x20000018

0800412c <__libc_init_array>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	4d0d      	ldr	r5, [pc, #52]	@ (8004164 <__libc_init_array+0x38>)
 8004130:	4c0d      	ldr	r4, [pc, #52]	@ (8004168 <__libc_init_array+0x3c>)
 8004132:	1b64      	subs	r4, r4, r5
 8004134:	10a4      	asrs	r4, r4, #2
 8004136:	2600      	movs	r6, #0
 8004138:	42a6      	cmp	r6, r4
 800413a:	d109      	bne.n	8004150 <__libc_init_array+0x24>
 800413c:	4d0b      	ldr	r5, [pc, #44]	@ (800416c <__libc_init_array+0x40>)
 800413e:	4c0c      	ldr	r4, [pc, #48]	@ (8004170 <__libc_init_array+0x44>)
 8004140:	f000 fed8 	bl	8004ef4 <_init>
 8004144:	1b64      	subs	r4, r4, r5
 8004146:	10a4      	asrs	r4, r4, #2
 8004148:	2600      	movs	r6, #0
 800414a:	42a6      	cmp	r6, r4
 800414c:	d105      	bne.n	800415a <__libc_init_array+0x2e>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	f855 3b04 	ldr.w	r3, [r5], #4
 8004154:	4798      	blx	r3
 8004156:	3601      	adds	r6, #1
 8004158:	e7ee      	b.n	8004138 <__libc_init_array+0xc>
 800415a:	f855 3b04 	ldr.w	r3, [r5], #4
 800415e:	4798      	blx	r3
 8004160:	3601      	adds	r6, #1
 8004162:	e7f2      	b.n	800414a <__libc_init_array+0x1e>
 8004164:	080050e0 	.word	0x080050e0
 8004168:	080050e0 	.word	0x080050e0
 800416c:	080050e0 	.word	0x080050e0
 8004170:	080050e4 	.word	0x080050e4

08004174 <__retarget_lock_init_recursive>:
 8004174:	4770      	bx	lr

08004176 <__retarget_lock_acquire_recursive>:
 8004176:	4770      	bx	lr

08004178 <__retarget_lock_release_recursive>:
 8004178:	4770      	bx	lr
	...

0800417c <_free_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4605      	mov	r5, r0
 8004180:	2900      	cmp	r1, #0
 8004182:	d041      	beq.n	8004208 <_free_r+0x8c>
 8004184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004188:	1f0c      	subs	r4, r1, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	bfb8      	it	lt
 800418e:	18e4      	addlt	r4, r4, r3
 8004190:	f000 f8e0 	bl	8004354 <__malloc_lock>
 8004194:	4a1d      	ldr	r2, [pc, #116]	@ (800420c <_free_r+0x90>)
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	b933      	cbnz	r3, 80041a8 <_free_r+0x2c>
 800419a:	6063      	str	r3, [r4, #4]
 800419c:	6014      	str	r4, [r2, #0]
 800419e:	4628      	mov	r0, r5
 80041a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041a4:	f000 b8dc 	b.w	8004360 <__malloc_unlock>
 80041a8:	42a3      	cmp	r3, r4
 80041aa:	d908      	bls.n	80041be <_free_r+0x42>
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	1821      	adds	r1, r4, r0
 80041b0:	428b      	cmp	r3, r1
 80041b2:	bf01      	itttt	eq
 80041b4:	6819      	ldreq	r1, [r3, #0]
 80041b6:	685b      	ldreq	r3, [r3, #4]
 80041b8:	1809      	addeq	r1, r1, r0
 80041ba:	6021      	streq	r1, [r4, #0]
 80041bc:	e7ed      	b.n	800419a <_free_r+0x1e>
 80041be:	461a      	mov	r2, r3
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	b10b      	cbz	r3, 80041c8 <_free_r+0x4c>
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	d9fa      	bls.n	80041be <_free_r+0x42>
 80041c8:	6811      	ldr	r1, [r2, #0]
 80041ca:	1850      	adds	r0, r2, r1
 80041cc:	42a0      	cmp	r0, r4
 80041ce:	d10b      	bne.n	80041e8 <_free_r+0x6c>
 80041d0:	6820      	ldr	r0, [r4, #0]
 80041d2:	4401      	add	r1, r0
 80041d4:	1850      	adds	r0, r2, r1
 80041d6:	4283      	cmp	r3, r0
 80041d8:	6011      	str	r1, [r2, #0]
 80041da:	d1e0      	bne.n	800419e <_free_r+0x22>
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	6053      	str	r3, [r2, #4]
 80041e2:	4408      	add	r0, r1
 80041e4:	6010      	str	r0, [r2, #0]
 80041e6:	e7da      	b.n	800419e <_free_r+0x22>
 80041e8:	d902      	bls.n	80041f0 <_free_r+0x74>
 80041ea:	230c      	movs	r3, #12
 80041ec:	602b      	str	r3, [r5, #0]
 80041ee:	e7d6      	b.n	800419e <_free_r+0x22>
 80041f0:	6820      	ldr	r0, [r4, #0]
 80041f2:	1821      	adds	r1, r4, r0
 80041f4:	428b      	cmp	r3, r1
 80041f6:	bf04      	itt	eq
 80041f8:	6819      	ldreq	r1, [r3, #0]
 80041fa:	685b      	ldreq	r3, [r3, #4]
 80041fc:	6063      	str	r3, [r4, #4]
 80041fe:	bf04      	itt	eq
 8004200:	1809      	addeq	r1, r1, r0
 8004202:	6021      	streq	r1, [r4, #0]
 8004204:	6054      	str	r4, [r2, #4]
 8004206:	e7ca      	b.n	800419e <_free_r+0x22>
 8004208:	bd38      	pop	{r3, r4, r5, pc}
 800420a:	bf00      	nop
 800420c:	20000318 	.word	0x20000318

08004210 <sbrk_aligned>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	4e0f      	ldr	r6, [pc, #60]	@ (8004250 <sbrk_aligned+0x40>)
 8004214:	460c      	mov	r4, r1
 8004216:	6831      	ldr	r1, [r6, #0]
 8004218:	4605      	mov	r5, r0
 800421a:	b911      	cbnz	r1, 8004222 <sbrk_aligned+0x12>
 800421c:	f000 fe16 	bl	8004e4c <_sbrk_r>
 8004220:	6030      	str	r0, [r6, #0]
 8004222:	4621      	mov	r1, r4
 8004224:	4628      	mov	r0, r5
 8004226:	f000 fe11 	bl	8004e4c <_sbrk_r>
 800422a:	1c43      	adds	r3, r0, #1
 800422c:	d103      	bne.n	8004236 <sbrk_aligned+0x26>
 800422e:	f04f 34ff 	mov.w	r4, #4294967295
 8004232:	4620      	mov	r0, r4
 8004234:	bd70      	pop	{r4, r5, r6, pc}
 8004236:	1cc4      	adds	r4, r0, #3
 8004238:	f024 0403 	bic.w	r4, r4, #3
 800423c:	42a0      	cmp	r0, r4
 800423e:	d0f8      	beq.n	8004232 <sbrk_aligned+0x22>
 8004240:	1a21      	subs	r1, r4, r0
 8004242:	4628      	mov	r0, r5
 8004244:	f000 fe02 	bl	8004e4c <_sbrk_r>
 8004248:	3001      	adds	r0, #1
 800424a:	d1f2      	bne.n	8004232 <sbrk_aligned+0x22>
 800424c:	e7ef      	b.n	800422e <sbrk_aligned+0x1e>
 800424e:	bf00      	nop
 8004250:	20000314 	.word	0x20000314

08004254 <_malloc_r>:
 8004254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004258:	1ccd      	adds	r5, r1, #3
 800425a:	f025 0503 	bic.w	r5, r5, #3
 800425e:	3508      	adds	r5, #8
 8004260:	2d0c      	cmp	r5, #12
 8004262:	bf38      	it	cc
 8004264:	250c      	movcc	r5, #12
 8004266:	2d00      	cmp	r5, #0
 8004268:	4606      	mov	r6, r0
 800426a:	db01      	blt.n	8004270 <_malloc_r+0x1c>
 800426c:	42a9      	cmp	r1, r5
 800426e:	d904      	bls.n	800427a <_malloc_r+0x26>
 8004270:	230c      	movs	r3, #12
 8004272:	6033      	str	r3, [r6, #0]
 8004274:	2000      	movs	r0, #0
 8004276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004350 <_malloc_r+0xfc>
 800427e:	f000 f869 	bl	8004354 <__malloc_lock>
 8004282:	f8d8 3000 	ldr.w	r3, [r8]
 8004286:	461c      	mov	r4, r3
 8004288:	bb44      	cbnz	r4, 80042dc <_malloc_r+0x88>
 800428a:	4629      	mov	r1, r5
 800428c:	4630      	mov	r0, r6
 800428e:	f7ff ffbf 	bl	8004210 <sbrk_aligned>
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	4604      	mov	r4, r0
 8004296:	d158      	bne.n	800434a <_malloc_r+0xf6>
 8004298:	f8d8 4000 	ldr.w	r4, [r8]
 800429c:	4627      	mov	r7, r4
 800429e:	2f00      	cmp	r7, #0
 80042a0:	d143      	bne.n	800432a <_malloc_r+0xd6>
 80042a2:	2c00      	cmp	r4, #0
 80042a4:	d04b      	beq.n	800433e <_malloc_r+0xea>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	4639      	mov	r1, r7
 80042aa:	4630      	mov	r0, r6
 80042ac:	eb04 0903 	add.w	r9, r4, r3
 80042b0:	f000 fdcc 	bl	8004e4c <_sbrk_r>
 80042b4:	4581      	cmp	r9, r0
 80042b6:	d142      	bne.n	800433e <_malloc_r+0xea>
 80042b8:	6821      	ldr	r1, [r4, #0]
 80042ba:	1a6d      	subs	r5, r5, r1
 80042bc:	4629      	mov	r1, r5
 80042be:	4630      	mov	r0, r6
 80042c0:	f7ff ffa6 	bl	8004210 <sbrk_aligned>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d03a      	beq.n	800433e <_malloc_r+0xea>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	442b      	add	r3, r5
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	f8d8 3000 	ldr.w	r3, [r8]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	bb62      	cbnz	r2, 8004330 <_malloc_r+0xdc>
 80042d6:	f8c8 7000 	str.w	r7, [r8]
 80042da:	e00f      	b.n	80042fc <_malloc_r+0xa8>
 80042dc:	6822      	ldr	r2, [r4, #0]
 80042de:	1b52      	subs	r2, r2, r5
 80042e0:	d420      	bmi.n	8004324 <_malloc_r+0xd0>
 80042e2:	2a0b      	cmp	r2, #11
 80042e4:	d917      	bls.n	8004316 <_malloc_r+0xc2>
 80042e6:	1961      	adds	r1, r4, r5
 80042e8:	42a3      	cmp	r3, r4
 80042ea:	6025      	str	r5, [r4, #0]
 80042ec:	bf18      	it	ne
 80042ee:	6059      	strne	r1, [r3, #4]
 80042f0:	6863      	ldr	r3, [r4, #4]
 80042f2:	bf08      	it	eq
 80042f4:	f8c8 1000 	streq.w	r1, [r8]
 80042f8:	5162      	str	r2, [r4, r5]
 80042fa:	604b      	str	r3, [r1, #4]
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 f82f 	bl	8004360 <__malloc_unlock>
 8004302:	f104 000b 	add.w	r0, r4, #11
 8004306:	1d23      	adds	r3, r4, #4
 8004308:	f020 0007 	bic.w	r0, r0, #7
 800430c:	1ac2      	subs	r2, r0, r3
 800430e:	bf1c      	itt	ne
 8004310:	1a1b      	subne	r3, r3, r0
 8004312:	50a3      	strne	r3, [r4, r2]
 8004314:	e7af      	b.n	8004276 <_malloc_r+0x22>
 8004316:	6862      	ldr	r2, [r4, #4]
 8004318:	42a3      	cmp	r3, r4
 800431a:	bf0c      	ite	eq
 800431c:	f8c8 2000 	streq.w	r2, [r8]
 8004320:	605a      	strne	r2, [r3, #4]
 8004322:	e7eb      	b.n	80042fc <_malloc_r+0xa8>
 8004324:	4623      	mov	r3, r4
 8004326:	6864      	ldr	r4, [r4, #4]
 8004328:	e7ae      	b.n	8004288 <_malloc_r+0x34>
 800432a:	463c      	mov	r4, r7
 800432c:	687f      	ldr	r7, [r7, #4]
 800432e:	e7b6      	b.n	800429e <_malloc_r+0x4a>
 8004330:	461a      	mov	r2, r3
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	42a3      	cmp	r3, r4
 8004336:	d1fb      	bne.n	8004330 <_malloc_r+0xdc>
 8004338:	2300      	movs	r3, #0
 800433a:	6053      	str	r3, [r2, #4]
 800433c:	e7de      	b.n	80042fc <_malloc_r+0xa8>
 800433e:	230c      	movs	r3, #12
 8004340:	6033      	str	r3, [r6, #0]
 8004342:	4630      	mov	r0, r6
 8004344:	f000 f80c 	bl	8004360 <__malloc_unlock>
 8004348:	e794      	b.n	8004274 <_malloc_r+0x20>
 800434a:	6005      	str	r5, [r0, #0]
 800434c:	e7d6      	b.n	80042fc <_malloc_r+0xa8>
 800434e:	bf00      	nop
 8004350:	20000318 	.word	0x20000318

08004354 <__malloc_lock>:
 8004354:	4801      	ldr	r0, [pc, #4]	@ (800435c <__malloc_lock+0x8>)
 8004356:	f7ff bf0e 	b.w	8004176 <__retarget_lock_acquire_recursive>
 800435a:	bf00      	nop
 800435c:	20000310 	.word	0x20000310

08004360 <__malloc_unlock>:
 8004360:	4801      	ldr	r0, [pc, #4]	@ (8004368 <__malloc_unlock+0x8>)
 8004362:	f7ff bf09 	b.w	8004178 <__retarget_lock_release_recursive>
 8004366:	bf00      	nop
 8004368:	20000310 	.word	0x20000310

0800436c <__ssputs_r>:
 800436c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004370:	688e      	ldr	r6, [r1, #8]
 8004372:	461f      	mov	r7, r3
 8004374:	42be      	cmp	r6, r7
 8004376:	680b      	ldr	r3, [r1, #0]
 8004378:	4682      	mov	sl, r0
 800437a:	460c      	mov	r4, r1
 800437c:	4690      	mov	r8, r2
 800437e:	d82d      	bhi.n	80043dc <__ssputs_r+0x70>
 8004380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004384:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004388:	d026      	beq.n	80043d8 <__ssputs_r+0x6c>
 800438a:	6965      	ldr	r5, [r4, #20]
 800438c:	6909      	ldr	r1, [r1, #16]
 800438e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004392:	eba3 0901 	sub.w	r9, r3, r1
 8004396:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800439a:	1c7b      	adds	r3, r7, #1
 800439c:	444b      	add	r3, r9
 800439e:	106d      	asrs	r5, r5, #1
 80043a0:	429d      	cmp	r5, r3
 80043a2:	bf38      	it	cc
 80043a4:	461d      	movcc	r5, r3
 80043a6:	0553      	lsls	r3, r2, #21
 80043a8:	d527      	bpl.n	80043fa <__ssputs_r+0x8e>
 80043aa:	4629      	mov	r1, r5
 80043ac:	f7ff ff52 	bl	8004254 <_malloc_r>
 80043b0:	4606      	mov	r6, r0
 80043b2:	b360      	cbz	r0, 800440e <__ssputs_r+0xa2>
 80043b4:	6921      	ldr	r1, [r4, #16]
 80043b6:	464a      	mov	r2, r9
 80043b8:	f000 fd58 	bl	8004e6c <memcpy>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	6126      	str	r6, [r4, #16]
 80043ca:	6165      	str	r5, [r4, #20]
 80043cc:	444e      	add	r6, r9
 80043ce:	eba5 0509 	sub.w	r5, r5, r9
 80043d2:	6026      	str	r6, [r4, #0]
 80043d4:	60a5      	str	r5, [r4, #8]
 80043d6:	463e      	mov	r6, r7
 80043d8:	42be      	cmp	r6, r7
 80043da:	d900      	bls.n	80043de <__ssputs_r+0x72>
 80043dc:	463e      	mov	r6, r7
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	4632      	mov	r2, r6
 80043e2:	4641      	mov	r1, r8
 80043e4:	f000 fcf6 	bl	8004dd4 <memmove>
 80043e8:	68a3      	ldr	r3, [r4, #8]
 80043ea:	1b9b      	subs	r3, r3, r6
 80043ec:	60a3      	str	r3, [r4, #8]
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	4433      	add	r3, r6
 80043f2:	6023      	str	r3, [r4, #0]
 80043f4:	2000      	movs	r0, #0
 80043f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fa:	462a      	mov	r2, r5
 80043fc:	f000 fd44 	bl	8004e88 <_realloc_r>
 8004400:	4606      	mov	r6, r0
 8004402:	2800      	cmp	r0, #0
 8004404:	d1e0      	bne.n	80043c8 <__ssputs_r+0x5c>
 8004406:	6921      	ldr	r1, [r4, #16]
 8004408:	4650      	mov	r0, sl
 800440a:	f7ff feb7 	bl	800417c <_free_r>
 800440e:	230c      	movs	r3, #12
 8004410:	f8ca 3000 	str.w	r3, [sl]
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800441a:	81a3      	strh	r3, [r4, #12]
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	e7e9      	b.n	80043f6 <__ssputs_r+0x8a>
	...

08004424 <_svfiprintf_r>:
 8004424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004428:	4698      	mov	r8, r3
 800442a:	898b      	ldrh	r3, [r1, #12]
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	b09d      	sub	sp, #116	@ 0x74
 8004430:	4607      	mov	r7, r0
 8004432:	460d      	mov	r5, r1
 8004434:	4614      	mov	r4, r2
 8004436:	d510      	bpl.n	800445a <_svfiprintf_r+0x36>
 8004438:	690b      	ldr	r3, [r1, #16]
 800443a:	b973      	cbnz	r3, 800445a <_svfiprintf_r+0x36>
 800443c:	2140      	movs	r1, #64	@ 0x40
 800443e:	f7ff ff09 	bl	8004254 <_malloc_r>
 8004442:	6028      	str	r0, [r5, #0]
 8004444:	6128      	str	r0, [r5, #16]
 8004446:	b930      	cbnz	r0, 8004456 <_svfiprintf_r+0x32>
 8004448:	230c      	movs	r3, #12
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	b01d      	add	sp, #116	@ 0x74
 8004452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004456:	2340      	movs	r3, #64	@ 0x40
 8004458:	616b      	str	r3, [r5, #20]
 800445a:	2300      	movs	r3, #0
 800445c:	9309      	str	r3, [sp, #36]	@ 0x24
 800445e:	2320      	movs	r3, #32
 8004460:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004464:	f8cd 800c 	str.w	r8, [sp, #12]
 8004468:	2330      	movs	r3, #48	@ 0x30
 800446a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004608 <_svfiprintf_r+0x1e4>
 800446e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004472:	f04f 0901 	mov.w	r9, #1
 8004476:	4623      	mov	r3, r4
 8004478:	469a      	mov	sl, r3
 800447a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800447e:	b10a      	cbz	r2, 8004484 <_svfiprintf_r+0x60>
 8004480:	2a25      	cmp	r2, #37	@ 0x25
 8004482:	d1f9      	bne.n	8004478 <_svfiprintf_r+0x54>
 8004484:	ebba 0b04 	subs.w	fp, sl, r4
 8004488:	d00b      	beq.n	80044a2 <_svfiprintf_r+0x7e>
 800448a:	465b      	mov	r3, fp
 800448c:	4622      	mov	r2, r4
 800448e:	4629      	mov	r1, r5
 8004490:	4638      	mov	r0, r7
 8004492:	f7ff ff6b 	bl	800436c <__ssputs_r>
 8004496:	3001      	adds	r0, #1
 8004498:	f000 80a7 	beq.w	80045ea <_svfiprintf_r+0x1c6>
 800449c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800449e:	445a      	add	r2, fp
 80044a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80044a2:	f89a 3000 	ldrb.w	r3, [sl]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 809f 	beq.w	80045ea <_svfiprintf_r+0x1c6>
 80044ac:	2300      	movs	r3, #0
 80044ae:	f04f 32ff 	mov.w	r2, #4294967295
 80044b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044b6:	f10a 0a01 	add.w	sl, sl, #1
 80044ba:	9304      	str	r3, [sp, #16]
 80044bc:	9307      	str	r3, [sp, #28]
 80044be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80044c4:	4654      	mov	r4, sl
 80044c6:	2205      	movs	r2, #5
 80044c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044cc:	484e      	ldr	r0, [pc, #312]	@ (8004608 <_svfiprintf_r+0x1e4>)
 80044ce:	f7fb fe87 	bl	80001e0 <memchr>
 80044d2:	9a04      	ldr	r2, [sp, #16]
 80044d4:	b9d8      	cbnz	r0, 800450e <_svfiprintf_r+0xea>
 80044d6:	06d0      	lsls	r0, r2, #27
 80044d8:	bf44      	itt	mi
 80044da:	2320      	movmi	r3, #32
 80044dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044e0:	0711      	lsls	r1, r2, #28
 80044e2:	bf44      	itt	mi
 80044e4:	232b      	movmi	r3, #43	@ 0x2b
 80044e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ea:	f89a 3000 	ldrb.w	r3, [sl]
 80044ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80044f0:	d015      	beq.n	800451e <_svfiprintf_r+0xfa>
 80044f2:	9a07      	ldr	r2, [sp, #28]
 80044f4:	4654      	mov	r4, sl
 80044f6:	2000      	movs	r0, #0
 80044f8:	f04f 0c0a 	mov.w	ip, #10
 80044fc:	4621      	mov	r1, r4
 80044fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004502:	3b30      	subs	r3, #48	@ 0x30
 8004504:	2b09      	cmp	r3, #9
 8004506:	d94b      	bls.n	80045a0 <_svfiprintf_r+0x17c>
 8004508:	b1b0      	cbz	r0, 8004538 <_svfiprintf_r+0x114>
 800450a:	9207      	str	r2, [sp, #28]
 800450c:	e014      	b.n	8004538 <_svfiprintf_r+0x114>
 800450e:	eba0 0308 	sub.w	r3, r0, r8
 8004512:	fa09 f303 	lsl.w	r3, r9, r3
 8004516:	4313      	orrs	r3, r2
 8004518:	9304      	str	r3, [sp, #16]
 800451a:	46a2      	mov	sl, r4
 800451c:	e7d2      	b.n	80044c4 <_svfiprintf_r+0xa0>
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	1d19      	adds	r1, r3, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	9103      	str	r1, [sp, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	bfbb      	ittet	lt
 800452a:	425b      	neglt	r3, r3
 800452c:	f042 0202 	orrlt.w	r2, r2, #2
 8004530:	9307      	strge	r3, [sp, #28]
 8004532:	9307      	strlt	r3, [sp, #28]
 8004534:	bfb8      	it	lt
 8004536:	9204      	strlt	r2, [sp, #16]
 8004538:	7823      	ldrb	r3, [r4, #0]
 800453a:	2b2e      	cmp	r3, #46	@ 0x2e
 800453c:	d10a      	bne.n	8004554 <_svfiprintf_r+0x130>
 800453e:	7863      	ldrb	r3, [r4, #1]
 8004540:	2b2a      	cmp	r3, #42	@ 0x2a
 8004542:	d132      	bne.n	80045aa <_svfiprintf_r+0x186>
 8004544:	9b03      	ldr	r3, [sp, #12]
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	9203      	str	r2, [sp, #12]
 800454c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004550:	3402      	adds	r4, #2
 8004552:	9305      	str	r3, [sp, #20]
 8004554:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004618 <_svfiprintf_r+0x1f4>
 8004558:	7821      	ldrb	r1, [r4, #0]
 800455a:	2203      	movs	r2, #3
 800455c:	4650      	mov	r0, sl
 800455e:	f7fb fe3f 	bl	80001e0 <memchr>
 8004562:	b138      	cbz	r0, 8004574 <_svfiprintf_r+0x150>
 8004564:	9b04      	ldr	r3, [sp, #16]
 8004566:	eba0 000a 	sub.w	r0, r0, sl
 800456a:	2240      	movs	r2, #64	@ 0x40
 800456c:	4082      	lsls	r2, r0
 800456e:	4313      	orrs	r3, r2
 8004570:	3401      	adds	r4, #1
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004578:	4824      	ldr	r0, [pc, #144]	@ (800460c <_svfiprintf_r+0x1e8>)
 800457a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800457e:	2206      	movs	r2, #6
 8004580:	f7fb fe2e 	bl	80001e0 <memchr>
 8004584:	2800      	cmp	r0, #0
 8004586:	d036      	beq.n	80045f6 <_svfiprintf_r+0x1d2>
 8004588:	4b21      	ldr	r3, [pc, #132]	@ (8004610 <_svfiprintf_r+0x1ec>)
 800458a:	bb1b      	cbnz	r3, 80045d4 <_svfiprintf_r+0x1b0>
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	3307      	adds	r3, #7
 8004590:	f023 0307 	bic.w	r3, r3, #7
 8004594:	3308      	adds	r3, #8
 8004596:	9303      	str	r3, [sp, #12]
 8004598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800459a:	4433      	add	r3, r6
 800459c:	9309      	str	r3, [sp, #36]	@ 0x24
 800459e:	e76a      	b.n	8004476 <_svfiprintf_r+0x52>
 80045a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80045a4:	460c      	mov	r4, r1
 80045a6:	2001      	movs	r0, #1
 80045a8:	e7a8      	b.n	80044fc <_svfiprintf_r+0xd8>
 80045aa:	2300      	movs	r3, #0
 80045ac:	3401      	adds	r4, #1
 80045ae:	9305      	str	r3, [sp, #20]
 80045b0:	4619      	mov	r1, r3
 80045b2:	f04f 0c0a 	mov.w	ip, #10
 80045b6:	4620      	mov	r0, r4
 80045b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045bc:	3a30      	subs	r2, #48	@ 0x30
 80045be:	2a09      	cmp	r2, #9
 80045c0:	d903      	bls.n	80045ca <_svfiprintf_r+0x1a6>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0c6      	beq.n	8004554 <_svfiprintf_r+0x130>
 80045c6:	9105      	str	r1, [sp, #20]
 80045c8:	e7c4      	b.n	8004554 <_svfiprintf_r+0x130>
 80045ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ce:	4604      	mov	r4, r0
 80045d0:	2301      	movs	r3, #1
 80045d2:	e7f0      	b.n	80045b6 <_svfiprintf_r+0x192>
 80045d4:	ab03      	add	r3, sp, #12
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	462a      	mov	r2, r5
 80045da:	4b0e      	ldr	r3, [pc, #56]	@ (8004614 <_svfiprintf_r+0x1f0>)
 80045dc:	a904      	add	r1, sp, #16
 80045de:	4638      	mov	r0, r7
 80045e0:	f3af 8000 	nop.w
 80045e4:	1c42      	adds	r2, r0, #1
 80045e6:	4606      	mov	r6, r0
 80045e8:	d1d6      	bne.n	8004598 <_svfiprintf_r+0x174>
 80045ea:	89ab      	ldrh	r3, [r5, #12]
 80045ec:	065b      	lsls	r3, r3, #25
 80045ee:	f53f af2d 	bmi.w	800444c <_svfiprintf_r+0x28>
 80045f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045f4:	e72c      	b.n	8004450 <_svfiprintf_r+0x2c>
 80045f6:	ab03      	add	r3, sp, #12
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	462a      	mov	r2, r5
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <_svfiprintf_r+0x1f0>)
 80045fe:	a904      	add	r1, sp, #16
 8004600:	4638      	mov	r0, r7
 8004602:	f000 f9bb 	bl	800497c <_printf_i>
 8004606:	e7ed      	b.n	80045e4 <_svfiprintf_r+0x1c0>
 8004608:	080050a4 	.word	0x080050a4
 800460c:	080050ae 	.word	0x080050ae
 8004610:	00000000 	.word	0x00000000
 8004614:	0800436d 	.word	0x0800436d
 8004618:	080050aa 	.word	0x080050aa

0800461c <__sfputc_r>:
 800461c:	6893      	ldr	r3, [r2, #8]
 800461e:	3b01      	subs	r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	b410      	push	{r4}
 8004624:	6093      	str	r3, [r2, #8]
 8004626:	da08      	bge.n	800463a <__sfputc_r+0x1e>
 8004628:	6994      	ldr	r4, [r2, #24]
 800462a:	42a3      	cmp	r3, r4
 800462c:	db01      	blt.n	8004632 <__sfputc_r+0x16>
 800462e:	290a      	cmp	r1, #10
 8004630:	d103      	bne.n	800463a <__sfputc_r+0x1e>
 8004632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004636:	f7ff bc90 	b.w	8003f5a <__swbuf_r>
 800463a:	6813      	ldr	r3, [r2, #0]
 800463c:	1c58      	adds	r0, r3, #1
 800463e:	6010      	str	r0, [r2, #0]
 8004640:	7019      	strb	r1, [r3, #0]
 8004642:	4608      	mov	r0, r1
 8004644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004648:	4770      	bx	lr

0800464a <__sfputs_r>:
 800464a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464c:	4606      	mov	r6, r0
 800464e:	460f      	mov	r7, r1
 8004650:	4614      	mov	r4, r2
 8004652:	18d5      	adds	r5, r2, r3
 8004654:	42ac      	cmp	r4, r5
 8004656:	d101      	bne.n	800465c <__sfputs_r+0x12>
 8004658:	2000      	movs	r0, #0
 800465a:	e007      	b.n	800466c <__sfputs_r+0x22>
 800465c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004660:	463a      	mov	r2, r7
 8004662:	4630      	mov	r0, r6
 8004664:	f7ff ffda 	bl	800461c <__sfputc_r>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d1f3      	bne.n	8004654 <__sfputs_r+0xa>
 800466c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004670 <_vfiprintf_r>:
 8004670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	460d      	mov	r5, r1
 8004676:	b09d      	sub	sp, #116	@ 0x74
 8004678:	4614      	mov	r4, r2
 800467a:	4698      	mov	r8, r3
 800467c:	4606      	mov	r6, r0
 800467e:	b118      	cbz	r0, 8004688 <_vfiprintf_r+0x18>
 8004680:	6a03      	ldr	r3, [r0, #32]
 8004682:	b90b      	cbnz	r3, 8004688 <_vfiprintf_r+0x18>
 8004684:	f7ff fb5e 	bl	8003d44 <__sinit>
 8004688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800468a:	07d9      	lsls	r1, r3, #31
 800468c:	d405      	bmi.n	800469a <_vfiprintf_r+0x2a>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	059a      	lsls	r2, r3, #22
 8004692:	d402      	bmi.n	800469a <_vfiprintf_r+0x2a>
 8004694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004696:	f7ff fd6e 	bl	8004176 <__retarget_lock_acquire_recursive>
 800469a:	89ab      	ldrh	r3, [r5, #12]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	d501      	bpl.n	80046a4 <_vfiprintf_r+0x34>
 80046a0:	692b      	ldr	r3, [r5, #16]
 80046a2:	b99b      	cbnz	r3, 80046cc <_vfiprintf_r+0x5c>
 80046a4:	4629      	mov	r1, r5
 80046a6:	4630      	mov	r0, r6
 80046a8:	f7ff fc96 	bl	8003fd8 <__swsetup_r>
 80046ac:	b170      	cbz	r0, 80046cc <_vfiprintf_r+0x5c>
 80046ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046b0:	07dc      	lsls	r4, r3, #31
 80046b2:	d504      	bpl.n	80046be <_vfiprintf_r+0x4e>
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	b01d      	add	sp, #116	@ 0x74
 80046ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	0598      	lsls	r0, r3, #22
 80046c2:	d4f7      	bmi.n	80046b4 <_vfiprintf_r+0x44>
 80046c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046c6:	f7ff fd57 	bl	8004178 <__retarget_lock_release_recursive>
 80046ca:	e7f3      	b.n	80046b4 <_vfiprintf_r+0x44>
 80046cc:	2300      	movs	r3, #0
 80046ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80046d0:	2320      	movs	r3, #32
 80046d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80046da:	2330      	movs	r3, #48	@ 0x30
 80046dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800488c <_vfiprintf_r+0x21c>
 80046e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046e4:	f04f 0901 	mov.w	r9, #1
 80046e8:	4623      	mov	r3, r4
 80046ea:	469a      	mov	sl, r3
 80046ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046f0:	b10a      	cbz	r2, 80046f6 <_vfiprintf_r+0x86>
 80046f2:	2a25      	cmp	r2, #37	@ 0x25
 80046f4:	d1f9      	bne.n	80046ea <_vfiprintf_r+0x7a>
 80046f6:	ebba 0b04 	subs.w	fp, sl, r4
 80046fa:	d00b      	beq.n	8004714 <_vfiprintf_r+0xa4>
 80046fc:	465b      	mov	r3, fp
 80046fe:	4622      	mov	r2, r4
 8004700:	4629      	mov	r1, r5
 8004702:	4630      	mov	r0, r6
 8004704:	f7ff ffa1 	bl	800464a <__sfputs_r>
 8004708:	3001      	adds	r0, #1
 800470a:	f000 80a7 	beq.w	800485c <_vfiprintf_r+0x1ec>
 800470e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004710:	445a      	add	r2, fp
 8004712:	9209      	str	r2, [sp, #36]	@ 0x24
 8004714:	f89a 3000 	ldrb.w	r3, [sl]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 809f 	beq.w	800485c <_vfiprintf_r+0x1ec>
 800471e:	2300      	movs	r3, #0
 8004720:	f04f 32ff 	mov.w	r2, #4294967295
 8004724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004728:	f10a 0a01 	add.w	sl, sl, #1
 800472c:	9304      	str	r3, [sp, #16]
 800472e:	9307      	str	r3, [sp, #28]
 8004730:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004734:	931a      	str	r3, [sp, #104]	@ 0x68
 8004736:	4654      	mov	r4, sl
 8004738:	2205      	movs	r2, #5
 800473a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473e:	4853      	ldr	r0, [pc, #332]	@ (800488c <_vfiprintf_r+0x21c>)
 8004740:	f7fb fd4e 	bl	80001e0 <memchr>
 8004744:	9a04      	ldr	r2, [sp, #16]
 8004746:	b9d8      	cbnz	r0, 8004780 <_vfiprintf_r+0x110>
 8004748:	06d1      	lsls	r1, r2, #27
 800474a:	bf44      	itt	mi
 800474c:	2320      	movmi	r3, #32
 800474e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004752:	0713      	lsls	r3, r2, #28
 8004754:	bf44      	itt	mi
 8004756:	232b      	movmi	r3, #43	@ 0x2b
 8004758:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800475c:	f89a 3000 	ldrb.w	r3, [sl]
 8004760:	2b2a      	cmp	r3, #42	@ 0x2a
 8004762:	d015      	beq.n	8004790 <_vfiprintf_r+0x120>
 8004764:	9a07      	ldr	r2, [sp, #28]
 8004766:	4654      	mov	r4, sl
 8004768:	2000      	movs	r0, #0
 800476a:	f04f 0c0a 	mov.w	ip, #10
 800476e:	4621      	mov	r1, r4
 8004770:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004774:	3b30      	subs	r3, #48	@ 0x30
 8004776:	2b09      	cmp	r3, #9
 8004778:	d94b      	bls.n	8004812 <_vfiprintf_r+0x1a2>
 800477a:	b1b0      	cbz	r0, 80047aa <_vfiprintf_r+0x13a>
 800477c:	9207      	str	r2, [sp, #28]
 800477e:	e014      	b.n	80047aa <_vfiprintf_r+0x13a>
 8004780:	eba0 0308 	sub.w	r3, r0, r8
 8004784:	fa09 f303 	lsl.w	r3, r9, r3
 8004788:	4313      	orrs	r3, r2
 800478a:	9304      	str	r3, [sp, #16]
 800478c:	46a2      	mov	sl, r4
 800478e:	e7d2      	b.n	8004736 <_vfiprintf_r+0xc6>
 8004790:	9b03      	ldr	r3, [sp, #12]
 8004792:	1d19      	adds	r1, r3, #4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	9103      	str	r1, [sp, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	bfbb      	ittet	lt
 800479c:	425b      	neglt	r3, r3
 800479e:	f042 0202 	orrlt.w	r2, r2, #2
 80047a2:	9307      	strge	r3, [sp, #28]
 80047a4:	9307      	strlt	r3, [sp, #28]
 80047a6:	bfb8      	it	lt
 80047a8:	9204      	strlt	r2, [sp, #16]
 80047aa:	7823      	ldrb	r3, [r4, #0]
 80047ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80047ae:	d10a      	bne.n	80047c6 <_vfiprintf_r+0x156>
 80047b0:	7863      	ldrb	r3, [r4, #1]
 80047b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80047b4:	d132      	bne.n	800481c <_vfiprintf_r+0x1ac>
 80047b6:	9b03      	ldr	r3, [sp, #12]
 80047b8:	1d1a      	adds	r2, r3, #4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	9203      	str	r2, [sp, #12]
 80047be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047c2:	3402      	adds	r4, #2
 80047c4:	9305      	str	r3, [sp, #20]
 80047c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800489c <_vfiprintf_r+0x22c>
 80047ca:	7821      	ldrb	r1, [r4, #0]
 80047cc:	2203      	movs	r2, #3
 80047ce:	4650      	mov	r0, sl
 80047d0:	f7fb fd06 	bl	80001e0 <memchr>
 80047d4:	b138      	cbz	r0, 80047e6 <_vfiprintf_r+0x176>
 80047d6:	9b04      	ldr	r3, [sp, #16]
 80047d8:	eba0 000a 	sub.w	r0, r0, sl
 80047dc:	2240      	movs	r2, #64	@ 0x40
 80047de:	4082      	lsls	r2, r0
 80047e0:	4313      	orrs	r3, r2
 80047e2:	3401      	adds	r4, #1
 80047e4:	9304      	str	r3, [sp, #16]
 80047e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ea:	4829      	ldr	r0, [pc, #164]	@ (8004890 <_vfiprintf_r+0x220>)
 80047ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047f0:	2206      	movs	r2, #6
 80047f2:	f7fb fcf5 	bl	80001e0 <memchr>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d03f      	beq.n	800487a <_vfiprintf_r+0x20a>
 80047fa:	4b26      	ldr	r3, [pc, #152]	@ (8004894 <_vfiprintf_r+0x224>)
 80047fc:	bb1b      	cbnz	r3, 8004846 <_vfiprintf_r+0x1d6>
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	3307      	adds	r3, #7
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	3308      	adds	r3, #8
 8004808:	9303      	str	r3, [sp, #12]
 800480a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800480c:	443b      	add	r3, r7
 800480e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004810:	e76a      	b.n	80046e8 <_vfiprintf_r+0x78>
 8004812:	fb0c 3202 	mla	r2, ip, r2, r3
 8004816:	460c      	mov	r4, r1
 8004818:	2001      	movs	r0, #1
 800481a:	e7a8      	b.n	800476e <_vfiprintf_r+0xfe>
 800481c:	2300      	movs	r3, #0
 800481e:	3401      	adds	r4, #1
 8004820:	9305      	str	r3, [sp, #20]
 8004822:	4619      	mov	r1, r3
 8004824:	f04f 0c0a 	mov.w	ip, #10
 8004828:	4620      	mov	r0, r4
 800482a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800482e:	3a30      	subs	r2, #48	@ 0x30
 8004830:	2a09      	cmp	r2, #9
 8004832:	d903      	bls.n	800483c <_vfiprintf_r+0x1cc>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0c6      	beq.n	80047c6 <_vfiprintf_r+0x156>
 8004838:	9105      	str	r1, [sp, #20]
 800483a:	e7c4      	b.n	80047c6 <_vfiprintf_r+0x156>
 800483c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004840:	4604      	mov	r4, r0
 8004842:	2301      	movs	r3, #1
 8004844:	e7f0      	b.n	8004828 <_vfiprintf_r+0x1b8>
 8004846:	ab03      	add	r3, sp, #12
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	462a      	mov	r2, r5
 800484c:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <_vfiprintf_r+0x228>)
 800484e:	a904      	add	r1, sp, #16
 8004850:	4630      	mov	r0, r6
 8004852:	f3af 8000 	nop.w
 8004856:	4607      	mov	r7, r0
 8004858:	1c78      	adds	r0, r7, #1
 800485a:	d1d6      	bne.n	800480a <_vfiprintf_r+0x19a>
 800485c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800485e:	07d9      	lsls	r1, r3, #31
 8004860:	d405      	bmi.n	800486e <_vfiprintf_r+0x1fe>
 8004862:	89ab      	ldrh	r3, [r5, #12]
 8004864:	059a      	lsls	r2, r3, #22
 8004866:	d402      	bmi.n	800486e <_vfiprintf_r+0x1fe>
 8004868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800486a:	f7ff fc85 	bl	8004178 <__retarget_lock_release_recursive>
 800486e:	89ab      	ldrh	r3, [r5, #12]
 8004870:	065b      	lsls	r3, r3, #25
 8004872:	f53f af1f 	bmi.w	80046b4 <_vfiprintf_r+0x44>
 8004876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004878:	e71e      	b.n	80046b8 <_vfiprintf_r+0x48>
 800487a:	ab03      	add	r3, sp, #12
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	462a      	mov	r2, r5
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <_vfiprintf_r+0x228>)
 8004882:	a904      	add	r1, sp, #16
 8004884:	4630      	mov	r0, r6
 8004886:	f000 f879 	bl	800497c <_printf_i>
 800488a:	e7e4      	b.n	8004856 <_vfiprintf_r+0x1e6>
 800488c:	080050a4 	.word	0x080050a4
 8004890:	080050ae 	.word	0x080050ae
 8004894:	00000000 	.word	0x00000000
 8004898:	0800464b 	.word	0x0800464b
 800489c:	080050aa 	.word	0x080050aa

080048a0 <_printf_common>:
 80048a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a4:	4616      	mov	r6, r2
 80048a6:	4698      	mov	r8, r3
 80048a8:	688a      	ldr	r2, [r1, #8]
 80048aa:	690b      	ldr	r3, [r1, #16]
 80048ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048b0:	4293      	cmp	r3, r2
 80048b2:	bfb8      	it	lt
 80048b4:	4613      	movlt	r3, r2
 80048b6:	6033      	str	r3, [r6, #0]
 80048b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048bc:	4607      	mov	r7, r0
 80048be:	460c      	mov	r4, r1
 80048c0:	b10a      	cbz	r2, 80048c6 <_printf_common+0x26>
 80048c2:	3301      	adds	r3, #1
 80048c4:	6033      	str	r3, [r6, #0]
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	0699      	lsls	r1, r3, #26
 80048ca:	bf42      	ittt	mi
 80048cc:	6833      	ldrmi	r3, [r6, #0]
 80048ce:	3302      	addmi	r3, #2
 80048d0:	6033      	strmi	r3, [r6, #0]
 80048d2:	6825      	ldr	r5, [r4, #0]
 80048d4:	f015 0506 	ands.w	r5, r5, #6
 80048d8:	d106      	bne.n	80048e8 <_printf_common+0x48>
 80048da:	f104 0a19 	add.w	sl, r4, #25
 80048de:	68e3      	ldr	r3, [r4, #12]
 80048e0:	6832      	ldr	r2, [r6, #0]
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	42ab      	cmp	r3, r5
 80048e6:	dc26      	bgt.n	8004936 <_printf_common+0x96>
 80048e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	3b00      	subs	r3, #0
 80048f0:	bf18      	it	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	0692      	lsls	r2, r2, #26
 80048f6:	d42b      	bmi.n	8004950 <_printf_common+0xb0>
 80048f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048fc:	4641      	mov	r1, r8
 80048fe:	4638      	mov	r0, r7
 8004900:	47c8      	blx	r9
 8004902:	3001      	adds	r0, #1
 8004904:	d01e      	beq.n	8004944 <_printf_common+0xa4>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	6922      	ldr	r2, [r4, #16]
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	2b04      	cmp	r3, #4
 8004910:	bf02      	ittt	eq
 8004912:	68e5      	ldreq	r5, [r4, #12]
 8004914:	6833      	ldreq	r3, [r6, #0]
 8004916:	1aed      	subeq	r5, r5, r3
 8004918:	68a3      	ldr	r3, [r4, #8]
 800491a:	bf0c      	ite	eq
 800491c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004920:	2500      	movne	r5, #0
 8004922:	4293      	cmp	r3, r2
 8004924:	bfc4      	itt	gt
 8004926:	1a9b      	subgt	r3, r3, r2
 8004928:	18ed      	addgt	r5, r5, r3
 800492a:	2600      	movs	r6, #0
 800492c:	341a      	adds	r4, #26
 800492e:	42b5      	cmp	r5, r6
 8004930:	d11a      	bne.n	8004968 <_printf_common+0xc8>
 8004932:	2000      	movs	r0, #0
 8004934:	e008      	b.n	8004948 <_printf_common+0xa8>
 8004936:	2301      	movs	r3, #1
 8004938:	4652      	mov	r2, sl
 800493a:	4641      	mov	r1, r8
 800493c:	4638      	mov	r0, r7
 800493e:	47c8      	blx	r9
 8004940:	3001      	adds	r0, #1
 8004942:	d103      	bne.n	800494c <_printf_common+0xac>
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494c:	3501      	adds	r5, #1
 800494e:	e7c6      	b.n	80048de <_printf_common+0x3e>
 8004950:	18e1      	adds	r1, r4, r3
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	2030      	movs	r0, #48	@ 0x30
 8004956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800495a:	4422      	add	r2, r4
 800495c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004964:	3302      	adds	r3, #2
 8004966:	e7c7      	b.n	80048f8 <_printf_common+0x58>
 8004968:	2301      	movs	r3, #1
 800496a:	4622      	mov	r2, r4
 800496c:	4641      	mov	r1, r8
 800496e:	4638      	mov	r0, r7
 8004970:	47c8      	blx	r9
 8004972:	3001      	adds	r0, #1
 8004974:	d0e6      	beq.n	8004944 <_printf_common+0xa4>
 8004976:	3601      	adds	r6, #1
 8004978:	e7d9      	b.n	800492e <_printf_common+0x8e>
	...

0800497c <_printf_i>:
 800497c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	7e0f      	ldrb	r7, [r1, #24]
 8004982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004984:	2f78      	cmp	r7, #120	@ 0x78
 8004986:	4691      	mov	r9, r2
 8004988:	4680      	mov	r8, r0
 800498a:	460c      	mov	r4, r1
 800498c:	469a      	mov	sl, r3
 800498e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004992:	d807      	bhi.n	80049a4 <_printf_i+0x28>
 8004994:	2f62      	cmp	r7, #98	@ 0x62
 8004996:	d80a      	bhi.n	80049ae <_printf_i+0x32>
 8004998:	2f00      	cmp	r7, #0
 800499a:	f000 80d1 	beq.w	8004b40 <_printf_i+0x1c4>
 800499e:	2f58      	cmp	r7, #88	@ 0x58
 80049a0:	f000 80b8 	beq.w	8004b14 <_printf_i+0x198>
 80049a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049ac:	e03a      	b.n	8004a24 <_printf_i+0xa8>
 80049ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049b2:	2b15      	cmp	r3, #21
 80049b4:	d8f6      	bhi.n	80049a4 <_printf_i+0x28>
 80049b6:	a101      	add	r1, pc, #4	@ (adr r1, 80049bc <_printf_i+0x40>)
 80049b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049bc:	08004a15 	.word	0x08004a15
 80049c0:	08004a29 	.word	0x08004a29
 80049c4:	080049a5 	.word	0x080049a5
 80049c8:	080049a5 	.word	0x080049a5
 80049cc:	080049a5 	.word	0x080049a5
 80049d0:	080049a5 	.word	0x080049a5
 80049d4:	08004a29 	.word	0x08004a29
 80049d8:	080049a5 	.word	0x080049a5
 80049dc:	080049a5 	.word	0x080049a5
 80049e0:	080049a5 	.word	0x080049a5
 80049e4:	080049a5 	.word	0x080049a5
 80049e8:	08004b27 	.word	0x08004b27
 80049ec:	08004a53 	.word	0x08004a53
 80049f0:	08004ae1 	.word	0x08004ae1
 80049f4:	080049a5 	.word	0x080049a5
 80049f8:	080049a5 	.word	0x080049a5
 80049fc:	08004b49 	.word	0x08004b49
 8004a00:	080049a5 	.word	0x080049a5
 8004a04:	08004a53 	.word	0x08004a53
 8004a08:	080049a5 	.word	0x080049a5
 8004a0c:	080049a5 	.word	0x080049a5
 8004a10:	08004ae9 	.word	0x08004ae9
 8004a14:	6833      	ldr	r3, [r6, #0]
 8004a16:	1d1a      	adds	r2, r3, #4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6032      	str	r2, [r6, #0]
 8004a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a24:	2301      	movs	r3, #1
 8004a26:	e09c      	b.n	8004b62 <_printf_i+0x1e6>
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	1d19      	adds	r1, r3, #4
 8004a2e:	6031      	str	r1, [r6, #0]
 8004a30:	0606      	lsls	r6, r0, #24
 8004a32:	d501      	bpl.n	8004a38 <_printf_i+0xbc>
 8004a34:	681d      	ldr	r5, [r3, #0]
 8004a36:	e003      	b.n	8004a40 <_printf_i+0xc4>
 8004a38:	0645      	lsls	r5, r0, #25
 8004a3a:	d5fb      	bpl.n	8004a34 <_printf_i+0xb8>
 8004a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a40:	2d00      	cmp	r5, #0
 8004a42:	da03      	bge.n	8004a4c <_printf_i+0xd0>
 8004a44:	232d      	movs	r3, #45	@ 0x2d
 8004a46:	426d      	negs	r5, r5
 8004a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a4c:	4858      	ldr	r0, [pc, #352]	@ (8004bb0 <_printf_i+0x234>)
 8004a4e:	230a      	movs	r3, #10
 8004a50:	e011      	b.n	8004a76 <_printf_i+0xfa>
 8004a52:	6821      	ldr	r1, [r4, #0]
 8004a54:	6833      	ldr	r3, [r6, #0]
 8004a56:	0608      	lsls	r0, r1, #24
 8004a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a5c:	d402      	bmi.n	8004a64 <_printf_i+0xe8>
 8004a5e:	0649      	lsls	r1, r1, #25
 8004a60:	bf48      	it	mi
 8004a62:	b2ad      	uxthmi	r5, r5
 8004a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a66:	4852      	ldr	r0, [pc, #328]	@ (8004bb0 <_printf_i+0x234>)
 8004a68:	6033      	str	r3, [r6, #0]
 8004a6a:	bf14      	ite	ne
 8004a6c:	230a      	movne	r3, #10
 8004a6e:	2308      	moveq	r3, #8
 8004a70:	2100      	movs	r1, #0
 8004a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a76:	6866      	ldr	r6, [r4, #4]
 8004a78:	60a6      	str	r6, [r4, #8]
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	db05      	blt.n	8004a8a <_printf_i+0x10e>
 8004a7e:	6821      	ldr	r1, [r4, #0]
 8004a80:	432e      	orrs	r6, r5
 8004a82:	f021 0104 	bic.w	r1, r1, #4
 8004a86:	6021      	str	r1, [r4, #0]
 8004a88:	d04b      	beq.n	8004b22 <_printf_i+0x1a6>
 8004a8a:	4616      	mov	r6, r2
 8004a8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a90:	fb03 5711 	mls	r7, r3, r1, r5
 8004a94:	5dc7      	ldrb	r7, [r0, r7]
 8004a96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a9a:	462f      	mov	r7, r5
 8004a9c:	42bb      	cmp	r3, r7
 8004a9e:	460d      	mov	r5, r1
 8004aa0:	d9f4      	bls.n	8004a8c <_printf_i+0x110>
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d10b      	bne.n	8004abe <_printf_i+0x142>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	07df      	lsls	r7, r3, #31
 8004aaa:	d508      	bpl.n	8004abe <_printf_i+0x142>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	6861      	ldr	r1, [r4, #4]
 8004ab0:	4299      	cmp	r1, r3
 8004ab2:	bfde      	ittt	le
 8004ab4:	2330      	movle	r3, #48	@ 0x30
 8004ab6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004aba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004abe:	1b92      	subs	r2, r2, r6
 8004ac0:	6122      	str	r2, [r4, #16]
 8004ac2:	f8cd a000 	str.w	sl, [sp]
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	aa03      	add	r2, sp, #12
 8004aca:	4621      	mov	r1, r4
 8004acc:	4640      	mov	r0, r8
 8004ace:	f7ff fee7 	bl	80048a0 <_printf_common>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d14a      	bne.n	8004b6c <_printf_i+0x1f0>
 8004ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ada:	b004      	add	sp, #16
 8004adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	f043 0320 	orr.w	r3, r3, #32
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	4832      	ldr	r0, [pc, #200]	@ (8004bb4 <_printf_i+0x238>)
 8004aea:	2778      	movs	r7, #120	@ 0x78
 8004aec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	6831      	ldr	r1, [r6, #0]
 8004af4:	061f      	lsls	r7, r3, #24
 8004af6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004afa:	d402      	bmi.n	8004b02 <_printf_i+0x186>
 8004afc:	065f      	lsls	r7, r3, #25
 8004afe:	bf48      	it	mi
 8004b00:	b2ad      	uxthmi	r5, r5
 8004b02:	6031      	str	r1, [r6, #0]
 8004b04:	07d9      	lsls	r1, r3, #31
 8004b06:	bf44      	itt	mi
 8004b08:	f043 0320 	orrmi.w	r3, r3, #32
 8004b0c:	6023      	strmi	r3, [r4, #0]
 8004b0e:	b11d      	cbz	r5, 8004b18 <_printf_i+0x19c>
 8004b10:	2310      	movs	r3, #16
 8004b12:	e7ad      	b.n	8004a70 <_printf_i+0xf4>
 8004b14:	4826      	ldr	r0, [pc, #152]	@ (8004bb0 <_printf_i+0x234>)
 8004b16:	e7e9      	b.n	8004aec <_printf_i+0x170>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	f023 0320 	bic.w	r3, r3, #32
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	e7f6      	b.n	8004b10 <_printf_i+0x194>
 8004b22:	4616      	mov	r6, r2
 8004b24:	e7bd      	b.n	8004aa2 <_printf_i+0x126>
 8004b26:	6833      	ldr	r3, [r6, #0]
 8004b28:	6825      	ldr	r5, [r4, #0]
 8004b2a:	6961      	ldr	r1, [r4, #20]
 8004b2c:	1d18      	adds	r0, r3, #4
 8004b2e:	6030      	str	r0, [r6, #0]
 8004b30:	062e      	lsls	r6, r5, #24
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	d501      	bpl.n	8004b3a <_printf_i+0x1be>
 8004b36:	6019      	str	r1, [r3, #0]
 8004b38:	e002      	b.n	8004b40 <_printf_i+0x1c4>
 8004b3a:	0668      	lsls	r0, r5, #25
 8004b3c:	d5fb      	bpl.n	8004b36 <_printf_i+0x1ba>
 8004b3e:	8019      	strh	r1, [r3, #0]
 8004b40:	2300      	movs	r3, #0
 8004b42:	6123      	str	r3, [r4, #16]
 8004b44:	4616      	mov	r6, r2
 8004b46:	e7bc      	b.n	8004ac2 <_printf_i+0x146>
 8004b48:	6833      	ldr	r3, [r6, #0]
 8004b4a:	1d1a      	adds	r2, r3, #4
 8004b4c:	6032      	str	r2, [r6, #0]
 8004b4e:	681e      	ldr	r6, [r3, #0]
 8004b50:	6862      	ldr	r2, [r4, #4]
 8004b52:	2100      	movs	r1, #0
 8004b54:	4630      	mov	r0, r6
 8004b56:	f7fb fb43 	bl	80001e0 <memchr>
 8004b5a:	b108      	cbz	r0, 8004b60 <_printf_i+0x1e4>
 8004b5c:	1b80      	subs	r0, r0, r6
 8004b5e:	6060      	str	r0, [r4, #4]
 8004b60:	6863      	ldr	r3, [r4, #4]
 8004b62:	6123      	str	r3, [r4, #16]
 8004b64:	2300      	movs	r3, #0
 8004b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b6a:	e7aa      	b.n	8004ac2 <_printf_i+0x146>
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	4632      	mov	r2, r6
 8004b70:	4649      	mov	r1, r9
 8004b72:	4640      	mov	r0, r8
 8004b74:	47d0      	blx	sl
 8004b76:	3001      	adds	r0, #1
 8004b78:	d0ad      	beq.n	8004ad6 <_printf_i+0x15a>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	079b      	lsls	r3, r3, #30
 8004b7e:	d413      	bmi.n	8004ba8 <_printf_i+0x22c>
 8004b80:	68e0      	ldr	r0, [r4, #12]
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	4298      	cmp	r0, r3
 8004b86:	bfb8      	it	lt
 8004b88:	4618      	movlt	r0, r3
 8004b8a:	e7a6      	b.n	8004ada <_printf_i+0x15e>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4632      	mov	r2, r6
 8004b90:	4649      	mov	r1, r9
 8004b92:	4640      	mov	r0, r8
 8004b94:	47d0      	blx	sl
 8004b96:	3001      	adds	r0, #1
 8004b98:	d09d      	beq.n	8004ad6 <_printf_i+0x15a>
 8004b9a:	3501      	adds	r5, #1
 8004b9c:	68e3      	ldr	r3, [r4, #12]
 8004b9e:	9903      	ldr	r1, [sp, #12]
 8004ba0:	1a5b      	subs	r3, r3, r1
 8004ba2:	42ab      	cmp	r3, r5
 8004ba4:	dcf2      	bgt.n	8004b8c <_printf_i+0x210>
 8004ba6:	e7eb      	b.n	8004b80 <_printf_i+0x204>
 8004ba8:	2500      	movs	r5, #0
 8004baa:	f104 0619 	add.w	r6, r4, #25
 8004bae:	e7f5      	b.n	8004b9c <_printf_i+0x220>
 8004bb0:	080050b5 	.word	0x080050b5
 8004bb4:	080050c6 	.word	0x080050c6

08004bb8 <__sflush_r>:
 8004bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc0:	0716      	lsls	r6, r2, #28
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	d454      	bmi.n	8004c72 <__sflush_r+0xba>
 8004bc8:	684b      	ldr	r3, [r1, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	dc02      	bgt.n	8004bd4 <__sflush_r+0x1c>
 8004bce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dd48      	ble.n	8004c66 <__sflush_r+0xae>
 8004bd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d045      	beq.n	8004c66 <__sflush_r+0xae>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004be0:	682f      	ldr	r7, [r5, #0]
 8004be2:	6a21      	ldr	r1, [r4, #32]
 8004be4:	602b      	str	r3, [r5, #0]
 8004be6:	d030      	beq.n	8004c4a <__sflush_r+0x92>
 8004be8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	0759      	lsls	r1, r3, #29
 8004bee:	d505      	bpl.n	8004bfc <__sflush_r+0x44>
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	1ad2      	subs	r2, r2, r3
 8004bf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bf6:	b10b      	cbz	r3, 8004bfc <__sflush_r+0x44>
 8004bf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c00:	6a21      	ldr	r1, [r4, #32]
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b0      	blx	r6
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	d106      	bne.n	8004c1a <__sflush_r+0x62>
 8004c0c:	6829      	ldr	r1, [r5, #0]
 8004c0e:	291d      	cmp	r1, #29
 8004c10:	d82b      	bhi.n	8004c6a <__sflush_r+0xb2>
 8004c12:	4a2a      	ldr	r2, [pc, #168]	@ (8004cbc <__sflush_r+0x104>)
 8004c14:	40ca      	lsrs	r2, r1
 8004c16:	07d6      	lsls	r6, r2, #31
 8004c18:	d527      	bpl.n	8004c6a <__sflush_r+0xb2>
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	6062      	str	r2, [r4, #4]
 8004c1e:	04d9      	lsls	r1, r3, #19
 8004c20:	6922      	ldr	r2, [r4, #16]
 8004c22:	6022      	str	r2, [r4, #0]
 8004c24:	d504      	bpl.n	8004c30 <__sflush_r+0x78>
 8004c26:	1c42      	adds	r2, r0, #1
 8004c28:	d101      	bne.n	8004c2e <__sflush_r+0x76>
 8004c2a:	682b      	ldr	r3, [r5, #0]
 8004c2c:	b903      	cbnz	r3, 8004c30 <__sflush_r+0x78>
 8004c2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c32:	602f      	str	r7, [r5, #0]
 8004c34:	b1b9      	cbz	r1, 8004c66 <__sflush_r+0xae>
 8004c36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	d002      	beq.n	8004c44 <__sflush_r+0x8c>
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f7ff fa9c 	bl	800417c <_free_r>
 8004c44:	2300      	movs	r3, #0
 8004c46:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c48:	e00d      	b.n	8004c66 <__sflush_r+0xae>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b0      	blx	r6
 8004c50:	4602      	mov	r2, r0
 8004c52:	1c50      	adds	r0, r2, #1
 8004c54:	d1c9      	bne.n	8004bea <__sflush_r+0x32>
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0c6      	beq.n	8004bea <__sflush_r+0x32>
 8004c5c:	2b1d      	cmp	r3, #29
 8004c5e:	d001      	beq.n	8004c64 <__sflush_r+0xac>
 8004c60:	2b16      	cmp	r3, #22
 8004c62:	d11e      	bne.n	8004ca2 <__sflush_r+0xea>
 8004c64:	602f      	str	r7, [r5, #0]
 8004c66:	2000      	movs	r0, #0
 8004c68:	e022      	b.n	8004cb0 <__sflush_r+0xf8>
 8004c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c6e:	b21b      	sxth	r3, r3
 8004c70:	e01b      	b.n	8004caa <__sflush_r+0xf2>
 8004c72:	690f      	ldr	r7, [r1, #16]
 8004c74:	2f00      	cmp	r7, #0
 8004c76:	d0f6      	beq.n	8004c66 <__sflush_r+0xae>
 8004c78:	0793      	lsls	r3, r2, #30
 8004c7a:	680e      	ldr	r6, [r1, #0]
 8004c7c:	bf08      	it	eq
 8004c7e:	694b      	ldreq	r3, [r1, #20]
 8004c80:	600f      	str	r7, [r1, #0]
 8004c82:	bf18      	it	ne
 8004c84:	2300      	movne	r3, #0
 8004c86:	eba6 0807 	sub.w	r8, r6, r7
 8004c8a:	608b      	str	r3, [r1, #8]
 8004c8c:	f1b8 0f00 	cmp.w	r8, #0
 8004c90:	dde9      	ble.n	8004c66 <__sflush_r+0xae>
 8004c92:	6a21      	ldr	r1, [r4, #32]
 8004c94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c96:	4643      	mov	r3, r8
 8004c98:	463a      	mov	r2, r7
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b0      	blx	r6
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	dc08      	bgt.n	8004cb4 <__sflush_r+0xfc>
 8004ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	4407      	add	r7, r0
 8004cb6:	eba8 0800 	sub.w	r8, r8, r0
 8004cba:	e7e7      	b.n	8004c8c <__sflush_r+0xd4>
 8004cbc:	20400001 	.word	0x20400001

08004cc0 <_fflush_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	690b      	ldr	r3, [r1, #16]
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	b913      	cbnz	r3, 8004cd0 <_fflush_r+0x10>
 8004cca:	2500      	movs	r5, #0
 8004ccc:	4628      	mov	r0, r5
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	b118      	cbz	r0, 8004cda <_fflush_r+0x1a>
 8004cd2:	6a03      	ldr	r3, [r0, #32]
 8004cd4:	b90b      	cbnz	r3, 8004cda <_fflush_r+0x1a>
 8004cd6:	f7ff f835 	bl	8003d44 <__sinit>
 8004cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f3      	beq.n	8004cca <_fflush_r+0xa>
 8004ce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ce4:	07d0      	lsls	r0, r2, #31
 8004ce6:	d404      	bmi.n	8004cf2 <_fflush_r+0x32>
 8004ce8:	0599      	lsls	r1, r3, #22
 8004cea:	d402      	bmi.n	8004cf2 <_fflush_r+0x32>
 8004cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cee:	f7ff fa42 	bl	8004176 <__retarget_lock_acquire_recursive>
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	f7ff ff5f 	bl	8004bb8 <__sflush_r>
 8004cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cfc:	07da      	lsls	r2, r3, #31
 8004cfe:	4605      	mov	r5, r0
 8004d00:	d4e4      	bmi.n	8004ccc <_fflush_r+0xc>
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	059b      	lsls	r3, r3, #22
 8004d06:	d4e1      	bmi.n	8004ccc <_fflush_r+0xc>
 8004d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d0a:	f7ff fa35 	bl	8004178 <__retarget_lock_release_recursive>
 8004d0e:	e7dd      	b.n	8004ccc <_fflush_r+0xc>

08004d10 <__swhatbuf_r>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	460c      	mov	r4, r1
 8004d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d18:	2900      	cmp	r1, #0
 8004d1a:	b096      	sub	sp, #88	@ 0x58
 8004d1c:	4615      	mov	r5, r2
 8004d1e:	461e      	mov	r6, r3
 8004d20:	da0d      	bge.n	8004d3e <__swhatbuf_r+0x2e>
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	bf14      	ite	ne
 8004d2e:	2340      	movne	r3, #64	@ 0x40
 8004d30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d34:	2000      	movs	r0, #0
 8004d36:	6031      	str	r1, [r6, #0]
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	b016      	add	sp, #88	@ 0x58
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	466a      	mov	r2, sp
 8004d40:	f000 f862 	bl	8004e08 <_fstat_r>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	dbec      	blt.n	8004d22 <__swhatbuf_r+0x12>
 8004d48:	9901      	ldr	r1, [sp, #4]
 8004d4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d52:	4259      	negs	r1, r3
 8004d54:	4159      	adcs	r1, r3
 8004d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d5a:	e7eb      	b.n	8004d34 <__swhatbuf_r+0x24>

08004d5c <__smakebuf_r>:
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d60:	079d      	lsls	r5, r3, #30
 8004d62:	4606      	mov	r6, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	d507      	bpl.n	8004d78 <__smakebuf_r+0x1c>
 8004d68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	2301      	movs	r3, #1
 8004d72:	6163      	str	r3, [r4, #20]
 8004d74:	b003      	add	sp, #12
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d78:	ab01      	add	r3, sp, #4
 8004d7a:	466a      	mov	r2, sp
 8004d7c:	f7ff ffc8 	bl	8004d10 <__swhatbuf_r>
 8004d80:	9f00      	ldr	r7, [sp, #0]
 8004d82:	4605      	mov	r5, r0
 8004d84:	4639      	mov	r1, r7
 8004d86:	4630      	mov	r0, r6
 8004d88:	f7ff fa64 	bl	8004254 <_malloc_r>
 8004d8c:	b948      	cbnz	r0, 8004da2 <__smakebuf_r+0x46>
 8004d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d92:	059a      	lsls	r2, r3, #22
 8004d94:	d4ee      	bmi.n	8004d74 <__smakebuf_r+0x18>
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	f043 0302 	orr.w	r3, r3, #2
 8004d9e:	81a3      	strh	r3, [r4, #12]
 8004da0:	e7e2      	b.n	8004d68 <__smakebuf_r+0xc>
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	6020      	str	r0, [r4, #0]
 8004da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004daa:	81a3      	strh	r3, [r4, #12]
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004db2:	b15b      	cbz	r3, 8004dcc <__smakebuf_r+0x70>
 8004db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f837 	bl	8004e2c <_isatty_r>
 8004dbe:	b128      	cbz	r0, 8004dcc <__smakebuf_r+0x70>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	431d      	orrs	r5, r3
 8004dd0:	81a5      	strh	r5, [r4, #12]
 8004dd2:	e7cf      	b.n	8004d74 <__smakebuf_r+0x18>

08004dd4 <memmove>:
 8004dd4:	4288      	cmp	r0, r1
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	eb01 0402 	add.w	r4, r1, r2
 8004ddc:	d902      	bls.n	8004de4 <memmove+0x10>
 8004dde:	4284      	cmp	r4, r0
 8004de0:	4623      	mov	r3, r4
 8004de2:	d807      	bhi.n	8004df4 <memmove+0x20>
 8004de4:	1e43      	subs	r3, r0, #1
 8004de6:	42a1      	cmp	r1, r4
 8004de8:	d008      	beq.n	8004dfc <memmove+0x28>
 8004dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004df2:	e7f8      	b.n	8004de6 <memmove+0x12>
 8004df4:	4402      	add	r2, r0
 8004df6:	4601      	mov	r1, r0
 8004df8:	428a      	cmp	r2, r1
 8004dfa:	d100      	bne.n	8004dfe <memmove+0x2a>
 8004dfc:	bd10      	pop	{r4, pc}
 8004dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e06:	e7f7      	b.n	8004df8 <memmove+0x24>

08004e08 <_fstat_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d07      	ldr	r5, [pc, #28]	@ (8004e28 <_fstat_r+0x20>)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	602b      	str	r3, [r5, #0]
 8004e16:	f7fb ff8f 	bl	8000d38 <_fstat>
 8004e1a:	1c43      	adds	r3, r0, #1
 8004e1c:	d102      	bne.n	8004e24 <_fstat_r+0x1c>
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	b103      	cbz	r3, 8004e24 <_fstat_r+0x1c>
 8004e22:	6023      	str	r3, [r4, #0]
 8004e24:	bd38      	pop	{r3, r4, r5, pc}
 8004e26:	bf00      	nop
 8004e28:	2000030c 	.word	0x2000030c

08004e2c <_isatty_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d06      	ldr	r5, [pc, #24]	@ (8004e48 <_isatty_r+0x1c>)
 8004e30:	2300      	movs	r3, #0
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	f7fb ff8e 	bl	8000d58 <_isatty>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_isatty_r+0x1a>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_isatty_r+0x1a>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	2000030c 	.word	0x2000030c

08004e4c <_sbrk_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d06      	ldr	r5, [pc, #24]	@ (8004e68 <_sbrk_r+0x1c>)
 8004e50:	2300      	movs	r3, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fb ff96 	bl	8000d88 <_sbrk>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_sbrk_r+0x1a>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_sbrk_r+0x1a>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	2000030c 	.word	0x2000030c

08004e6c <memcpy>:
 8004e6c:	440a      	add	r2, r1
 8004e6e:	4291      	cmp	r1, r2
 8004e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e74:	d100      	bne.n	8004e78 <memcpy+0xc>
 8004e76:	4770      	bx	lr
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e82:	4291      	cmp	r1, r2
 8004e84:	d1f9      	bne.n	8004e7a <memcpy+0xe>
 8004e86:	bd10      	pop	{r4, pc}

08004e88 <_realloc_r>:
 8004e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	4614      	mov	r4, r2
 8004e90:	460d      	mov	r5, r1
 8004e92:	b921      	cbnz	r1, 8004e9e <_realloc_r+0x16>
 8004e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e98:	4611      	mov	r1, r2
 8004e9a:	f7ff b9db 	b.w	8004254 <_malloc_r>
 8004e9e:	b92a      	cbnz	r2, 8004eac <_realloc_r+0x24>
 8004ea0:	f7ff f96c 	bl	800417c <_free_r>
 8004ea4:	4625      	mov	r5, r4
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eac:	f000 f81a 	bl	8004ee4 <_malloc_usable_size_r>
 8004eb0:	4284      	cmp	r4, r0
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	d802      	bhi.n	8004ebc <_realloc_r+0x34>
 8004eb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eba:	d8f4      	bhi.n	8004ea6 <_realloc_r+0x1e>
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	f7ff f9c8 	bl	8004254 <_malloc_r>
 8004ec4:	4680      	mov	r8, r0
 8004ec6:	b908      	cbnz	r0, 8004ecc <_realloc_r+0x44>
 8004ec8:	4645      	mov	r5, r8
 8004eca:	e7ec      	b.n	8004ea6 <_realloc_r+0x1e>
 8004ecc:	42b4      	cmp	r4, r6
 8004ece:	4622      	mov	r2, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	bf28      	it	cs
 8004ed4:	4632      	movcs	r2, r6
 8004ed6:	f7ff ffc9 	bl	8004e6c <memcpy>
 8004eda:	4629      	mov	r1, r5
 8004edc:	4638      	mov	r0, r7
 8004ede:	f7ff f94d 	bl	800417c <_free_r>
 8004ee2:	e7f1      	b.n	8004ec8 <_realloc_r+0x40>

08004ee4 <_malloc_usable_size_r>:
 8004ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee8:	1f18      	subs	r0, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bfbc      	itt	lt
 8004eee:	580b      	ldrlt	r3, [r1, r0]
 8004ef0:	18c0      	addlt	r0, r0, r3
 8004ef2:	4770      	bx	lr

08004ef4 <_init>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	bf00      	nop
 8004ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efa:	bc08      	pop	{r3}
 8004efc:	469e      	mov	lr, r3
 8004efe:	4770      	bx	lr

08004f00 <_fini>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	bf00      	nop
 8004f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f06:	bc08      	pop	{r3}
 8004f08:	469e      	mov	lr, r3
 8004f0a:	4770      	bx	lr
