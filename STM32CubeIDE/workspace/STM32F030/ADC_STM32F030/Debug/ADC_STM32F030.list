
ADC_STM32F030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fbc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800307c  0800307c  0000407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030cc  080030cc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080030cc  080030cc  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030cc  080030cc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030cc  080030cc  000040cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030d0  080030d0  000040d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080030e0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080030e0  00005104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000836b  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c59  00000000  00000000  0000d39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0000eff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000656  00000000  00000000  0000f850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed82  00000000  00000000  0000fea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba68  00000000  00000000  0001ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005702c  00000000  00000000  0002a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000816bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c6c  00000000  00000000  00081700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0008336c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003064 	.word	0x08003064

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003064 	.word	0x08003064

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af02      	add	r7, sp, #8
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800022c:	200f      	movs	r0, #15
 800022e:	183b      	adds	r3, r7, r0
 8000230:	1dfa      	adds	r2, r7, #7
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	210f      	movs	r1, #15
 8000236:	438a      	bics	r2, r1
 8000238:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	011a      	lsls	r2, r3, #4
 8000240:	240e      	movs	r4, #14
 8000242:	193b      	adds	r3, r7, r4
 8000244:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000246:	183b      	adds	r3, r7, r0
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	220c      	movs	r2, #12
 800024c:	4313      	orrs	r3, r2
 800024e:	b2da      	uxtb	r2, r3
 8000250:	2108      	movs	r1, #8
 8000252:	187b      	adds	r3, r7, r1
 8000254:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	183b      	adds	r3, r7, r0
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2208      	movs	r2, #8
 800025c:	4313      	orrs	r3, r2
 800025e:	b2da      	uxtb	r2, r3
 8000260:	187b      	adds	r3, r7, r1
 8000262:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000264:	193b      	adds	r3, r7, r4
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	220c      	movs	r2, #12
 800026a:	4313      	orrs	r3, r2
 800026c:	b2da      	uxtb	r2, r3
 800026e:	187b      	adds	r3, r7, r1
 8000270:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000272:	193b      	adds	r3, r7, r4
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2208      	movs	r2, #8
 8000278:	4313      	orrs	r3, r2
 800027a:	b2da      	uxtb	r2, r3
 800027c:	187b      	adds	r3, r7, r1
 800027e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000280:	187a      	adds	r2, r7, r1
 8000282:	4805      	ldr	r0, [pc, #20]	@ (8000298 <lcd_send_cmd+0x78>)
 8000284:	2364      	movs	r3, #100	@ 0x64
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2304      	movs	r3, #4
 800028a:	214e      	movs	r1, #78	@ 0x4e
 800028c:	f001 fe8c 	bl	8001fa8 <HAL_I2C_Master_Transmit>
}
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b005      	add	sp, #20
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	200000ac 	.word	0x200000ac

0800029c <lcd_send_data>:

void lcd_send_data (char data)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b087      	sub	sp, #28
 80002a0:	af02      	add	r7, sp, #8
 80002a2:	0002      	movs	r2, r0
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002a8:	200f      	movs	r0, #15
 80002aa:	183b      	adds	r3, r7, r0
 80002ac:	1dfa      	adds	r2, r7, #7
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	210f      	movs	r1, #15
 80002b2:	438a      	bics	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	011a      	lsls	r2, r3, #4
 80002bc:	240e      	movs	r4, #14
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002c2:	183b      	adds	r3, r7, r0
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	220d      	movs	r2, #13
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	2108      	movs	r1, #8
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002d2:	183b      	adds	r3, r7, r0
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2209      	movs	r2, #9
 80002d8:	4313      	orrs	r3, r2
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	220d      	movs	r2, #13
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2209      	movs	r2, #9
 80002f4:	4313      	orrs	r3, r2
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002fc:	187a      	adds	r2, r7, r1
 80002fe:	4805      	ldr	r0, [pc, #20]	@ (8000314 <lcd_send_data+0x78>)
 8000300:	2364      	movs	r3, #100	@ 0x64
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2304      	movs	r3, #4
 8000306:	214e      	movs	r1, #78	@ 0x4e
 8000308:	f001 fe4e 	bl	8001fa8 <HAL_I2C_Master_Transmit>
}
 800030c:	46c0      	nop			@ (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b005      	add	sp, #20
 8000312:	bd90      	pop	{r4, r7, pc}
 8000314:	200000ac 	.word	0x200000ac

08000318 <lcd_clear>:

void lcd_clear (void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800031e:	2080      	movs	r0, #128	@ 0x80
 8000320:	f7ff ff7e 	bl	8000220 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e005      	b.n	8000336 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800032a:	2020      	movs	r0, #32
 800032c:	f7ff ffb6 	bl	800029c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3301      	adds	r3, #1
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b45      	cmp	r3, #69	@ 0x45
 800033a:	ddf6      	ble.n	800032a <lcd_clear+0x12>
	}
}
 800033c:	46c0      	nop			@ (mov r8, r8)
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}

08000346 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	b082      	sub	sp, #8
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d003      	beq.n	800035e <lcd_put_cur+0x18>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d005      	beq.n	8000368 <lcd_put_cur+0x22>
 800035c:	e009      	b.n	8000372 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2280      	movs	r2, #128	@ 0x80
 8000362:	4313      	orrs	r3, r2
 8000364:	603b      	str	r3, [r7, #0]
            break;
 8000366:	e004      	b.n	8000372 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	22c0      	movs	r2, #192	@ 0xc0
 800036c:	4313      	orrs	r3, r2
 800036e:	603b      	str	r3, [r7, #0]
            break;
 8000370:	46c0      	nop			@ (mov r8, r8)
    }

    lcd_send_cmd (col);
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	0018      	movs	r0, r3
 8000378:	f7ff ff52 	bl	8000220 <lcd_send_cmd>
}
 800037c:	46c0      	nop			@ (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b002      	add	sp, #8
 8000382:	bd80      	pop	{r7, pc}

08000384 <lcd_init>:


void lcd_init (void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000388:	2032      	movs	r0, #50	@ 0x32
 800038a:	f000 fc9b 	bl	8000cc4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800038e:	2030      	movs	r0, #48	@ 0x30
 8000390:	f7ff ff46 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000394:	2005      	movs	r0, #5
 8000396:	f000 fc95 	bl	8000cc4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800039a:	2030      	movs	r0, #48	@ 0x30
 800039c:	f7ff ff40 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80003a0:	2001      	movs	r0, #1
 80003a2:	f000 fc8f 	bl	8000cc4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003a6:	2030      	movs	r0, #48	@ 0x30
 80003a8:	f7ff ff3a 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 80003ac:	200a      	movs	r0, #10
 80003ae:	f000 fc89 	bl	8000cc4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80003b2:	2020      	movs	r0, #32
 80003b4:	f7ff ff34 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 80003b8:	200a      	movs	r0, #10
 80003ba:	f000 fc83 	bl	8000cc4 <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003be:	2028      	movs	r0, #40	@ 0x28
 80003c0:	f7ff ff2e 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f000 fc7d 	bl	8000cc4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003ca:	2008      	movs	r0, #8
 80003cc:	f7ff ff28 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fc77 	bl	8000cc4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff ff22 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f000 fc71 	bl	8000cc4 <HAL_Delay>
	HAL_Delay(1);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f000 fc6e 	bl	8000cc4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80003e8:	2006      	movs	r0, #6
 80003ea:	f7ff ff19 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 80003ee:	2001      	movs	r0, #1
 80003f0:	f000 fc68 	bl	8000cc4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80003f4:	200c      	movs	r0, #12
 80003f6:	f7ff ff13 	bl	8000220 <lcd_send_cmd>
}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000408:	e006      	b.n	8000418 <lcd_send_string+0x18>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	0018      	movs	r0, r3
 8000414:	f7ff ff42 	bl	800029c <lcd_send_data>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d1f4      	bne.n	800040a <lcd_send_string+0xa>
}
 8000420:	46c0      	nop			@ (mov r8, r8)
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000430:	f000 fbe4 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000434:	f000 f942 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000438:	f000 fa66 	bl	8000908 <MX_GPIO_Init>
  MX_DMA_Init();
 800043c:	f000 fa46 	bl	80008cc <MX_DMA_Init>
  MX_ADC_Init();
 8000440:	f000 f9a8 	bl	8000794 <MX_ADC_Init>
  MX_I2C1_Init();
 8000444:	f000 fa02 	bl	800084c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //lcd_send_cmd(cmd)
  	HAL_Delay(500);
 8000448:	23fa      	movs	r3, #250	@ 0xfa
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fc39 	bl	8000cc4 <HAL_Delay>
  	lcd_init();
 8000452:	f7ff ff97 	bl	8000384 <lcd_init>
  	HAL_Delay(500);
 8000456:	23fa      	movs	r3, #250	@ 0xfa
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fc32 	bl	8000cc4 <HAL_Delay>
  	lcd_clear();
 8000460:	f7ff ff5a 	bl	8000318 <lcd_clear>
  	HAL_Delay(500);
 8000464:	23fa      	movs	r3, #250	@ 0xfa
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	0018      	movs	r0, r3
 800046a:	f000 fc2b 	bl	8000cc4 <HAL_Delay>
  	lcd_put_cur(0, 0);
 800046e:	2100      	movs	r1, #0
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff ff68 	bl	8000346 <lcd_put_cur>
  	HAL_Delay(500);
 8000476:	23fa      	movs	r3, #250	@ 0xfa
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fc22 	bl	8000cc4 <HAL_Delay>
  	lcd_send_string("Setting up");
 8000480:	4b83      	ldr	r3, [pc, #524]	@ (8000690 <main+0x264>)
 8000482:	0018      	movs	r0, r3
 8000484:	f7ff ffbc 	bl	8000400 <lcd_send_string>
  	HAL_Delay(500);
 8000488:	23fa      	movs	r3, #250	@ 0xfa
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fc19 	bl	8000cc4 <HAL_Delay>
  	lcd_put_cur(1, 0);
 8000492:	2100      	movs	r1, #0
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff ff56 	bl	8000346 <lcd_put_cur>
  	lcd_send_string("The display");
 800049a:	4b7e      	ldr	r3, [pc, #504]	@ (8000694 <main+0x268>)
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff ffaf 	bl	8000400 <lcd_send_string>
  	HAL_Delay(2000);
 80004a2:	23fa      	movs	r3, #250	@ 0xfa
 80004a4:	00db      	lsls	r3, r3, #3
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fc0c 	bl	8000cc4 <HAL_Delay>
  	lcd_clear();
 80004ac:	f7ff ff34 	bl	8000318 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc); // Start the ADC
 80004b0:	4b79      	ldr	r3, [pc, #484]	@ (8000698 <main+0x26c>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fd6a 	bl	8000f8c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 100); //Wait for the conversion to complete
 80004b8:	4b77      	ldr	r3, [pc, #476]	@ (8000698 <main+0x26c>)
 80004ba:	2164      	movs	r1, #100	@ 0x64
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fdf9 	bl	80010b4 <HAL_ADC_PollForConversion>
	  adc_val = HAL_ADC_GetValue(&hadc); //Get the value
 80004c2:	4b75      	ldr	r3, [pc, #468]	@ (8000698 <main+0x26c>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fe87 	bl	80011d8 <HAL_ADC_GetValue>
 80004ca:	0003      	movs	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	4b73      	ldr	r3, [pc, #460]	@ (800069c <main+0x270>)
 80004d0:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc); //Stop the ADC
 80004d2:	4b71      	ldr	r3, [pc, #452]	@ (8000698 <main+0x26c>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fdad 	bl	8001034 <HAL_ADC_Stop>
	  HAL_Delay(500); //Wait 500mS before starting the ADC again
 80004da:	23fa      	movs	r3, #250	@ 0xfa
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fbf0 	bl	8000cc4 <HAL_Delay>


	  d0 = adc_val & 0xF;
 80004e4:	4b6d      	ldr	r3, [pc, #436]	@ (800069c <main+0x270>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	220f      	movs	r2, #15
 80004ec:	4013      	ands	r3, r2
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b6b      	ldr	r3, [pc, #428]	@ (80006a0 <main+0x274>)
 80004f2:	701a      	strb	r2, [r3, #0]
	  d1 = (adc_val>>4) & 0xF;
 80004f4:	4b69      	ldr	r3, [pc, #420]	@ (800069c <main+0x270>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	091b      	lsrs	r3, r3, #4
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	220f      	movs	r2, #15
 8000500:	4013      	ands	r3, r2
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b67      	ldr	r3, [pc, #412]	@ (80006a4 <main+0x278>)
 8000506:	701a      	strb	r2, [r3, #0]
	  d2 = (adc_val>>8) & 0xF;
 8000508:	4b64      	ldr	r3, [pc, #400]	@ (800069c <main+0x270>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	0a1b      	lsrs	r3, r3, #8
 800050e:	b29b      	uxth	r3, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	220f      	movs	r2, #15
 8000514:	4013      	ands	r3, r2
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b63      	ldr	r3, [pc, #396]	@ (80006a8 <main+0x27c>)
 800051a:	701a      	strb	r2, [r3, #0]
	  d3 = (adc_val>>12) & 0xF;
 800051c:	4b5f      	ldr	r3, [pc, #380]	@ (800069c <main+0x270>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	0b1b      	lsrs	r3, r3, #12
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	220f      	movs	r2, #15
 8000528:	4013      	ands	r3, r2
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b5f      	ldr	r3, [pc, #380]	@ (80006ac <main+0x280>)
 800052e:	701a      	strb	r2, [r3, #0]

	  d0 = 6*(d3 + d2 + d1) + d0;
 8000530:	4b5e      	ldr	r3, [pc, #376]	@ (80006ac <main+0x280>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	4b5c      	ldr	r3, [pc, #368]	@ (80006a8 <main+0x27c>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	18d3      	adds	r3, r2, r3
 800053c:	4a59      	ldr	r2, [pc, #356]	@ (80006a4 <main+0x278>)
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	189b      	adds	r3, r3, r2
 8000542:	b2db      	uxtb	r3, r3
 8000544:	1c1a      	adds	r2, r3, #0
 8000546:	1c13      	adds	r3, r2, #0
 8000548:	18db      	adds	r3, r3, r3
 800054a:	189b      	adds	r3, r3, r2
 800054c:	18db      	adds	r3, r3, r3
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b53      	ldr	r3, [pc, #332]	@ (80006a0 <main+0x274>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	18d3      	adds	r3, r2, r3
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b51      	ldr	r3, [pc, #324]	@ (80006a0 <main+0x274>)
 800055a:	701a      	strb	r2, [r3, #0]
	  q = d0 / 10;
 800055c:	4b50      	ldr	r3, [pc, #320]	@ (80006a0 <main+0x274>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	210a      	movs	r1, #10
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff fdd0 	bl	8000108 <__udivsi3>
 8000568:	0003      	movs	r3, r0
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b50      	ldr	r3, [pc, #320]	@ (80006b0 <main+0x284>)
 800056e:	701a      	strb	r2, [r3, #0]
	  d0 = d0 % 10;
 8000570:	4b4b      	ldr	r3, [pc, #300]	@ (80006a0 <main+0x274>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	210a      	movs	r1, #10
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff fe4c 	bl	8000214 <__aeabi_uidivmod>
 800057c:	000b      	movs	r3, r1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b47      	ldr	r3, [pc, #284]	@ (80006a0 <main+0x274>)
 8000582:	701a      	strb	r2, [r3, #0]

	  d1 = q + 9*d3 + 5*d2 + d1;
 8000584:	4b49      	ldr	r3, [pc, #292]	@ (80006ac <main+0x280>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	1c1a      	adds	r2, r3, #0
 800058a:	00d2      	lsls	r2, r2, #3
 800058c:	18d3      	adds	r3, r2, r3
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b45      	ldr	r3, [pc, #276]	@ (80006a8 <main+0x27c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	1c19      	adds	r1, r3, #0
 8000596:	0089      	lsls	r1, r1, #2
 8000598:	18cb      	adds	r3, r1, r3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b43      	ldr	r3, [pc, #268]	@ (80006b0 <main+0x284>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	18d3      	adds	r3, r2, r3
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b3e      	ldr	r3, [pc, #248]	@ (80006a4 <main+0x278>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	18d3      	adds	r3, r2, r3
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b3c      	ldr	r3, [pc, #240]	@ (80006a4 <main+0x278>)
 80005b2:	701a      	strb	r2, [r3, #0]
	  q = d1 / 10;
 80005b4:	4b3b      	ldr	r3, [pc, #236]	@ (80006a4 <main+0x278>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	210a      	movs	r1, #10
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fda4 	bl	8000108 <__udivsi3>
 80005c0:	0003      	movs	r3, r0
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b3a      	ldr	r3, [pc, #232]	@ (80006b0 <main+0x284>)
 80005c6:	701a      	strb	r2, [r3, #0]
	  d1 = d1 % 10;
 80005c8:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <main+0x278>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	210a      	movs	r1, #10
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff fe20 	bl	8000214 <__aeabi_uidivmod>
 80005d4:	000b      	movs	r3, r1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <main+0x278>)
 80005da:	701a      	strb	r2, [r3, #0]

	  d2 = q + 2*d2;
 80005dc:	4b32      	ldr	r3, [pc, #200]	@ (80006a8 <main+0x27c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	18db      	adds	r3, r3, r3
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b32      	ldr	r3, [pc, #200]	@ (80006b0 <main+0x284>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <main+0x27c>)
 80005ee:	701a      	strb	r2, [r3, #0]
	  q = d2 / 10;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	@ (80006a8 <main+0x27c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	210a      	movs	r1, #10
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff fd86 	bl	8000108 <__udivsi3>
 80005fc:	0003      	movs	r3, r0
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <main+0x284>)
 8000602:	701a      	strb	r2, [r3, #0]
	  d2 = d2 % 10;
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <main+0x27c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	210a      	movs	r1, #10
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff fe02 	bl	8000214 <__aeabi_uidivmod>
 8000610:	000b      	movs	r3, r1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <main+0x27c>)
 8000616:	701a      	strb	r2, [r3, #0]

	  d3 = q + 4*d3;
 8000618:	4b24      	ldr	r3, [pc, #144]	@ (80006ac <main+0x280>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <main+0x284>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	18d3      	adds	r3, r2, r3
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <main+0x280>)
 800062a:	701a      	strb	r2, [r3, #0]
	  q = d3 / 10;
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <main+0x280>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	210a      	movs	r1, #10
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff fd68 	bl	8000108 <__udivsi3>
 8000638:	0003      	movs	r3, r0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <main+0x284>)
 800063e:	701a      	strb	r2, [r3, #0]
	  d3 = d3 % 10;
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <main+0x280>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	210a      	movs	r1, #10
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff fde4 	bl	8000214 <__aeabi_uidivmod>
 800064c:	000b      	movs	r3, r1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <main+0x280>)
 8000652:	701a      	strb	r2, [r3, #0]

	  d4 = q;
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <main+0x284>)
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <main+0x288>)
 800065a:	701a      	strb	r2, [r3, #0]


	  HAL_Delay(500);
 800065c:	23fa      	movs	r3, #250	@ 0xfa
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fb2f 	bl	8000cc4 <HAL_Delay>
	  lcd_init();
 8000666:	f7ff fe8d 	bl	8000384 <lcd_init>
	  HAL_Delay(500);
 800066a:	23fa      	movs	r3, #250	@ 0xfa
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fb28 	bl	8000cc4 <HAL_Delay>
	  lcd_clear();
 8000674:	f7ff fe50 	bl	8000318 <lcd_clear>
	  HAL_Delay(500);
 8000678:	23fa      	movs	r3, #250	@ 0xfa
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fb21 	bl	8000cc4 <HAL_Delay>
	  lcd_send_string("Testing");
 8000682:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <main+0x28c>)
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff febb 	bl	8000400 <lcd_send_string>
	  HAL_ADC_Start(&hadc); // Start the ADC
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	e710      	b.n	80004b0 <main+0x84>
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	0800307c 	.word	0x0800307c
 8000694:	08003088 	.word	0x08003088
 8000698:	20000028 	.word	0x20000028
 800069c:	200000f8 	.word	0x200000f8
 80006a0:	200000fe 	.word	0x200000fe
 80006a4:	200000fd 	.word	0x200000fd
 80006a8:	200000fc 	.word	0x200000fc
 80006ac:	200000fb 	.word	0x200000fb
 80006b0:	200000ff 	.word	0x200000ff
 80006b4:	200000fa 	.word	0x200000fa
 80006b8:	08003094 	.word	0x08003094

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b095      	sub	sp, #84	@ 0x54
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	2420      	movs	r4, #32
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2330      	movs	r3, #48	@ 0x30
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f002 fc9d 	bl	800300c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	2310      	movs	r3, #16
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	0018      	movs	r0, r3
 80006d8:	2310      	movs	r3, #16
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f002 fc95 	bl	800300c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e2:	003b      	movs	r3, r7
 80006e4:	0018      	movs	r0, r3
 80006e6:	2310      	movs	r3, #16
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f002 fc8e 	bl	800300c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80006f0:	0021      	movs	r1, r4
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2213      	movs	r2, #19
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2201      	movs	r2, #1
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2201      	movs	r2, #1
 8000702:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2201      	movs	r2, #1
 8000708:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2210      	movs	r2, #16
 800070e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2210      	movs	r2, #16
 8000714:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2202      	movs	r2, #2
 800071a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	0252      	lsls	r2, r2, #9
 8000722:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2280      	movs	r2, #128	@ 0x80
 8000728:	0352      	lsls	r2, r2, #13
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	187b      	adds	r3, r7, r1
 8000734:	0018      	movs	r0, r3
 8000736:	f001 ff4f 	bl	80025d8 <HAL_RCC_OscConfig>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800073e:	f000 f909 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	2110      	movs	r1, #16
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2207      	movs	r2, #7
 8000748:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2202      	movs	r2, #2
 800074e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2101      	movs	r1, #1
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fa53 	bl	8002c0c <HAL_RCC_ClockConfig>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800076a:	f000 f8f3 	bl	8000954 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800076e:	003b      	movs	r3, r7
 8000770:	2220      	movs	r2, #32
 8000772:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077a:	003b      	movs	r3, r7
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fb77 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000786:	f000 f8e5 	bl	8000954 <Error_Handler>
  }
}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b015      	add	sp, #84	@ 0x54
 8000790:	bd90      	pop	{r4, r7, pc}
	...

08000794 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	0018      	movs	r0, r3
 800079e:	230c      	movs	r3, #12
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f002 fc32 	bl	800300c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007aa:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <MX_ADC_Init+0xb4>)
 80007ac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007c0:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007da:	2201      	movs	r2, #1
 80007dc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e4:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007e6:	22c2      	movs	r2, #194	@ 0xc2
 80007e8:	32ff      	adds	r2, #255	@ 0xff
 80007ea:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007f4:	2224      	movs	r2, #36	@ 0x24
 80007f6:	2100      	movs	r1, #0
 80007f8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_ADC_Init+0xb0>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000800:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_ADC_Init+0xb0>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fa82 	bl	8000d0c <HAL_ADC_Init>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800080c:	f000 f8a2 	bl	8000954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2280      	movs	r2, #128	@ 0x80
 800081a:	0152      	lsls	r2, r2, #5
 800081c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	0552      	lsls	r2, r2, #21
 8000824:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_ADC_Init+0xb0>)
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fdaf 	bl	8001390 <HAL_ADC_ConfigChannel>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000836:	f000 f88d 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b004      	add	sp, #16
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	20000028 	.word	0x20000028
 8000848:	40012400 	.word	0x40012400

0800084c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C1_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <MX_I2C1_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000888:	0018      	movs	r0, r3
 800088a:	f001 faf7 	bl	8001e7c <HAL_I2C_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f85f 	bl	8000954 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_I2C1_Init+0x74>)
 8000898:	2100      	movs	r1, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fe04 	bl	80024a8 <HAL_I2CEx_ConfigAnalogFilter>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f856 	bl	8000954 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <MX_I2C1_Init+0x74>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fe47 	bl	8002540 <HAL_I2CEx_ConfigDigitalFilter>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f84d 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000ac 	.word	0x200000ac
 80008c4:	40005400 	.word	0x40005400
 80008c8:	2000090e 	.word	0x2000090e

080008cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_DMA_Init+0x38>)
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_DMA_Init+0x38>)
 80008d8:	2101      	movs	r1, #1
 80008da:	430a      	orrs	r2, r1
 80008dc:	615a      	str	r2, [r3, #20]
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_DMA_Init+0x38>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	2201      	movs	r2, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2009      	movs	r0, #9
 80008f0:	f001 f81c 	bl	800192c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f4:	2009      	movs	r0, #9
 80008f6:	f001 f82e 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	40021000 	.word	0x40021000

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_GPIO_Init+0x48>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_GPIO_Init+0x48>)
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	03c9      	lsls	r1, r1, #15
 8000918:	430a      	orrs	r2, r1
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_GPIO_Init+0x48>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	03db      	lsls	r3, r3, #15
 8000924:	4013      	ands	r3, r2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_GPIO_Init+0x48>)
 800092c:	695a      	ldr	r2, [r3, #20]
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_GPIO_Init+0x48>)
 8000930:	2180      	movs	r1, #128	@ 0x80
 8000932:	0289      	lsls	r1, r1, #10
 8000934:	430a      	orrs	r2, r1
 8000936:	615a      	str	r2, [r3, #20]
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <MX_GPIO_Init+0x48>)
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	2380      	movs	r3, #128	@ 0x80
 800093e:	029b      	lsls	r3, r3, #10
 8000940:	4013      	ands	r3, r2
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	40021000 	.word	0x40021000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <HAL_MspInit+0x44>)
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_MspInit+0x44>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	619a      	str	r2, [r3, #24]
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <HAL_MspInit+0x44>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	2201      	movs	r2, #1
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_MspInit+0x44>)
 8000980:	69da      	ldr	r2, [r3, #28]
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_MspInit+0x44>)
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	0549      	lsls	r1, r1, #21
 8000988:	430a      	orrs	r2, r1
 800098a:	61da      	str	r2, [r3, #28]
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <HAL_MspInit+0x44>)
 800098e:	69da      	ldr	r2, [r3, #28]
 8000990:	2380      	movs	r3, #128	@ 0x80
 8000992:	055b      	lsls	r3, r3, #21
 8000994:	4013      	ands	r3, r2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b08b      	sub	sp, #44	@ 0x2c
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	2414      	movs	r4, #20
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	0018      	movs	r0, r3
 80009b6:	2314      	movs	r3, #20
 80009b8:	001a      	movs	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	f002 fb26 	bl	800300c <memset>
  if(hadc->Instance==ADC1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <HAL_ADC_MspInit+0xe4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d15b      	bne.n	8000a82 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ca:	4b31      	ldr	r3, [pc, #196]	@ (8000a90 <HAL_ADC_MspInit+0xe8>)
 80009cc:	699a      	ldr	r2, [r3, #24]
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <HAL_ADC_MspInit+0xe8>)
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	0089      	lsls	r1, r1, #2
 80009d4:	430a      	orrs	r2, r1
 80009d6:	619a      	str	r2, [r3, #24]
 80009d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <HAL_ADC_MspInit+0xe8>)
 80009da:	699a      	ldr	r2, [r3, #24]
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a90 <HAL_ADC_MspInit+0xe8>)
 80009e8:	695a      	ldr	r2, [r3, #20]
 80009ea:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <HAL_ADC_MspInit+0xe8>)
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0289      	lsls	r1, r1, #10
 80009f0:	430a      	orrs	r2, r1
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <HAL_ADC_MspInit+0xe8>)
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	029b      	lsls	r3, r3, #10
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2202      	movs	r2, #2
 8000a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8000a14:	193a      	adds	r2, r7, r4
 8000a16:	2390      	movs	r3, #144	@ 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 f8bd 	bl	8001b9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a24:	4a1c      	ldr	r2, [pc, #112]	@ (8000a98 <HAL_ADC_MspInit+0xf0>)
 8000a26:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a36:	2280      	movs	r2, #128	@ 0x80
 8000a38:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a3c:	2280      	movs	r2, #128	@ 0x80
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 ff99 	bl	8001990 <HAL_DMA_Init>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000a62:	f7ff ff77 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <HAL_ADC_MspInit+0xec>)
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	200c      	movs	r0, #12
 8000a78:	f000 ff58 	bl	800192c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000a7c:	200c      	movs	r0, #12
 8000a7e:	f000 ff6a 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b00b      	add	sp, #44	@ 0x2c
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	40012400 	.word	0x40012400
 8000a90:	40021000 	.word	0x40021000
 8000a94:	20000068 	.word	0x20000068
 8000a98:	40020008 	.word	0x40020008

08000a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b08b      	sub	sp, #44	@ 0x2c
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	2414      	movs	r4, #20
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f002 faac 	bl	800300c <memset>
  if(hi2c->Instance==I2C1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b30 <HAL_I2C_MspInit+0x94>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d133      	bne.n	8000b26 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <HAL_I2C_MspInit+0x98>)
 8000ac0:	695a      	ldr	r2, [r3, #20]
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <HAL_I2C_MspInit+0x98>)
 8000ac4:	2180      	movs	r1, #128	@ 0x80
 8000ac6:	0289      	lsls	r1, r1, #10
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <HAL_I2C_MspInit+0x98>)
 8000ace:	695a      	ldr	r2, [r3, #20]
 8000ad0:	2380      	movs	r3, #128	@ 0x80
 8000ad2:	029b      	lsls	r3, r3, #10
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	22c0      	movs	r2, #192	@ 0xc0
 8000ade:	00d2      	lsls	r2, r2, #3
 8000ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2212      	movs	r2, #18
 8000ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2201      	movs	r2, #1
 8000aee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2203      	movs	r2, #3
 8000af4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2204      	movs	r2, #4
 8000afa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	2390      	movs	r3, #144	@ 0x90
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 f849 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_I2C_MspInit+0x98>)
 8000b0c:	69da      	ldr	r2, [r3, #28]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_I2C_MspInit+0x98>)
 8000b10:	2180      	movs	r1, #128	@ 0x80
 8000b12:	0389      	lsls	r1, r1, #14
 8000b14:	430a      	orrs	r2, r1
 8000b16:	61da      	str	r2, [r3, #28]
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_I2C_MspInit+0x98>)
 8000b1a:	69da      	ldr	r2, [r3, #28]
 8000b1c:	2380      	movs	r3, #128	@ 0x80
 8000b1e:	039b      	lsls	r3, r3, #14
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b00b      	add	sp, #44	@ 0x2c
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40021000 	.word	0x40021000

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	e7fd      	b.n	8000b3c <NMI_Handler+0x4>

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	e7fd      	b.n	8000b44 <HardFault_Handler+0x4>

08000b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f894 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b70:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <DMA1_Channel1_IRQHandler+0x14>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 ff54 	bl	8001a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	20000068 	.word	0x20000068

08000b84 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <ADC1_IRQHandler+0x14>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fb30 	bl	80011f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	20000028 	.word	0x20000028

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba8:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000baa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bae:	490e      	ldr	r1, [pc, #56]	@ (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc4:	4c0b      	ldr	r4, [pc, #44]	@ (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bd2:	f7ff ffe3 	bl	8000b9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bd6:	f002 fa21 	bl	800301c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fc27 	bl	800042c <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   r0, =_estack
 8000be0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bec:	080030d4 	.word	0x080030d4
  ldr r2, =_sbss
 8000bf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf4:	20000104 	.word	0x20000104

08000bf8 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <DMA1_Channel2_3_IRQHandler>
	...

08000bfc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <HAL_Init+0x24>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_Init+0x24>)
 8000c06:	2110      	movs	r1, #16
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 f809 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c12:	f7ff fea5 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_InitTick+0x5c>)
 8000c2e:	681c      	ldr	r4, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_InitTick+0x60>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	0019      	movs	r1, r3
 8000c36:	23fa      	movs	r3, #250	@ 0xfa
 8000c38:	0098      	lsls	r0, r3, #2
 8000c3a:	f7ff fa65 	bl	8000108 <__udivsi3>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	0019      	movs	r1, r3
 8000c42:	0020      	movs	r0, r4
 8000c44:	f7ff fa60 	bl	8000108 <__udivsi3>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fe93 	bl	8001976 <HAL_SYSTICK_Config>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e00f      	b.n	8000c78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d80b      	bhi.n	8000c76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	2301      	movs	r3, #1
 8000c62:	425b      	negs	r3, r3
 8000c64:	2200      	movs	r2, #0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fe60 	bl	800192c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_InitTick+0x64>)
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b003      	add	sp, #12
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	001a      	movs	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	18d2      	adds	r2, r2, r3
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <HAL_IncTick+0x20>)
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000100 	.word	0x20000100

08000cb0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	@ (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	20000100 	.word	0x20000100

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff0 	bl	8000cb0 <HAL_GetTick>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	189b      	adds	r3, r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	f7ff ffe0 	bl	8000cb0 <HAL_GetTick>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000008 	.word	0x20000008

08000d0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d14:	230f      	movs	r3, #15
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e125      	b.n	8000f76 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10a      	bne.n	8000d48 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2234      	movs	r2, #52	@ 0x34
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff fe30 	bl	80009a8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d000      	beq.n	8000d54 <HAL_ADC_Init+0x48>
 8000d52:	e103      	b.n	8000f5c <HAL_ADC_Init+0x250>
 8000d54:	230f      	movs	r3, #15
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d000      	beq.n	8000d60 <HAL_ADC_Init+0x54>
 8000d5e:	e0fd      	b.n	8000f5c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2204      	movs	r2, #4
 8000d68:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d6a:	d000      	beq.n	8000d6e <HAL_ADC_Init+0x62>
 8000d6c:	e0f6      	b.n	8000f5c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d72:	4a83      	ldr	r2, [pc, #524]	@ (8000f80 <HAL_ADC_Init+0x274>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	2202      	movs	r2, #2
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2203      	movs	r2, #3
 8000d86:	4013      	ands	r3, r2
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d112      	bne.n	8000db2 <HAL_ADC_Init+0xa6>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d009      	beq.n	8000dae <HAL_ADC_Init+0xa2>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	2380      	movs	r3, #128	@ 0x80
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	401a      	ands	r2, r3
 8000da6:	2380      	movs	r3, #128	@ 0x80
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Init+0xa6>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <HAL_ADC_Init+0xa8>
 8000db2:	2300      	movs	r3, #0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d116      	bne.n	8000de6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2218      	movs	r2, #24
 8000dc0:	4393      	bics	r3, r2
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	0899      	lsrs	r1, r3, #2
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4964      	ldr	r1, [pc, #400]	@ (8000f84 <HAL_ADC_Init+0x278>)
 8000df2:	400a      	ands	r2, r1
 8000df4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e5b      	ldrb	r3, [r3, #25]
 8000e00:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e02:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7e9b      	ldrb	r3, [r3, #26]
 8000e08:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d002      	beq.n	8000e1a <HAL_ADC_Init+0x10e>
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	015b      	lsls	r3, r3, #5
 8000e18:	e000      	b.n	8000e1c <HAL_ADC_Init+0x110>
 8000e1a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e1c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e22:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d101      	bne.n	8000e30 <HAL_ADC_Init+0x124>
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	e000      	b.n	8000e32 <HAL_ADC_Init+0x126>
 8000e30:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e32:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2124      	movs	r1, #36	@ 0x24
 8000e38:	5c5b      	ldrb	r3, [r3, r1]
 8000e3a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e3c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7edb      	ldrb	r3, [r3, #27]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d115      	bne.n	8000e78 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7e9b      	ldrb	r3, [r3, #26]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d105      	bne.n	8000e60 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2280      	movs	r2, #128	@ 0x80
 8000e58:	0252      	lsls	r2, r2, #9
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	e00b      	b.n	8000e78 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e64:	2220      	movs	r2, #32
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e70:	2201      	movs	r2, #1
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69da      	ldr	r2, [r3, #28]
 8000e7c:	23c2      	movs	r3, #194	@ 0xc2
 8000e7e:	33ff      	adds	r3, #255	@ 0xff
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d007      	beq.n	8000e94 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68d9      	ldr	r1, [r3, #12]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	055b      	lsls	r3, r3, #21
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d01b      	beq.n	8000ee8 <HAL_ADC_Init+0x1dc>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d017      	beq.n	8000ee8 <HAL_ADC_Init+0x1dc>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d013      	beq.n	8000ee8 <HAL_ADC_Init+0x1dc>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d00f      	beq.n	8000ee8 <HAL_ADC_Init+0x1dc>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d00b      	beq.n	8000ee8 <HAL_ADC_Init+0x1dc>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed4:	2b05      	cmp	r3, #5
 8000ed6:	d007      	beq.n	8000ee8 <HAL_ADC_Init+0x1dc>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000edc:	2b06      	cmp	r3, #6
 8000ede:	d003      	beq.n	8000ee8 <HAL_ADC_Init+0x1dc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d112      	bne.n	8000f0e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	438a      	bics	r2, r1
 8000ef6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6959      	ldr	r1, [r3, #20]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f02:	2207      	movs	r2, #7
 8000f04:	401a      	ands	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	4a1c      	ldr	r2, [pc, #112]	@ (8000f88 <HAL_ADC_Init+0x27c>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d10b      	bne.n	8000f36 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4393      	bics	r3, r2
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f34:	e01c      	b.n	8000f70 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f3a:	2212      	movs	r2, #18
 8000f3c:	4393      	bics	r3, r2
 8000f3e:	2210      	movs	r2, #16
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f52:	230f      	movs	r3, #15
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f5a:	e009      	b.n	8000f70 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f60:	2210      	movs	r2, #16
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	781b      	ldrb	r3, [r3, #0]
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	fffffefd 	.word	0xfffffefd
 8000f84:	fffe0219 	.word	0xfffe0219
 8000f88:	833fffe7 	.word	0x833fffe7

08000f8c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f94:	230f      	movs	r3, #15
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d138      	bne.n	800101a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2234      	movs	r2, #52	@ 0x34
 8000fac:	5c9b      	ldrb	r3, [r3, r2]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_ADC_Start+0x2a>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e038      	b.n	8001028 <HAL_ADC_Start+0x9c>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2234      	movs	r2, #52	@ 0x34
 8000fba:	2101      	movs	r1, #1
 8000fbc:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7e5b      	ldrb	r3, [r3, #25]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d007      	beq.n	8000fd6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fc      	adds	r4, r7, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 fad5 	bl	800157c <ADC_Enable>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d120      	bne.n	8001022 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <HAL_ADC_Start+0xa4>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	0052      	lsls	r2, r2, #1
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2234      	movs	r2, #52	@ 0x34
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	221c      	movs	r2, #28
 8001006:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2104      	movs	r1, #4
 8001014:	430a      	orrs	r2, r1
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	e003      	b.n	8001022 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800101a:	230f      	movs	r3, #15
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2202      	movs	r2, #2
 8001020:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001022:	230f      	movs	r3, #15
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	781b      	ldrb	r3, [r3, #0]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b005      	add	sp, #20
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	fffff0fe 	.word	0xfffff0fe

08001034 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2234      	movs	r2, #52	@ 0x34
 8001048:	5c9b      	ldrb	r3, [r3, r2]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Stop+0x1e>
 800104e:	2302      	movs	r3, #2
 8001050:	e029      	b.n	80010a6 <HAL_ADC_Stop+0x72>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2234      	movs	r2, #52	@ 0x34
 8001056:	2101      	movs	r1, #1
 8001058:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800105a:	250f      	movs	r5, #15
 800105c:	197c      	adds	r4, r7, r5
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	0018      	movs	r0, r3
 8001062:	f000 fb71 	bl	8001748 <ADC_ConversionStop>
 8001066:	0003      	movs	r3, r0
 8001068:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800106a:	197b      	adds	r3, r7, r5
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d112      	bne.n	8001098 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001072:	197c      	adds	r4, r7, r5
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fafc 	bl	8001674 <ADC_Disable>
 800107c:	0003      	movs	r3, r0
 800107e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001080:	197b      	adds	r3, r7, r5
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d107      	bne.n	8001098 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800108c:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_ADC_Stop+0x7c>)
 800108e:	4013      	ands	r3, r2
 8001090:	2201      	movs	r2, #1
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2234      	movs	r2, #52	@ 0x34
 800109c:	2100      	movs	r1, #0
 800109e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80010a0:	230f      	movs	r3, #15
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	781b      	ldrb	r3, [r3, #0]
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b004      	add	sp, #16
 80010ac:	bdb0      	pop	{r4, r5, r7, pc}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	fffffefe 	.word	0xfffffefe

080010b4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d102      	bne.n	80010cc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80010c6:	2308      	movs	r3, #8
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e014      	b.n	80010f6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2201      	movs	r2, #1
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d10b      	bne.n	80010f2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010de:	2220      	movs	r2, #32
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2234      	movs	r2, #52	@ 0x34
 80010ea:	2100      	movs	r1, #0
 80010ec:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e06b      	b.n	80011ca <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010f2:	230c      	movs	r3, #12
 80010f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010f6:	f7ff fddb 	bl	8000cb0 <HAL_GetTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010fe:	e019      	b.n	8001134 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	d016      	beq.n	8001134 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <HAL_ADC_PollForConversion+0x68>
 800110c:	f7ff fdd0 	bl	8000cb0 <HAL_GetTick>
 8001110:	0002      	movs	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d20b      	bcs.n	8001134 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001120:	2204      	movs	r2, #4
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2234      	movs	r2, #52	@ 0x34
 800112c:	2100      	movs	r1, #0
 800112e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e04a      	b.n	80011ca <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	d0df      	beq.n	8001100 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	23c0      	movs	r3, #192	@ 0xc0
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4013      	ands	r3, r2
 800115a:	d12d      	bne.n	80011b8 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001160:	2b00      	cmp	r3, #0
 8001162:	d129      	bne.n	80011b8 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2208      	movs	r2, #8
 800116c:	4013      	ands	r3, r2
 800116e:	2b08      	cmp	r3, #8
 8001170:	d122      	bne.n	80011b8 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2204      	movs	r2, #4
 800117a:	4013      	ands	r3, r2
 800117c:	d110      	bne.n	80011a0 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	210c      	movs	r1, #12
 800118a:	438a      	bics	r2, r1
 800118c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001192:	4a10      	ldr	r2, [pc, #64]	@ (80011d4 <HAL_ADC_PollForConversion+0x120>)
 8001194:	4013      	ands	r3, r2
 8001196:	2201      	movs	r2, #1
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	639a      	str	r2, [r3, #56]	@ 0x38
 800119e:	e00b      	b.n	80011b8 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a4:	2220      	movs	r2, #32
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011b0:	2201      	movs	r2, #1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7e1b      	ldrb	r3, [r3, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d103      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	220c      	movs	r2, #12
 80011c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	fffffefe 	.word	0xfffffefe

080011d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2204      	movs	r2, #4
 8001200:	4013      	ands	r3, r2
 8001202:	2b04      	cmp	r3, #4
 8001204:	d106      	bne.n	8001214 <HAL_ADC_IRQHandler+0x24>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2204      	movs	r2, #4
 800120e:	4013      	ands	r3, r2
 8001210:	2b04      	cmp	r3, #4
 8001212:	d00d      	beq.n	8001230 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2208      	movs	r2, #8
 800121c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800121e:	2b08      	cmp	r3, #8
 8001220:	d14f      	bne.n	80012c2 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2208      	movs	r2, #8
 800122a:	4013      	ands	r3, r2
 800122c:	2b08      	cmp	r3, #8
 800122e:	d148      	bne.n	80012c2 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001234:	2210      	movs	r2, #16
 8001236:	4013      	ands	r3, r2
 8001238:	d106      	bne.n	8001248 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	23c0      	movs	r3, #192	@ 0xc0
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4013      	ands	r3, r2
 8001254:	d12d      	bne.n	80012b2 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800125a:	2b00      	cmp	r3, #0
 800125c:	d129      	bne.n	80012b2 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2208      	movs	r2, #8
 8001266:	4013      	ands	r3, r2
 8001268:	2b08      	cmp	r3, #8
 800126a:	d122      	bne.n	80012b2 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2204      	movs	r2, #4
 8001274:	4013      	ands	r3, r2
 8001276:	d110      	bne.n	800129a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	210c      	movs	r1, #12
 8001284:	438a      	bics	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128c:	4a33      	ldr	r2, [pc, #204]	@ (800135c <HAL_ADC_IRQHandler+0x16c>)
 800128e:	4013      	ands	r3, r2
 8001290:	2201      	movs	r2, #1
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	639a      	str	r2, [r3, #56]	@ 0x38
 8001298:	e00b      	b.n	80012b2 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800129e:	2220      	movs	r2, #32
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012aa:	2201      	movs	r2, #1
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 f853 	bl	8001360 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2280      	movs	r2, #128	@ 0x80
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b80      	cmp	r3, #128	@ 0x80
 80012ce:	d115      	bne.n	80012fc <HAL_ADC_IRQHandler+0x10c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2280      	movs	r2, #128	@ 0x80
 80012d8:	4013      	ands	r3, r2
 80012da:	2b80      	cmp	r3, #128	@ 0x80
 80012dc:	d10e      	bne.n	80012fc <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	0252      	lsls	r2, r2, #9
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	639a      	str	r2, [r3, #56]	@ 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 f83e 	bl	8001370 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2280      	movs	r2, #128	@ 0x80
 80012fa:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2210      	movs	r2, #16
 8001304:	4013      	ands	r3, r2
 8001306:	2b10      	cmp	r3, #16
 8001308:	d123      	bne.n	8001352 <HAL_ADC_IRQHandler+0x162>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2210      	movs	r2, #16
 8001312:	4013      	ands	r3, r2
 8001314:	2b10      	cmp	r3, #16
 8001316:	d11c      	bne.n	8001352 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131c:	2b01      	cmp	r3, #1
 800131e:	d006      	beq.n	800132e <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2201      	movs	r2, #1
 8001328:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800132a:	2b01      	cmp	r3, #1
 800132c:	d10d      	bne.n	800134a <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001332:	2202      	movs	r2, #2
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2210      	movs	r2, #16
 8001340:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0018      	movs	r0, r3
 8001346:	f000 f81b 	bl	8001380 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2210      	movs	r2, #16
 8001350:	601a      	str	r2, [r3, #0]
  }

}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	fffffefe 	.word	0xfffffefe

08001360 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001378:	46c0      	nop			@ (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001388:	46c0      	nop			@ (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b002      	add	sp, #8
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139a:	230f      	movs	r3, #15
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	055b      	lsls	r3, r3, #21
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d011      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d00d      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d009      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d005      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d001      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2234      	movs	r2, #52	@ 0x34
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x54>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e0bb      	b.n	800155c <HAL_ADC_ConfigChannel+0x1cc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2234      	movs	r2, #52	@ 0x34
 80013e8:	2101      	movs	r1, #1
 80013ea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2204      	movs	r2, #4
 80013f4:	4013      	ands	r3, r2
 80013f6:	d000      	beq.n	80013fa <HAL_ADC_ConfigChannel+0x6a>
 80013f8:	e09f      	b.n	800153a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a59      	ldr	r2, [pc, #356]	@ (8001564 <HAL_ADC_ConfigChannel+0x1d4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x76>
 8001404:	e077      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	055b      	lsls	r3, r3, #21
 8001424:	429a      	cmp	r2, r3
 8001426:	d037      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142c:	2b01      	cmp	r3, #1
 800142e:	d033      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001434:	2b02      	cmp	r3, #2
 8001436:	d02f      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143c:	2b03      	cmp	r3, #3
 800143e:	d02b      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001444:	2b04      	cmp	r3, #4
 8001446:	d027      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144c:	2b05      	cmp	r3, #5
 800144e:	d023      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001454:	2b06      	cmp	r3, #6
 8001456:	d01f      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145c:	2b07      	cmp	r3, #7
 800145e:	d01b      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	2107      	movs	r1, #7
 800146c:	400b      	ands	r3, r1
 800146e:	429a      	cmp	r2, r3
 8001470:	d012      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	695a      	ldr	r2, [r3, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2107      	movs	r1, #7
 800147e:	438a      	bics	r2, r1
 8001480:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6959      	ldr	r1, [r3, #20]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2207      	movs	r2, #7
 800148e:	401a      	ands	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b10      	cmp	r3, #16
 800149e:	d003      	beq.n	80014a8 <HAL_ADC_ConfigChannel+0x118>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b11      	cmp	r3, #17
 80014a6:	d152      	bne.n	800154e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80014a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001568 <HAL_ADC_ConfigChannel+0x1d8>)
 80014aa:	6819      	ldr	r1, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b10      	cmp	r3, #16
 80014b2:	d102      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x12a>
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	041b      	lsls	r3, r3, #16
 80014b8:	e001      	b.n	80014be <HAL_ADC_ConfigChannel+0x12e>
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	03db      	lsls	r3, r3, #15
 80014be:	4a2a      	ldr	r2, [pc, #168]	@ (8001568 <HAL_ADC_ConfigChannel+0x1d8>)
 80014c0:	430b      	orrs	r3, r1
 80014c2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	d140      	bne.n	800154e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014cc:	4b27      	ldr	r3, [pc, #156]	@ (800156c <HAL_ADC_ConfigChannel+0x1dc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4927      	ldr	r1, [pc, #156]	@ (8001570 <HAL_ADC_ConfigChannel+0x1e0>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7fe fe18 	bl	8000108 <__udivsi3>
 80014d8:	0003      	movs	r3, r0
 80014da:	001a      	movs	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	189b      	adds	r3, r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014e6:	e002      	b.n	80014ee <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f9      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x158>
 80014f4:	e02b      	b.n	800154e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	4099      	lsls	r1, r3
 8001504:	000b      	movs	r3, r1
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b10      	cmp	r3, #16
 8001516:	d003      	beq.n	8001520 <HAL_ADC_ConfigChannel+0x190>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b11      	cmp	r3, #17
 800151e:	d116      	bne.n	800154e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_ADC_ConfigChannel+0x1d8>)
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b10      	cmp	r3, #16
 800152a:	d101      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1a0>
 800152c:	4a11      	ldr	r2, [pc, #68]	@ (8001574 <HAL_ADC_ConfigChannel+0x1e4>)
 800152e:	e000      	b.n	8001532 <HAL_ADC_ConfigChannel+0x1a2>
 8001530:	4a11      	ldr	r2, [pc, #68]	@ (8001578 <HAL_ADC_ConfigChannel+0x1e8>)
 8001532:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <HAL_ADC_ConfigChannel+0x1d8>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e009      	b.n	800154e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153e:	2220      	movs	r2, #32
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001546:	230f      	movs	r3, #15
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2234      	movs	r2, #52	@ 0x34
 8001552:	2100      	movs	r1, #0
 8001554:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001556:	230f      	movs	r3, #15
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b004      	add	sp, #16
 8001562:	bd80      	pop	{r7, pc}
 8001564:	00001001 	.word	0x00001001
 8001568:	40012708 	.word	0x40012708
 800156c:	20000000 	.word	0x20000000
 8001570:	000f4240 	.word	0x000f4240
 8001574:	ff7fffff 	.word	0xff7fffff
 8001578:	ffbfffff 	.word	0xffbfffff

0800157c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2203      	movs	r2, #3
 8001594:	4013      	ands	r3, r2
 8001596:	2b01      	cmp	r3, #1
 8001598:	d112      	bne.n	80015c0 <ADC_Enable+0x44>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d009      	beq.n	80015bc <ADC_Enable+0x40>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	401a      	ands	r2, r3
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d101      	bne.n	80015c0 <ADC_Enable+0x44>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <ADC_Enable+0x46>
 80015c0:	2300      	movs	r3, #0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d14b      	bne.n	800165e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a26      	ldr	r2, [pc, #152]	@ (8001668 <ADC_Enable+0xec>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	d00d      	beq.n	80015ee <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d6:	2210      	movs	r2, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e2:	2201      	movs	r2, #1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e038      	b.n	8001660 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <ADC_Enable+0xf0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	491b      	ldr	r1, [pc, #108]	@ (8001670 <ADC_Enable+0xf4>)
 8001604:	0018      	movs	r0, r3
 8001606:	f7fe fd7f 	bl	8000108 <__udivsi3>
 800160a:	0003      	movs	r3, r0
 800160c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800160e:	e002      	b.n	8001616 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	3b01      	subs	r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f9      	bne.n	8001610 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800161c:	f7ff fb48 	bl	8000cb0 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001624:	e014      	b.n	8001650 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001626:	f7ff fb43 	bl	8000cb0 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d90d      	bls.n	8001650 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001638:	2210      	movs	r2, #16
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	639a      	str	r2, [r3, #56]	@ 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001644:	2201      	movs	r2, #1
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e007      	b.n	8001660 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2201      	movs	r2, #1
 8001658:	4013      	ands	r3, r2
 800165a:	2b01      	cmp	r3, #1
 800165c:	d1e3      	bne.n	8001626 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b004      	add	sp, #16
 8001666:	bd80      	pop	{r7, pc}
 8001668:	80000017 	.word	0x80000017
 800166c:	20000000 	.word	0x20000000
 8001670:	000f4240 	.word	0x000f4240

08001674 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2203      	movs	r2, #3
 8001688:	4013      	ands	r3, r2
 800168a:	2b01      	cmp	r3, #1
 800168c:	d112      	bne.n	80016b4 <ADC_Disable+0x40>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	2b01      	cmp	r3, #1
 800169a:	d009      	beq.n	80016b0 <ADC_Disable+0x3c>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	401a      	ands	r2, r3
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d101      	bne.n	80016b4 <ADC_Disable+0x40>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <ADC_Disable+0x42>
 80016b4:	2300      	movs	r3, #0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d041      	beq.n	800173e <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2205      	movs	r2, #5
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d110      	bne.n	80016ea <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2102      	movs	r1, #2
 80016d4:	430a      	orrs	r2, r1
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2203      	movs	r2, #3
 80016de:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016e0:	f7ff fae6 	bl	8000cb0 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016e8:	e022      	b.n	8001730 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ee:	2210      	movs	r2, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016fa:	2201      	movs	r2, #1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e01c      	b.n	8001740 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001706:	f7ff fad3 	bl	8000cb0 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d90d      	bls.n	8001730 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001718:	2210      	movs	r2, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	639a      	str	r2, [r3, #56]	@ 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001724:	2201      	movs	r2, #1
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	63da      	str	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e007      	b.n	8001740 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	2b01      	cmp	r3, #1
 800173c:	d0e3      	beq.n	8001706 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}

08001748 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2204      	movs	r2, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d034      	beq.n	80017ca <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	2b04      	cmp	r3, #4
 800176c:	d10d      	bne.n	800178a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2202      	movs	r2, #2
 8001776:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001778:	d107      	bne.n	800178a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2110      	movs	r1, #16
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800178a:	f7ff fa91 	bl	8000cb0 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001792:	e014      	b.n	80017be <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001794:	f7ff fa8c 	bl	8000cb0 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d90d      	bls.n	80017be <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a6:	2210      	movs	r2, #16
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	639a      	str	r2, [r3, #56]	@ 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b2:	2201      	movs	r2, #1
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	63da      	str	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e006      	b.n	80017cc <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2204      	movs	r2, #4
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1e4      	bne.n	8001794 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b004      	add	sp, #16
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	0002      	movs	r2, r0
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80017e6:	d809      	bhi.n	80017fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	001a      	movs	r2, r3
 80017ee:	231f      	movs	r3, #31
 80017f0:	401a      	ands	r2, r3
 80017f2:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__NVIC_EnableIRQ+0x30>)
 80017f4:	2101      	movs	r1, #1
 80017f6:	4091      	lsls	r1, r2
 80017f8:	000a      	movs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
  }
}
 80017fc:	46c0      	nop			@ (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	0002      	movs	r2, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b7f      	cmp	r3, #127	@ 0x7f
 800181c:	d828      	bhi.n	8001870 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800181e:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <__NVIC_SetPriority+0xd4>)
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b25b      	sxtb	r3, r3
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	33c0      	adds	r3, #192	@ 0xc0
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	589b      	ldr	r3, [r3, r2]
 800182e:	1dfa      	adds	r2, r7, #7
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	0011      	movs	r1, r2
 8001834:	2203      	movs	r2, #3
 8001836:	400a      	ands	r2, r1
 8001838:	00d2      	lsls	r2, r2, #3
 800183a:	21ff      	movs	r1, #255	@ 0xff
 800183c:	4091      	lsls	r1, r2
 800183e:	000a      	movs	r2, r1
 8001840:	43d2      	mvns	r2, r2
 8001842:	401a      	ands	r2, r3
 8001844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	22ff      	movs	r2, #255	@ 0xff
 800184c:	401a      	ands	r2, r3
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	0018      	movs	r0, r3
 8001854:	2303      	movs	r3, #3
 8001856:	4003      	ands	r3, r0
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185c:	481f      	ldr	r0, [pc, #124]	@ (80018dc <__NVIC_SetPriority+0xd4>)
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b25b      	sxtb	r3, r3
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	430a      	orrs	r2, r1
 8001868:	33c0      	adds	r3, #192	@ 0xc0
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800186e:	e031      	b.n	80018d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001870:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <__NVIC_SetPriority+0xd8>)
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	0019      	movs	r1, r3
 8001878:	230f      	movs	r3, #15
 800187a:	400b      	ands	r3, r1
 800187c:	3b08      	subs	r3, #8
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3306      	adds	r3, #6
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	18d3      	adds	r3, r2, r3
 8001886:	3304      	adds	r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	1dfa      	adds	r2, r7, #7
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	0011      	movs	r1, r2
 8001890:	2203      	movs	r2, #3
 8001892:	400a      	ands	r2, r1
 8001894:	00d2      	lsls	r2, r2, #3
 8001896:	21ff      	movs	r1, #255	@ 0xff
 8001898:	4091      	lsls	r1, r2
 800189a:	000a      	movs	r2, r1
 800189c:	43d2      	mvns	r2, r2
 800189e:	401a      	ands	r2, r3
 80018a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	22ff      	movs	r2, #255	@ 0xff
 80018a8:	401a      	ands	r2, r3
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	0018      	movs	r0, r3
 80018b0:	2303      	movs	r3, #3
 80018b2:	4003      	ands	r3, r0
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b8:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <__NVIC_SetPriority+0xd8>)
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	001c      	movs	r4, r3
 80018c0:	230f      	movs	r3, #15
 80018c2:	4023      	ands	r3, r4
 80018c4:	3b08      	subs	r3, #8
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	430a      	orrs	r2, r1
 80018ca:	3306      	adds	r3, #6
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	18c3      	adds	r3, r0, r3
 80018d0:	3304      	adds	r3, #4
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	46c0      	nop			@ (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b003      	add	sp, #12
 80018da:	bd90      	pop	{r4, r7, pc}
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	1e5a      	subs	r2, r3, #1
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	045b      	lsls	r3, r3, #17
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d301      	bcc.n	80018fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f8:	2301      	movs	r3, #1
 80018fa:	e010      	b.n	800191e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <SysTick_Config+0x44>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	3a01      	subs	r2, #1
 8001902:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001904:	2301      	movs	r3, #1
 8001906:	425b      	negs	r3, r3
 8001908:	2103      	movs	r1, #3
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff ff7c 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <SysTick_Config+0x44>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <SysTick_Config+0x44>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	210f      	movs	r1, #15
 8001938:	187b      	adds	r3, r7, r1
 800193a:	1c02      	adds	r2, r0, #0
 800193c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	187b      	adds	r3, r7, r1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b25b      	sxtb	r3, r3
 8001946:	0011      	movs	r1, r2
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b004      	add	sp, #16
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	0002      	movs	r2, r0
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b25b      	sxtb	r3, r3
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff ff33 	bl	80017d4 <__NVIC_EnableIRQ>
}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff ffaf 	bl	80018e4 <SysTick_Config>
 8001986:	0003      	movs	r3, r0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b002      	add	sp, #8
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e036      	b.n	8001a14 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2221      	movs	r2, #33	@ 0x21
 80019aa:	2102      	movs	r1, #2
 80019ac:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a18      	ldr	r2, [pc, #96]	@ (8001a1c <HAL_DMA_Init+0x8c>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 f8b4 	bl	8001b64 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2221      	movs	r2, #33	@ 0x21
 8001a06:	2101      	movs	r1, #1
 8001a08:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	2100      	movs	r1, #0
 8001a10:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}  
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b004      	add	sp, #16
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	ffffc00f 	.word	0xffffc00f

08001a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	d024      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x72>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d020      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2220      	movs	r2, #32
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2104      	movs	r1, #4
 8001a68:	438a      	bics	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a74:	2104      	movs	r1, #4
 8001a76:	4091      	lsls	r1, r2
 8001a78:	000a      	movs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d100      	bne.n	8001a86 <HAL_DMA_IRQHandler+0x66>
 8001a84:	e06a      	b.n	8001b5c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a90:	e064      	b.n	8001b5c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2202      	movs	r2, #2
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	0013      	movs	r3, r2
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d02b      	beq.n	8001afa <HAL_DMA_IRQHandler+0xda>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d027      	beq.n	8001afa <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d10b      	bne.n	8001ace <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	210a      	movs	r1, #10
 8001ac2:	438a      	bics	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2221      	movs	r2, #33	@ 0x21
 8001aca:	2101      	movs	r1, #1
 8001acc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4091      	lsls	r1, r2
 8001ada:	000a      	movs	r2, r1
 8001adc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d036      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	0010      	movs	r0, r2
 8001af6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001af8:	e030      	b.n	8001b5c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	2208      	movs	r2, #8
 8001b00:	409a      	lsls	r2, r3
 8001b02:	0013      	movs	r3, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	d028      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x13c>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d024      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	210e      	movs	r1, #14
 8001b1e:	438a      	bics	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4091      	lsls	r1, r2
 8001b2e:	000a      	movs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2221      	movs	r2, #33	@ 0x21
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	0010      	movs	r0, r2
 8001b58:	4798      	blx	r3
    }
   }
}  
 8001b5a:	e7ff      	b.n	8001b5c <HAL_DMA_IRQHandler+0x13c>
 8001b5c:	46c0      	nop			@ (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b004      	add	sp, #16
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a08      	ldr	r2, [pc, #32]	@ (8001b94 <DMA_CalcBaseAndBitshift+0x30>)
 8001b72:	4694      	mov	ip, r2
 8001b74:	4463      	add	r3, ip
 8001b76:	2114      	movs	r1, #20
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7fe fac5 	bl	8000108 <__udivsi3>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	009a      	lsls	r2, r3, #2
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a03      	ldr	r2, [pc, #12]	@ (8001b98 <DMA_CalcBaseAndBitshift+0x34>)
 8001b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001b8c:	46c0      	nop			@ (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	bffdfff8 	.word	0xbffdfff8
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e14f      	b.n	8001e4c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4091      	lsls	r1, r2
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d100      	bne.n	8001bc4 <HAL_GPIO_Init+0x28>
 8001bc2:	e140      	b.n	8001e46 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d00b      	beq.n	8001be4 <HAL_GPIO_Init+0x48>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d007      	beq.n	8001be4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd8:	2b11      	cmp	r3, #17
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d130      	bne.n	8001c46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	43da      	mvns	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	409a      	lsls	r2, r3
 8001c06:	0013      	movs	r3, r2
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	43da      	mvns	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	2201      	movs	r2, #1
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	409a      	lsls	r2, r3
 8001c54:	0013      	movs	r3, r2
 8001c56:	43da      	mvns	r2, r3
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	409a      	lsls	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0xea>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d123      	bne.n	8001cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	58d3      	ldr	r3, [r2, r3]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2107      	movs	r1, #7
 8001cb2:	400b      	ands	r3, r1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	6939      	ldr	r1, [r7, #16]
 8001ccc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	401a      	ands	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	055b      	lsls	r3, r3, #21
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d100      	bne.n	8001d10 <HAL_GPIO_Init+0x174>
 8001d0e:	e09a      	b.n	8001e46 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d10:	4b54      	ldr	r3, [pc, #336]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	4b53      	ldr	r3, [pc, #332]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	619a      	str	r2, [r3, #24]
 8001d1c:	4b51      	ldr	r3, [pc, #324]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d28:	4a4f      	ldr	r2, [pc, #316]	@ (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	589b      	ldr	r3, [r3, r2]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	409a      	lsls	r2, r3
 8001d42:	0013      	movs	r3, r2
 8001d44:	43da      	mvns	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	2390      	movs	r3, #144	@ 0x90
 8001d50:	05db      	lsls	r3, r3, #23
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x1e2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a44      	ldr	r2, [pc, #272]	@ (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x1de>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a43      	ldr	r2, [pc, #268]	@ (8001e70 <HAL_GPIO_Init+0x2d4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x1da>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a42      	ldr	r2, [pc, #264]	@ (8001e74 <HAL_GPIO_Init+0x2d8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x1d6>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x1e4>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x1e4>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x1e4>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x1e4>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	2103      	movs	r1, #3
 8001d84:	400a      	ands	r2, r1
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d90:	4935      	ldr	r1, [pc, #212]	@ (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9e:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43da      	mvns	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	025b      	lsls	r3, r3, #9
 8001db6:	4013      	ands	r3, r2
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	4013      	ands	r3, r2
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dec:	4b22      	ldr	r3, [pc, #136]	@ (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	2380      	movs	r3, #128	@ 0x80
 8001e08:	035b      	lsls	r3, r3, #13
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43da      	mvns	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	039b      	lsls	r3, r3, #14
 8001e34:	4013      	ands	r3, r2
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e40:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	40da      	lsrs	r2, r3
 8001e54:	1e13      	subs	r3, r2, #0
 8001e56:	d000      	beq.n	8001e5a <HAL_GPIO_Init+0x2be>
 8001e58:	e6a8      	b.n	8001bac <HAL_GPIO_Init+0x10>
  } 
}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b006      	add	sp, #24
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	48000400 	.word	0x48000400
 8001e70:	48000800 	.word	0x48000800
 8001e74:	48000c00 	.word	0x48000c00
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e082      	b.n	8001f94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2241      	movs	r2, #65	@ 0x41
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d107      	bne.n	8001eaa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2240      	movs	r2, #64	@ 0x40
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7fe fdf9 	bl	8000a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2241      	movs	r2, #65	@ 0x41
 8001eae:	2124      	movs	r1, #36	@ 0x24
 8001eb0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	438a      	bics	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4934      	ldr	r1, [pc, #208]	@ (8001f9c <HAL_I2C_Init+0x120>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4931      	ldr	r1, [pc, #196]	@ (8001fa0 <HAL_I2C_Init+0x124>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d108      	bne.n	8001efa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2180      	movs	r1, #128	@ 0x80
 8001ef2:	0209      	lsls	r1, r1, #8
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e007      	b.n	8001f0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2184      	movs	r1, #132	@ 0x84
 8001f04:	0209      	lsls	r1, r1, #8
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d104      	bne.n	8001f1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2280      	movs	r2, #128	@ 0x80
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	491f      	ldr	r1, [pc, #124]	@ (8001fa4 <HAL_I2C_Init+0x128>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	491a      	ldr	r1, [pc, #104]	@ (8001fa0 <HAL_I2C_Init+0x124>)
 8001f38:	400a      	ands	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	0011      	movs	r1, r2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	021a      	lsls	r2, r3, #8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69d9      	ldr	r1, [r3, #28]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1a      	ldr	r2, [r3, #32]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2241      	movs	r2, #65	@ 0x41
 8001f80:	2120      	movs	r1, #32
 8001f82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2242      	movs	r2, #66	@ 0x42
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	f0ffffff 	.word	0xf0ffffff
 8001fa0:	ffff7fff 	.word	0xffff7fff
 8001fa4:	02008000 	.word	0x02008000

08001fa8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	0008      	movs	r0, r1
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	230a      	movs	r3, #10
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	1c02      	adds	r2, r0, #0
 8001fbc:	801a      	strh	r2, [r3, #0]
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	1c0a      	adds	r2, r1, #0
 8001fc4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2241      	movs	r2, #65	@ 0x41
 8001fca:	5c9b      	ldrb	r3, [r3, r2]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d000      	beq.n	8001fd4 <HAL_I2C_Master_Transmit+0x2c>
 8001fd2:	e0e7      	b.n	80021a4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2240      	movs	r2, #64	@ 0x40
 8001fd8:	5c9b      	ldrb	r3, [r3, r2]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2C_Master_Transmit+0x3a>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e0e1      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1fe>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2240      	movs	r2, #64	@ 0x40
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fea:	f7fe fe61 	bl	8000cb0 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	0219      	lsls	r1, r3, #8
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2319      	movs	r3, #25
 8001ffe:	2201      	movs	r2, #1
 8002000:	f000 f8fc 	bl	80021fc <I2C_WaitOnFlagUntilTimeout>
 8002004:	1e03      	subs	r3, r0, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0cc      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2241      	movs	r2, #65	@ 0x41
 8002010:	2121      	movs	r1, #33	@ 0x21
 8002012:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2242      	movs	r2, #66	@ 0x42
 8002018:	2110      	movs	r1, #16
 800201a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2208      	movs	r2, #8
 800202c:	18ba      	adds	r2, r7, r2
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	2bff      	cmp	r3, #255	@ 0xff
 8002040:	d911      	bls.n	8002066 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	22ff      	movs	r2, #255	@ 0xff
 8002046:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204c:	b2da      	uxtb	r2, r3
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	045c      	lsls	r4, r3, #17
 8002052:	230a      	movs	r3, #10
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	8819      	ldrh	r1, [r3, #0]
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	4b55      	ldr	r3, [pc, #340]	@ (80021b0 <HAL_I2C_Master_Transmit+0x208>)
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	0023      	movs	r3, r4
 8002060:	f000 f9ec 	bl	800243c <I2C_TransferConfig>
 8002064:	e075      	b.n	8002152 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002074:	b2da      	uxtb	r2, r3
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	049c      	lsls	r4, r3, #18
 800207a:	230a      	movs	r3, #10
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	8819      	ldrh	r1, [r3, #0]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	4b4b      	ldr	r3, [pc, #300]	@ (80021b0 <HAL_I2C_Master_Transmit+0x208>)
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	0023      	movs	r3, r4
 8002088:	f000 f9d8 	bl	800243c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800208c:	e061      	b.n	8002152 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f8f0 	bl	800227a <I2C_WaitOnTXISFlagUntilTimeout>
 800209a:	1e03      	subs	r3, r0, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e081      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d03a      	beq.n	8002152 <HAL_I2C_Master_Transmit+0x1aa>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d136      	bne.n	8002152 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	0013      	movs	r3, r2
 80020ee:	2200      	movs	r2, #0
 80020f0:	2180      	movs	r1, #128	@ 0x80
 80020f2:	f000 f883 	bl	80021fc <I2C_WaitOnFlagUntilTimeout>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e053      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	2bff      	cmp	r3, #255	@ 0xff
 8002106:	d911      	bls.n	800212c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	22ff      	movs	r2, #255	@ 0xff
 800210c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	b2da      	uxtb	r2, r3
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	045c      	lsls	r4, r3, #17
 8002118:	230a      	movs	r3, #10
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	8819      	ldrh	r1, [r3, #0]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	2300      	movs	r3, #0
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	0023      	movs	r3, r4
 8002126:	f000 f989 	bl	800243c <I2C_TransferConfig>
 800212a:	e012      	b.n	8002152 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213a:	b2da      	uxtb	r2, r3
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	049c      	lsls	r4, r3, #18
 8002140:	230a      	movs	r3, #10
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	8819      	ldrh	r1, [r3, #0]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	2300      	movs	r3, #0
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	0023      	movs	r3, r4
 800214e:	f000 f975 	bl	800243c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d198      	bne.n	800208e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 f8c8 	bl	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002168:	1e03      	subs	r3, r0, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e01a      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2220      	movs	r2, #32
 8002176:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	490c      	ldr	r1, [pc, #48]	@ (80021b4 <HAL_I2C_Master_Transmit+0x20c>)
 8002184:	400a      	ands	r2, r1
 8002186:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2241      	movs	r2, #65	@ 0x41
 800218c:	2120      	movs	r1, #32
 800218e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2242      	movs	r2, #66	@ 0x42
 8002194:	2100      	movs	r1, #0
 8002196:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2240      	movs	r2, #64	@ 0x40
 800219c:	2100      	movs	r1, #0
 800219e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e000      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80021a4:	2302      	movs	r3, #2
  }
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b007      	add	sp, #28
 80021ac:	bd90      	pop	{r4, r7, pc}
 80021ae:	46c0      	nop			@ (mov r8, r8)
 80021b0:	80002000 	.word	0x80002000
 80021b4:	fe00e800 	.word	0xfe00e800

080021b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d103      	bne.n	80021d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2201      	movs	r2, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d007      	beq.n	80021f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	430a      	orrs	r2, r1
 80021f2:	619a      	str	r2, [r3, #24]
  }
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800220c:	e021      	b.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	d01e      	beq.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002214:	f7fe fd4c 	bl	8000cb0 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d302      	bcc.n	800222a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d113      	bne.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	2220      	movs	r2, #32
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2241      	movs	r2, #65	@ 0x41
 800223a:	2120      	movs	r1, #32
 800223c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2242      	movs	r2, #66	@ 0x42
 8002242:	2100      	movs	r1, #0
 8002244:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2240      	movs	r2, #64	@ 0x40
 800224a:	2100      	movs	r1, #0
 800224c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e00f      	b.n	8002272 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	4013      	ands	r3, r2
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	425a      	negs	r2, r3
 8002262:	4153      	adcs	r3, r2
 8002264:	b2db      	uxtb	r3, r3
 8002266:	001a      	movs	r2, r3
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d0ce      	beq.n	800220e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b004      	add	sp, #16
 8002278:	bd80      	pop	{r7, pc}

0800227a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002286:	e02b      	b.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	0018      	movs	r0, r3
 8002290:	f000 f86e 	bl	8002370 <I2C_IsAcknowledgeFailed>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d001      	beq.n	800229c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e029      	b.n	80022f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	d01e      	beq.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7fe fd05 	bl	8000cb0 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d113      	bne.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022bc:	2220      	movs	r2, #32
 80022be:	431a      	orrs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2241      	movs	r2, #65	@ 0x41
 80022c8:	2120      	movs	r1, #32
 80022ca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2242      	movs	r2, #66	@ 0x42
 80022d0:	2100      	movs	r1, #0
 80022d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2240      	movs	r2, #64	@ 0x40
 80022d8:	2100      	movs	r1, #0
 80022da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e007      	b.n	80022f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2202      	movs	r2, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d1cc      	bne.n	8002288 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b004      	add	sp, #16
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002304:	e028      	b.n	8002358 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	0018      	movs	r0, r3
 800230e:	f000 f82f 	bl	8002370 <I2C_IsAcknowledgeFailed>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d001      	beq.n	800231a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e026      	b.n	8002368 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231a:	f7fe fcc9 	bl	8000cb0 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	d302      	bcc.n	8002330 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d113      	bne.n	8002358 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002334:	2220      	movs	r2, #32
 8002336:	431a      	orrs	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2241      	movs	r2, #65	@ 0x41
 8002340:	2120      	movs	r1, #32
 8002342:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2242      	movs	r2, #66	@ 0x42
 8002348:	2100      	movs	r1, #0
 800234a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2240      	movs	r2, #64	@ 0x40
 8002350:	2100      	movs	r1, #0
 8002352:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2220      	movs	r2, #32
 8002360:	4013      	ands	r3, r2
 8002362:	2b20      	cmp	r3, #32
 8002364:	d1cf      	bne.n	8002306 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b004      	add	sp, #16
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2210      	movs	r2, #16
 8002384:	4013      	ands	r3, r2
 8002386:	2b10      	cmp	r3, #16
 8002388:	d151      	bne.n	800242e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800238a:	e021      	b.n	80023d0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	3301      	adds	r3, #1
 8002390:	d01e      	beq.n	80023d0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002392:	f7fe fc8d 	bl	8000cb0 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d302      	bcc.n	80023a8 <I2C_IsAcknowledgeFailed+0x38>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d113      	bne.n	80023d0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ac:	2220      	movs	r2, #32
 80023ae:	431a      	orrs	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2241      	movs	r2, #65	@ 0x41
 80023b8:	2120      	movs	r1, #32
 80023ba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2242      	movs	r2, #66	@ 0x42
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2240      	movs	r2, #64	@ 0x40
 80023c8:	2100      	movs	r1, #0
 80023ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e02f      	b.n	8002430 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2220      	movs	r2, #32
 80023d8:	4013      	ands	r3, r2
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d1d6      	bne.n	800238c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2210      	movs	r2, #16
 80023e4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2220      	movs	r2, #32
 80023ec:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7ff fee1 	bl	80021b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	490d      	ldr	r1, [pc, #52]	@ (8002438 <I2C_IsAcknowledgeFailed+0xc8>)
 8002402:	400a      	ands	r2, r1
 8002404:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	2204      	movs	r2, #4
 800240c:	431a      	orrs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2241      	movs	r2, #65	@ 0x41
 8002416:	2120      	movs	r1, #32
 8002418:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2242      	movs	r2, #66	@ 0x42
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2240      	movs	r2, #64	@ 0x40
 8002426:	2100      	movs	r1, #0
 8002428:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}
 8002438:	fe00e800 	.word	0xfe00e800

0800243c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	0008      	movs	r0, r1
 8002446:	0011      	movs	r1, r2
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	240a      	movs	r4, #10
 800244c:	193b      	adds	r3, r7, r4
 800244e:	1c02      	adds	r2, r0, #0
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	2009      	movs	r0, #9
 8002454:	183b      	adds	r3, r7, r0
 8002456:	1c0a      	adds	r2, r1, #0
 8002458:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	6a3a      	ldr	r2, [r7, #32]
 8002462:	0d51      	lsrs	r1, r2, #21
 8002464:	2280      	movs	r2, #128	@ 0x80
 8002466:	00d2      	lsls	r2, r2, #3
 8002468:	400a      	ands	r2, r1
 800246a:	490e      	ldr	r1, [pc, #56]	@ (80024a4 <I2C_TransferConfig+0x68>)
 800246c:	430a      	orrs	r2, r1
 800246e:	43d2      	mvns	r2, r2
 8002470:	401a      	ands	r2, r3
 8002472:	0011      	movs	r1, r2
 8002474:	193b      	adds	r3, r7, r4
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	059b      	lsls	r3, r3, #22
 800247a:	0d9a      	lsrs	r2, r3, #22
 800247c:	183b      	adds	r3, r7, r0
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	0418      	lsls	r0, r3, #16
 8002482:	23ff      	movs	r3, #255	@ 0xff
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	4003      	ands	r3, r0
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	431a      	orrs	r2, r3
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	431a      	orrs	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b005      	add	sp, #20
 80024a0:	bd90      	pop	{r4, r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	03ff63ff 	.word	0x03ff63ff

080024a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2241      	movs	r2, #65	@ 0x41
 80024b6:	5c9b      	ldrb	r3, [r3, r2]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	d138      	bne.n	8002530 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2240      	movs	r2, #64	@ 0x40
 80024c2:	5c9b      	ldrb	r3, [r3, r2]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e032      	b.n	8002532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2240      	movs	r2, #64	@ 0x40
 80024d0:	2101      	movs	r1, #1
 80024d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2241      	movs	r2, #65	@ 0x41
 80024d8:	2124      	movs	r1, #36	@ 0x24
 80024da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	438a      	bics	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4911      	ldr	r1, [pc, #68]	@ (800253c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2101      	movs	r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2241      	movs	r2, #65	@ 0x41
 8002520:	2120      	movs	r1, #32
 8002522:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2240      	movs	r2, #64	@ 0x40
 8002528:	2100      	movs	r1, #0
 800252a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	e000      	b.n	8002532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002530:	2302      	movs	r3, #2
  }
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	ffffefff 	.word	0xffffefff

08002540 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2241      	movs	r2, #65	@ 0x41
 800254e:	5c9b      	ldrb	r3, [r3, r2]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b20      	cmp	r3, #32
 8002554:	d139      	bne.n	80025ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2240      	movs	r2, #64	@ 0x40
 800255a:	5c9b      	ldrb	r3, [r3, r2]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002560:	2302      	movs	r3, #2
 8002562:	e033      	b.n	80025cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2240      	movs	r2, #64	@ 0x40
 8002568:	2101      	movs	r1, #1
 800256a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2241      	movs	r2, #65	@ 0x41
 8002570:	2124      	movs	r1, #36	@ 0x24
 8002572:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2101      	movs	r1, #1
 8002580:	438a      	bics	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a11      	ldr	r2, [pc, #68]	@ (80025d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002590:	4013      	ands	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2101      	movs	r1, #1
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2241      	movs	r2, #65	@ 0x41
 80025ba:	2120      	movs	r1, #32
 80025bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2240      	movs	r2, #64	@ 0x40
 80025c2:	2100      	movs	r1, #0
 80025c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e000      	b.n	80025cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
  }
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b004      	add	sp, #16
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	fffff0ff 	.word	0xfffff0ff

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e301      	b.n	8002bee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2201      	movs	r2, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	d100      	bne.n	80025f6 <HAL_RCC_OscConfig+0x1e>
 80025f4:	e08d      	b.n	8002712 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025f6:	4bc3      	ldr	r3, [pc, #780]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	220c      	movs	r2, #12
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d00e      	beq.n	8002620 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002602:	4bc0      	ldr	r3, [pc, #768]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	220c      	movs	r2, #12
 8002608:	4013      	ands	r3, r2
 800260a:	2b08      	cmp	r3, #8
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x64>
 800260e:	4bbd      	ldr	r3, [pc, #756]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	025b      	lsls	r3, r3, #9
 8002616:	401a      	ands	r2, r3
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	429a      	cmp	r2, r3
 800261e:	d10d      	bne.n	800263c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4bb8      	ldr	r3, [pc, #736]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	d100      	bne.n	800262e <HAL_RCC_OscConfig+0x56>
 800262c:	e070      	b.n	8002710 <HAL_RCC_OscConfig+0x138>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d000      	beq.n	8002638 <HAL_RCC_OscConfig+0x60>
 8002636:	e06b      	b.n	8002710 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e2d8      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x7c>
 8002644:	4baf      	ldr	r3, [pc, #700]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4bae      	ldr	r3, [pc, #696]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800264a:	2180      	movs	r1, #128	@ 0x80
 800264c:	0249      	lsls	r1, r1, #9
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e02f      	b.n	80026b4 <HAL_RCC_OscConfig+0xdc>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x9e>
 800265c:	4ba9      	ldr	r3, [pc, #676]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4ba8      	ldr	r3, [pc, #672]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002662:	49a9      	ldr	r1, [pc, #676]	@ (8002908 <HAL_RCC_OscConfig+0x330>)
 8002664:	400a      	ands	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	4ba6      	ldr	r3, [pc, #664]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4ba5      	ldr	r3, [pc, #660]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800266e:	49a7      	ldr	r1, [pc, #668]	@ (800290c <HAL_RCC_OscConfig+0x334>)
 8002670:	400a      	ands	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e01e      	b.n	80026b4 <HAL_RCC_OscConfig+0xdc>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b05      	cmp	r3, #5
 800267c:	d10e      	bne.n	800269c <HAL_RCC_OscConfig+0xc4>
 800267e:	4ba1      	ldr	r3, [pc, #644]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4ba0      	ldr	r3, [pc, #640]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002684:	2180      	movs	r1, #128	@ 0x80
 8002686:	02c9      	lsls	r1, r1, #11
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	4b9d      	ldr	r3, [pc, #628]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b9c      	ldr	r3, [pc, #624]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002692:	2180      	movs	r1, #128	@ 0x80
 8002694:	0249      	lsls	r1, r1, #9
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0xdc>
 800269c:	4b99      	ldr	r3, [pc, #612]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b98      	ldr	r3, [pc, #608]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80026a2:	4999      	ldr	r1, [pc, #612]	@ (8002908 <HAL_RCC_OscConfig+0x330>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	4b96      	ldr	r3, [pc, #600]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b95      	ldr	r3, [pc, #596]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80026ae:	4997      	ldr	r1, [pc, #604]	@ (800290c <HAL_RCC_OscConfig+0x334>)
 80026b0:	400a      	ands	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d014      	beq.n	80026e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe faf8 	bl	8000cb0 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c6:	f7fe faf3 	bl	8000cb0 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	@ 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e28a      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	4013      	ands	r3, r2
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0xee>
 80026e4:	e015      	b.n	8002712 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe fae3 	bl	8000cb0 <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fade 	bl	8000cb0 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e275      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	4b80      	ldr	r3, [pc, #512]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	029b      	lsls	r3, r3, #10
 800270a:	4013      	ands	r3, r2
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x118>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2202      	movs	r2, #2
 8002718:	4013      	ands	r3, r2
 800271a:	d100      	bne.n	800271e <HAL_RCC_OscConfig+0x146>
 800271c:	e069      	b.n	80027f2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800271e:	4b79      	ldr	r3, [pc, #484]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	220c      	movs	r2, #12
 8002724:	4013      	ands	r3, r2
 8002726:	d00b      	beq.n	8002740 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002728:	4b76      	ldr	r3, [pc, #472]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	220c      	movs	r2, #12
 800272e:	4013      	ands	r3, r2
 8002730:	2b08      	cmp	r3, #8
 8002732:	d11c      	bne.n	800276e <HAL_RCC_OscConfig+0x196>
 8002734:	4b73      	ldr	r3, [pc, #460]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	2380      	movs	r3, #128	@ 0x80
 800273a:	025b      	lsls	r3, r3, #9
 800273c:	4013      	ands	r3, r2
 800273e:	d116      	bne.n	800276e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002740:	4b70      	ldr	r3, [pc, #448]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d005      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e24b      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b6b      	ldr	r3, [pc, #428]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	22f8      	movs	r2, #248	@ 0xf8
 800275c:	4393      	bics	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	00da      	lsls	r2, r3, #3
 8002766:	4b67      	ldr	r3, [pc, #412]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276c:	e041      	b.n	80027f2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d024      	beq.n	80027c0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002776:	4b63      	ldr	r3, [pc, #396]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b62      	ldr	r3, [pc, #392]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800277c:	2101      	movs	r1, #1
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe fa95 	bl	8000cb0 <HAL_GetTick>
 8002786:	0003      	movs	r3, r0
 8002788:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe fa90 	bl	8000cb0 <HAL_GetTick>
 8002790:	0002      	movs	r2, r0
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e227      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b59      	ldr	r3, [pc, #356]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2202      	movs	r2, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d0f1      	beq.n	800278c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b56      	ldr	r3, [pc, #344]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	22f8      	movs	r2, #248	@ 0xf8
 80027ae:	4393      	bics	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00da      	lsls	r2, r3, #3
 80027b8:	4b52      	ldr	r3, [pc, #328]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	4b50      	ldr	r3, [pc, #320]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80027c6:	2101      	movs	r1, #1
 80027c8:	438a      	bics	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fa70 	bl	8000cb0 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe fa6b 	bl	8000cb0 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e202      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e8:	4b46      	ldr	r3, [pc, #280]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2202      	movs	r2, #2
 80027ee:	4013      	ands	r3, r2
 80027f0:	d1f1      	bne.n	80027d6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2208      	movs	r2, #8
 80027f8:	4013      	ands	r3, r2
 80027fa:	d036      	beq.n	800286a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d019      	beq.n	8002838 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002804:	4b3f      	ldr	r3, [pc, #252]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002808:	4b3e      	ldr	r3, [pc, #248]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800280a:	2101      	movs	r1, #1
 800280c:	430a      	orrs	r2, r1
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7fe fa4e 	bl	8000cb0 <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281a:	f7fe fa49 	bl	8000cb0 <HAL_GetTick>
 800281e:	0002      	movs	r2, r0
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e1e0      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282c:	4b35      	ldr	r3, [pc, #212]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	2202      	movs	r2, #2
 8002832:	4013      	ands	r3, r2
 8002834:	d0f1      	beq.n	800281a <HAL_RCC_OscConfig+0x242>
 8002836:	e018      	b.n	800286a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b32      	ldr	r3, [pc, #200]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800283a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800283c:	4b31      	ldr	r3, [pc, #196]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800283e:	2101      	movs	r1, #1
 8002840:	438a      	bics	r2, r1
 8002842:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7fe fa34 	bl	8000cb0 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284e:	f7fe fa2f 	bl	8000cb0 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e1c6      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002860:	4b28      	ldr	r3, [pc, #160]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	2202      	movs	r2, #2
 8002866:	4013      	ands	r3, r2
 8002868:	d1f1      	bne.n	800284e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2204      	movs	r2, #4
 8002870:	4013      	ands	r3, r2
 8002872:	d100      	bne.n	8002876 <HAL_RCC_OscConfig+0x29e>
 8002874:	e0b4      	b.n	80029e0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002876:	201f      	movs	r0, #31
 8002878:	183b      	adds	r3, r7, r0
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287e:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	2380      	movs	r3, #128	@ 0x80
 8002884:	055b      	lsls	r3, r3, #21
 8002886:	4013      	ands	r3, r2
 8002888:	d110      	bne.n	80028ac <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	4b1d      	ldr	r3, [pc, #116]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	0549      	lsls	r1, r1, #21
 8002894:	430a      	orrs	r2, r1
 8002896:	61da      	str	r2, [r3, #28]
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	055b      	lsls	r3, r3, #21
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028a6:	183b      	adds	r3, r7, r0
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	4b18      	ldr	r3, [pc, #96]	@ (8002910 <HAL_RCC_OscConfig+0x338>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	@ 0x80
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4013      	ands	r3, r2
 80028b6:	d11a      	bne.n	80028ee <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b8:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_RCC_OscConfig+0x338>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <HAL_RCC_OscConfig+0x338>)
 80028be:	2180      	movs	r1, #128	@ 0x80
 80028c0:	0049      	lsls	r1, r1, #1
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7fe f9f3 	bl	8000cb0 <HAL_GetTick>
 80028ca:	0003      	movs	r3, r0
 80028cc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d0:	f7fe f9ee 	bl	8000cb0 <HAL_GetTick>
 80028d4:	0002      	movs	r2, r0
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	@ 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e185      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_OscConfig+0x338>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4013      	ands	r3, r2
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10e      	bne.n	8002914 <HAL_RCC_OscConfig+0x33c>
 80028f6:	4b03      	ldr	r3, [pc, #12]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	4b02      	ldr	r3, [pc, #8]	@ (8002904 <HAL_RCC_OscConfig+0x32c>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	621a      	str	r2, [r3, #32]
 8002902:	e035      	b.n	8002970 <HAL_RCC_OscConfig+0x398>
 8002904:	40021000 	.word	0x40021000
 8002908:	fffeffff 	.word	0xfffeffff
 800290c:	fffbffff 	.word	0xfffbffff
 8002910:	40007000 	.word	0x40007000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10c      	bne.n	8002936 <HAL_RCC_OscConfig+0x35e>
 800291c:	4bb6      	ldr	r3, [pc, #728]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 800291e:	6a1a      	ldr	r2, [r3, #32]
 8002920:	4bb5      	ldr	r3, [pc, #724]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002922:	2101      	movs	r1, #1
 8002924:	438a      	bics	r2, r1
 8002926:	621a      	str	r2, [r3, #32]
 8002928:	4bb3      	ldr	r3, [pc, #716]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	4bb2      	ldr	r3, [pc, #712]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 800292e:	2104      	movs	r1, #4
 8002930:	438a      	bics	r2, r1
 8002932:	621a      	str	r2, [r3, #32]
 8002934:	e01c      	b.n	8002970 <HAL_RCC_OscConfig+0x398>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b05      	cmp	r3, #5
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x380>
 800293e:	4bae      	ldr	r3, [pc, #696]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002940:	6a1a      	ldr	r2, [r3, #32]
 8002942:	4bad      	ldr	r3, [pc, #692]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002944:	2104      	movs	r1, #4
 8002946:	430a      	orrs	r2, r1
 8002948:	621a      	str	r2, [r3, #32]
 800294a:	4bab      	ldr	r3, [pc, #684]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	4baa      	ldr	r3, [pc, #680]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	621a      	str	r2, [r3, #32]
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0x398>
 8002958:	4ba7      	ldr	r3, [pc, #668]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 800295a:	6a1a      	ldr	r2, [r3, #32]
 800295c:	4ba6      	ldr	r3, [pc, #664]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 800295e:	2101      	movs	r1, #1
 8002960:	438a      	bics	r2, r1
 8002962:	621a      	str	r2, [r3, #32]
 8002964:	4ba4      	ldr	r3, [pc, #656]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002966:	6a1a      	ldr	r2, [r3, #32]
 8002968:	4ba3      	ldr	r3, [pc, #652]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 800296a:	2104      	movs	r1, #4
 800296c:	438a      	bics	r2, r1
 800296e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d014      	beq.n	80029a2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002978:	f7fe f99a 	bl	8000cb0 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e009      	b.n	8002996 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe f995 	bl	8000cb0 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4a9b      	ldr	r2, [pc, #620]	@ (8002bfc <HAL_RCC_OscConfig+0x624>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e12b      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002996:	4b98      	ldr	r3, [pc, #608]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	2202      	movs	r2, #2
 800299c:	4013      	ands	r3, r2
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x3aa>
 80029a0:	e013      	b.n	80029ca <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7fe f985 	bl	8000cb0 <HAL_GetTick>
 80029a6:	0003      	movs	r3, r0
 80029a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029aa:	e009      	b.n	80029c0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7fe f980 	bl	8000cb0 <HAL_GetTick>
 80029b0:	0002      	movs	r2, r0
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	4a91      	ldr	r2, [pc, #580]	@ (8002bfc <HAL_RCC_OscConfig+0x624>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e116      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	2202      	movs	r2, #2
 80029c6:	4013      	ands	r3, r2
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029ca:	231f      	movs	r3, #31
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d4:	4b88      	ldr	r3, [pc, #544]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	4b87      	ldr	r3, [pc, #540]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 80029da:	4989      	ldr	r1, [pc, #548]	@ (8002c00 <HAL_RCC_OscConfig+0x628>)
 80029dc:	400a      	ands	r2, r1
 80029de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	4013      	ands	r3, r2
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d12a      	bne.n	8002a48 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029f2:	4b81      	ldr	r3, [pc, #516]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 80029f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f6:	4b80      	ldr	r3, [pc, #512]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 80029f8:	2104      	movs	r1, #4
 80029fa:	430a      	orrs	r2, r1
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029fe:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a02:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a04:	2101      	movs	r1, #1
 8002a06:	430a      	orrs	r2, r1
 8002a08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe f951 	bl	8000cb0 <HAL_GetTick>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a14:	f7fe f94c 	bl	8000cb0 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0e3      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a26:	4b74      	ldr	r3, [pc, #464]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d0f1      	beq.n	8002a14 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a30:	4b71      	ldr	r3, [pc, #452]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a34:	22f8      	movs	r2, #248	@ 0xf8
 8002a36:	4393      	bics	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	00da      	lsls	r2, r3, #3
 8002a40:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a46:	e034      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	3305      	adds	r3, #5
 8002a4e:	d111      	bne.n	8002a74 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a50:	4b69      	ldr	r3, [pc, #420]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a54:	4b68      	ldr	r3, [pc, #416]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a56:	2104      	movs	r1, #4
 8002a58:	438a      	bics	r2, r1
 8002a5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a5c:	4b66      	ldr	r3, [pc, #408]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a60:	22f8      	movs	r2, #248	@ 0xf8
 8002a62:	4393      	bics	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	00da      	lsls	r2, r3, #3
 8002a6c:	4b62      	ldr	r3, [pc, #392]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a72:	e01e      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a74:	4b60      	ldr	r3, [pc, #384]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a78:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a80:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a84:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	438a      	bics	r2, r1
 8002a8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe f910 	bl	8000cb0 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a96:	f7fe f90b 	bl	8000cb0 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0a2      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002aa8:	4b53      	ldr	r3, [pc, #332]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	2202      	movs	r2, #2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d1f1      	bne.n	8002a96 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d100      	bne.n	8002abc <HAL_RCC_OscConfig+0x4e4>
 8002aba:	e097      	b.n	8002bec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002abc:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	220c      	movs	r2, #12
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d100      	bne.n	8002aca <HAL_RCC_OscConfig+0x4f2>
 8002ac8:	e06b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d14c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b49      	ldr	r3, [pc, #292]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b48      	ldr	r3, [pc, #288]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002ad8:	494a      	ldr	r1, [pc, #296]	@ (8002c04 <HAL_RCC_OscConfig+0x62c>)
 8002ada:	400a      	ands	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe f8e7 	bl	8000cb0 <HAL_GetTick>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe f8e2 	bl	8000cb0 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e079      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afa:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	049b      	lsls	r3, r3, #18
 8002b02:	4013      	ands	r3, r2
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b06:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b14:	4b38      	ldr	r3, [pc, #224]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c08 <HAL_RCC_OscConfig+0x630>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	4b32      	ldr	r3, [pc, #200]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b34:	4b30      	ldr	r3, [pc, #192]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b3a:	2180      	movs	r1, #128	@ 0x80
 8002b3c:	0449      	lsls	r1, r1, #17
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe f8b5 	bl	8000cb0 <HAL_GetTick>
 8002b46:	0003      	movs	r3, r0
 8002b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe f8b0 	bl	8000cb0 <HAL_GetTick>
 8002b50:	0002      	movs	r2, r0
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e047      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b5e:	4b26      	ldr	r3, [pc, #152]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	049b      	lsls	r3, r3, #18
 8002b66:	4013      	ands	r3, r2
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x574>
 8002b6a:	e03f      	b.n	8002bec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6c:	4b22      	ldr	r3, [pc, #136]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b72:	4924      	ldr	r1, [pc, #144]	@ (8002c04 <HAL_RCC_OscConfig+0x62c>)
 8002b74:	400a      	ands	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe f89a 	bl	8000cb0 <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe f895 	bl	8000cb0 <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e02c      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b94:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	049b      	lsls	r3, r3, #18
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x5aa>
 8002ba0:	e024      	b.n	8002bec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e01f      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002bb4:	4b10      	ldr	r3, [pc, #64]	@ (8002bf8 <HAL_RCC_OscConfig+0x620>)
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	025b      	lsls	r3, r3, #9
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d10e      	bne.n	8002be8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	220f      	movs	r2, #15
 8002bce:	401a      	ands	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	23f0      	movs	r3, #240	@ 0xf0
 8002bdc:	039b      	lsls	r3, r3, #14
 8002bde:	401a      	ands	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b008      	add	sp, #32
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	00001388 	.word	0x00001388
 8002c00:	efffffff 	.word	0xefffffff
 8002c04:	feffffff 	.word	0xfeffffff
 8002c08:	ffc2ffff 	.word	0xffc2ffff

08002c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0b3      	b.n	8002d88 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b5b      	ldr	r3, [pc, #364]	@ (8002d90 <HAL_RCC_ClockConfig+0x184>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2201      	movs	r2, #1
 8002c26:	4013      	ands	r3, r2
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d911      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b58      	ldr	r3, [pc, #352]	@ (8002d90 <HAL_RCC_ClockConfig+0x184>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	4393      	bics	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	4b55      	ldr	r3, [pc, #340]	@ (8002d90 <HAL_RCC_ClockConfig+0x184>)
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c40:	4b53      	ldr	r3, [pc, #332]	@ (8002d90 <HAL_RCC_ClockConfig+0x184>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2201      	movs	r2, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e09a      	b.n	8002d88 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d015      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2204      	movs	r2, #4
 8002c62:	4013      	ands	r3, r2
 8002c64:	d006      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c66:	4b4b      	ldr	r3, [pc, #300]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002c6c:	21e0      	movs	r1, #224	@ 0xe0
 8002c6e:	00c9      	lsls	r1, r1, #3
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b47      	ldr	r3, [pc, #284]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	22f0      	movs	r2, #240	@ 0xf0
 8002c7a:	4393      	bics	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	4b44      	ldr	r3, [pc, #272]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002c84:	430a      	orrs	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d040      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	029b      	lsls	r3, r3, #10
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d114      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e06e      	b.n	8002d88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	4b38      	ldr	r3, [pc, #224]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	049b      	lsls	r3, r3, #18
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d108      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e062      	b.n	8002d88 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	4b34      	ldr	r3, [pc, #208]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e05b      	b.n	8002d88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd0:	4b30      	ldr	r3, [pc, #192]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4b2d      	ldr	r3, [pc, #180]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce4:	f7fd ffe4 	bl	8000cb0 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cec:	e009      	b.n	8002d02 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cee:	f7fd ffdf 	bl	8000cb0 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	4a27      	ldr	r2, [pc, #156]	@ (8002d98 <HAL_RCC_ClockConfig+0x18c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e042      	b.n	8002d88 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	220c      	movs	r2, #12
 8002d08:	401a      	ands	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1ec      	bne.n	8002cee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <HAL_RCC_ClockConfig+0x184>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d211      	bcs.n	8002d46 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <HAL_RCC_ClockConfig+0x184>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	4393      	bics	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	4b18      	ldr	r3, [pc, #96]	@ (8002d90 <HAL_RCC_ClockConfig+0x184>)
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d34:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <HAL_RCC_ClockConfig+0x184>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e020      	b.n	8002d88 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <HAL_RCC_ClockConfig+0x190>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d64:	f000 f820 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002d68:	0001      	movs	r1, r0
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <HAL_RCC_ClockConfig+0x188>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	220f      	movs	r2, #15
 8002d72:	4013      	ands	r3, r2
 8002d74:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <HAL_RCC_ClockConfig+0x194>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	000a      	movs	r2, r1
 8002d7a:	40da      	lsrs	r2, r3
 8002d7c:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <HAL_RCC_ClockConfig+0x198>)
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fd ff4f 	bl	8000c24 <HAL_InitTick>
  
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40021000 	.word	0x40021000
 8002d98:	00001388 	.word	0x00001388
 8002d9c:	fffff8ff 	.word	0xfffff8ff
 8002da0:	080030bc 	.word	0x080030bc
 8002da4:	20000000 	.word	0x20000000

08002da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b08f      	sub	sp, #60	@ 0x3c
 8002dac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002dae:	2314      	movs	r3, #20
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002db6:	c313      	stmia	r3!, {r0, r1, r4}
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	4a29      	ldr	r2, [pc, #164]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dc2:	c313      	stmia	r3!, {r0, r1, r4}
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	633b      	str	r3, [r7, #48]	@ 0x30
  
  tmpreg = RCC->CFGR;
 8002ddc:	4b22      	ldr	r3, [pc, #136]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	220c      	movs	r2, #12
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d002      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0x4a>
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d003      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x50>
 8002df0:	e02d      	b.n	8002e4e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002df4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002df6:	e02d      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfa:	0c9b      	lsrs	r3, r3, #18
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2214      	movs	r2, #20
 8002e02:	18ba      	adds	r2, r7, r2
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e08:	4b17      	ldr	r3, [pc, #92]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	4013      	ands	r3, r2
 8002e10:	1d3a      	adds	r2, r7, #4
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e18:	2380      	movs	r3, #128	@ 0x80
 8002e1a:	025b      	lsls	r3, r3, #9
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e22:	4812      	ldr	r0, [pc, #72]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e24:	f7fd f970 	bl	8000108 <__udivsi3>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	4353      	muls	r3, r2
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e32:	e009      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e36:	000a      	movs	r2, r1
 8002e38:	0152      	lsls	r2, r2, #5
 8002e3a:	1a52      	subs	r2, r2, r1
 8002e3c:	0193      	lsls	r3, r2, #6
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	185b      	adds	r3, r3, r1
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e4c:	e002      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e50:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e52:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b00f      	add	sp, #60	@ 0x3c
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	0800309c 	.word	0x0800309c
 8002e64:	080030ac 	.word	0x080030ac
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	025b      	lsls	r3, r3, #9
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d100      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e8c:	e08e      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2017      	movs	r0, #23
 8002e90:	183b      	adds	r3, r7, r0
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b57      	ldr	r3, [pc, #348]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	055b      	lsls	r3, r3, #21
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d110      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	4b54      	ldr	r3, [pc, #336]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	4b53      	ldr	r3, [pc, #332]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ea8:	2180      	movs	r1, #128	@ 0x80
 8002eaa:	0549      	lsls	r1, r1, #21
 8002eac:	430a      	orrs	r2, r1
 8002eae:	61da      	str	r2, [r3, #28]
 8002eb0:	4b50      	ldr	r3, [pc, #320]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	2380      	movs	r3, #128	@ 0x80
 8002eb6:	055b      	lsls	r3, r3, #21
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebe:	183b      	adds	r3, r7, r0
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d11a      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed0:	4b49      	ldr	r3, [pc, #292]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b48      	ldr	r3, [pc, #288]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ed6:	2180      	movs	r1, #128	@ 0x80
 8002ed8:	0049      	lsls	r1, r1, #1
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7fd fee7 	bl	8000cb0 <HAL_GetTick>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	e008      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee8:	f7fd fee2 	bl	8000cb0 <HAL_GetTick>
 8002eec:	0002      	movs	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e077      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f08:	6a1a      	ldr	r2, [r3, #32]
 8002f0a:	23c0      	movs	r3, #192	@ 0xc0
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d034      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	23c0      	movs	r3, #192	@ 0xc0
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d02c      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f28:	4b32      	ldr	r3, [pc, #200]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4a33      	ldr	r2, [pc, #204]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f32:	4b30      	ldr	r3, [pc, #192]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f38:	2180      	movs	r1, #128	@ 0x80
 8002f3a:	0249      	lsls	r1, r1, #9
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f40:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f46:	492e      	ldr	r1, [pc, #184]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f48:	400a      	ands	r2, r1
 8002f4a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f4c:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	4013      	ands	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fd fea9 	bl	8000cb0 <HAL_GetTick>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	e009      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7fd fea4 	bl	8000cb0 <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	4a25      	ldr	r2, [pc, #148]	@ (8003004 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e038      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f82:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a1d      	ldr	r2, [pc, #116]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f92:	430a      	orrs	r2, r1
 8002f94:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f96:	2317      	movs	r3, #23
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa6:	4918      	ldr	r1, [pc, #96]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	2203      	movs	r2, #3
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d009      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fd4:	4b07      	ldr	r3, [pc, #28]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	2210      	movs	r2, #16
 8002fda:	4393      	bics	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	4b04      	ldr	r3, [pc, #16]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b006      	add	sp, #24
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	fffffcff 	.word	0xfffffcff
 8003000:	fffeffff 	.word	0xfffeffff
 8003004:	00001388 	.word	0x00001388
 8003008:	efffffff 	.word	0xefffffff

0800300c <memset>:
 800300c:	0003      	movs	r3, r0
 800300e:	1882      	adds	r2, r0, r2
 8003010:	4293      	cmp	r3, r2
 8003012:	d100      	bne.n	8003016 <memset+0xa>
 8003014:	4770      	bx	lr
 8003016:	7019      	strb	r1, [r3, #0]
 8003018:	3301      	adds	r3, #1
 800301a:	e7f9      	b.n	8003010 <memset+0x4>

0800301c <__libc_init_array>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	2600      	movs	r6, #0
 8003020:	4c0c      	ldr	r4, [pc, #48]	@ (8003054 <__libc_init_array+0x38>)
 8003022:	4d0d      	ldr	r5, [pc, #52]	@ (8003058 <__libc_init_array+0x3c>)
 8003024:	1b64      	subs	r4, r4, r5
 8003026:	10a4      	asrs	r4, r4, #2
 8003028:	42a6      	cmp	r6, r4
 800302a:	d109      	bne.n	8003040 <__libc_init_array+0x24>
 800302c:	2600      	movs	r6, #0
 800302e:	f000 f819 	bl	8003064 <_init>
 8003032:	4c0a      	ldr	r4, [pc, #40]	@ (800305c <__libc_init_array+0x40>)
 8003034:	4d0a      	ldr	r5, [pc, #40]	@ (8003060 <__libc_init_array+0x44>)
 8003036:	1b64      	subs	r4, r4, r5
 8003038:	10a4      	asrs	r4, r4, #2
 800303a:	42a6      	cmp	r6, r4
 800303c:	d105      	bne.n	800304a <__libc_init_array+0x2e>
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	00b3      	lsls	r3, r6, #2
 8003042:	58eb      	ldr	r3, [r5, r3]
 8003044:	4798      	blx	r3
 8003046:	3601      	adds	r6, #1
 8003048:	e7ee      	b.n	8003028 <__libc_init_array+0xc>
 800304a:	00b3      	lsls	r3, r6, #2
 800304c:	58eb      	ldr	r3, [r5, r3]
 800304e:	4798      	blx	r3
 8003050:	3601      	adds	r6, #1
 8003052:	e7f2      	b.n	800303a <__libc_init_array+0x1e>
 8003054:	080030cc 	.word	0x080030cc
 8003058:	080030cc 	.word	0x080030cc
 800305c:	080030d0 	.word	0x080030d0
 8003060:	080030cc 	.word	0x080030cc

08003064 <_init>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr

08003070 <_fini>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003076:	bc08      	pop	{r3}
 8003078:	469e      	mov	lr, r3
 800307a:	4770      	bx	lr
