
Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dac  08003dac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db4  08003db4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  08003e2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003e2c  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000959c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa3  00000000  00000000  0002963c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0002b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016558  00000000  00000000  0002bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008457  00000000  00000000  000424b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008611d  00000000  00000000  0004a907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0a24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000257c  00000000  00000000  000d0a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c9c 	.word	0x08003c9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003c9c 	.word	0x08003c9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000598:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	e000      	b.n	80005a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fb18 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f852 	bl	8000678 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1; //send the value 1 to port 31 of ITM and view using SWV Trace Log
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <main+0x94>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f901 	bl	80007e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f000 f8df 	bl	80007a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f8b3 	bl	800074c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("GPIO Init Done \r\n");
 80005e6:	481e      	ldr	r0, [pc, #120]	; (8000660 <main+0x98>)
 80005e8:	f002 fc12 	bl	8002e10 <puts>
  ITM_Port32(31) = 2; //send the value 2 to port 31 of ITM and view using SWV Trace Log
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <main+0x94>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("I'm in the main loop!\r\n");
 80005f2:	481c      	ldr	r0, [pc, #112]	; (8000664 <main+0x9c>)
 80005f4:	f002 fc0c 	bl	8002e10 <puts>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005f8:	2120      	movs	r1, #32
 80005fa:	481b      	ldr	r0, [pc, #108]	; (8000668 <main+0xa0>)
 80005fc:	f001 f9c1 	bl	8001982 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000604:	f000 fb6e 	bl	8000ce4 <HAL_Delay>
	  printf("Loop Counter = %i\r\n", Loop);
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <main+0xa4>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	4818      	ldr	r0, [pc, #96]	; (8000670 <main+0xa8>)
 8000610:	f002 fb78 	bl	8002d04 <iprintf>
	  Loop++;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <main+0xa4>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <main+0xa4>)
 800061e:	801a      	strh	r2, [r3, #0]
	  if(Loop > 100){
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <main+0xa4>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b64      	cmp	r3, #100	; 0x64
 8000626:	d902      	bls.n	800062e <main+0x66>
		  Loop = 0;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <main+0xa4>)
 800062a:	2200      	movs	r2, #0
 800062c:	801a      	strh	r2, [r3, #0]
	  }
	  HAL_Delay(50);
 800062e:	2032      	movs	r0, #50	; 0x32
 8000630:	f000 fb58 	bl	8000ce4 <HAL_Delay>
	  if(Loop < 25){
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <main+0xa4>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	2b18      	cmp	r3, #24
 800063a:	d806      	bhi.n	800064a <main+0x82>
		  Data += 5;
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <main+0xac>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	3305      	adds	r3, #5
 8000642:	b29a      	uxth	r2, r3
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <main+0xac>)
 8000646:	801a      	strh	r2, [r3, #0]
 8000648:	e7d3      	b.n	80005f2 <main+0x2a>
	  }
	  else{
		  Data -=1000;
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <main+0xac>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <main+0xac>)
 8000656:	801a      	strh	r2, [r3, #0]
	  printf("I'm in the main loop!\r\n");
 8000658:	e7cb      	b.n	80005f2 <main+0x2a>
 800065a:	bf00      	nop
 800065c:	e000007c 	.word	0xe000007c
 8000660:	08003cb4 	.word	0x08003cb4
 8000664:	08003cc8 	.word	0x08003cc8
 8000668:	40020000 	.word	0x40020000
 800066c:	2000008c 	.word	0x2000008c
 8000670:	08003ce0 	.word	0x08003ce0
 8000674:	2000008e 	.word	0x2000008e

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fb34 	bl	8002cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a20      	ldr	r2, [pc, #128]	; (8000748 <SystemClock_Config+0xd0>)
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006f0:	2354      	movs	r3, #84	; 0x54
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f959 	bl	80019b8 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800070c:	f000 f8c6 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2102      	movs	r1, #2
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fbbb 	bl	8001ea8 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000738:	f000 f8b0 	bl	800089c <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	; 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_USART2_UART_Init+0x50>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000784:	f001 fd60 	bl	8002248 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078e:	f000 f885 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000fc 	.word	0x200000fc
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_DMA_Init+0x3c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <MX_DMA_Init+0x3c>)
 80007b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_DMA_Init+0x3c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2011      	movs	r0, #17
 80007c8:	f000 fb8b 	bl	8000ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007cc:	2011      	movs	r0, #17
 80007ce:	f000 fba4 	bl	8000f1a <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_GPIO_Init+0x7c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <MX_GPIO_Init+0x7c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_GPIO_Init+0x7c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_GPIO_Init+0x7c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <MX_GPIO_Init+0x7c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_GPIO_Init+0x7c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0x80>)
 8000834:	f001 f88c 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000838:	2320      	movs	r3, #32
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0x80>)
 8000850:	f000 fefa 	bl	8001648 <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000

08000864 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e009      	b.n	800088a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	60ba      	str	r2, [r7, #8]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe7a 	bl	8000578 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	3301      	adds	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	429a      	cmp	r2, r3
 8000890:	dbf1      	blt.n	8000876 <_write+0x12>
  }
  return len;
 8000892:	687b      	ldr	r3, [r7, #4]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <HAL_MspInit+0x4c>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	; 0x44
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_MspInit+0x4c>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a34      	ldr	r2, [pc, #208]	; (80009ec <HAL_UART_MspInit+0xf0>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d161      	bne.n	80009e2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <HAL_UART_MspInit+0xf4>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a32      	ldr	r2, [pc, #200]	; (80009f0 <HAL_UART_MspInit+0xf4>)
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <HAL_UART_MspInit+0xf4>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <HAL_UART_MspInit+0xf4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <HAL_UART_MspInit+0xf4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <HAL_UART_MspInit+0xf4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000956:	230c      	movs	r3, #12
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000966:	2307      	movs	r3, #7
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <HAL_UART_MspInit+0xf8>)
 8000972:	f000 fe69 	bl	8001648 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 8000978:	4a20      	ldr	r2, [pc, #128]	; (80009fc <HAL_UART_MspInit+0x100>)
 800097a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 800097e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000982:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 8000986:	2240      	movs	r2, #64	; 0x40
 8000988:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 8000992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000996:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009b6:	4810      	ldr	r0, [pc, #64]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 80009b8:	f000 faca 	bl	8000f50 <HAL_DMA_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80009c2:	f7ff ff6b 	bl	800089c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 80009ca:	635a      	str	r2, [r3, #52]	; 0x34
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_UART_MspInit+0xfc>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2026      	movs	r0, #38	; 0x26
 80009d8:	f000 fa83 	bl	8000ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009dc:	2026      	movs	r0, #38	; 0x26
 80009de:	f000 fa9c 	bl	8000f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40004400 	.word	0x40004400
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	2000009c 	.word	0x2000009c
 80009fc:	400260a0 	.word	0x400260a0

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f926 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <DMA1_Stream6_IRQHandler+0x10>)
 8000a62:	f000 fbb5 	bl	80011d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000009c 	.word	0x2000009c

08000a70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <USART2_IRQHandler+0x10>)
 8000a76:	f001 fc35 	bl	80022e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000fc 	.word	0x200000fc

08000a84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e00a      	b.n	8000aac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a96:	f3af 8000 	nop.w
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	b2ca      	uxtb	r2, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf0      	blt.n	8000a96 <_read+0x12>
	}

return len;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <_isatty>:

int _isatty(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
	return 1;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
	return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x50>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x16>
		heap_end = &end;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <_sbrk+0x50>)
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <_sbrk+0x54>)
 8000b3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <_sbrk+0x50>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <_sbrk+0x50>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	466a      	mov	r2, sp
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d907      	bls.n	8000b62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b52:	f002 f8a5 	bl	8002ca0 <__errno>
 8000b56:	4603      	mov	r3, r0
 8000b58:	220c      	movs	r2, #12
 8000b5a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	e006      	b.n	8000b70 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <_sbrk+0x50>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <_sbrk+0x50>)
 8000b6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000090 	.word	0x20000090
 8000b7c:	20000158 	.word	0x20000158

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <SystemInit+0x28>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <SystemInit+0x28>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SystemInit+0x28>)
 8000b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bb2:	e003      	b.n	8000bbc <LoopCopyDataInit>

08000bb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bba:	3104      	adds	r1, #4

08000bbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bc4:	d3f6      	bcc.n	8000bb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bc8:	e002      	b.n	8000bd0 <LoopFillZerobss>

08000bca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bcc:	f842 3b04 	str.w	r3, [r2], #4

08000bd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bd4:	d3f9      	bcc.n	8000bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd3 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 f867 	bl	8002cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fcf3 	bl	80005c8 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000be8:	08003dbc 	.word	0x08003dbc
  ldr  r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bf0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000bf4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000bf8:	20000154 	.word	0x20000154

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f94f 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe3a 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f967 	bl	8000f36 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f92f 	bl	8000ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000140 	.word	0x20000140

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000140 	.word	0x20000140

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff29 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff3e 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff8e 	bl	8000e20 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5d 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff31 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffa2 	bl	8000e88 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff feb6 	bl	8000ccc <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e099      	b.n	80010a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2202      	movs	r2, #2
 8000f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8c:	e00f      	b.n	8000fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f8e:	f7ff fe9d 	bl	8000ccc <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d908      	bls.n	8000fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e078      	b.n	80010a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1e8      	bne.n	8000f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_DMA_Init+0x158>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	2b04      	cmp	r3, #4
 8001006:	d107      	bne.n	8001018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4313      	orrs	r3, r2
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4313      	orrs	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f023 0307 	bic.w	r3, r3, #7
 800102e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	4313      	orrs	r3, r2
 8001038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	2b04      	cmp	r3, #4
 8001040:	d117      	bne.n	8001072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4313      	orrs	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00e      	beq.n	8001072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fa7b 	bl	8001550 <DMA_CheckFifoParam>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2240      	movs	r2, #64	; 0x40
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800106e:	2301      	movs	r3, #1
 8001070:	e016      	b.n	80010a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fa32 	bl	80014e4 <DMA_CalcBaseAndBitshift>
 8001080:	4603      	mov	r3, r0
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	223f      	movs	r2, #63	; 0x3f
 800108a:	409a      	lsls	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	f010803f 	.word	0xf010803f

080010ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ba:	f7ff fe07 	bl	8000ccc <HAL_GetTick>
 80010be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d008      	beq.n	80010de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e052      	b.n	8001184 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0216 	bic.w	r2, r2, #22
 80010ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	695a      	ldr	r2, [r3, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <HAL_DMA_Abort+0x62>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0208 	bic.w	r2, r2, #8
 800111c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0201 	bic.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800112e:	e013      	b.n	8001158 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001130:	f7ff fdcc 	bl	8000ccc <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b05      	cmp	r3, #5
 800113c:	d90c      	bls.n	8001158 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2220      	movs	r2, #32
 8001142:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2203      	movs	r2, #3
 8001150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e015      	b.n	8001184 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1e4      	bne.n	8001130 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116a:	223f      	movs	r2, #63	; 0x3f
 800116c:	409a      	lsls	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d004      	beq.n	80011aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00c      	b.n	80011c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2205      	movs	r2, #5
 80011ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0201 	bic.w	r2, r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011dc:	4b92      	ldr	r3, [pc, #584]	; (8001428 <HAL_DMA_IRQHandler+0x258>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a92      	ldr	r2, [pc, #584]	; (800142c <HAL_DMA_IRQHandler+0x25c>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0a9b      	lsrs	r3, r3, #10
 80011e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fa:	2208      	movs	r2, #8
 80011fc:	409a      	lsls	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d01a      	beq.n	800123c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d013      	beq.n	800123c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0204 	bic.w	r2, r2, #4
 8001222:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001228:	2208      	movs	r2, #8
 800122a:	409a      	lsls	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001234:	f043 0201 	orr.w	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001240:	2201      	movs	r2, #1
 8001242:	409a      	lsls	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4013      	ands	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d012      	beq.n	8001272 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125e:	2201      	movs	r2, #1
 8001260:	409a      	lsls	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126a:	f043 0202 	orr.w	r2, r3, #2
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001276:	2204      	movs	r2, #4
 8001278:	409a      	lsls	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d012      	beq.n	80012a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00b      	beq.n	80012a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001294:	2204      	movs	r2, #4
 8001296:	409a      	lsls	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a0:	f043 0204 	orr.w	r2, r3, #4
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ac:	2210      	movs	r2, #16
 80012ae:	409a      	lsls	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d043      	beq.n	8001340 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d03c      	beq.n	8001340 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ca:	2210      	movs	r2, #16
 80012cc:	409a      	lsls	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d018      	beq.n	8001312 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d108      	bne.n	8001300 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d024      	beq.n	8001340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	4798      	blx	r3
 80012fe:	e01f      	b.n	8001340 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01b      	beq.n	8001340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	4798      	blx	r3
 8001310:	e016      	b.n	8001340 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0208 	bic.w	r2, r2, #8
 800132e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	2220      	movs	r2, #32
 8001346:	409a      	lsls	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 808e 	beq.w	800146e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8086 	beq.w	800146e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	2220      	movs	r2, #32
 8001368:	409a      	lsls	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b05      	cmp	r3, #5
 8001378:	d136      	bne.n	80013e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0216 	bic.w	r2, r2, #22
 8001388:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	695a      	ldr	r2, [r3, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001398:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d103      	bne.n	80013aa <HAL_DMA_IRQHandler+0x1da>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0208 	bic.w	r2, r2, #8
 80013b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	223f      	movs	r2, #63	; 0x3f
 80013c0:	409a      	lsls	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d07d      	beq.n	80014da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	4798      	blx	r3
        }
        return;
 80013e6:	e078      	b.n	80014da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d01c      	beq.n	8001430 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d108      	bne.n	8001416 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001408:	2b00      	cmp	r3, #0
 800140a:	d030      	beq.n	800146e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	4798      	blx	r3
 8001414:	e02b      	b.n	800146e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141a:	2b00      	cmp	r3, #0
 800141c:	d027      	beq.n	800146e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	4798      	blx	r3
 8001426:	e022      	b.n	800146e <HAL_DMA_IRQHandler+0x29e>
 8001428:	20000000 	.word	0x20000000
 800142c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10f      	bne.n	800145e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0210 	bic.w	r2, r2, #16
 800144c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001472:	2b00      	cmp	r3, #0
 8001474:	d032      	beq.n	80014dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d022      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2205      	movs	r2, #5
 8001486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3301      	adds	r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d307      	bcc.n	80014b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f2      	bne.n	800149a <HAL_DMA_IRQHandler+0x2ca>
 80014b4:	e000      	b.n	80014b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80014b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
 80014d8:	e000      	b.n	80014dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80014da:	bf00      	nop
    }
  }
}
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop

080014e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3b10      	subs	r3, #16
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <DMA_CalcBaseAndBitshift+0x64>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <DMA_CalcBaseAndBitshift+0x68>)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d909      	bls.n	8001526 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	1d1a      	adds	r2, r3, #4
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	659a      	str	r2, [r3, #88]	; 0x58
 8001524:	e007      	b.n	8001536 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800152e:	f023 0303 	bic.w	r3, r3, #3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	aaaaaaab 	.word	0xaaaaaaab
 800154c:	08003d0c 	.word	0x08003d0c

08001550 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11f      	bne.n	80015aa <DMA_CheckFifoParam+0x5a>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d856      	bhi.n	800161e <DMA_CheckFifoParam+0xce>
 8001570:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <DMA_CheckFifoParam+0x28>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	08001589 	.word	0x08001589
 800157c:	0800159b 	.word	0x0800159b
 8001580:	08001589 	.word	0x08001589
 8001584:	0800161f 	.word	0x0800161f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d046      	beq.n	8001622 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001598:	e043      	b.n	8001622 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015a2:	d140      	bne.n	8001626 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015a8:	e03d      	b.n	8001626 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b2:	d121      	bne.n	80015f8 <DMA_CheckFifoParam+0xa8>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d837      	bhi.n	800162a <DMA_CheckFifoParam+0xda>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <DMA_CheckFifoParam+0x70>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015d1 	.word	0x080015d1
 80015c4:	080015d7 	.word	0x080015d7
 80015c8:	080015d1 	.word	0x080015d1
 80015cc:	080015e9 	.word	0x080015e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
      break;
 80015d4:	e030      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d025      	beq.n	800162e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015e6:	e022      	b.n	800162e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015f0:	d11f      	bne.n	8001632 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015f6:	e01c      	b.n	8001632 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d903      	bls.n	8001606 <DMA_CheckFifoParam+0xb6>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d003      	beq.n	800160c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001604:	e018      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
      break;
 800160a:	e015      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00e      	beq.n	8001636 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
      break;
 800161c:	e00b      	b.n	8001636 <DMA_CheckFifoParam+0xe6>
      break;
 800161e:	bf00      	nop
 8001620:	e00a      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 8001622:	bf00      	nop
 8001624:	e008      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 8001626:	bf00      	nop
 8001628:	e006      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 800162a:	bf00      	nop
 800162c:	e004      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 800162e:	bf00      	nop
 8001630:	e002      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;   
 8001632:	bf00      	nop
 8001634:	e000      	b.n	8001638 <DMA_CheckFifoParam+0xe8>
      break;
 8001636:	bf00      	nop
    }
  } 
  
  return status; 
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e159      	b.n	8001918 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8148 	bne.w	8001912 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d005      	beq.n	800169a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	2b02      	cmp	r3, #2
 8001698:	d130      	bne.n	80016fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 0201 	and.w	r2, r3, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b03      	cmp	r3, #3
 8001706:	d017      	beq.n	8001738 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d123      	bne.n	800178c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a2 	beq.w	8001912 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b57      	ldr	r3, [pc, #348]	; (8001930 <HAL_GPIO_Init+0x2e8>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a56      	ldr	r2, [pc, #344]	; (8001930 <HAL_GPIO_Init+0x2e8>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b54      	ldr	r3, [pc, #336]	; (8001930 <HAL_GPIO_Init+0x2e8>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ea:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_GPIO_Init+0x2ec>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a49      	ldr	r2, [pc, #292]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d019      	beq.n	800184a <HAL_GPIO_Init+0x202>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a48      	ldr	r2, [pc, #288]	; (800193c <HAL_GPIO_Init+0x2f4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d013      	beq.n	8001846 <HAL_GPIO_Init+0x1fe>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a47      	ldr	r2, [pc, #284]	; (8001940 <HAL_GPIO_Init+0x2f8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00d      	beq.n	8001842 <HAL_GPIO_Init+0x1fa>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a46      	ldr	r2, [pc, #280]	; (8001944 <HAL_GPIO_Init+0x2fc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <HAL_GPIO_Init+0x1f6>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a45      	ldr	r2, [pc, #276]	; (8001948 <HAL_GPIO_Init+0x300>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_GPIO_Init+0x1f2>
 8001836:	2304      	movs	r3, #4
 8001838:	e008      	b.n	800184c <HAL_GPIO_Init+0x204>
 800183a:	2307      	movs	r3, #7
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x204>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x204>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x204>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x204>
 800184a:	2300      	movs	r3, #0
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800185c:	4935      	ldr	r1, [pc, #212]	; (8001934 <HAL_GPIO_Init+0x2ec>)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <HAL_GPIO_Init+0x304>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800188e:	4a2f      	ldr	r2, [pc, #188]	; (800194c <HAL_GPIO_Init+0x304>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_GPIO_Init+0x304>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018b8:	4a24      	ldr	r2, [pc, #144]	; (800194c <HAL_GPIO_Init+0x304>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_GPIO_Init+0x304>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e2:	4a1a      	ldr	r2, [pc, #104]	; (800194c <HAL_GPIO_Init+0x304>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_GPIO_Init+0x304>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_GPIO_Init+0x304>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b0f      	cmp	r3, #15
 800191c:	f67f aea2 	bls.w	8001664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40013800 	.word	0x40013800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001994:	887a      	ldrh	r2, [r7, #2]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43d9      	mvns	r1, r3
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	400b      	ands	r3, r1
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e264      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d075      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d6:	4ba3      	ldr	r3, [pc, #652]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d00c      	beq.n	80019fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e2:	4ba0      	ldr	r3, [pc, #640]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d112      	bne.n	8001a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ee:	4b9d      	ldr	r3, [pc, #628]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019fa:	d10b      	bne.n	8001a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	4b99      	ldr	r3, [pc, #612]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d05b      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x108>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d157      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e23f      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCC_OscConfig+0x74>
 8001a1e:	4b91      	ldr	r3, [pc, #580]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a90      	ldr	r2, [pc, #576]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e01d      	b.n	8001a68 <HAL_RCC_OscConfig+0xb0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x98>
 8001a36:	4b8b      	ldr	r3, [pc, #556]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a8a      	ldr	r2, [pc, #552]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b88      	ldr	r3, [pc, #544]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a87      	ldr	r2, [pc, #540]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0xb0>
 8001a50:	4b84      	ldr	r3, [pc, #528]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a83      	ldr	r2, [pc, #524]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b81      	ldr	r3, [pc, #516]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a80      	ldr	r2, [pc, #512]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff f92c 	bl	8000ccc <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff f928 	bl	8000ccc <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e204      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b76      	ldr	r3, [pc, #472]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0xc0>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f918 	bl	8000ccc <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f914 	bl	8000ccc <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1f0      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	4b6c      	ldr	r3, [pc, #432]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xe8>
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d063      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ace:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ada:	4b62      	ldr	r3, [pc, #392]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d11c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d116      	bne.n	8001b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	4b5c      	ldr	r3, [pc, #368]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x152>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e1c4      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b56      	ldr	r3, [pc, #344]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4952      	ldr	r1, [pc, #328]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	e03a      	b.n	8001b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b28:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_RCC_OscConfig+0x2b0>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f8cd 	bl	8000ccc <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b36:	f7ff f8c9 	bl	8000ccc <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1a5      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4940      	ldr	r1, [pc, #256]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_OscConfig+0x2b0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff f8ac 	bl	8000ccc <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b78:	f7ff f8a8 	bl	8000ccc <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e184      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d030      	beq.n	8001c04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d016      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_RCC_OscConfig+0x2b4>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f88c 	bl	8000ccc <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f888 	bl	8000ccc <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e164      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x200>
 8001bd6:	e015      	b.n	8001c04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd8:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <HAL_RCC_OscConfig+0x2b4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7ff f875 	bl	8000ccc <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be6:	f7ff f871 	bl	8000ccc <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e14d      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a0 	beq.w	8001d52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_OscConfig+0x2b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_RCC_OscConfig+0x2b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_RCC_OscConfig+0x2b8>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff f837 	bl	8000ccc <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e011      	b.n	8001c86 <HAL_RCC_OscConfig+0x2ce>
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	42470000 	.word	0x42470000
 8001c6c:	42470e80 	.word	0x42470e80
 8001c70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c74:	f7ff f82a 	bl	8000ccc <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e106      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	4b85      	ldr	r3, [pc, #532]	; (8001e9c <HAL_RCC_OscConfig+0x4e4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d106      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2f0>
 8001c9a:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	4a80      	ldr	r2, [pc, #512]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca6:	e01c      	b.n	8001ce2 <HAL_RCC_OscConfig+0x32a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0x312>
 8001cb0:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb4:	4a7a      	ldr	r2, [pc, #488]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbc:	4b78      	ldr	r3, [pc, #480]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	4a77      	ldr	r2, [pc, #476]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x32a>
 8001cca:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	4a74      	ldr	r2, [pc, #464]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd6:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	4a71      	ldr	r2, [pc, #452]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d015      	beq.n	8001d16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7fe ffef 	bl	8000ccc <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7fe ffeb 	bl	8000ccc <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0c5      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ee      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x33a>
 8001d14:	e014      	b.n	8001d40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7fe ffd9 	bl	8000ccc <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7fe ffd5 	bl	8000ccc <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0af      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d34:	4b5a      	ldr	r3, [pc, #360]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d105      	bne.n	8001d52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d46:	4b56      	ldr	r3, [pc, #344]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a55      	ldr	r2, [pc, #340]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 809b 	beq.w	8001e92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d5c:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d05c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d141      	bne.n	8001df4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d70:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_RCC_OscConfig+0x4ec>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7fe ffa9 	bl	8000ccc <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7fe ffa5 	bl	8000ccc <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e081      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	019b      	lsls	r3, r3, #6
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	3b01      	subs	r3, #1
 8001db6:	041b      	lsls	r3, r3, #16
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	061b      	lsls	r3, r3, #24
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <HAL_RCC_OscConfig+0x4ec>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ff7e 	bl	8000ccc <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff7a 	bl	8000ccc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e056      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x41c>
 8001df2:	e04e      	b.n	8001e92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_RCC_OscConfig+0x4ec>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7fe ff67 	bl	8000ccc <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e02:	f7fe ff63 	bl	8000ccc <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e03f      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x44a>
 8001e20:	e037      	b.n	8001e92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e032      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_RCC_OscConfig+0x4e8>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d028      	beq.n	8001e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d121      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d11a      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e5e:	4013      	ands	r3, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d111      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	3b01      	subs	r3, #1
 8001e78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470060 	.word	0x42470060

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0cc      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d90c      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0b8      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001efc:	4b59      	ldr	r3, [pc, #356]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a52      	ldr	r2, [pc, #328]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b50      	ldr	r3, [pc, #320]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	494d      	ldr	r1, [pc, #308]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d044      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d119      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e07f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e067      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4934      	ldr	r1, [pc, #208]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fe98 	bl	8000ccc <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe fe94 	bl	8000ccc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e04f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d20c      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e032      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4916      	ldr	r1, [pc, #88]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	490e      	ldr	r1, [pc, #56]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202e:	f000 f821 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002032:	4602      	mov	r2, r0
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	490a      	ldr	r1, [pc, #40]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	5ccb      	ldrb	r3, [r1, r3]
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fdf8 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00
 8002064:	40023800 	.word	0x40023800
 8002068:	08003cf4 	.word	0x08003cf4
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b5b0      	push	{r4, r5, r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800207a:	2100      	movs	r1, #0
 800207c:	6079      	str	r1, [r7, #4]
 800207e:	2100      	movs	r1, #0
 8002080:	60f9      	str	r1, [r7, #12]
 8002082:	2100      	movs	r1, #0
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002086:	2100      	movs	r1, #0
 8002088:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800208a:	4952      	ldr	r1, [pc, #328]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800208c:	6889      	ldr	r1, [r1, #8]
 800208e:	f001 010c 	and.w	r1, r1, #12
 8002092:	2908      	cmp	r1, #8
 8002094:	d00d      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002096:	2908      	cmp	r1, #8
 8002098:	f200 8094 	bhi.w	80021c4 <HAL_RCC_GetSysClockFreq+0x150>
 800209c:	2900      	cmp	r1, #0
 800209e:	d002      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x32>
 80020a0:	2904      	cmp	r1, #4
 80020a2:	d003      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x38>
 80020a4:	e08e      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80020a8:	60bb      	str	r3, [r7, #8]
       break;
 80020aa:	e08e      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ac:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_RCC_GetSysClockFreq+0x168>)
 80020ae:	60bb      	str	r3, [r7, #8]
      break;
 80020b0:	e08b      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b2:	4948      	ldr	r1, [pc, #288]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80020b4:	6849      	ldr	r1, [r1, #4]
 80020b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80020ba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020bc:	4945      	ldr	r1, [pc, #276]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80020be:	6849      	ldr	r1, [r1, #4]
 80020c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80020c4:	2900      	cmp	r1, #0
 80020c6:	d024      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c8:	4942      	ldr	r1, [pc, #264]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80020ca:	6849      	ldr	r1, [r1, #4]
 80020cc:	0989      	lsrs	r1, r1, #6
 80020ce:	4608      	mov	r0, r1
 80020d0:	f04f 0100 	mov.w	r1, #0
 80020d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80020d8:	f04f 0500 	mov.w	r5, #0
 80020dc:	ea00 0204 	and.w	r2, r0, r4
 80020e0:	ea01 0305 	and.w	r3, r1, r5
 80020e4:	493d      	ldr	r1, [pc, #244]	; (80021dc <HAL_RCC_GetSysClockFreq+0x168>)
 80020e6:	fb01 f003 	mul.w	r0, r1, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	fb01 f102 	mul.w	r1, r1, r2
 80020f0:	1844      	adds	r4, r0, r1
 80020f2:	493a      	ldr	r1, [pc, #232]	; (80021dc <HAL_RCC_GetSysClockFreq+0x168>)
 80020f4:	fba2 0101 	umull	r0, r1, r2, r1
 80020f8:	1863      	adds	r3, r4, r1
 80020fa:	4619      	mov	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	461a      	mov	r2, r3
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	f7fe f8bc 	bl	8000280 <__aeabi_uldivmod>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4613      	mov	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e04a      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002112:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	099b      	lsrs	r3, r3, #6
 8002118:	461a      	mov	r2, r3
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	ea02 0400 	and.w	r4, r2, r0
 800212a:	ea03 0501 	and.w	r5, r3, r1
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	014b      	lsls	r3, r1, #5
 800213c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002140:	0142      	lsls	r2, r0, #5
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	1b00      	subs	r0, r0, r4
 8002148:	eb61 0105 	sbc.w	r1, r1, r5
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	018b      	lsls	r3, r1, #6
 8002156:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800215a:	0182      	lsls	r2, r0, #6
 800215c:	1a12      	subs	r2, r2, r0
 800215e:	eb63 0301 	sbc.w	r3, r3, r1
 8002162:	f04f 0000 	mov.w	r0, #0
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	00d9      	lsls	r1, r3, #3
 800216c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002170:	00d0      	lsls	r0, r2, #3
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	1912      	adds	r2, r2, r4
 8002178:	eb45 0303 	adc.w	r3, r5, r3
 800217c:	f04f 0000 	mov.w	r0, #0
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	0299      	lsls	r1, r3, #10
 8002186:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800218a:	0290      	lsls	r0, r2, #10
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	f7fe f870 	bl	8000280 <__aeabi_uldivmod>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4613      	mov	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	60bb      	str	r3, [r7, #8]
      break;
 80021c2:	e002      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80021c6:	60bb      	str	r3, [r7, #8]
      break;
 80021c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ca:	68bb      	ldr	r3, [r7, #8]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bdb0      	pop	{r4, r5, r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	017d7840 	.word	0x017d7840

080021e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000000 	.word	0x20000000

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021fc:	f7ff fff0 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	0a9b      	lsrs	r3, r3, #10
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4903      	ldr	r1, [pc, #12]	; (800221c <HAL_RCC_GetPCLK1Freq+0x24>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	08003d04 	.word	0x08003d04

08002220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002224:	f7ff ffdc 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0b5b      	lsrs	r3, r3, #13
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	08003d04 	.word	0x08003d04

08002248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e03f      	b.n	80022da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fb44 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2224      	movs	r2, #36	; 0x24
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800228a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fb3f 	bl	8002910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_UART_IRQHandler+0x52>
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa57 	bl	80027e2 <UART_Receive_IT>
      return;
 8002334:	e17c      	b.n	8002630 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80b1 	beq.w	80024a0 <HAL_UART_IRQHandler+0x1bc>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_UART_IRQHandler+0x70>
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80a6 	beq.w	80024a0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_UART_IRQHandler+0x90>
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0201 	orr.w	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_UART_IRQHandler+0xb0>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f043 0202 	orr.w	r2, r3, #2
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_UART_IRQHandler+0xd0>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f043 0204 	orr.w	r2, r3, #4
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00f      	beq.n	80023de <HAL_UART_IRQHandler+0xfa>
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <HAL_UART_IRQHandler+0xee>
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f043 0208 	orr.w	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 811f 	beq.w	8002626 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_UART_IRQHandler+0x11e>
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f9f0 	bl	80027e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <HAL_UART_IRQHandler+0x146>
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d031      	beq.n	800248e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f930 	bl	8002690 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d123      	bne.n	8002486 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800244c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	2b00      	cmp	r3, #0
 8002454:	d013      	beq.n	800247e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	4a77      	ldr	r2, [pc, #476]	; (8002638 <HAL_UART_IRQHandler+0x354>)
 800245c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fe92 	bl	800118c <HAL_DMA_Abort_IT>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002478:	4610      	mov	r0, r2
 800247a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800247c:	e00e      	b.n	800249c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8f0 	bl	8002664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	e00a      	b.n	800249c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8ec 	bl	8002664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248c:	e006      	b.n	800249c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8e8 	bl	8002664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800249a:	e0c4      	b.n	8002626 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800249c:	bf00      	nop
    return;
 800249e:	e0c2      	b.n	8002626 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	f040 80a2 	bne.w	80025ee <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 809c 	beq.w	80025ee <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8096 	beq.w	80025ee <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d14f      	bne.n	8002586 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80024f0:	8a3b      	ldrh	r3, [r7, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8099 	beq.w	800262a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024fc:	8a3a      	ldrh	r2, [r7, #16]
 80024fe:	429a      	cmp	r2, r3
 8002500:	f080 8093 	bcs.w	800262a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8a3a      	ldrh	r2, [r7, #16]
 8002508:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002514:	d02b      	beq.n	800256e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002524:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002544:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0210 	bic.w	r2, r2, #16
 8002562:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fd9f 	bl	80010ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002576:	b29b      	uxth	r3, r3
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	b29b      	uxth	r3, r3
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f87a 	bl	8002678 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002584:	e051      	b.n	800262a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800258e:	b29b      	uxth	r3, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d047      	beq.n	800262e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800259e:	8a7b      	ldrh	r3, [r7, #18]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d044      	beq.n	800262e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025b2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0210 	bic.w	r2, r2, #16
 80025e0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025e2:	8a7b      	ldrh	r3, [r7, #18]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f846 	bl	8002678 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80025ec:	e01f      	b.n	800262e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_UART_IRQHandler+0x326>
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f885 	bl	8002712 <UART_Transmit_IT>
    return;
 8002608:	e012      	b.n	8002630 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <HAL_UART_IRQHandler+0x34c>
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8c7 	bl	80027b2 <UART_EndTransmit_IT>
    return;
 8002624:	e004      	b.n	8002630 <HAL_UART_IRQHandler+0x34c>
    return;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <HAL_UART_IRQHandler+0x34c>
      return;
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <HAL_UART_IRQHandler+0x34c>
      return;
 800262e:	bf00      	nop
  }
}
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	080026eb 	.word	0x080026eb

0800263c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d107      	bne.n	80026d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0210 	bic.w	r2, r2, #16
 80026ce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff ffad 	bl	8002664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b21      	cmp	r3, #33	; 0x21
 8002724:	d13e      	bne.n	80027a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272e:	d114      	bne.n	800275a <UART_Transmit_IT+0x48>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d110      	bne.n	800275a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800274c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	1c9a      	adds	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	621a      	str	r2, [r3, #32]
 8002758:	e008      	b.n	800276c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	1c59      	adds	r1, r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6211      	str	r1, [r2, #32]
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29b      	uxth	r3, r3
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4619      	mov	r1, r3
 800277a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10f      	bne.n	80027a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800278e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800279e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ff32 	bl	800263c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b22      	cmp	r3, #34	; 0x22
 80027f4:	f040 8087 	bne.w	8002906 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002800:	d117      	bne.n	8002832 <UART_Receive_IT+0x50>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d113      	bne.n	8002832 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	b29b      	uxth	r3, r3
 800281c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002820:	b29a      	uxth	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	1c9a      	adds	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
 8002830:	e026      	b.n	8002880 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d007      	beq.n	8002856 <UART_Receive_IT+0x74>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <UART_Receive_IT+0x82>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e008      	b.n	8002876 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29b      	uxth	r3, r3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4619      	mov	r1, r3
 800288e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002890:	2b00      	cmp	r3, #0
 8002892:	d136      	bne.n	8002902 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0220 	bic.w	r2, r2, #32
 80028a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10e      	bne.n	80028f2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0210 	bic.w	r2, r2, #16
 80028e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fec4 	bl	8002678 <HAL_UARTEx_RxEventCallback>
 80028f0:	e002      	b.n	80028f8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff feac 	bl	8002650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e002      	b.n	8002908 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002914:	b09f      	sub	sp, #124	; 0x7c
 8002916:	af00      	add	r7, sp, #0
 8002918:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800291a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002926:	68d9      	ldr	r1, [r3, #12]
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	ea40 0301 	orr.w	r3, r0, r1
 8002930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	431a      	orrs	r2, r3
 800293c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	431a      	orrs	r2, r3
 8002942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	4313      	orrs	r3, r2
 8002948:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800294a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002954:	f021 010c 	bic.w	r1, r1, #12
 8002958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800295e:	430b      	orrs	r3, r1
 8002960:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	6999      	ldr	r1, [r3, #24]
 8002970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	ea40 0301 	orr.w	r3, r0, r1
 8002978:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800297a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4bc5      	ldr	r3, [pc, #788]	; (8002c94 <UART_SetConfig+0x384>)
 8002980:	429a      	cmp	r2, r3
 8002982:	d004      	beq.n	800298e <UART_SetConfig+0x7e>
 8002984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4bc3      	ldr	r3, [pc, #780]	; (8002c98 <UART_SetConfig+0x388>)
 800298a:	429a      	cmp	r2, r3
 800298c:	d103      	bne.n	8002996 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800298e:	f7ff fc47 	bl	8002220 <HAL_RCC_GetPCLK2Freq>
 8002992:	6778      	str	r0, [r7, #116]	; 0x74
 8002994:	e002      	b.n	800299c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002996:	f7ff fc2f 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 800299a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800299c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a4:	f040 80b6 	bne.w	8002b14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029aa:	461c      	mov	r4, r3
 80029ac:	f04f 0500 	mov.w	r5, #0
 80029b0:	4622      	mov	r2, r4
 80029b2:	462b      	mov	r3, r5
 80029b4:	1891      	adds	r1, r2, r2
 80029b6:	6439      	str	r1, [r7, #64]	; 0x40
 80029b8:	415b      	adcs	r3, r3
 80029ba:	647b      	str	r3, [r7, #68]	; 0x44
 80029bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029c0:	1912      	adds	r2, r2, r4
 80029c2:	eb45 0303 	adc.w	r3, r5, r3
 80029c6:	f04f 0000 	mov.w	r0, #0
 80029ca:	f04f 0100 	mov.w	r1, #0
 80029ce:	00d9      	lsls	r1, r3, #3
 80029d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029d4:	00d0      	lsls	r0, r2, #3
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	1911      	adds	r1, r2, r4
 80029dc:	6639      	str	r1, [r7, #96]	; 0x60
 80029de:	416b      	adcs	r3, r5
 80029e0:	667b      	str	r3, [r7, #100]	; 0x64
 80029e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	1891      	adds	r1, r2, r2
 80029ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80029f0:	415b      	adcs	r3, r3
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80029fc:	f7fd fc40 	bl	8000280 <__aeabi_uldivmod>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4ba5      	ldr	r3, [pc, #660]	; (8002c9c <UART_SetConfig+0x38c>)
 8002a06:	fba3 2302 	umull	r2, r3, r3, r2
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	011e      	lsls	r6, r3, #4
 8002a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a10:	461c      	mov	r4, r3
 8002a12:	f04f 0500 	mov.w	r5, #0
 8002a16:	4622      	mov	r2, r4
 8002a18:	462b      	mov	r3, r5
 8002a1a:	1891      	adds	r1, r2, r2
 8002a1c:	6339      	str	r1, [r7, #48]	; 0x30
 8002a1e:	415b      	adcs	r3, r3
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
 8002a22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a26:	1912      	adds	r2, r2, r4
 8002a28:	eb45 0303 	adc.w	r3, r5, r3
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	00d9      	lsls	r1, r3, #3
 8002a36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a3a:	00d0      	lsls	r0, r2, #3
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	1911      	adds	r1, r2, r4
 8002a42:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a44:	416b      	adcs	r3, r5
 8002a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a56:	415b      	adcs	r3, r3
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a62:	f7fd fc0d 	bl	8000280 <__aeabi_uldivmod>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4b8c      	ldr	r3, [pc, #560]	; (8002c9c <UART_SetConfig+0x38c>)
 8002a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	2164      	movs	r1, #100	; 0x64
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	3332      	adds	r3, #50	; 0x32
 8002a7e:	4a87      	ldr	r2, [pc, #540]	; (8002c9c <UART_SetConfig+0x38c>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a8c:	441e      	add	r6, r3
 8002a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a90:	4618      	mov	r0, r3
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	1894      	adds	r4, r2, r2
 8002a9c:	623c      	str	r4, [r7, #32]
 8002a9e:	415b      	adcs	r3, r3
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aa6:	1812      	adds	r2, r2, r0
 8002aa8:	eb41 0303 	adc.w	r3, r1, r3
 8002aac:	f04f 0400 	mov.w	r4, #0
 8002ab0:	f04f 0500 	mov.w	r5, #0
 8002ab4:	00dd      	lsls	r5, r3, #3
 8002ab6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002aba:	00d4      	lsls	r4, r2, #3
 8002abc:	4622      	mov	r2, r4
 8002abe:	462b      	mov	r3, r5
 8002ac0:	1814      	adds	r4, r2, r0
 8002ac2:	653c      	str	r4, [r7, #80]	; 0x50
 8002ac4:	414b      	adcs	r3, r1
 8002ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	1891      	adds	r1, r2, r2
 8002ad4:	61b9      	str	r1, [r7, #24]
 8002ad6:	415b      	adcs	r3, r3
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ade:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002ae2:	f7fd fbcd 	bl	8000280 <__aeabi_uldivmod>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <UART_SetConfig+0x38c>)
 8002aec:	fba3 1302 	umull	r1, r3, r3, r2
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	2164      	movs	r1, #100	; 0x64
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	3332      	adds	r3, #50	; 0x32
 8002afe:	4a67      	ldr	r2, [pc, #412]	; (8002c9c <UART_SetConfig+0x38c>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	f003 0207 	and.w	r2, r3, #7
 8002b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4432      	add	r2, r6
 8002b10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b12:	e0b9      	b.n	8002c88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b16:	461c      	mov	r4, r3
 8002b18:	f04f 0500 	mov.w	r5, #0
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	462b      	mov	r3, r5
 8002b20:	1891      	adds	r1, r2, r2
 8002b22:	6139      	str	r1, [r7, #16]
 8002b24:	415b      	adcs	r3, r3
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b2c:	1912      	adds	r2, r2, r4
 8002b2e:	eb45 0303 	adc.w	r3, r5, r3
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	00d9      	lsls	r1, r3, #3
 8002b3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b40:	00d0      	lsls	r0, r2, #3
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	eb12 0804 	adds.w	r8, r2, r4
 8002b4a:	eb43 0905 	adc.w	r9, r3, r5
 8002b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	008b      	lsls	r3, r1, #2
 8002b62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b66:	0082      	lsls	r2, r0, #2
 8002b68:	4640      	mov	r0, r8
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	f7fd fb88 	bl	8000280 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <UART_SetConfig+0x38c>)
 8002b76:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	011e      	lsls	r6, r3, #4
 8002b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b80:	4618      	mov	r0, r3
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	1894      	adds	r4, r2, r2
 8002b8c:	60bc      	str	r4, [r7, #8]
 8002b8e:	415b      	adcs	r3, r3
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b96:	1812      	adds	r2, r2, r0
 8002b98:	eb41 0303 	adc.w	r3, r1, r3
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	f04f 0500 	mov.w	r5, #0
 8002ba4:	00dd      	lsls	r5, r3, #3
 8002ba6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002baa:	00d4      	lsls	r4, r2, #3
 8002bac:	4622      	mov	r2, r4
 8002bae:	462b      	mov	r3, r5
 8002bb0:	1814      	adds	r4, r2, r0
 8002bb2:	64bc      	str	r4, [r7, #72]	; 0x48
 8002bb4:	414b      	adcs	r3, r1
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	008b      	lsls	r3, r1, #2
 8002bcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bd0:	0082      	lsls	r2, r0, #2
 8002bd2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002bd6:	f7fd fb53 	bl	8000280 <__aeabi_uldivmod>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <UART_SetConfig+0x38c>)
 8002be0:	fba3 1302 	umull	r1, r3, r3, r2
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	2164      	movs	r1, #100	; 0x64
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	3332      	adds	r3, #50	; 0x32
 8002bf2:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <UART_SetConfig+0x38c>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfe:	441e      	add	r6, r3
 8002c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c02:	4618      	mov	r0, r3
 8002c04:	f04f 0100 	mov.w	r1, #0
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	1894      	adds	r4, r2, r2
 8002c0e:	603c      	str	r4, [r7, #0]
 8002c10:	415b      	adcs	r3, r3
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c18:	1812      	adds	r2, r2, r0
 8002c1a:	eb41 0303 	adc.w	r3, r1, r3
 8002c1e:	f04f 0400 	mov.w	r4, #0
 8002c22:	f04f 0500 	mov.w	r5, #0
 8002c26:	00dd      	lsls	r5, r3, #3
 8002c28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c2c:	00d4      	lsls	r4, r2, #3
 8002c2e:	4622      	mov	r2, r4
 8002c30:	462b      	mov	r3, r5
 8002c32:	eb12 0a00 	adds.w	sl, r2, r0
 8002c36:	eb43 0b01 	adc.w	fp, r3, r1
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f04f 0100 	mov.w	r1, #0
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	008b      	lsls	r3, r1, #2
 8002c4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c52:	0082      	lsls	r2, r0, #2
 8002c54:	4650      	mov	r0, sl
 8002c56:	4659      	mov	r1, fp
 8002c58:	f7fd fb12 	bl	8000280 <__aeabi_uldivmod>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <UART_SetConfig+0x38c>)
 8002c62:	fba3 1302 	umull	r1, r3, r3, r2
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2164      	movs	r1, #100	; 0x64
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	3332      	adds	r3, #50	; 0x32
 8002c74:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <UART_SetConfig+0x38c>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4432      	add	r2, r6
 8002c86:	609a      	str	r2, [r3, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	377c      	adds	r7, #124	; 0x7c
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c92:	bf00      	nop
 8002c94:	40011000 	.word	0x40011000
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	51eb851f 	.word	0x51eb851f

08002ca0 <__errno>:
 8002ca0:	4b01      	ldr	r3, [pc, #4]	; (8002ca8 <__errno+0x8>)
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	2000000c 	.word	0x2000000c

08002cac <__libc_init_array>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	4d0d      	ldr	r5, [pc, #52]	; (8002ce4 <__libc_init_array+0x38>)
 8002cb0:	4c0d      	ldr	r4, [pc, #52]	; (8002ce8 <__libc_init_array+0x3c>)
 8002cb2:	1b64      	subs	r4, r4, r5
 8002cb4:	10a4      	asrs	r4, r4, #2
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	42a6      	cmp	r6, r4
 8002cba:	d109      	bne.n	8002cd0 <__libc_init_array+0x24>
 8002cbc:	4d0b      	ldr	r5, [pc, #44]	; (8002cec <__libc_init_array+0x40>)
 8002cbe:	4c0c      	ldr	r4, [pc, #48]	; (8002cf0 <__libc_init_array+0x44>)
 8002cc0:	f000 ffec 	bl	8003c9c <_init>
 8002cc4:	1b64      	subs	r4, r4, r5
 8002cc6:	10a4      	asrs	r4, r4, #2
 8002cc8:	2600      	movs	r6, #0
 8002cca:	42a6      	cmp	r6, r4
 8002ccc:	d105      	bne.n	8002cda <__libc_init_array+0x2e>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd4:	4798      	blx	r3
 8002cd6:	3601      	adds	r6, #1
 8002cd8:	e7ee      	b.n	8002cb8 <__libc_init_array+0xc>
 8002cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cde:	4798      	blx	r3
 8002ce0:	3601      	adds	r6, #1
 8002ce2:	e7f2      	b.n	8002cca <__libc_init_array+0x1e>
 8002ce4:	08003db4 	.word	0x08003db4
 8002ce8:	08003db4 	.word	0x08003db4
 8002cec:	08003db4 	.word	0x08003db4
 8002cf0:	08003db8 	.word	0x08003db8

08002cf4 <memset>:
 8002cf4:	4402      	add	r2, r0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <memset+0xa>
 8002cfc:	4770      	bx	lr
 8002cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002d02:	e7f9      	b.n	8002cf8 <memset+0x4>

08002d04 <iprintf>:
 8002d04:	b40f      	push	{r0, r1, r2, r3}
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <iprintf+0x2c>)
 8002d08:	b513      	push	{r0, r1, r4, lr}
 8002d0a:	681c      	ldr	r4, [r3, #0]
 8002d0c:	b124      	cbz	r4, 8002d18 <iprintf+0x14>
 8002d0e:	69a3      	ldr	r3, [r4, #24]
 8002d10:	b913      	cbnz	r3, 8002d18 <iprintf+0x14>
 8002d12:	4620      	mov	r0, r4
 8002d14:	f000 fa5e 	bl	80031d4 <__sinit>
 8002d18:	ab05      	add	r3, sp, #20
 8002d1a:	9a04      	ldr	r2, [sp, #16]
 8002d1c:	68a1      	ldr	r1, [r4, #8]
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	4620      	mov	r0, r4
 8002d22:	f000 fc2f 	bl	8003584 <_vfiprintf_r>
 8002d26:	b002      	add	sp, #8
 8002d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d2c:	b004      	add	sp, #16
 8002d2e:	4770      	bx	lr
 8002d30:	2000000c 	.word	0x2000000c

08002d34 <_puts_r>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	460e      	mov	r6, r1
 8002d38:	4605      	mov	r5, r0
 8002d3a:	b118      	cbz	r0, 8002d44 <_puts_r+0x10>
 8002d3c:	6983      	ldr	r3, [r0, #24]
 8002d3e:	b90b      	cbnz	r3, 8002d44 <_puts_r+0x10>
 8002d40:	f000 fa48 	bl	80031d4 <__sinit>
 8002d44:	69ab      	ldr	r3, [r5, #24]
 8002d46:	68ac      	ldr	r4, [r5, #8]
 8002d48:	b913      	cbnz	r3, 8002d50 <_puts_r+0x1c>
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f000 fa42 	bl	80031d4 <__sinit>
 8002d50:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <_puts_r+0xd0>)
 8002d52:	429c      	cmp	r4, r3
 8002d54:	d120      	bne.n	8002d98 <_puts_r+0x64>
 8002d56:	686c      	ldr	r4, [r5, #4]
 8002d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d5a:	07db      	lsls	r3, r3, #31
 8002d5c:	d405      	bmi.n	8002d6a <_puts_r+0x36>
 8002d5e:	89a3      	ldrh	r3, [r4, #12]
 8002d60:	0598      	lsls	r0, r3, #22
 8002d62:	d402      	bmi.n	8002d6a <_puts_r+0x36>
 8002d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d66:	f000 fad3 	bl	8003310 <__retarget_lock_acquire_recursive>
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	0719      	lsls	r1, r3, #28
 8002d6e:	d51d      	bpl.n	8002dac <_puts_r+0x78>
 8002d70:	6923      	ldr	r3, [r4, #16]
 8002d72:	b1db      	cbz	r3, 8002dac <_puts_r+0x78>
 8002d74:	3e01      	subs	r6, #1
 8002d76:	68a3      	ldr	r3, [r4, #8]
 8002d78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	60a3      	str	r3, [r4, #8]
 8002d80:	bb39      	cbnz	r1, 8002dd2 <_puts_r+0x9e>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	da38      	bge.n	8002df8 <_puts_r+0xc4>
 8002d86:	4622      	mov	r2, r4
 8002d88:	210a      	movs	r1, #10
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f000 f848 	bl	8002e20 <__swbuf_r>
 8002d90:	3001      	adds	r0, #1
 8002d92:	d011      	beq.n	8002db8 <_puts_r+0x84>
 8002d94:	250a      	movs	r5, #10
 8002d96:	e011      	b.n	8002dbc <_puts_r+0x88>
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <_puts_r+0xd4>)
 8002d9a:	429c      	cmp	r4, r3
 8002d9c:	d101      	bne.n	8002da2 <_puts_r+0x6e>
 8002d9e:	68ac      	ldr	r4, [r5, #8]
 8002da0:	e7da      	b.n	8002d58 <_puts_r+0x24>
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <_puts_r+0xd8>)
 8002da4:	429c      	cmp	r4, r3
 8002da6:	bf08      	it	eq
 8002da8:	68ec      	ldreq	r4, [r5, #12]
 8002daa:	e7d5      	b.n	8002d58 <_puts_r+0x24>
 8002dac:	4621      	mov	r1, r4
 8002dae:	4628      	mov	r0, r5
 8002db0:	f000 f888 	bl	8002ec4 <__swsetup_r>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d0dd      	beq.n	8002d74 <_puts_r+0x40>
 8002db8:	f04f 35ff 	mov.w	r5, #4294967295
 8002dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dbe:	07da      	lsls	r2, r3, #31
 8002dc0:	d405      	bmi.n	8002dce <_puts_r+0x9a>
 8002dc2:	89a3      	ldrh	r3, [r4, #12]
 8002dc4:	059b      	lsls	r3, r3, #22
 8002dc6:	d402      	bmi.n	8002dce <_puts_r+0x9a>
 8002dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dca:	f000 faa2 	bl	8003312 <__retarget_lock_release_recursive>
 8002dce:	4628      	mov	r0, r5
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da04      	bge.n	8002de0 <_puts_r+0xac>
 8002dd6:	69a2      	ldr	r2, [r4, #24]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	dc06      	bgt.n	8002dea <_puts_r+0xb6>
 8002ddc:	290a      	cmp	r1, #10
 8002dde:	d004      	beq.n	8002dea <_puts_r+0xb6>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	6022      	str	r2, [r4, #0]
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	e7c5      	b.n	8002d76 <_puts_r+0x42>
 8002dea:	4622      	mov	r2, r4
 8002dec:	4628      	mov	r0, r5
 8002dee:	f000 f817 	bl	8002e20 <__swbuf_r>
 8002df2:	3001      	adds	r0, #1
 8002df4:	d1bf      	bne.n	8002d76 <_puts_r+0x42>
 8002df6:	e7df      	b.n	8002db8 <_puts_r+0x84>
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	250a      	movs	r5, #10
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	6022      	str	r2, [r4, #0]
 8002e00:	701d      	strb	r5, [r3, #0]
 8002e02:	e7db      	b.n	8002dbc <_puts_r+0x88>
 8002e04:	08003d38 	.word	0x08003d38
 8002e08:	08003d58 	.word	0x08003d58
 8002e0c:	08003d18 	.word	0x08003d18

08002e10 <puts>:
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <puts+0xc>)
 8002e12:	4601      	mov	r1, r0
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	f7ff bf8d 	b.w	8002d34 <_puts_r>
 8002e1a:	bf00      	nop
 8002e1c:	2000000c 	.word	0x2000000c

08002e20 <__swbuf_r>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	460e      	mov	r6, r1
 8002e24:	4614      	mov	r4, r2
 8002e26:	4605      	mov	r5, r0
 8002e28:	b118      	cbz	r0, 8002e32 <__swbuf_r+0x12>
 8002e2a:	6983      	ldr	r3, [r0, #24]
 8002e2c:	b90b      	cbnz	r3, 8002e32 <__swbuf_r+0x12>
 8002e2e:	f000 f9d1 	bl	80031d4 <__sinit>
 8002e32:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <__swbuf_r+0x98>)
 8002e34:	429c      	cmp	r4, r3
 8002e36:	d12b      	bne.n	8002e90 <__swbuf_r+0x70>
 8002e38:	686c      	ldr	r4, [r5, #4]
 8002e3a:	69a3      	ldr	r3, [r4, #24]
 8002e3c:	60a3      	str	r3, [r4, #8]
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	071a      	lsls	r2, r3, #28
 8002e42:	d52f      	bpl.n	8002ea4 <__swbuf_r+0x84>
 8002e44:	6923      	ldr	r3, [r4, #16]
 8002e46:	b36b      	cbz	r3, 8002ea4 <__swbuf_r+0x84>
 8002e48:	6923      	ldr	r3, [r4, #16]
 8002e4a:	6820      	ldr	r0, [r4, #0]
 8002e4c:	1ac0      	subs	r0, r0, r3
 8002e4e:	6963      	ldr	r3, [r4, #20]
 8002e50:	b2f6      	uxtb	r6, r6
 8002e52:	4283      	cmp	r3, r0
 8002e54:	4637      	mov	r7, r6
 8002e56:	dc04      	bgt.n	8002e62 <__swbuf_r+0x42>
 8002e58:	4621      	mov	r1, r4
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f000 f926 	bl	80030ac <_fflush_r>
 8002e60:	bb30      	cbnz	r0, 8002eb0 <__swbuf_r+0x90>
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60a3      	str	r3, [r4, #8]
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	6022      	str	r2, [r4, #0]
 8002e6e:	701e      	strb	r6, [r3, #0]
 8002e70:	6963      	ldr	r3, [r4, #20]
 8002e72:	3001      	adds	r0, #1
 8002e74:	4283      	cmp	r3, r0
 8002e76:	d004      	beq.n	8002e82 <__swbuf_r+0x62>
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	07db      	lsls	r3, r3, #31
 8002e7c:	d506      	bpl.n	8002e8c <__swbuf_r+0x6c>
 8002e7e:	2e0a      	cmp	r6, #10
 8002e80:	d104      	bne.n	8002e8c <__swbuf_r+0x6c>
 8002e82:	4621      	mov	r1, r4
 8002e84:	4628      	mov	r0, r5
 8002e86:	f000 f911 	bl	80030ac <_fflush_r>
 8002e8a:	b988      	cbnz	r0, 8002eb0 <__swbuf_r+0x90>
 8002e8c:	4638      	mov	r0, r7
 8002e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <__swbuf_r+0x9c>)
 8002e92:	429c      	cmp	r4, r3
 8002e94:	d101      	bne.n	8002e9a <__swbuf_r+0x7a>
 8002e96:	68ac      	ldr	r4, [r5, #8]
 8002e98:	e7cf      	b.n	8002e3a <__swbuf_r+0x1a>
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <__swbuf_r+0xa0>)
 8002e9c:	429c      	cmp	r4, r3
 8002e9e:	bf08      	it	eq
 8002ea0:	68ec      	ldreq	r4, [r5, #12]
 8002ea2:	e7ca      	b.n	8002e3a <__swbuf_r+0x1a>
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f000 f80c 	bl	8002ec4 <__swsetup_r>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d0cb      	beq.n	8002e48 <__swbuf_r+0x28>
 8002eb0:	f04f 37ff 	mov.w	r7, #4294967295
 8002eb4:	e7ea      	b.n	8002e8c <__swbuf_r+0x6c>
 8002eb6:	bf00      	nop
 8002eb8:	08003d38 	.word	0x08003d38
 8002ebc:	08003d58 	.word	0x08003d58
 8002ec0:	08003d18 	.word	0x08003d18

08002ec4 <__swsetup_r>:
 8002ec4:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <__swsetup_r+0xcc>)
 8002ec6:	b570      	push	{r4, r5, r6, lr}
 8002ec8:	681d      	ldr	r5, [r3, #0]
 8002eca:	4606      	mov	r6, r0
 8002ecc:	460c      	mov	r4, r1
 8002ece:	b125      	cbz	r5, 8002eda <__swsetup_r+0x16>
 8002ed0:	69ab      	ldr	r3, [r5, #24]
 8002ed2:	b913      	cbnz	r3, 8002eda <__swsetup_r+0x16>
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	f000 f97d 	bl	80031d4 <__sinit>
 8002eda:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <__swsetup_r+0xd0>)
 8002edc:	429c      	cmp	r4, r3
 8002ede:	d10f      	bne.n	8002f00 <__swsetup_r+0x3c>
 8002ee0:	686c      	ldr	r4, [r5, #4]
 8002ee2:	89a3      	ldrh	r3, [r4, #12]
 8002ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ee8:	0719      	lsls	r1, r3, #28
 8002eea:	d42c      	bmi.n	8002f46 <__swsetup_r+0x82>
 8002eec:	06dd      	lsls	r5, r3, #27
 8002eee:	d411      	bmi.n	8002f14 <__swsetup_r+0x50>
 8002ef0:	2309      	movs	r3, #9
 8002ef2:	6033      	str	r3, [r6, #0]
 8002ef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ef8:	81a3      	strh	r3, [r4, #12]
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295
 8002efe:	e03e      	b.n	8002f7e <__swsetup_r+0xba>
 8002f00:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <__swsetup_r+0xd4>)
 8002f02:	429c      	cmp	r4, r3
 8002f04:	d101      	bne.n	8002f0a <__swsetup_r+0x46>
 8002f06:	68ac      	ldr	r4, [r5, #8]
 8002f08:	e7eb      	b.n	8002ee2 <__swsetup_r+0x1e>
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <__swsetup_r+0xd8>)
 8002f0c:	429c      	cmp	r4, r3
 8002f0e:	bf08      	it	eq
 8002f10:	68ec      	ldreq	r4, [r5, #12]
 8002f12:	e7e6      	b.n	8002ee2 <__swsetup_r+0x1e>
 8002f14:	0758      	lsls	r0, r3, #29
 8002f16:	d512      	bpl.n	8002f3e <__swsetup_r+0x7a>
 8002f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f1a:	b141      	cbz	r1, 8002f2e <__swsetup_r+0x6a>
 8002f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f20:	4299      	cmp	r1, r3
 8002f22:	d002      	beq.n	8002f2a <__swsetup_r+0x66>
 8002f24:	4630      	mov	r0, r6
 8002f26:	f000 fa59 	bl	80033dc <_free_r>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	2300      	movs	r3, #0
 8002f38:	6063      	str	r3, [r4, #4]
 8002f3a:	6923      	ldr	r3, [r4, #16]
 8002f3c:	6023      	str	r3, [r4, #0]
 8002f3e:	89a3      	ldrh	r3, [r4, #12]
 8002f40:	f043 0308 	orr.w	r3, r3, #8
 8002f44:	81a3      	strh	r3, [r4, #12]
 8002f46:	6923      	ldr	r3, [r4, #16]
 8002f48:	b94b      	cbnz	r3, 8002f5e <__swsetup_r+0x9a>
 8002f4a:	89a3      	ldrh	r3, [r4, #12]
 8002f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f54:	d003      	beq.n	8002f5e <__swsetup_r+0x9a>
 8002f56:	4621      	mov	r1, r4
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f000 f9ff 	bl	800335c <__smakebuf_r>
 8002f5e:	89a0      	ldrh	r0, [r4, #12]
 8002f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f64:	f010 0301 	ands.w	r3, r0, #1
 8002f68:	d00a      	beq.n	8002f80 <__swsetup_r+0xbc>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60a3      	str	r3, [r4, #8]
 8002f6e:	6963      	ldr	r3, [r4, #20]
 8002f70:	425b      	negs	r3, r3
 8002f72:	61a3      	str	r3, [r4, #24]
 8002f74:	6923      	ldr	r3, [r4, #16]
 8002f76:	b943      	cbnz	r3, 8002f8a <__swsetup_r+0xc6>
 8002f78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f7c:	d1ba      	bne.n	8002ef4 <__swsetup_r+0x30>
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
 8002f80:	0781      	lsls	r1, r0, #30
 8002f82:	bf58      	it	pl
 8002f84:	6963      	ldrpl	r3, [r4, #20]
 8002f86:	60a3      	str	r3, [r4, #8]
 8002f88:	e7f4      	b.n	8002f74 <__swsetup_r+0xb0>
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	e7f7      	b.n	8002f7e <__swsetup_r+0xba>
 8002f8e:	bf00      	nop
 8002f90:	2000000c 	.word	0x2000000c
 8002f94:	08003d38 	.word	0x08003d38
 8002f98:	08003d58 	.word	0x08003d58
 8002f9c:	08003d18 	.word	0x08003d18

08002fa0 <__sflush_r>:
 8002fa0:	898a      	ldrh	r2, [r1, #12]
 8002fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa6:	4605      	mov	r5, r0
 8002fa8:	0710      	lsls	r0, r2, #28
 8002faa:	460c      	mov	r4, r1
 8002fac:	d458      	bmi.n	8003060 <__sflush_r+0xc0>
 8002fae:	684b      	ldr	r3, [r1, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	dc05      	bgt.n	8002fc0 <__sflush_r+0x20>
 8002fb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	dc02      	bgt.n	8002fc0 <__sflush_r+0x20>
 8002fba:	2000      	movs	r0, #0
 8002fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fc2:	2e00      	cmp	r6, #0
 8002fc4:	d0f9      	beq.n	8002fba <__sflush_r+0x1a>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fcc:	682f      	ldr	r7, [r5, #0]
 8002fce:	602b      	str	r3, [r5, #0]
 8002fd0:	d032      	beq.n	8003038 <__sflush_r+0x98>
 8002fd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fd4:	89a3      	ldrh	r3, [r4, #12]
 8002fd6:	075a      	lsls	r2, r3, #29
 8002fd8:	d505      	bpl.n	8002fe6 <__sflush_r+0x46>
 8002fda:	6863      	ldr	r3, [r4, #4]
 8002fdc:	1ac0      	subs	r0, r0, r3
 8002fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fe0:	b10b      	cbz	r3, 8002fe6 <__sflush_r+0x46>
 8002fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fe4:	1ac0      	subs	r0, r0, r3
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fec:	6a21      	ldr	r1, [r4, #32]
 8002fee:	4628      	mov	r0, r5
 8002ff0:	47b0      	blx	r6
 8002ff2:	1c43      	adds	r3, r0, #1
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	d106      	bne.n	8003006 <__sflush_r+0x66>
 8002ff8:	6829      	ldr	r1, [r5, #0]
 8002ffa:	291d      	cmp	r1, #29
 8002ffc:	d82c      	bhi.n	8003058 <__sflush_r+0xb8>
 8002ffe:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <__sflush_r+0x108>)
 8003000:	40ca      	lsrs	r2, r1
 8003002:	07d6      	lsls	r6, r2, #31
 8003004:	d528      	bpl.n	8003058 <__sflush_r+0xb8>
 8003006:	2200      	movs	r2, #0
 8003008:	6062      	str	r2, [r4, #4]
 800300a:	04d9      	lsls	r1, r3, #19
 800300c:	6922      	ldr	r2, [r4, #16]
 800300e:	6022      	str	r2, [r4, #0]
 8003010:	d504      	bpl.n	800301c <__sflush_r+0x7c>
 8003012:	1c42      	adds	r2, r0, #1
 8003014:	d101      	bne.n	800301a <__sflush_r+0x7a>
 8003016:	682b      	ldr	r3, [r5, #0]
 8003018:	b903      	cbnz	r3, 800301c <__sflush_r+0x7c>
 800301a:	6560      	str	r0, [r4, #84]	; 0x54
 800301c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800301e:	602f      	str	r7, [r5, #0]
 8003020:	2900      	cmp	r1, #0
 8003022:	d0ca      	beq.n	8002fba <__sflush_r+0x1a>
 8003024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003028:	4299      	cmp	r1, r3
 800302a:	d002      	beq.n	8003032 <__sflush_r+0x92>
 800302c:	4628      	mov	r0, r5
 800302e:	f000 f9d5 	bl	80033dc <_free_r>
 8003032:	2000      	movs	r0, #0
 8003034:	6360      	str	r0, [r4, #52]	; 0x34
 8003036:	e7c1      	b.n	8002fbc <__sflush_r+0x1c>
 8003038:	6a21      	ldr	r1, [r4, #32]
 800303a:	2301      	movs	r3, #1
 800303c:	4628      	mov	r0, r5
 800303e:	47b0      	blx	r6
 8003040:	1c41      	adds	r1, r0, #1
 8003042:	d1c7      	bne.n	8002fd4 <__sflush_r+0x34>
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0c4      	beq.n	8002fd4 <__sflush_r+0x34>
 800304a:	2b1d      	cmp	r3, #29
 800304c:	d001      	beq.n	8003052 <__sflush_r+0xb2>
 800304e:	2b16      	cmp	r3, #22
 8003050:	d101      	bne.n	8003056 <__sflush_r+0xb6>
 8003052:	602f      	str	r7, [r5, #0]
 8003054:	e7b1      	b.n	8002fba <__sflush_r+0x1a>
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	e7ad      	b.n	8002fbc <__sflush_r+0x1c>
 8003060:	690f      	ldr	r7, [r1, #16]
 8003062:	2f00      	cmp	r7, #0
 8003064:	d0a9      	beq.n	8002fba <__sflush_r+0x1a>
 8003066:	0793      	lsls	r3, r2, #30
 8003068:	680e      	ldr	r6, [r1, #0]
 800306a:	bf08      	it	eq
 800306c:	694b      	ldreq	r3, [r1, #20]
 800306e:	600f      	str	r7, [r1, #0]
 8003070:	bf18      	it	ne
 8003072:	2300      	movne	r3, #0
 8003074:	eba6 0807 	sub.w	r8, r6, r7
 8003078:	608b      	str	r3, [r1, #8]
 800307a:	f1b8 0f00 	cmp.w	r8, #0
 800307e:	dd9c      	ble.n	8002fba <__sflush_r+0x1a>
 8003080:	6a21      	ldr	r1, [r4, #32]
 8003082:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003084:	4643      	mov	r3, r8
 8003086:	463a      	mov	r2, r7
 8003088:	4628      	mov	r0, r5
 800308a:	47b0      	blx	r6
 800308c:	2800      	cmp	r0, #0
 800308e:	dc06      	bgt.n	800309e <__sflush_r+0xfe>
 8003090:	89a3      	ldrh	r3, [r4, #12]
 8003092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003096:	81a3      	strh	r3, [r4, #12]
 8003098:	f04f 30ff 	mov.w	r0, #4294967295
 800309c:	e78e      	b.n	8002fbc <__sflush_r+0x1c>
 800309e:	4407      	add	r7, r0
 80030a0:	eba8 0800 	sub.w	r8, r8, r0
 80030a4:	e7e9      	b.n	800307a <__sflush_r+0xda>
 80030a6:	bf00      	nop
 80030a8:	20400001 	.word	0x20400001

080030ac <_fflush_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	690b      	ldr	r3, [r1, #16]
 80030b0:	4605      	mov	r5, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	b913      	cbnz	r3, 80030bc <_fflush_r+0x10>
 80030b6:	2500      	movs	r5, #0
 80030b8:	4628      	mov	r0, r5
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	b118      	cbz	r0, 80030c6 <_fflush_r+0x1a>
 80030be:	6983      	ldr	r3, [r0, #24]
 80030c0:	b90b      	cbnz	r3, 80030c6 <_fflush_r+0x1a>
 80030c2:	f000 f887 	bl	80031d4 <__sinit>
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <_fflush_r+0x6c>)
 80030c8:	429c      	cmp	r4, r3
 80030ca:	d11b      	bne.n	8003104 <_fflush_r+0x58>
 80030cc:	686c      	ldr	r4, [r5, #4]
 80030ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0ef      	beq.n	80030b6 <_fflush_r+0xa>
 80030d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030d8:	07d0      	lsls	r0, r2, #31
 80030da:	d404      	bmi.n	80030e6 <_fflush_r+0x3a>
 80030dc:	0599      	lsls	r1, r3, #22
 80030de:	d402      	bmi.n	80030e6 <_fflush_r+0x3a>
 80030e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030e2:	f000 f915 	bl	8003310 <__retarget_lock_acquire_recursive>
 80030e6:	4628      	mov	r0, r5
 80030e8:	4621      	mov	r1, r4
 80030ea:	f7ff ff59 	bl	8002fa0 <__sflush_r>
 80030ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030f0:	07da      	lsls	r2, r3, #31
 80030f2:	4605      	mov	r5, r0
 80030f4:	d4e0      	bmi.n	80030b8 <_fflush_r+0xc>
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	059b      	lsls	r3, r3, #22
 80030fa:	d4dd      	bmi.n	80030b8 <_fflush_r+0xc>
 80030fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030fe:	f000 f908 	bl	8003312 <__retarget_lock_release_recursive>
 8003102:	e7d9      	b.n	80030b8 <_fflush_r+0xc>
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <_fflush_r+0x70>)
 8003106:	429c      	cmp	r4, r3
 8003108:	d101      	bne.n	800310e <_fflush_r+0x62>
 800310a:	68ac      	ldr	r4, [r5, #8]
 800310c:	e7df      	b.n	80030ce <_fflush_r+0x22>
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <_fflush_r+0x74>)
 8003110:	429c      	cmp	r4, r3
 8003112:	bf08      	it	eq
 8003114:	68ec      	ldreq	r4, [r5, #12]
 8003116:	e7da      	b.n	80030ce <_fflush_r+0x22>
 8003118:	08003d38 	.word	0x08003d38
 800311c:	08003d58 	.word	0x08003d58
 8003120:	08003d18 	.word	0x08003d18

08003124 <std>:
 8003124:	2300      	movs	r3, #0
 8003126:	b510      	push	{r4, lr}
 8003128:	4604      	mov	r4, r0
 800312a:	e9c0 3300 	strd	r3, r3, [r0]
 800312e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003132:	6083      	str	r3, [r0, #8]
 8003134:	8181      	strh	r1, [r0, #12]
 8003136:	6643      	str	r3, [r0, #100]	; 0x64
 8003138:	81c2      	strh	r2, [r0, #14]
 800313a:	6183      	str	r3, [r0, #24]
 800313c:	4619      	mov	r1, r3
 800313e:	2208      	movs	r2, #8
 8003140:	305c      	adds	r0, #92	; 0x5c
 8003142:	f7ff fdd7 	bl	8002cf4 <memset>
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <std+0x38>)
 8003148:	6263      	str	r3, [r4, #36]	; 0x24
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <std+0x3c>)
 800314c:	62a3      	str	r3, [r4, #40]	; 0x28
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <std+0x40>)
 8003150:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <std+0x44>)
 8003154:	6224      	str	r4, [r4, #32]
 8003156:	6323      	str	r3, [r4, #48]	; 0x30
 8003158:	bd10      	pop	{r4, pc}
 800315a:	bf00      	nop
 800315c:	08003b2d 	.word	0x08003b2d
 8003160:	08003b4f 	.word	0x08003b4f
 8003164:	08003b87 	.word	0x08003b87
 8003168:	08003bab 	.word	0x08003bab

0800316c <_cleanup_r>:
 800316c:	4901      	ldr	r1, [pc, #4]	; (8003174 <_cleanup_r+0x8>)
 800316e:	f000 b8af 	b.w	80032d0 <_fwalk_reent>
 8003172:	bf00      	nop
 8003174:	080030ad 	.word	0x080030ad

08003178 <__sfmoreglue>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	1e4a      	subs	r2, r1, #1
 800317c:	2568      	movs	r5, #104	; 0x68
 800317e:	4355      	muls	r5, r2
 8003180:	460e      	mov	r6, r1
 8003182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003186:	f000 f979 	bl	800347c <_malloc_r>
 800318a:	4604      	mov	r4, r0
 800318c:	b140      	cbz	r0, 80031a0 <__sfmoreglue+0x28>
 800318e:	2100      	movs	r1, #0
 8003190:	e9c0 1600 	strd	r1, r6, [r0]
 8003194:	300c      	adds	r0, #12
 8003196:	60a0      	str	r0, [r4, #8]
 8003198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800319c:	f7ff fdaa 	bl	8002cf4 <memset>
 80031a0:	4620      	mov	r0, r4
 80031a2:	bd70      	pop	{r4, r5, r6, pc}

080031a4 <__sfp_lock_acquire>:
 80031a4:	4801      	ldr	r0, [pc, #4]	; (80031ac <__sfp_lock_acquire+0x8>)
 80031a6:	f000 b8b3 	b.w	8003310 <__retarget_lock_acquire_recursive>
 80031aa:	bf00      	nop
 80031ac:	2000014c 	.word	0x2000014c

080031b0 <__sfp_lock_release>:
 80031b0:	4801      	ldr	r0, [pc, #4]	; (80031b8 <__sfp_lock_release+0x8>)
 80031b2:	f000 b8ae 	b.w	8003312 <__retarget_lock_release_recursive>
 80031b6:	bf00      	nop
 80031b8:	2000014c 	.word	0x2000014c

080031bc <__sinit_lock_acquire>:
 80031bc:	4801      	ldr	r0, [pc, #4]	; (80031c4 <__sinit_lock_acquire+0x8>)
 80031be:	f000 b8a7 	b.w	8003310 <__retarget_lock_acquire_recursive>
 80031c2:	bf00      	nop
 80031c4:	20000147 	.word	0x20000147

080031c8 <__sinit_lock_release>:
 80031c8:	4801      	ldr	r0, [pc, #4]	; (80031d0 <__sinit_lock_release+0x8>)
 80031ca:	f000 b8a2 	b.w	8003312 <__retarget_lock_release_recursive>
 80031ce:	bf00      	nop
 80031d0:	20000147 	.word	0x20000147

080031d4 <__sinit>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	4604      	mov	r4, r0
 80031d8:	f7ff fff0 	bl	80031bc <__sinit_lock_acquire>
 80031dc:	69a3      	ldr	r3, [r4, #24]
 80031de:	b11b      	cbz	r3, 80031e8 <__sinit+0x14>
 80031e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e4:	f7ff bff0 	b.w	80031c8 <__sinit_lock_release>
 80031e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031ec:	6523      	str	r3, [r4, #80]	; 0x50
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <__sinit+0x68>)
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <__sinit+0x6c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80031f6:	42a3      	cmp	r3, r4
 80031f8:	bf04      	itt	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	61a3      	streq	r3, [r4, #24]
 80031fe:	4620      	mov	r0, r4
 8003200:	f000 f820 	bl	8003244 <__sfp>
 8003204:	6060      	str	r0, [r4, #4]
 8003206:	4620      	mov	r0, r4
 8003208:	f000 f81c 	bl	8003244 <__sfp>
 800320c:	60a0      	str	r0, [r4, #8]
 800320e:	4620      	mov	r0, r4
 8003210:	f000 f818 	bl	8003244 <__sfp>
 8003214:	2200      	movs	r2, #0
 8003216:	60e0      	str	r0, [r4, #12]
 8003218:	2104      	movs	r1, #4
 800321a:	6860      	ldr	r0, [r4, #4]
 800321c:	f7ff ff82 	bl	8003124 <std>
 8003220:	68a0      	ldr	r0, [r4, #8]
 8003222:	2201      	movs	r2, #1
 8003224:	2109      	movs	r1, #9
 8003226:	f7ff ff7d 	bl	8003124 <std>
 800322a:	68e0      	ldr	r0, [r4, #12]
 800322c:	2202      	movs	r2, #2
 800322e:	2112      	movs	r1, #18
 8003230:	f7ff ff78 	bl	8003124 <std>
 8003234:	2301      	movs	r3, #1
 8003236:	61a3      	str	r3, [r4, #24]
 8003238:	e7d2      	b.n	80031e0 <__sinit+0xc>
 800323a:	bf00      	nop
 800323c:	08003d14 	.word	0x08003d14
 8003240:	0800316d 	.word	0x0800316d

08003244 <__sfp>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	4607      	mov	r7, r0
 8003248:	f7ff ffac 	bl	80031a4 <__sfp_lock_acquire>
 800324c:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <__sfp+0x84>)
 800324e:	681e      	ldr	r6, [r3, #0]
 8003250:	69b3      	ldr	r3, [r6, #24]
 8003252:	b913      	cbnz	r3, 800325a <__sfp+0x16>
 8003254:	4630      	mov	r0, r6
 8003256:	f7ff ffbd 	bl	80031d4 <__sinit>
 800325a:	3648      	adds	r6, #72	; 0x48
 800325c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003260:	3b01      	subs	r3, #1
 8003262:	d503      	bpl.n	800326c <__sfp+0x28>
 8003264:	6833      	ldr	r3, [r6, #0]
 8003266:	b30b      	cbz	r3, 80032ac <__sfp+0x68>
 8003268:	6836      	ldr	r6, [r6, #0]
 800326a:	e7f7      	b.n	800325c <__sfp+0x18>
 800326c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003270:	b9d5      	cbnz	r5, 80032a8 <__sfp+0x64>
 8003272:	4b16      	ldr	r3, [pc, #88]	; (80032cc <__sfp+0x88>)
 8003274:	60e3      	str	r3, [r4, #12]
 8003276:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800327a:	6665      	str	r5, [r4, #100]	; 0x64
 800327c:	f000 f847 	bl	800330e <__retarget_lock_init_recursive>
 8003280:	f7ff ff96 	bl	80031b0 <__sfp_lock_release>
 8003284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800328c:	6025      	str	r5, [r4, #0]
 800328e:	61a5      	str	r5, [r4, #24]
 8003290:	2208      	movs	r2, #8
 8003292:	4629      	mov	r1, r5
 8003294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003298:	f7ff fd2c 	bl	8002cf4 <memset>
 800329c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032a4:	4620      	mov	r0, r4
 80032a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a8:	3468      	adds	r4, #104	; 0x68
 80032aa:	e7d9      	b.n	8003260 <__sfp+0x1c>
 80032ac:	2104      	movs	r1, #4
 80032ae:	4638      	mov	r0, r7
 80032b0:	f7ff ff62 	bl	8003178 <__sfmoreglue>
 80032b4:	4604      	mov	r4, r0
 80032b6:	6030      	str	r0, [r6, #0]
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d1d5      	bne.n	8003268 <__sfp+0x24>
 80032bc:	f7ff ff78 	bl	80031b0 <__sfp_lock_release>
 80032c0:	230c      	movs	r3, #12
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	e7ee      	b.n	80032a4 <__sfp+0x60>
 80032c6:	bf00      	nop
 80032c8:	08003d14 	.word	0x08003d14
 80032cc:	ffff0001 	.word	0xffff0001

080032d0 <_fwalk_reent>:
 80032d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d4:	4606      	mov	r6, r0
 80032d6:	4688      	mov	r8, r1
 80032d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032dc:	2700      	movs	r7, #0
 80032de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032e2:	f1b9 0901 	subs.w	r9, r9, #1
 80032e6:	d505      	bpl.n	80032f4 <_fwalk_reent+0x24>
 80032e8:	6824      	ldr	r4, [r4, #0]
 80032ea:	2c00      	cmp	r4, #0
 80032ec:	d1f7      	bne.n	80032de <_fwalk_reent+0xe>
 80032ee:	4638      	mov	r0, r7
 80032f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f4:	89ab      	ldrh	r3, [r5, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d907      	bls.n	800330a <_fwalk_reent+0x3a>
 80032fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032fe:	3301      	adds	r3, #1
 8003300:	d003      	beq.n	800330a <_fwalk_reent+0x3a>
 8003302:	4629      	mov	r1, r5
 8003304:	4630      	mov	r0, r6
 8003306:	47c0      	blx	r8
 8003308:	4307      	orrs	r7, r0
 800330a:	3568      	adds	r5, #104	; 0x68
 800330c:	e7e9      	b.n	80032e2 <_fwalk_reent+0x12>

0800330e <__retarget_lock_init_recursive>:
 800330e:	4770      	bx	lr

08003310 <__retarget_lock_acquire_recursive>:
 8003310:	4770      	bx	lr

08003312 <__retarget_lock_release_recursive>:
 8003312:	4770      	bx	lr

08003314 <__swhatbuf_r>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	460e      	mov	r6, r1
 8003318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800331c:	2900      	cmp	r1, #0
 800331e:	b096      	sub	sp, #88	; 0x58
 8003320:	4614      	mov	r4, r2
 8003322:	461d      	mov	r5, r3
 8003324:	da07      	bge.n	8003336 <__swhatbuf_r+0x22>
 8003326:	2300      	movs	r3, #0
 8003328:	602b      	str	r3, [r5, #0]
 800332a:	89b3      	ldrh	r3, [r6, #12]
 800332c:	061a      	lsls	r2, r3, #24
 800332e:	d410      	bmi.n	8003352 <__swhatbuf_r+0x3e>
 8003330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003334:	e00e      	b.n	8003354 <__swhatbuf_r+0x40>
 8003336:	466a      	mov	r2, sp
 8003338:	f000 fc5e 	bl	8003bf8 <_fstat_r>
 800333c:	2800      	cmp	r0, #0
 800333e:	dbf2      	blt.n	8003326 <__swhatbuf_r+0x12>
 8003340:	9a01      	ldr	r2, [sp, #4]
 8003342:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003346:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800334a:	425a      	negs	r2, r3
 800334c:	415a      	adcs	r2, r3
 800334e:	602a      	str	r2, [r5, #0]
 8003350:	e7ee      	b.n	8003330 <__swhatbuf_r+0x1c>
 8003352:	2340      	movs	r3, #64	; 0x40
 8003354:	2000      	movs	r0, #0
 8003356:	6023      	str	r3, [r4, #0]
 8003358:	b016      	add	sp, #88	; 0x58
 800335a:	bd70      	pop	{r4, r5, r6, pc}

0800335c <__smakebuf_r>:
 800335c:	898b      	ldrh	r3, [r1, #12]
 800335e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003360:	079d      	lsls	r5, r3, #30
 8003362:	4606      	mov	r6, r0
 8003364:	460c      	mov	r4, r1
 8003366:	d507      	bpl.n	8003378 <__smakebuf_r+0x1c>
 8003368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	6123      	str	r3, [r4, #16]
 8003370:	2301      	movs	r3, #1
 8003372:	6163      	str	r3, [r4, #20]
 8003374:	b002      	add	sp, #8
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	ab01      	add	r3, sp, #4
 800337a:	466a      	mov	r2, sp
 800337c:	f7ff ffca 	bl	8003314 <__swhatbuf_r>
 8003380:	9900      	ldr	r1, [sp, #0]
 8003382:	4605      	mov	r5, r0
 8003384:	4630      	mov	r0, r6
 8003386:	f000 f879 	bl	800347c <_malloc_r>
 800338a:	b948      	cbnz	r0, 80033a0 <__smakebuf_r+0x44>
 800338c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003390:	059a      	lsls	r2, r3, #22
 8003392:	d4ef      	bmi.n	8003374 <__smakebuf_r+0x18>
 8003394:	f023 0303 	bic.w	r3, r3, #3
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	81a3      	strh	r3, [r4, #12]
 800339e:	e7e3      	b.n	8003368 <__smakebuf_r+0xc>
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <__smakebuf_r+0x7c>)
 80033a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80033a4:	89a3      	ldrh	r3, [r4, #12]
 80033a6:	6020      	str	r0, [r4, #0]
 80033a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ac:	81a3      	strh	r3, [r4, #12]
 80033ae:	9b00      	ldr	r3, [sp, #0]
 80033b0:	6163      	str	r3, [r4, #20]
 80033b2:	9b01      	ldr	r3, [sp, #4]
 80033b4:	6120      	str	r0, [r4, #16]
 80033b6:	b15b      	cbz	r3, 80033d0 <__smakebuf_r+0x74>
 80033b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033bc:	4630      	mov	r0, r6
 80033be:	f000 fc2d 	bl	8003c1c <_isatty_r>
 80033c2:	b128      	cbz	r0, 80033d0 <__smakebuf_r+0x74>
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	81a3      	strh	r3, [r4, #12]
 80033d0:	89a0      	ldrh	r0, [r4, #12]
 80033d2:	4305      	orrs	r5, r0
 80033d4:	81a5      	strh	r5, [r4, #12]
 80033d6:	e7cd      	b.n	8003374 <__smakebuf_r+0x18>
 80033d8:	0800316d 	.word	0x0800316d

080033dc <_free_r>:
 80033dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033de:	2900      	cmp	r1, #0
 80033e0:	d048      	beq.n	8003474 <_free_r+0x98>
 80033e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e6:	9001      	str	r0, [sp, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f1a1 0404 	sub.w	r4, r1, #4
 80033ee:	bfb8      	it	lt
 80033f0:	18e4      	addlt	r4, r4, r3
 80033f2:	f000 fc35 	bl	8003c60 <__malloc_lock>
 80033f6:	4a20      	ldr	r2, [pc, #128]	; (8003478 <_free_r+0x9c>)
 80033f8:	9801      	ldr	r0, [sp, #4]
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	4615      	mov	r5, r2
 80033fe:	b933      	cbnz	r3, 800340e <_free_r+0x32>
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	6014      	str	r4, [r2, #0]
 8003404:	b003      	add	sp, #12
 8003406:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800340a:	f000 bc2f 	b.w	8003c6c <__malloc_unlock>
 800340e:	42a3      	cmp	r3, r4
 8003410:	d90b      	bls.n	800342a <_free_r+0x4e>
 8003412:	6821      	ldr	r1, [r4, #0]
 8003414:	1862      	adds	r2, r4, r1
 8003416:	4293      	cmp	r3, r2
 8003418:	bf04      	itt	eq
 800341a:	681a      	ldreq	r2, [r3, #0]
 800341c:	685b      	ldreq	r3, [r3, #4]
 800341e:	6063      	str	r3, [r4, #4]
 8003420:	bf04      	itt	eq
 8003422:	1852      	addeq	r2, r2, r1
 8003424:	6022      	streq	r2, [r4, #0]
 8003426:	602c      	str	r4, [r5, #0]
 8003428:	e7ec      	b.n	8003404 <_free_r+0x28>
 800342a:	461a      	mov	r2, r3
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	b10b      	cbz	r3, 8003434 <_free_r+0x58>
 8003430:	42a3      	cmp	r3, r4
 8003432:	d9fa      	bls.n	800342a <_free_r+0x4e>
 8003434:	6811      	ldr	r1, [r2, #0]
 8003436:	1855      	adds	r5, r2, r1
 8003438:	42a5      	cmp	r5, r4
 800343a:	d10b      	bne.n	8003454 <_free_r+0x78>
 800343c:	6824      	ldr	r4, [r4, #0]
 800343e:	4421      	add	r1, r4
 8003440:	1854      	adds	r4, r2, r1
 8003442:	42a3      	cmp	r3, r4
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	d1dd      	bne.n	8003404 <_free_r+0x28>
 8003448:	681c      	ldr	r4, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	6053      	str	r3, [r2, #4]
 800344e:	4421      	add	r1, r4
 8003450:	6011      	str	r1, [r2, #0]
 8003452:	e7d7      	b.n	8003404 <_free_r+0x28>
 8003454:	d902      	bls.n	800345c <_free_r+0x80>
 8003456:	230c      	movs	r3, #12
 8003458:	6003      	str	r3, [r0, #0]
 800345a:	e7d3      	b.n	8003404 <_free_r+0x28>
 800345c:	6825      	ldr	r5, [r4, #0]
 800345e:	1961      	adds	r1, r4, r5
 8003460:	428b      	cmp	r3, r1
 8003462:	bf04      	itt	eq
 8003464:	6819      	ldreq	r1, [r3, #0]
 8003466:	685b      	ldreq	r3, [r3, #4]
 8003468:	6063      	str	r3, [r4, #4]
 800346a:	bf04      	itt	eq
 800346c:	1949      	addeq	r1, r1, r5
 800346e:	6021      	streq	r1, [r4, #0]
 8003470:	6054      	str	r4, [r2, #4]
 8003472:	e7c7      	b.n	8003404 <_free_r+0x28>
 8003474:	b003      	add	sp, #12
 8003476:	bd30      	pop	{r4, r5, pc}
 8003478:	20000094 	.word	0x20000094

0800347c <_malloc_r>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	1ccd      	adds	r5, r1, #3
 8003480:	f025 0503 	bic.w	r5, r5, #3
 8003484:	3508      	adds	r5, #8
 8003486:	2d0c      	cmp	r5, #12
 8003488:	bf38      	it	cc
 800348a:	250c      	movcc	r5, #12
 800348c:	2d00      	cmp	r5, #0
 800348e:	4606      	mov	r6, r0
 8003490:	db01      	blt.n	8003496 <_malloc_r+0x1a>
 8003492:	42a9      	cmp	r1, r5
 8003494:	d903      	bls.n	800349e <_malloc_r+0x22>
 8003496:	230c      	movs	r3, #12
 8003498:	6033      	str	r3, [r6, #0]
 800349a:	2000      	movs	r0, #0
 800349c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800349e:	f000 fbdf 	bl	8003c60 <__malloc_lock>
 80034a2:	4921      	ldr	r1, [pc, #132]	; (8003528 <_malloc_r+0xac>)
 80034a4:	680a      	ldr	r2, [r1, #0]
 80034a6:	4614      	mov	r4, r2
 80034a8:	b99c      	cbnz	r4, 80034d2 <_malloc_r+0x56>
 80034aa:	4f20      	ldr	r7, [pc, #128]	; (800352c <_malloc_r+0xb0>)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b923      	cbnz	r3, 80034ba <_malloc_r+0x3e>
 80034b0:	4621      	mov	r1, r4
 80034b2:	4630      	mov	r0, r6
 80034b4:	f000 fb2a 	bl	8003b0c <_sbrk_r>
 80034b8:	6038      	str	r0, [r7, #0]
 80034ba:	4629      	mov	r1, r5
 80034bc:	4630      	mov	r0, r6
 80034be:	f000 fb25 	bl	8003b0c <_sbrk_r>
 80034c2:	1c43      	adds	r3, r0, #1
 80034c4:	d123      	bne.n	800350e <_malloc_r+0x92>
 80034c6:	230c      	movs	r3, #12
 80034c8:	6033      	str	r3, [r6, #0]
 80034ca:	4630      	mov	r0, r6
 80034cc:	f000 fbce 	bl	8003c6c <__malloc_unlock>
 80034d0:	e7e3      	b.n	800349a <_malloc_r+0x1e>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	1b5b      	subs	r3, r3, r5
 80034d6:	d417      	bmi.n	8003508 <_malloc_r+0x8c>
 80034d8:	2b0b      	cmp	r3, #11
 80034da:	d903      	bls.n	80034e4 <_malloc_r+0x68>
 80034dc:	6023      	str	r3, [r4, #0]
 80034de:	441c      	add	r4, r3
 80034e0:	6025      	str	r5, [r4, #0]
 80034e2:	e004      	b.n	80034ee <_malloc_r+0x72>
 80034e4:	6863      	ldr	r3, [r4, #4]
 80034e6:	42a2      	cmp	r2, r4
 80034e8:	bf0c      	ite	eq
 80034ea:	600b      	streq	r3, [r1, #0]
 80034ec:	6053      	strne	r3, [r2, #4]
 80034ee:	4630      	mov	r0, r6
 80034f0:	f000 fbbc 	bl	8003c6c <__malloc_unlock>
 80034f4:	f104 000b 	add.w	r0, r4, #11
 80034f8:	1d23      	adds	r3, r4, #4
 80034fa:	f020 0007 	bic.w	r0, r0, #7
 80034fe:	1ac2      	subs	r2, r0, r3
 8003500:	d0cc      	beq.n	800349c <_malloc_r+0x20>
 8003502:	1a1b      	subs	r3, r3, r0
 8003504:	50a3      	str	r3, [r4, r2]
 8003506:	e7c9      	b.n	800349c <_malloc_r+0x20>
 8003508:	4622      	mov	r2, r4
 800350a:	6864      	ldr	r4, [r4, #4]
 800350c:	e7cc      	b.n	80034a8 <_malloc_r+0x2c>
 800350e:	1cc4      	adds	r4, r0, #3
 8003510:	f024 0403 	bic.w	r4, r4, #3
 8003514:	42a0      	cmp	r0, r4
 8003516:	d0e3      	beq.n	80034e0 <_malloc_r+0x64>
 8003518:	1a21      	subs	r1, r4, r0
 800351a:	4630      	mov	r0, r6
 800351c:	f000 faf6 	bl	8003b0c <_sbrk_r>
 8003520:	3001      	adds	r0, #1
 8003522:	d1dd      	bne.n	80034e0 <_malloc_r+0x64>
 8003524:	e7cf      	b.n	80034c6 <_malloc_r+0x4a>
 8003526:	bf00      	nop
 8003528:	20000094 	.word	0x20000094
 800352c:	20000098 	.word	0x20000098

08003530 <__sfputc_r>:
 8003530:	6893      	ldr	r3, [r2, #8]
 8003532:	3b01      	subs	r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	b410      	push	{r4}
 8003538:	6093      	str	r3, [r2, #8]
 800353a:	da08      	bge.n	800354e <__sfputc_r+0x1e>
 800353c:	6994      	ldr	r4, [r2, #24]
 800353e:	42a3      	cmp	r3, r4
 8003540:	db01      	blt.n	8003546 <__sfputc_r+0x16>
 8003542:	290a      	cmp	r1, #10
 8003544:	d103      	bne.n	800354e <__sfputc_r+0x1e>
 8003546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800354a:	f7ff bc69 	b.w	8002e20 <__swbuf_r>
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	1c58      	adds	r0, r3, #1
 8003552:	6010      	str	r0, [r2, #0]
 8003554:	7019      	strb	r1, [r3, #0]
 8003556:	4608      	mov	r0, r1
 8003558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800355c:	4770      	bx	lr

0800355e <__sfputs_r>:
 800355e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003560:	4606      	mov	r6, r0
 8003562:	460f      	mov	r7, r1
 8003564:	4614      	mov	r4, r2
 8003566:	18d5      	adds	r5, r2, r3
 8003568:	42ac      	cmp	r4, r5
 800356a:	d101      	bne.n	8003570 <__sfputs_r+0x12>
 800356c:	2000      	movs	r0, #0
 800356e:	e007      	b.n	8003580 <__sfputs_r+0x22>
 8003570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003574:	463a      	mov	r2, r7
 8003576:	4630      	mov	r0, r6
 8003578:	f7ff ffda 	bl	8003530 <__sfputc_r>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	d1f3      	bne.n	8003568 <__sfputs_r+0xa>
 8003580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003584 <_vfiprintf_r>:
 8003584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003588:	460d      	mov	r5, r1
 800358a:	b09d      	sub	sp, #116	; 0x74
 800358c:	4614      	mov	r4, r2
 800358e:	4698      	mov	r8, r3
 8003590:	4606      	mov	r6, r0
 8003592:	b118      	cbz	r0, 800359c <_vfiprintf_r+0x18>
 8003594:	6983      	ldr	r3, [r0, #24]
 8003596:	b90b      	cbnz	r3, 800359c <_vfiprintf_r+0x18>
 8003598:	f7ff fe1c 	bl	80031d4 <__sinit>
 800359c:	4b89      	ldr	r3, [pc, #548]	; (80037c4 <_vfiprintf_r+0x240>)
 800359e:	429d      	cmp	r5, r3
 80035a0:	d11b      	bne.n	80035da <_vfiprintf_r+0x56>
 80035a2:	6875      	ldr	r5, [r6, #4]
 80035a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035a6:	07d9      	lsls	r1, r3, #31
 80035a8:	d405      	bmi.n	80035b6 <_vfiprintf_r+0x32>
 80035aa:	89ab      	ldrh	r3, [r5, #12]
 80035ac:	059a      	lsls	r2, r3, #22
 80035ae:	d402      	bmi.n	80035b6 <_vfiprintf_r+0x32>
 80035b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035b2:	f7ff fead 	bl	8003310 <__retarget_lock_acquire_recursive>
 80035b6:	89ab      	ldrh	r3, [r5, #12]
 80035b8:	071b      	lsls	r3, r3, #28
 80035ba:	d501      	bpl.n	80035c0 <_vfiprintf_r+0x3c>
 80035bc:	692b      	ldr	r3, [r5, #16]
 80035be:	b9eb      	cbnz	r3, 80035fc <_vfiprintf_r+0x78>
 80035c0:	4629      	mov	r1, r5
 80035c2:	4630      	mov	r0, r6
 80035c4:	f7ff fc7e 	bl	8002ec4 <__swsetup_r>
 80035c8:	b1c0      	cbz	r0, 80035fc <_vfiprintf_r+0x78>
 80035ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035cc:	07dc      	lsls	r4, r3, #31
 80035ce:	d50e      	bpl.n	80035ee <_vfiprintf_r+0x6a>
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	b01d      	add	sp, #116	; 0x74
 80035d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035da:	4b7b      	ldr	r3, [pc, #492]	; (80037c8 <_vfiprintf_r+0x244>)
 80035dc:	429d      	cmp	r5, r3
 80035de:	d101      	bne.n	80035e4 <_vfiprintf_r+0x60>
 80035e0:	68b5      	ldr	r5, [r6, #8]
 80035e2:	e7df      	b.n	80035a4 <_vfiprintf_r+0x20>
 80035e4:	4b79      	ldr	r3, [pc, #484]	; (80037cc <_vfiprintf_r+0x248>)
 80035e6:	429d      	cmp	r5, r3
 80035e8:	bf08      	it	eq
 80035ea:	68f5      	ldreq	r5, [r6, #12]
 80035ec:	e7da      	b.n	80035a4 <_vfiprintf_r+0x20>
 80035ee:	89ab      	ldrh	r3, [r5, #12]
 80035f0:	0598      	lsls	r0, r3, #22
 80035f2:	d4ed      	bmi.n	80035d0 <_vfiprintf_r+0x4c>
 80035f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035f6:	f7ff fe8c 	bl	8003312 <__retarget_lock_release_recursive>
 80035fa:	e7e9      	b.n	80035d0 <_vfiprintf_r+0x4c>
 80035fc:	2300      	movs	r3, #0
 80035fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003600:	2320      	movs	r3, #32
 8003602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003606:	f8cd 800c 	str.w	r8, [sp, #12]
 800360a:	2330      	movs	r3, #48	; 0x30
 800360c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80037d0 <_vfiprintf_r+0x24c>
 8003610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003614:	f04f 0901 	mov.w	r9, #1
 8003618:	4623      	mov	r3, r4
 800361a:	469a      	mov	sl, r3
 800361c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003620:	b10a      	cbz	r2, 8003626 <_vfiprintf_r+0xa2>
 8003622:	2a25      	cmp	r2, #37	; 0x25
 8003624:	d1f9      	bne.n	800361a <_vfiprintf_r+0x96>
 8003626:	ebba 0b04 	subs.w	fp, sl, r4
 800362a:	d00b      	beq.n	8003644 <_vfiprintf_r+0xc0>
 800362c:	465b      	mov	r3, fp
 800362e:	4622      	mov	r2, r4
 8003630:	4629      	mov	r1, r5
 8003632:	4630      	mov	r0, r6
 8003634:	f7ff ff93 	bl	800355e <__sfputs_r>
 8003638:	3001      	adds	r0, #1
 800363a:	f000 80aa 	beq.w	8003792 <_vfiprintf_r+0x20e>
 800363e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003640:	445a      	add	r2, fp
 8003642:	9209      	str	r2, [sp, #36]	; 0x24
 8003644:	f89a 3000 	ldrb.w	r3, [sl]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80a2 	beq.w	8003792 <_vfiprintf_r+0x20e>
 800364e:	2300      	movs	r3, #0
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003658:	f10a 0a01 	add.w	sl, sl, #1
 800365c:	9304      	str	r3, [sp, #16]
 800365e:	9307      	str	r3, [sp, #28]
 8003660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003664:	931a      	str	r3, [sp, #104]	; 0x68
 8003666:	4654      	mov	r4, sl
 8003668:	2205      	movs	r2, #5
 800366a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800366e:	4858      	ldr	r0, [pc, #352]	; (80037d0 <_vfiprintf_r+0x24c>)
 8003670:	f7fc fdb6 	bl	80001e0 <memchr>
 8003674:	9a04      	ldr	r2, [sp, #16]
 8003676:	b9d8      	cbnz	r0, 80036b0 <_vfiprintf_r+0x12c>
 8003678:	06d1      	lsls	r1, r2, #27
 800367a:	bf44      	itt	mi
 800367c:	2320      	movmi	r3, #32
 800367e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003682:	0713      	lsls	r3, r2, #28
 8003684:	bf44      	itt	mi
 8003686:	232b      	movmi	r3, #43	; 0x2b
 8003688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800368c:	f89a 3000 	ldrb.w	r3, [sl]
 8003690:	2b2a      	cmp	r3, #42	; 0x2a
 8003692:	d015      	beq.n	80036c0 <_vfiprintf_r+0x13c>
 8003694:	9a07      	ldr	r2, [sp, #28]
 8003696:	4654      	mov	r4, sl
 8003698:	2000      	movs	r0, #0
 800369a:	f04f 0c0a 	mov.w	ip, #10
 800369e:	4621      	mov	r1, r4
 80036a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036a4:	3b30      	subs	r3, #48	; 0x30
 80036a6:	2b09      	cmp	r3, #9
 80036a8:	d94e      	bls.n	8003748 <_vfiprintf_r+0x1c4>
 80036aa:	b1b0      	cbz	r0, 80036da <_vfiprintf_r+0x156>
 80036ac:	9207      	str	r2, [sp, #28]
 80036ae:	e014      	b.n	80036da <_vfiprintf_r+0x156>
 80036b0:	eba0 0308 	sub.w	r3, r0, r8
 80036b4:	fa09 f303 	lsl.w	r3, r9, r3
 80036b8:	4313      	orrs	r3, r2
 80036ba:	9304      	str	r3, [sp, #16]
 80036bc:	46a2      	mov	sl, r4
 80036be:	e7d2      	b.n	8003666 <_vfiprintf_r+0xe2>
 80036c0:	9b03      	ldr	r3, [sp, #12]
 80036c2:	1d19      	adds	r1, r3, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	9103      	str	r1, [sp, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bfbb      	ittet	lt
 80036cc:	425b      	neglt	r3, r3
 80036ce:	f042 0202 	orrlt.w	r2, r2, #2
 80036d2:	9307      	strge	r3, [sp, #28]
 80036d4:	9307      	strlt	r3, [sp, #28]
 80036d6:	bfb8      	it	lt
 80036d8:	9204      	strlt	r2, [sp, #16]
 80036da:	7823      	ldrb	r3, [r4, #0]
 80036dc:	2b2e      	cmp	r3, #46	; 0x2e
 80036de:	d10c      	bne.n	80036fa <_vfiprintf_r+0x176>
 80036e0:	7863      	ldrb	r3, [r4, #1]
 80036e2:	2b2a      	cmp	r3, #42	; 0x2a
 80036e4:	d135      	bne.n	8003752 <_vfiprintf_r+0x1ce>
 80036e6:	9b03      	ldr	r3, [sp, #12]
 80036e8:	1d1a      	adds	r2, r3, #4
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	9203      	str	r2, [sp, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bfb8      	it	lt
 80036f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80036f6:	3402      	adds	r4, #2
 80036f8:	9305      	str	r3, [sp, #20]
 80036fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80037e0 <_vfiprintf_r+0x25c>
 80036fe:	7821      	ldrb	r1, [r4, #0]
 8003700:	2203      	movs	r2, #3
 8003702:	4650      	mov	r0, sl
 8003704:	f7fc fd6c 	bl	80001e0 <memchr>
 8003708:	b140      	cbz	r0, 800371c <_vfiprintf_r+0x198>
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	eba0 000a 	sub.w	r0, r0, sl
 8003710:	fa03 f000 	lsl.w	r0, r3, r0
 8003714:	9b04      	ldr	r3, [sp, #16]
 8003716:	4303      	orrs	r3, r0
 8003718:	3401      	adds	r4, #1
 800371a:	9304      	str	r3, [sp, #16]
 800371c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003720:	482c      	ldr	r0, [pc, #176]	; (80037d4 <_vfiprintf_r+0x250>)
 8003722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003726:	2206      	movs	r2, #6
 8003728:	f7fc fd5a 	bl	80001e0 <memchr>
 800372c:	2800      	cmp	r0, #0
 800372e:	d03f      	beq.n	80037b0 <_vfiprintf_r+0x22c>
 8003730:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <_vfiprintf_r+0x254>)
 8003732:	bb1b      	cbnz	r3, 800377c <_vfiprintf_r+0x1f8>
 8003734:	9b03      	ldr	r3, [sp, #12]
 8003736:	3307      	adds	r3, #7
 8003738:	f023 0307 	bic.w	r3, r3, #7
 800373c:	3308      	adds	r3, #8
 800373e:	9303      	str	r3, [sp, #12]
 8003740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003742:	443b      	add	r3, r7
 8003744:	9309      	str	r3, [sp, #36]	; 0x24
 8003746:	e767      	b.n	8003618 <_vfiprintf_r+0x94>
 8003748:	fb0c 3202 	mla	r2, ip, r2, r3
 800374c:	460c      	mov	r4, r1
 800374e:	2001      	movs	r0, #1
 8003750:	e7a5      	b.n	800369e <_vfiprintf_r+0x11a>
 8003752:	2300      	movs	r3, #0
 8003754:	3401      	adds	r4, #1
 8003756:	9305      	str	r3, [sp, #20]
 8003758:	4619      	mov	r1, r3
 800375a:	f04f 0c0a 	mov.w	ip, #10
 800375e:	4620      	mov	r0, r4
 8003760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003764:	3a30      	subs	r2, #48	; 0x30
 8003766:	2a09      	cmp	r2, #9
 8003768:	d903      	bls.n	8003772 <_vfiprintf_r+0x1ee>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0c5      	beq.n	80036fa <_vfiprintf_r+0x176>
 800376e:	9105      	str	r1, [sp, #20]
 8003770:	e7c3      	b.n	80036fa <_vfiprintf_r+0x176>
 8003772:	fb0c 2101 	mla	r1, ip, r1, r2
 8003776:	4604      	mov	r4, r0
 8003778:	2301      	movs	r3, #1
 800377a:	e7f0      	b.n	800375e <_vfiprintf_r+0x1da>
 800377c:	ab03      	add	r3, sp, #12
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	462a      	mov	r2, r5
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <_vfiprintf_r+0x258>)
 8003784:	a904      	add	r1, sp, #16
 8003786:	4630      	mov	r0, r6
 8003788:	f3af 8000 	nop.w
 800378c:	4607      	mov	r7, r0
 800378e:	1c78      	adds	r0, r7, #1
 8003790:	d1d6      	bne.n	8003740 <_vfiprintf_r+0x1bc>
 8003792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003794:	07d9      	lsls	r1, r3, #31
 8003796:	d405      	bmi.n	80037a4 <_vfiprintf_r+0x220>
 8003798:	89ab      	ldrh	r3, [r5, #12]
 800379a:	059a      	lsls	r2, r3, #22
 800379c:	d402      	bmi.n	80037a4 <_vfiprintf_r+0x220>
 800379e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037a0:	f7ff fdb7 	bl	8003312 <__retarget_lock_release_recursive>
 80037a4:	89ab      	ldrh	r3, [r5, #12]
 80037a6:	065b      	lsls	r3, r3, #25
 80037a8:	f53f af12 	bmi.w	80035d0 <_vfiprintf_r+0x4c>
 80037ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037ae:	e711      	b.n	80035d4 <_vfiprintf_r+0x50>
 80037b0:	ab03      	add	r3, sp, #12
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	462a      	mov	r2, r5
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <_vfiprintf_r+0x258>)
 80037b8:	a904      	add	r1, sp, #16
 80037ba:	4630      	mov	r0, r6
 80037bc:	f000 f880 	bl	80038c0 <_printf_i>
 80037c0:	e7e4      	b.n	800378c <_vfiprintf_r+0x208>
 80037c2:	bf00      	nop
 80037c4:	08003d38 	.word	0x08003d38
 80037c8:	08003d58 	.word	0x08003d58
 80037cc:	08003d18 	.word	0x08003d18
 80037d0:	08003d78 	.word	0x08003d78
 80037d4:	08003d82 	.word	0x08003d82
 80037d8:	00000000 	.word	0x00000000
 80037dc:	0800355f 	.word	0x0800355f
 80037e0:	08003d7e 	.word	0x08003d7e

080037e4 <_printf_common>:
 80037e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	4616      	mov	r6, r2
 80037ea:	4699      	mov	r9, r3
 80037ec:	688a      	ldr	r2, [r1, #8]
 80037ee:	690b      	ldr	r3, [r1, #16]
 80037f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037f4:	4293      	cmp	r3, r2
 80037f6:	bfb8      	it	lt
 80037f8:	4613      	movlt	r3, r2
 80037fa:	6033      	str	r3, [r6, #0]
 80037fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003800:	4607      	mov	r7, r0
 8003802:	460c      	mov	r4, r1
 8003804:	b10a      	cbz	r2, 800380a <_printf_common+0x26>
 8003806:	3301      	adds	r3, #1
 8003808:	6033      	str	r3, [r6, #0]
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	0699      	lsls	r1, r3, #26
 800380e:	bf42      	ittt	mi
 8003810:	6833      	ldrmi	r3, [r6, #0]
 8003812:	3302      	addmi	r3, #2
 8003814:	6033      	strmi	r3, [r6, #0]
 8003816:	6825      	ldr	r5, [r4, #0]
 8003818:	f015 0506 	ands.w	r5, r5, #6
 800381c:	d106      	bne.n	800382c <_printf_common+0x48>
 800381e:	f104 0a19 	add.w	sl, r4, #25
 8003822:	68e3      	ldr	r3, [r4, #12]
 8003824:	6832      	ldr	r2, [r6, #0]
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	42ab      	cmp	r3, r5
 800382a:	dc26      	bgt.n	800387a <_printf_common+0x96>
 800382c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003830:	1e13      	subs	r3, r2, #0
 8003832:	6822      	ldr	r2, [r4, #0]
 8003834:	bf18      	it	ne
 8003836:	2301      	movne	r3, #1
 8003838:	0692      	lsls	r2, r2, #26
 800383a:	d42b      	bmi.n	8003894 <_printf_common+0xb0>
 800383c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003840:	4649      	mov	r1, r9
 8003842:	4638      	mov	r0, r7
 8003844:	47c0      	blx	r8
 8003846:	3001      	adds	r0, #1
 8003848:	d01e      	beq.n	8003888 <_printf_common+0xa4>
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	68e5      	ldr	r5, [r4, #12]
 800384e:	6832      	ldr	r2, [r6, #0]
 8003850:	f003 0306 	and.w	r3, r3, #6
 8003854:	2b04      	cmp	r3, #4
 8003856:	bf08      	it	eq
 8003858:	1aad      	subeq	r5, r5, r2
 800385a:	68a3      	ldr	r3, [r4, #8]
 800385c:	6922      	ldr	r2, [r4, #16]
 800385e:	bf0c      	ite	eq
 8003860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003864:	2500      	movne	r5, #0
 8003866:	4293      	cmp	r3, r2
 8003868:	bfc4      	itt	gt
 800386a:	1a9b      	subgt	r3, r3, r2
 800386c:	18ed      	addgt	r5, r5, r3
 800386e:	2600      	movs	r6, #0
 8003870:	341a      	adds	r4, #26
 8003872:	42b5      	cmp	r5, r6
 8003874:	d11a      	bne.n	80038ac <_printf_common+0xc8>
 8003876:	2000      	movs	r0, #0
 8003878:	e008      	b.n	800388c <_printf_common+0xa8>
 800387a:	2301      	movs	r3, #1
 800387c:	4652      	mov	r2, sl
 800387e:	4649      	mov	r1, r9
 8003880:	4638      	mov	r0, r7
 8003882:	47c0      	blx	r8
 8003884:	3001      	adds	r0, #1
 8003886:	d103      	bne.n	8003890 <_printf_common+0xac>
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003890:	3501      	adds	r5, #1
 8003892:	e7c6      	b.n	8003822 <_printf_common+0x3e>
 8003894:	18e1      	adds	r1, r4, r3
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	2030      	movs	r0, #48	; 0x30
 800389a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800389e:	4422      	add	r2, r4
 80038a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038a8:	3302      	adds	r3, #2
 80038aa:	e7c7      	b.n	800383c <_printf_common+0x58>
 80038ac:	2301      	movs	r3, #1
 80038ae:	4622      	mov	r2, r4
 80038b0:	4649      	mov	r1, r9
 80038b2:	4638      	mov	r0, r7
 80038b4:	47c0      	blx	r8
 80038b6:	3001      	adds	r0, #1
 80038b8:	d0e6      	beq.n	8003888 <_printf_common+0xa4>
 80038ba:	3601      	adds	r6, #1
 80038bc:	e7d9      	b.n	8003872 <_printf_common+0x8e>
	...

080038c0 <_printf_i>:
 80038c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038c4:	460c      	mov	r4, r1
 80038c6:	4691      	mov	r9, r2
 80038c8:	7e27      	ldrb	r7, [r4, #24]
 80038ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038cc:	2f78      	cmp	r7, #120	; 0x78
 80038ce:	4680      	mov	r8, r0
 80038d0:	469a      	mov	sl, r3
 80038d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038d6:	d807      	bhi.n	80038e8 <_printf_i+0x28>
 80038d8:	2f62      	cmp	r7, #98	; 0x62
 80038da:	d80a      	bhi.n	80038f2 <_printf_i+0x32>
 80038dc:	2f00      	cmp	r7, #0
 80038de:	f000 80d8 	beq.w	8003a92 <_printf_i+0x1d2>
 80038e2:	2f58      	cmp	r7, #88	; 0x58
 80038e4:	f000 80a3 	beq.w	8003a2e <_printf_i+0x16e>
 80038e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038f0:	e03a      	b.n	8003968 <_printf_i+0xa8>
 80038f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038f6:	2b15      	cmp	r3, #21
 80038f8:	d8f6      	bhi.n	80038e8 <_printf_i+0x28>
 80038fa:	a001      	add	r0, pc, #4	; (adr r0, 8003900 <_printf_i+0x40>)
 80038fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003900:	08003959 	.word	0x08003959
 8003904:	0800396d 	.word	0x0800396d
 8003908:	080038e9 	.word	0x080038e9
 800390c:	080038e9 	.word	0x080038e9
 8003910:	080038e9 	.word	0x080038e9
 8003914:	080038e9 	.word	0x080038e9
 8003918:	0800396d 	.word	0x0800396d
 800391c:	080038e9 	.word	0x080038e9
 8003920:	080038e9 	.word	0x080038e9
 8003924:	080038e9 	.word	0x080038e9
 8003928:	080038e9 	.word	0x080038e9
 800392c:	08003a79 	.word	0x08003a79
 8003930:	0800399d 	.word	0x0800399d
 8003934:	08003a5b 	.word	0x08003a5b
 8003938:	080038e9 	.word	0x080038e9
 800393c:	080038e9 	.word	0x080038e9
 8003940:	08003a9b 	.word	0x08003a9b
 8003944:	080038e9 	.word	0x080038e9
 8003948:	0800399d 	.word	0x0800399d
 800394c:	080038e9 	.word	0x080038e9
 8003950:	080038e9 	.word	0x080038e9
 8003954:	08003a63 	.word	0x08003a63
 8003958:	680b      	ldr	r3, [r1, #0]
 800395a:	1d1a      	adds	r2, r3, #4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	600a      	str	r2, [r1, #0]
 8003960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003968:	2301      	movs	r3, #1
 800396a:	e0a3      	b.n	8003ab4 <_printf_i+0x1f4>
 800396c:	6825      	ldr	r5, [r4, #0]
 800396e:	6808      	ldr	r0, [r1, #0]
 8003970:	062e      	lsls	r6, r5, #24
 8003972:	f100 0304 	add.w	r3, r0, #4
 8003976:	d50a      	bpl.n	800398e <_printf_i+0xce>
 8003978:	6805      	ldr	r5, [r0, #0]
 800397a:	600b      	str	r3, [r1, #0]
 800397c:	2d00      	cmp	r5, #0
 800397e:	da03      	bge.n	8003988 <_printf_i+0xc8>
 8003980:	232d      	movs	r3, #45	; 0x2d
 8003982:	426d      	negs	r5, r5
 8003984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003988:	485e      	ldr	r0, [pc, #376]	; (8003b04 <_printf_i+0x244>)
 800398a:	230a      	movs	r3, #10
 800398c:	e019      	b.n	80039c2 <_printf_i+0x102>
 800398e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003992:	6805      	ldr	r5, [r0, #0]
 8003994:	600b      	str	r3, [r1, #0]
 8003996:	bf18      	it	ne
 8003998:	b22d      	sxthne	r5, r5
 800399a:	e7ef      	b.n	800397c <_printf_i+0xbc>
 800399c:	680b      	ldr	r3, [r1, #0]
 800399e:	6825      	ldr	r5, [r4, #0]
 80039a0:	1d18      	adds	r0, r3, #4
 80039a2:	6008      	str	r0, [r1, #0]
 80039a4:	0628      	lsls	r0, r5, #24
 80039a6:	d501      	bpl.n	80039ac <_printf_i+0xec>
 80039a8:	681d      	ldr	r5, [r3, #0]
 80039aa:	e002      	b.n	80039b2 <_printf_i+0xf2>
 80039ac:	0669      	lsls	r1, r5, #25
 80039ae:	d5fb      	bpl.n	80039a8 <_printf_i+0xe8>
 80039b0:	881d      	ldrh	r5, [r3, #0]
 80039b2:	4854      	ldr	r0, [pc, #336]	; (8003b04 <_printf_i+0x244>)
 80039b4:	2f6f      	cmp	r7, #111	; 0x6f
 80039b6:	bf0c      	ite	eq
 80039b8:	2308      	moveq	r3, #8
 80039ba:	230a      	movne	r3, #10
 80039bc:	2100      	movs	r1, #0
 80039be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039c2:	6866      	ldr	r6, [r4, #4]
 80039c4:	60a6      	str	r6, [r4, #8]
 80039c6:	2e00      	cmp	r6, #0
 80039c8:	bfa2      	ittt	ge
 80039ca:	6821      	ldrge	r1, [r4, #0]
 80039cc:	f021 0104 	bicge.w	r1, r1, #4
 80039d0:	6021      	strge	r1, [r4, #0]
 80039d2:	b90d      	cbnz	r5, 80039d8 <_printf_i+0x118>
 80039d4:	2e00      	cmp	r6, #0
 80039d6:	d04d      	beq.n	8003a74 <_printf_i+0x1b4>
 80039d8:	4616      	mov	r6, r2
 80039da:	fbb5 f1f3 	udiv	r1, r5, r3
 80039de:	fb03 5711 	mls	r7, r3, r1, r5
 80039e2:	5dc7      	ldrb	r7, [r0, r7]
 80039e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039e8:	462f      	mov	r7, r5
 80039ea:	42bb      	cmp	r3, r7
 80039ec:	460d      	mov	r5, r1
 80039ee:	d9f4      	bls.n	80039da <_printf_i+0x11a>
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d10b      	bne.n	8003a0c <_printf_i+0x14c>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	07df      	lsls	r7, r3, #31
 80039f8:	d508      	bpl.n	8003a0c <_printf_i+0x14c>
 80039fa:	6923      	ldr	r3, [r4, #16]
 80039fc:	6861      	ldr	r1, [r4, #4]
 80039fe:	4299      	cmp	r1, r3
 8003a00:	bfde      	ittt	le
 8003a02:	2330      	movle	r3, #48	; 0x30
 8003a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a0c:	1b92      	subs	r2, r2, r6
 8003a0e:	6122      	str	r2, [r4, #16]
 8003a10:	f8cd a000 	str.w	sl, [sp]
 8003a14:	464b      	mov	r3, r9
 8003a16:	aa03      	add	r2, sp, #12
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	f7ff fee2 	bl	80037e4 <_printf_common>
 8003a20:	3001      	adds	r0, #1
 8003a22:	d14c      	bne.n	8003abe <_printf_i+0x1fe>
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	b004      	add	sp, #16
 8003a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2e:	4835      	ldr	r0, [pc, #212]	; (8003b04 <_printf_i+0x244>)
 8003a30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	680e      	ldr	r6, [r1, #0]
 8003a38:	061f      	lsls	r7, r3, #24
 8003a3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a3e:	600e      	str	r6, [r1, #0]
 8003a40:	d514      	bpl.n	8003a6c <_printf_i+0x1ac>
 8003a42:	07d9      	lsls	r1, r3, #31
 8003a44:	bf44      	itt	mi
 8003a46:	f043 0320 	orrmi.w	r3, r3, #32
 8003a4a:	6023      	strmi	r3, [r4, #0]
 8003a4c:	b91d      	cbnz	r5, 8003a56 <_printf_i+0x196>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	f023 0320 	bic.w	r3, r3, #32
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	2310      	movs	r3, #16
 8003a58:	e7b0      	b.n	80039bc <_printf_i+0xfc>
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	f043 0320 	orr.w	r3, r3, #32
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	2378      	movs	r3, #120	; 0x78
 8003a64:	4828      	ldr	r0, [pc, #160]	; (8003b08 <_printf_i+0x248>)
 8003a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a6a:	e7e3      	b.n	8003a34 <_printf_i+0x174>
 8003a6c:	065e      	lsls	r6, r3, #25
 8003a6e:	bf48      	it	mi
 8003a70:	b2ad      	uxthmi	r5, r5
 8003a72:	e7e6      	b.n	8003a42 <_printf_i+0x182>
 8003a74:	4616      	mov	r6, r2
 8003a76:	e7bb      	b.n	80039f0 <_printf_i+0x130>
 8003a78:	680b      	ldr	r3, [r1, #0]
 8003a7a:	6826      	ldr	r6, [r4, #0]
 8003a7c:	6960      	ldr	r0, [r4, #20]
 8003a7e:	1d1d      	adds	r5, r3, #4
 8003a80:	600d      	str	r5, [r1, #0]
 8003a82:	0635      	lsls	r5, r6, #24
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	d501      	bpl.n	8003a8c <_printf_i+0x1cc>
 8003a88:	6018      	str	r0, [r3, #0]
 8003a8a:	e002      	b.n	8003a92 <_printf_i+0x1d2>
 8003a8c:	0671      	lsls	r1, r6, #25
 8003a8e:	d5fb      	bpl.n	8003a88 <_printf_i+0x1c8>
 8003a90:	8018      	strh	r0, [r3, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	6123      	str	r3, [r4, #16]
 8003a96:	4616      	mov	r6, r2
 8003a98:	e7ba      	b.n	8003a10 <_printf_i+0x150>
 8003a9a:	680b      	ldr	r3, [r1, #0]
 8003a9c:	1d1a      	adds	r2, r3, #4
 8003a9e:	600a      	str	r2, [r1, #0]
 8003aa0:	681e      	ldr	r6, [r3, #0]
 8003aa2:	6862      	ldr	r2, [r4, #4]
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f7fc fb9a 	bl	80001e0 <memchr>
 8003aac:	b108      	cbz	r0, 8003ab2 <_printf_i+0x1f2>
 8003aae:	1b80      	subs	r0, r0, r6
 8003ab0:	6060      	str	r0, [r4, #4]
 8003ab2:	6863      	ldr	r3, [r4, #4]
 8003ab4:	6123      	str	r3, [r4, #16]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003abc:	e7a8      	b.n	8003a10 <_printf_i+0x150>
 8003abe:	6923      	ldr	r3, [r4, #16]
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	47d0      	blx	sl
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d0ab      	beq.n	8003a24 <_printf_i+0x164>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	079b      	lsls	r3, r3, #30
 8003ad0:	d413      	bmi.n	8003afa <_printf_i+0x23a>
 8003ad2:	68e0      	ldr	r0, [r4, #12]
 8003ad4:	9b03      	ldr	r3, [sp, #12]
 8003ad6:	4298      	cmp	r0, r3
 8003ad8:	bfb8      	it	lt
 8003ada:	4618      	movlt	r0, r3
 8003adc:	e7a4      	b.n	8003a28 <_printf_i+0x168>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	4632      	mov	r2, r6
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	4640      	mov	r0, r8
 8003ae6:	47d0      	blx	sl
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d09b      	beq.n	8003a24 <_printf_i+0x164>
 8003aec:	3501      	adds	r5, #1
 8003aee:	68e3      	ldr	r3, [r4, #12]
 8003af0:	9903      	ldr	r1, [sp, #12]
 8003af2:	1a5b      	subs	r3, r3, r1
 8003af4:	42ab      	cmp	r3, r5
 8003af6:	dcf2      	bgt.n	8003ade <_printf_i+0x21e>
 8003af8:	e7eb      	b.n	8003ad2 <_printf_i+0x212>
 8003afa:	2500      	movs	r5, #0
 8003afc:	f104 0619 	add.w	r6, r4, #25
 8003b00:	e7f5      	b.n	8003aee <_printf_i+0x22e>
 8003b02:	bf00      	nop
 8003b04:	08003d89 	.word	0x08003d89
 8003b08:	08003d9a 	.word	0x08003d9a

08003b0c <_sbrk_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4d06      	ldr	r5, [pc, #24]	; (8003b28 <_sbrk_r+0x1c>)
 8003b10:	2300      	movs	r3, #0
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	f7fd f806 	bl	8000b28 <_sbrk>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_sbrk_r+0x1a>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_sbrk_r+0x1a>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	20000150 	.word	0x20000150

08003b2c <__sread>:
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	460c      	mov	r4, r1
 8003b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b34:	f000 f8a0 	bl	8003c78 <_read_r>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	bfab      	itete	ge
 8003b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b40:	181b      	addge	r3, r3, r0
 8003b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b46:	bfac      	ite	ge
 8003b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b4a:	81a3      	strhlt	r3, [r4, #12]
 8003b4c:	bd10      	pop	{r4, pc}

08003b4e <__swrite>:
 8003b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	461f      	mov	r7, r3
 8003b54:	898b      	ldrh	r3, [r1, #12]
 8003b56:	05db      	lsls	r3, r3, #23
 8003b58:	4605      	mov	r5, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	d505      	bpl.n	8003b6c <__swrite+0x1e>
 8003b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b64:	2302      	movs	r3, #2
 8003b66:	2200      	movs	r2, #0
 8003b68:	f000 f868 	bl	8003c3c <_lseek_r>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	4632      	mov	r2, r6
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b82:	f000 b817 	b.w	8003bb4 <_write_r>

08003b86 <__sseek>:
 8003b86:	b510      	push	{r4, lr}
 8003b88:	460c      	mov	r4, r1
 8003b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b8e:	f000 f855 	bl	8003c3c <_lseek_r>
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	bf15      	itete	ne
 8003b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ba2:	81a3      	strheq	r3, [r4, #12]
 8003ba4:	bf18      	it	ne
 8003ba6:	81a3      	strhne	r3, [r4, #12]
 8003ba8:	bd10      	pop	{r4, pc}

08003baa <__sclose>:
 8003baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bae:	f000 b813 	b.w	8003bd8 <_close_r>
	...

08003bb4 <_write_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4d07      	ldr	r5, [pc, #28]	; (8003bd4 <_write_r+0x20>)
 8003bb8:	4604      	mov	r4, r0
 8003bba:	4608      	mov	r0, r1
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	602a      	str	r2, [r5, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f7fc fe4e 	bl	8000864 <_write>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d102      	bne.n	8003bd2 <_write_r+0x1e>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	b103      	cbz	r3, 8003bd2 <_write_r+0x1e>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
 8003bd4:	20000150 	.word	0x20000150

08003bd8 <_close_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4d06      	ldr	r5, [pc, #24]	; (8003bf4 <_close_r+0x1c>)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	602b      	str	r3, [r5, #0]
 8003be4:	f7fc ff6b 	bl	8000abe <_close>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_close_r+0x1a>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_close_r+0x1a>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	20000150 	.word	0x20000150

08003bf8 <_fstat_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d07      	ldr	r5, [pc, #28]	; (8003c18 <_fstat_r+0x20>)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	4604      	mov	r4, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	602b      	str	r3, [r5, #0]
 8003c06:	f7fc ff66 	bl	8000ad6 <_fstat>
 8003c0a:	1c43      	adds	r3, r0, #1
 8003c0c:	d102      	bne.n	8003c14 <_fstat_r+0x1c>
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	b103      	cbz	r3, 8003c14 <_fstat_r+0x1c>
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	bd38      	pop	{r3, r4, r5, pc}
 8003c16:	bf00      	nop
 8003c18:	20000150 	.word	0x20000150

08003c1c <_isatty_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4d06      	ldr	r5, [pc, #24]	; (8003c38 <_isatty_r+0x1c>)
 8003c20:	2300      	movs	r3, #0
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fc ff65 	bl	8000af6 <_isatty>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_isatty_r+0x1a>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_isatty_r+0x1a>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	20000150 	.word	0x20000150

08003c3c <_lseek_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4d07      	ldr	r5, [pc, #28]	; (8003c5c <_lseek_r+0x20>)
 8003c40:	4604      	mov	r4, r0
 8003c42:	4608      	mov	r0, r1
 8003c44:	4611      	mov	r1, r2
 8003c46:	2200      	movs	r2, #0
 8003c48:	602a      	str	r2, [r5, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7fc ff5e 	bl	8000b0c <_lseek>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d102      	bne.n	8003c5a <_lseek_r+0x1e>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	b103      	cbz	r3, 8003c5a <_lseek_r+0x1e>
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	20000150 	.word	0x20000150

08003c60 <__malloc_lock>:
 8003c60:	4801      	ldr	r0, [pc, #4]	; (8003c68 <__malloc_lock+0x8>)
 8003c62:	f7ff bb55 	b.w	8003310 <__retarget_lock_acquire_recursive>
 8003c66:	bf00      	nop
 8003c68:	20000148 	.word	0x20000148

08003c6c <__malloc_unlock>:
 8003c6c:	4801      	ldr	r0, [pc, #4]	; (8003c74 <__malloc_unlock+0x8>)
 8003c6e:	f7ff bb50 	b.w	8003312 <__retarget_lock_release_recursive>
 8003c72:	bf00      	nop
 8003c74:	20000148 	.word	0x20000148

08003c78 <_read_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d07      	ldr	r5, [pc, #28]	; (8003c98 <_read_r+0x20>)
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	4608      	mov	r0, r1
 8003c80:	4611      	mov	r1, r2
 8003c82:	2200      	movs	r2, #0
 8003c84:	602a      	str	r2, [r5, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f7fc fefc 	bl	8000a84 <_read>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_read_r+0x1e>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_read_r+0x1e>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	20000150 	.word	0x20000150

08003c9c <_init>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr

08003ca8 <_fini>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr
