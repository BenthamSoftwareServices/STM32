
STM32F103C8T6_blink_print_flash_size_unique_device_ID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002238  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002344  08002344  00003344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800242c  0800242c  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  0800242c  0800242c  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800242c  0800242c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800242c  0800242c  0000342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002430  08002430  00003430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002434  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  0800249c  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800249c  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003488  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001187  00000000  00000000  00007519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  000086a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000352  00000000  00000000  00008b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017348  00000000  00000000  00008e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a6b  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008147f  00000000  00000000  00025c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a70cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001848  00000000  00000000  000a7110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  000a8958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800232c 	.word	0x0800232c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800232c 	.word	0x0800232c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
//Declare variables, as local, here in main then they show up automatically in the debug variables pane
//General variables
	int x = 5;
 800019e:	2305      	movs	r3, #5
 80001a0:	61fb      	str	r3, [r7, #28]
	int counter = 0;
 80001a2:	2300      	movs	r3, #0
 80001a4:	61bb      	str	r3, [r7, #24]

//Set up pointer to Flash Size register
	uint16_t (*flash_size) = (uint16_t*) (0x1FFFF7E0); // address of F_SIZE register is specific to  STM32F103, Page 1076 of RM0008
 80001a6:	4b37      	ldr	r3, [pc, #220]	@ (8000284 <main+0xec>)
 80001a8:	617b      	str	r3, [r7, #20]
	int low = 4; //dummy value, for low part of Flash Size register, for watching during debug
 80001aa:	2304      	movs	r3, #4
 80001ac:	613b      	str	r3, [r7, #16]
	int high = 8; //dummy value, for high part of Flash Size register, for watching during debug
 80001ae:	2308      	movs	r3, #8
 80001b0:	60fb      	str	r3, [r7, #12]

//Set up pointers to Unique device ID registers
	uint32_t (*udid_1) = (uint32_t*) (0x1FFFF7E8); // address of Unique device ID register 1 is specific to  STM32F103, Page 1077 of RM0008
 80001b2:	4b35      	ldr	r3, [pc, #212]	@ (8000288 <main+0xf0>)
 80001b4:	60bb      	str	r3, [r7, #8]
//	uint32_t (*udid_2) = (uint32_t*) (0x1FFFF7EC); // address of Unique device ID register 2 is specific to  STM32F103, Page 1077 of RM0008
//	uint32_t (*udid_3) = (uint32_t*) (0x1FFFF7F0); // address of Unique device ID register 3 is specific to  STM32F103, Page 1078 of RM0008

//Declare variables used during extraction and formatting of data from Unique device ID registers
	int udid_1_value = 0;
 80001b6:	2300      	movs	r3, #0
 80001b8:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ba:	f000 fa3b 	bl	8000634 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001be:	f000 f877 	bl	80002b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001c2:	f000 f8bb 	bl	800033c <MX_GPIO_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOC, LED_Pin, 0); //Turn on LED
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001cc:	482f      	ldr	r0, [pc, #188]	@ (800028c <main+0xf4>)
 80001ce:	f000 fd1f 	bl	8000c10 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80001d2:	2064      	movs	r0, #100	@ 0x64
 80001d4:	f000 fa90 	bl	80006f8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, LED_Pin, 1); //Turn off LED
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001de:	482b      	ldr	r0, [pc, #172]	@ (800028c <main+0xf4>)
 80001e0:	f000 fd16 	bl	8000c10 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80001e4:	2064      	movs	r0, #100	@ 0x64
 80001e6:	f000 fa87 	bl	80006f8 <HAL_Delay>
		x++;
 80001ea:	69fb      	ldr	r3, [r7, #28]
 80001ec:	3301      	adds	r3, #1
 80001ee:	61fb      	str	r3, [r7, #28]
		HAL_Delay(1000);
 80001f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f4:	f000 fa80 	bl	80006f8 <HAL_Delay>

		printf("counter = %d\n", counter++);
 80001f8:	69bb      	ldr	r3, [r7, #24]
 80001fa:	1c5a      	adds	r2, r3, #1
 80001fc:	61ba      	str	r2, [r7, #24]
 80001fe:	4619      	mov	r1, r3
 8000200:	4823      	ldr	r0, [pc, #140]	@ (8000290 <main+0xf8>)
 8000202:	f001 f9bd 	bl	8001580 <iprintf>
		high = ((*flash_size >> 8) & 0xFF); //Read the value of the Flash memory size register, shift right 8 bits then AND with 0xFF
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	881b      	ldrh	r3, [r3, #0]
 800020a:	0a1b      	lsrs	r3, r3, #8
 800020c:	b29b      	uxth	r3, r3
 800020e:	b2db      	uxtb	r3, r3
 8000210:	60fb      	str	r3, [r7, #12]
											//to clear top 8 bits and preserve the lower 8 bits
		low = ((*flash_size) & 0xFF);//Read the value of the Flash memory size register, then AND with 0xFF
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	b2db      	uxtb	r3, r3
 8000218:	613b      	str	r3, [r7, #16]
									 //to clear top 8 bits and preserve the lower 8 bits

		printf("Hex flash size = 0x%.2x", high);//Print 0x then the value of HIGH in 2-digit HEX format
 800021a:	68f9      	ldr	r1, [r7, #12]
 800021c:	481d      	ldr	r0, [pc, #116]	@ (8000294 <main+0xfc>)
 800021e:	f001 f9af 	bl	8001580 <iprintf>
		printf("%.2x\n", low);//Print the value of LOW in 2-digit HEX format and then a new line
 8000222:	6939      	ldr	r1, [r7, #16]
 8000224:	481c      	ldr	r0, [pc, #112]	@ (8000298 <main+0x100>)
 8000226:	f001 f9ab 	bl	8001580 <iprintf>
		printf("Decimal flash size = %d", *flash_size); //Print "Decimal flash size = " then the the value of the address pointed to
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	4619      	mov	r1, r3
 8000230:	481a      	ldr	r0, [pc, #104]	@ (800029c <main+0x104>)
 8000232:	f001 f9a5 	bl	8001580 <iprintf>
														//by the value of the flash_size variable, that's what *flash_size does
		printf("Kb \n\n"); //Print "Kb" then 2 new lines
 8000236:	481a      	ldr	r0, [pc, #104]	@ (80002a0 <main+0x108>)
 8000238:	f001 fa0a 	bl	8001650 <puts>

		udid_1_value = ((*udid_1 >> 24) & 0xFF);
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	0e1b      	lsrs	r3, r3, #24
 8000242:	607b      	str	r3, [r7, #4]
		printf("Unique device identifier bits 31 - 0 = 0x%.2x", udid_1_value); //Print 0x then the value of udid_1_value in 2-digit HEX format
 8000244:	6879      	ldr	r1, [r7, #4]
 8000246:	4817      	ldr	r0, [pc, #92]	@ (80002a4 <main+0x10c>)
 8000248:	f001 f99a 	bl	8001580 <iprintf>
		udid_1_value = ((*udid_1 >> 16) & 0xFF);
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	0c1b      	lsrs	r3, r3, #16
 8000252:	b2db      	uxtb	r3, r3
 8000254:	607b      	str	r3, [r7, #4]
		printf("%.2x", udid_1_value);
 8000256:	6879      	ldr	r1, [r7, #4]
 8000258:	4813      	ldr	r0, [pc, #76]	@ (80002a8 <main+0x110>)
 800025a:	f001 f991 	bl	8001580 <iprintf>
		udid_1_value = ((*udid_1 >> 8) & 0xFF);
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	0a1b      	lsrs	r3, r3, #8
 8000264:	b2db      	uxtb	r3, r3
 8000266:	607b      	str	r3, [r7, #4]
		printf("%.2x", udid_1_value);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	480f      	ldr	r0, [pc, #60]	@ (80002a8 <main+0x110>)
 800026c:	f001 f988 	bl	8001580 <iprintf>
		udid_1_value = ((*udid_1 >> 0) & 0xFF);
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	607b      	str	r3, [r7, #4]
		printf("%.2x\n\n", udid_1_value);
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	480c      	ldr	r0, [pc, #48]	@ (80002ac <main+0x114>)
 800027c:	f001 f980 	bl	8001580 <iprintf>
		HAL_GPIO_WritePin(GPIOC, LED_Pin, 0); //Turn on LED
 8000280:	bf00      	nop
 8000282:	e7a0      	b.n	80001c6 <main+0x2e>
 8000284:	1ffff7e0 	.word	0x1ffff7e0
 8000288:	1ffff7e8 	.word	0x1ffff7e8
 800028c:	40011000 	.word	0x40011000
 8000290:	08002344 	.word	0x08002344
 8000294:	08002354 	.word	0x08002354
 8000298:	0800236c 	.word	0x0800236c
 800029c:	08002374 	.word	0x08002374
 80002a0:	0800238c 	.word	0x0800238c
 80002a4:	08002394 	.word	0x08002394
 80002a8:	080023c4 	.word	0x080023c4
 80002ac:	080023cc 	.word	0x080023cc

080002b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	@ 0x40
 80002b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	@ 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 faa6 	bl	8001810 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d2:	2301      	movs	r3, #1
 80002d4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002da:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	2302      	movs	r3, #2
 80002e6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fca1 	bl	8000c40 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x58>
		Error_Handler();
 8000304:	f000 f882 	bl	800040c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000318:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2102      	movs	r1, #2
 8000322:	4618      	mov	r0, r3
 8000324:	f000 ff0e 	bl	8001144 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x82>
		Error_Handler();
 800032e:	f000 f86d 	bl	800040c <Error_Handler>
	}
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	@ 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a1d      	ldr	r2, [pc, #116]	@ (80003cc <MX_GPIO_Init+0x90>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a17      	ldr	r2, [pc, #92]	@ (80003cc <MX_GPIO_Init+0x90>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a11      	ldr	r2, [pc, #68]	@ (80003cc <MX_GPIO_Init+0x90>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039e:	480c      	ldr	r0, [pc, #48]	@ (80003d0 <MX_GPIO_Init+0x94>)
 80003a0:	f000 fc36 	bl	8000c10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80003a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	4804      	ldr	r0, [pc, #16]	@ (80003d0 <MX_GPIO_Init+0x94>)
 80003be:	f000 faa3 	bl	8000908 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40011000 	.word	0x40011000

080003d4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	e009      	b.n	80003fa <_write+0x26>
		ITM_SendChar(*ptr++);
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	1c5a      	adds	r2, r3, #1
 80003ea:	60ba      	str	r2, [r7, #8]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff feac 	bl	800014c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	3301      	adds	r3, #1
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	429a      	cmp	r2, r3
 8000400:	dbf1      	blt.n	80003e6 <_write+0x12>
	}
	return len;
 8000402:	687b      	ldr	r3, [r7, #4]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <Error_Handler+0x8>

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <HAL_MspInit+0x5c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0e      	ldr	r2, [pc, #56]	@ (8000474 <HAL_MspInit+0x5c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <NMI_Handler+0x4>

08000484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <HardFault_Handler+0x4>

0800048c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <MemManage_Handler+0x4>

08000494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004cc:	f000 f8f8 	bl	80006c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e00a      	b.n	80004fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004e6:	f3af 8000 	nop.w
 80004ea:	4601      	mov	r1, r0
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	60ba      	str	r2, [r7, #8]
 80004f2:	b2ca      	uxtb	r2, r1
 80004f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697a      	ldr	r2, [r7, #20]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	dbf0      	blt.n	80004e6 <_read+0x12>
  }

  return len;
 8000504:	687b      	ldr	r3, [r7, #4]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <_close>:
  }
  return len;
}

int _close(int file)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000534:	605a      	str	r2, [r3, #4]
  return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <_isatty>:

int _isatty(int file)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
	...

08000570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000578:	4a14      	ldr	r2, [pc, #80]	@ (80005cc <_sbrk+0x5c>)
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <_sbrk+0x60>)
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <_sbrk+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <_sbrk+0x64>)
 800058e:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <_sbrk+0x68>)
 8000590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <_sbrk+0x64>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	429a      	cmp	r2, r3
 800059e:	d207      	bcs.n	80005b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a0:	f001 f984 	bl	80018ac <__errno>
 80005a4:	4603      	mov	r3, r0
 80005a6:	220c      	movs	r2, #12
 80005a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	e009      	b.n	80005c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005b6:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <_sbrk+0x64>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <_sbrk+0x64>)
 80005c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20005000 	.word	0x20005000
 80005d0:	00000400 	.word	0x00000400
 80005d4:	20000084 	.word	0x20000084
 80005d8:	200001d8 	.word	0x200001d8

080005dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e8:	f7ff fff8 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ee:	490c      	ldr	r1, [pc, #48]	@ (8000620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000604:	4c09      	ldr	r4, [pc, #36]	@ (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f001 f951 	bl	80018b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fdbf 	bl	8000198 <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000624:	08002434 	.word	0x08002434
  ldr r2, =_sbss
 8000628:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800062c:	200001d8 	.word	0x200001d8

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f92b 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	200f      	movs	r0, #15
 800064c:	f000 f808 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff fee2 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_InitTick+0x54>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <HAL_InitTick+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f935 	bl	80008ee <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e00e      	b.n	80006ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d80a      	bhi.n	80006aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 f90b 	bl	80008b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <HAL_InitTick+0x5c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000004 	.word	0x20000004

080006c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x1c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <HAL_IncTick+0x20>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a03      	ldr	r2, [pc, #12]	@ (80006e0 <HAL_IncTick+0x20>)
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000088 	.word	0x20000088

080006e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b02      	ldr	r3, [pc, #8]	@ (80006f4 <HAL_GetTick+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	20000088 	.word	0x20000088

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff fff0 	bl	80006e4 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000710:	d005      	beq.n	800071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_Delay+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071e:	bf00      	nop
 8000720:	f7ff ffe0 	bl	80006e4 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f7      	bhi.n	8000720 <HAL_Delay+0x28>
  {
  }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008

08000740 <__NVIC_SetPriorityGrouping>:
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	@ (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_SetPriority>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	@ (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	@ (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	@ 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	@ 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <SysTick_Config>:
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800086c:	d301      	bcc.n	8000872 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e00f      	b.n	8000892 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <SysTick_Config+0x40>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	210f      	movs	r1, #15
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f7ff ff90 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <SysTick_Config+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	@ (800089c <SysTick_Config+0x40>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff49 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c8:	f7ff ff5e 	bl	8000788 <__NVIC_GetPriorityGrouping>
 80008cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f7ff ff90 	bl	80007f8 <NVIC_EncodePriority>
 80008d8:	4602      	mov	r2, r0
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff5f 	bl	80007a4 <__NVIC_SetPriority>
}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffb0 	bl	800085c <SysTick_Config>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	b480      	push	{r7}
 800090a:	b08b      	sub	sp, #44	@ 0x2c
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e169      	b.n	8000bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800091c:	2201      	movs	r2, #1
 800091e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	429a      	cmp	r2, r3
 8000936:	f040 8158 	bne.w	8000bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d05e      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000944:	4a98      	ldr	r2, [pc, #608]	@ (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d875      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800094a:	4a98      	ldr	r2, [pc, #608]	@ (8000bac <HAL_GPIO_Init+0x2a4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d058      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000950:	4a96      	ldr	r2, [pc, #600]	@ (8000bac <HAL_GPIO_Init+0x2a4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d86f      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000956:	4a96      	ldr	r2, [pc, #600]	@ (8000bb0 <HAL_GPIO_Init+0x2a8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d052      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 800095c:	4a94      	ldr	r2, [pc, #592]	@ (8000bb0 <HAL_GPIO_Init+0x2a8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d869      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000962:	4a94      	ldr	r2, [pc, #592]	@ (8000bb4 <HAL_GPIO_Init+0x2ac>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d04c      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000968:	4a92      	ldr	r2, [pc, #584]	@ (8000bb4 <HAL_GPIO_Init+0x2ac>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d863      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800096e:	4a92      	ldr	r2, [pc, #584]	@ (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d046      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000974:	4a90      	ldr	r2, [pc, #576]	@ (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d85d      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800097a:	2b12      	cmp	r3, #18
 800097c:	d82a      	bhi.n	80009d4 <HAL_GPIO_Init+0xcc>
 800097e:	2b12      	cmp	r3, #18
 8000980:	d859      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000982:	a201      	add	r2, pc, #4	@ (adr r2, 8000988 <HAL_GPIO_Init+0x80>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000a03 	.word	0x08000a03
 800098c:	080009dd 	.word	0x080009dd
 8000990:	080009ef 	.word	0x080009ef
 8000994:	08000a31 	.word	0x08000a31
 8000998:	08000a37 	.word	0x08000a37
 800099c:	08000a37 	.word	0x08000a37
 80009a0:	08000a37 	.word	0x08000a37
 80009a4:	08000a37 	.word	0x08000a37
 80009a8:	08000a37 	.word	0x08000a37
 80009ac:	08000a37 	.word	0x08000a37
 80009b0:	08000a37 	.word	0x08000a37
 80009b4:	08000a37 	.word	0x08000a37
 80009b8:	08000a37 	.word	0x08000a37
 80009bc:	08000a37 	.word	0x08000a37
 80009c0:	08000a37 	.word	0x08000a37
 80009c4:	08000a37 	.word	0x08000a37
 80009c8:	08000a37 	.word	0x08000a37
 80009cc:	080009e5 	.word	0x080009e5
 80009d0:	080009f9 	.word	0x080009f9
 80009d4:	4a79      	ldr	r2, [pc, #484]	@ (8000bbc <HAL_GPIO_Init+0x2b4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009da:	e02c      	b.n	8000a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e029      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	3304      	adds	r3, #4
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e024      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	3308      	adds	r3, #8
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e01f      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	330c      	adds	r3, #12
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	e01a      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	623b      	str	r3, [r7, #32]
          break;
 8000a0e:	e013      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d105      	bne.n	8000a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	611a      	str	r2, [r3, #16]
          break;
 8000a22:	e009      	b.n	8000a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a24:	2308      	movs	r3, #8
 8000a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	615a      	str	r2, [r3, #20]
          break;
 8000a2e:	e003      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
          break;
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          break;
 8000a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	2bff      	cmp	r3, #255	@ 0xff
 8000a3c:	d801      	bhi.n	8000a42 <HAL_GPIO_Init+0x13a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	e001      	b.n	8000a46 <HAL_GPIO_Init+0x13e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3304      	adds	r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2bff      	cmp	r3, #255	@ 0xff
 8000a4c:	d802      	bhi.n	8000a54 <HAL_GPIO_Init+0x14c>
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	e002      	b.n	8000a5a <HAL_GPIO_Init+0x152>
 8000a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a56:	3b08      	subs	r3, #8
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	210f      	movs	r1, #15
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	6a39      	ldr	r1, [r7, #32]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	431a      	orrs	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 80b1 	beq.w	8000bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a88:	4b4d      	ldr	r3, [pc, #308]	@ (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b4a      	ldr	r3, [pc, #296]	@ (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa0:	4a48      	ldr	r2, [pc, #288]	@ (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	220f      	movs	r2, #15
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a40      	ldr	r2, [pc, #256]	@ (8000bc8 <HAL_GPIO_Init+0x2c0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d013      	beq.n	8000af4 <HAL_GPIO_Init+0x1ec>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3f      	ldr	r2, [pc, #252]	@ (8000bcc <HAL_GPIO_Init+0x2c4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <HAL_GPIO_Init+0x1e8>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd0 <HAL_GPIO_Init+0x2c8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x1e4>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3d      	ldr	r2, [pc, #244]	@ (8000bd4 <HAL_GPIO_Init+0x2cc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <HAL_GPIO_Init+0x1e0>
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000ae8:	2304      	movs	r3, #4
 8000aea:	e004      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000aec:	2302      	movs	r3, #2
 8000aee:	e002      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af4:	2300      	movs	r3, #0
 8000af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b06:	492f      	ldr	r1, [pc, #188]	@ (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	492c      	ldr	r1, [pc, #176]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	608b      	str	r3, [r1, #8]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4928      	ldr	r1, [pc, #160]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b48:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	4922      	ldr	r1, [pc, #136]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60cb      	str	r3, [r1, #12]
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	491e      	ldr	r1, [pc, #120]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b70:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	4918      	ldr	r1, [pc, #96]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4914      	ldr	r1, [pc, #80]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d021      	beq.n	8000bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	490e      	ldr	r1, [pc, #56]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	600b      	str	r3, [r1, #0]
 8000ba4:	e021      	b.n	8000bea <HAL_GPIO_Init+0x2e2>
 8000ba6:	bf00      	nop
 8000ba8:	10320000 	.word	0x10320000
 8000bac:	10310000 	.word	0x10310000
 8000bb0:	10220000 	.word	0x10220000
 8000bb4:	10210000 	.word	0x10210000
 8000bb8:	10120000 	.word	0x10120000
 8000bbc:	10110000 	.word	0x10110000
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40011000 	.word	0x40011000
 8000bd4:	40011400 	.word	0x40011400
 8000bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <HAL_GPIO_Init+0x304>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	4909      	ldr	r1, [pc, #36]	@ (8000c0c <HAL_GPIO_Init+0x304>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	3301      	adds	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f47f ae8e 	bne.w	800091c <HAL_GPIO_Init+0x14>
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	372c      	adds	r7, #44	@ 0x2c
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40010400 	.word	0x40010400

08000c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c20:	787b      	ldrb	r3, [r7, #1]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c2c:	e003      	b.n	8000c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	041a      	lsls	r2, r3, #16
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	611a      	str	r2, [r3, #16]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e272      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8087 	beq.w	8000d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c60:	4b92      	ldr	r3, [pc, #584]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 030c 	and.w	r3, r3, #12
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d00c      	beq.n	8000c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c6c:	4b8f      	ldr	r3, [pc, #572]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 030c 	and.w	r3, r3, #12
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d112      	bne.n	8000c9e <HAL_RCC_OscConfig+0x5e>
 8000c78:	4b8c      	ldr	r3, [pc, #560]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c84:	d10b      	bne.n	8000c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c86:	4b89      	ldr	r3, [pc, #548]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d06c      	beq.n	8000d6c <HAL_RCC_OscConfig+0x12c>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d168      	bne.n	8000d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e24c      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ca6:	d106      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x76>
 8000ca8:	4b80      	ldr	r3, [pc, #512]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a7f      	ldr	r2, [pc, #508]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e02e      	b.n	8000d14 <HAL_RCC_OscConfig+0xd4>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x98>
 8000cbe:	4b7b      	ldr	r3, [pc, #492]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a7a      	ldr	r2, [pc, #488]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	4b78      	ldr	r3, [pc, #480]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a77      	ldr	r2, [pc, #476]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e01d      	b.n	8000d14 <HAL_RCC_OscConfig+0xd4>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0xbc>
 8000ce2:	4b72      	ldr	r3, [pc, #456]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a71      	ldr	r2, [pc, #452]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b6f      	ldr	r3, [pc, #444]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a6e      	ldr	r2, [pc, #440]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e00b      	b.n	8000d14 <HAL_RCC_OscConfig+0xd4>
 8000cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a6a      	ldr	r2, [pc, #424]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b68      	ldr	r3, [pc, #416]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a67      	ldr	r2, [pc, #412]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fce2 	bl	80006e4 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff fcde 	bl	80006e4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	@ 0x64
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e200      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	4b5d      	ldr	r3, [pc, #372]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0xe4>
 8000d42:	e014      	b.n	8000d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fcce 	bl	80006e4 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fcca 	bl	80006e4 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	@ 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e1ec      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	4b53      	ldr	r3, [pc, #332]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x10c>
 8000d6a:	e000      	b.n	8000d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d063      	beq.n	8000e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00b      	beq.n	8000d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d86:	4b49      	ldr	r3, [pc, #292]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d11c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x18c>
 8000d92:	4b46      	ldr	r3, [pc, #280]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d116      	bne.n	8000dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	4b43      	ldr	r3, [pc, #268]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_RCC_OscConfig+0x176>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e1c0      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db6:	4b3d      	ldr	r3, [pc, #244]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4939      	ldr	r1, [pc, #228]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dca:	e03a      	b.n	8000e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d020      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd4:	4b36      	ldr	r3, [pc, #216]	@ (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dda:	f7ff fc83 	bl	80006e4 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de2:	f7ff fc7f 	bl	80006e4 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e1a1      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df4:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e00:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4927      	ldr	r1, [pc, #156]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e10:	4313      	orrs	r3, r2
 8000e12:	600b      	str	r3, [r1, #0]
 8000e14:	e015      	b.n	8000e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fc62 	bl	80006e4 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e24:	f7ff fc5e 	bl	80006e4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e180      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d03a      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d019      	beq.n	8000e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <HAL_RCC_OscConfig+0x274>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fc42 	bl	80006e4 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e64:	f7ff fc3e 	bl	80006e4 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e160      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f0      	beq.n	8000e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 fa9c 	bl	80013c0 <RCC_Delay>
 8000e88:	e01c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_RCC_OscConfig+0x274>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fc28 	bl	80006e4 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e96:	e00f      	b.n	8000eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e98:	f7ff fc24 	bl	80006e4 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d908      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e146      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	42420000 	.word	0x42420000
 8000eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb8:	4b92      	ldr	r3, [pc, #584]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e9      	bne.n	8000e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80a6 	beq.w	800101e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed6:	4b8b      	ldr	r3, [pc, #556]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10d      	bne.n	8000efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b88      	ldr	r3, [pc, #544]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a87      	ldr	r2, [pc, #540]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b85      	ldr	r3, [pc, #532]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000efa:	2301      	movs	r3, #1
 8000efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efe:	4b82      	ldr	r3, [pc, #520]	@ (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d118      	bne.n	8000f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7e      	ldr	r2, [pc, #504]	@ (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fbe5 	bl	80006e4 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1e:	f7ff fbe1 	bl	80006e4 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	@ 0x64
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e103      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f30:	4b75      	ldr	r3, [pc, #468]	@ (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d106      	bne.n	8000f52 <HAL_RCC_OscConfig+0x312>
 8000f44:	4b6f      	ldr	r3, [pc, #444]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a6e      	ldr	r2, [pc, #440]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6213      	str	r3, [r2, #32]
 8000f50:	e02d      	b.n	8000fae <HAL_RCC_OscConfig+0x36e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x334>
 8000f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a69      	ldr	r2, [pc, #420]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6213      	str	r3, [r2, #32]
 8000f66:	4b67      	ldr	r3, [pc, #412]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	4a66      	ldr	r2, [pc, #408]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	6213      	str	r3, [r2, #32]
 8000f72:	e01c      	b.n	8000fae <HAL_RCC_OscConfig+0x36e>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d10c      	bne.n	8000f96 <HAL_RCC_OscConfig+0x356>
 8000f7c:	4b61      	ldr	r3, [pc, #388]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	4a60      	ldr	r2, [pc, #384]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6213      	str	r3, [r2, #32]
 8000f88:	4b5e      	ldr	r3, [pc, #376]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6213      	str	r3, [r2, #32]
 8000f94:	e00b      	b.n	8000fae <HAL_RCC_OscConfig+0x36e>
 8000f96:	4b5b      	ldr	r3, [pc, #364]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a5a      	ldr	r2, [pc, #360]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	4b58      	ldr	r3, [pc, #352]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4a57      	ldr	r2, [pc, #348]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	f023 0304 	bic.w	r3, r3, #4
 8000fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d015      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fb95 	bl	80006e4 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fb91 	bl	80006e4 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e0b1      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0ee      	beq.n	8000fbe <HAL_RCC_OscConfig+0x37e>
 8000fe0:	e014      	b.n	800100c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fb7f 	bl	80006e4 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f7ff fb7b 	bl	80006e4 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e09b      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001000:	4b40      	ldr	r3, [pc, #256]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1ee      	bne.n	8000fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d105      	bne.n	800101e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001012:	4b3c      	ldr	r3, [pc, #240]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a3b      	ldr	r2, [pc, #236]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8087 	beq.w	8001136 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001028:	4b36      	ldr	r3, [pc, #216]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b08      	cmp	r3, #8
 8001032:	d061      	beq.n	80010f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d146      	bne.n	80010ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103c:	4b33      	ldr	r3, [pc, #204]	@ (800110c <HAL_RCC_OscConfig+0x4cc>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fb4f 	bl	80006e4 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff fb4b 	bl	80006e4 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e06d      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105c:	4b29      	ldr	r3, [pc, #164]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001070:	d108      	bne.n	8001084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001072:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	4921      	ldr	r1, [pc, #132]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a19      	ldr	r1, [r3, #32]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001094:	430b      	orrs	r3, r1
 8001096:	491b      	ldr	r1, [pc, #108]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HAL_RCC_OscConfig+0x4cc>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb1f 	bl	80006e4 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fb1b 	bl	80006e4 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e03d      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x46a>
 80010c8:	e035      	b.n	8001136 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_RCC_OscConfig+0x4cc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fb08 	bl	80006e4 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fb04 	bl	80006e4 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e026      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x498>
 80010f6:	e01e      	b.n	8001136 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d107      	bne.n	8001110 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e019      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
 8001104:	40021000 	.word	0x40021000
 8001108:	40007000 	.word	0x40007000
 800110c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001110:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <HAL_RCC_OscConfig+0x500>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	429a      	cmp	r2, r3
 8001122:	d106      	bne.n	8001132 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	429a      	cmp	r2, r3
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0d0      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001158:	4b6a      	ldr	r3, [pc, #424]	@ (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d910      	bls.n	8001188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	4b67      	ldr	r3, [pc, #412]	@ (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 0207 	bic.w	r2, r3, #7
 800116e:	4965      	ldr	r1, [pc, #404]	@ (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001176:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d001      	beq.n	8001188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0b8      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d020      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a0:	4b59      	ldr	r3, [pc, #356]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a58      	ldr	r2, [pc, #352]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b8:	4b53      	ldr	r3, [pc, #332]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a52      	ldr	r2, [pc, #328]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c4:	4b50      	ldr	r3, [pc, #320]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	494d      	ldr	r1, [pc, #308]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d040      	beq.n	8001264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d107      	bne.n	80011fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b47      	ldr	r3, [pc, #284]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d115      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e07f      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001202:	4b41      	ldr	r3, [pc, #260]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e073      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	4b3d      	ldr	r3, [pc, #244]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06b      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001222:	4b39      	ldr	r3, [pc, #228]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f023 0203 	bic.w	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4936      	ldr	r1, [pc, #216]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001234:	f7ff fa56 	bl	80006e4 <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123a:	e00a      	b.n	8001252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123c:	f7ff fa52 	bl	80006e4 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e053      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001252:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 020c 	and.w	r2, r3, #12
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	429a      	cmp	r2, r3
 8001262:	d1eb      	bne.n	800123c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001264:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d210      	bcs.n	8001294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4922      	ldr	r1, [pc, #136]	@ (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e032      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4916      	ldr	r1, [pc, #88]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	490e      	ldr	r1, [pc, #56]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d2:	f000 f821 	bl	8001318 <HAL_RCC_GetSysClockFreq>
 80012d6:	4602      	mov	r2, r0
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	490a      	ldr	r1, [pc, #40]	@ (800130c <HAL_RCC_ClockConfig+0x1c8>)
 80012e4:	5ccb      	ldrb	r3, [r1, r3]
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	4a09      	ldr	r2, [pc, #36]	@ (8001310 <HAL_RCC_ClockConfig+0x1cc>)
 80012ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_RCC_ClockConfig+0x1d0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f9b4 	bl	8000660 <HAL_InitTick>

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40022000 	.word	0x40022000
 8001308:	40021000 	.word	0x40021000
 800130c:	080023d4 	.word	0x080023d4
 8001310:	20000000 	.word	0x20000000
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b04      	cmp	r3, #4
 8001340:	d002      	beq.n	8001348 <HAL_RCC_GetSysClockFreq+0x30>
 8001342:	2b08      	cmp	r3, #8
 8001344:	d003      	beq.n	800134e <HAL_RCC_GetSysClockFreq+0x36>
 8001346:	e027      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800134a:	613b      	str	r3, [r7, #16]
      break;
 800134c:	e027      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d010      	beq.n	8001388 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	0c5b      	lsrs	r3, r3, #17
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	4a11      	ldr	r2, [pc, #68]	@ (80013b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a0d      	ldr	r2, [pc, #52]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800137a:	fb03 f202 	mul.w	r2, r3, r2
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e004      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	613b      	str	r3, [r7, #16]
      break;
 8001396:	e002      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800139a:	613b      	str	r3, [r7, #16]
      break;
 800139c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800139e:	693b      	ldr	r3, [r7, #16]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	007a1200 	.word	0x007a1200
 80013b4:	080023e4 	.word	0x080023e4
 80013b8:	080023f4 	.word	0x080023f4
 80013bc:	003d0900 	.word	0x003d0900

080013c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <RCC_Delay+0x34>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <RCC_Delay+0x38>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0a5b      	lsrs	r3, r3, #9
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013dc:	bf00      	nop
  }
  while (Delay --);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1e5a      	subs	r2, r3, #1
 80013e2:	60fa      	str	r2, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f9      	bne.n	80013dc <RCC_Delay+0x1c>
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000000 	.word	0x20000000
 80013f8:	10624dd3 	.word	0x10624dd3

080013fc <std>:
 80013fc:	2300      	movs	r3, #0
 80013fe:	b510      	push	{r4, lr}
 8001400:	4604      	mov	r4, r0
 8001402:	e9c0 3300 	strd	r3, r3, [r0]
 8001406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800140a:	6083      	str	r3, [r0, #8]
 800140c:	8181      	strh	r1, [r0, #12]
 800140e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001410:	81c2      	strh	r2, [r0, #14]
 8001412:	6183      	str	r3, [r0, #24]
 8001414:	4619      	mov	r1, r3
 8001416:	2208      	movs	r2, #8
 8001418:	305c      	adds	r0, #92	@ 0x5c
 800141a:	f000 f9f9 	bl	8001810 <memset>
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <std+0x58>)
 8001420:	6224      	str	r4, [r4, #32]
 8001422:	6263      	str	r3, [r4, #36]	@ 0x24
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <std+0x5c>)
 8001426:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <std+0x60>)
 800142a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <std+0x64>)
 800142e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <std+0x68>)
 8001432:	429c      	cmp	r4, r3
 8001434:	d006      	beq.n	8001444 <std+0x48>
 8001436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800143a:	4294      	cmp	r4, r2
 800143c:	d002      	beq.n	8001444 <std+0x48>
 800143e:	33d0      	adds	r3, #208	@ 0xd0
 8001440:	429c      	cmp	r4, r3
 8001442:	d105      	bne.n	8001450 <std+0x54>
 8001444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800144c:	f000 ba58 	b.w	8001900 <__retarget_lock_init_recursive>
 8001450:	bd10      	pop	{r4, pc}
 8001452:	bf00      	nop
 8001454:	08001661 	.word	0x08001661
 8001458:	08001683 	.word	0x08001683
 800145c:	080016bb 	.word	0x080016bb
 8001460:	080016df 	.word	0x080016df
 8001464:	2000008c 	.word	0x2000008c

08001468 <stdio_exit_handler>:
 8001468:	4a02      	ldr	r2, [pc, #8]	@ (8001474 <stdio_exit_handler+0xc>)
 800146a:	4903      	ldr	r1, [pc, #12]	@ (8001478 <stdio_exit_handler+0x10>)
 800146c:	4803      	ldr	r0, [pc, #12]	@ (800147c <stdio_exit_handler+0x14>)
 800146e:	f000 b869 	b.w	8001544 <_fwalk_sglue>
 8001472:	bf00      	nop
 8001474:	2000000c 	.word	0x2000000c
 8001478:	08002199 	.word	0x08002199
 800147c:	2000001c 	.word	0x2000001c

08001480 <cleanup_stdio>:
 8001480:	6841      	ldr	r1, [r0, #4]
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <cleanup_stdio+0x34>)
 8001484:	b510      	push	{r4, lr}
 8001486:	4299      	cmp	r1, r3
 8001488:	4604      	mov	r4, r0
 800148a:	d001      	beq.n	8001490 <cleanup_stdio+0x10>
 800148c:	f000 fe84 	bl	8002198 <_fflush_r>
 8001490:	68a1      	ldr	r1, [r4, #8]
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <cleanup_stdio+0x38>)
 8001494:	4299      	cmp	r1, r3
 8001496:	d002      	beq.n	800149e <cleanup_stdio+0x1e>
 8001498:	4620      	mov	r0, r4
 800149a:	f000 fe7d 	bl	8002198 <_fflush_r>
 800149e:	68e1      	ldr	r1, [r4, #12]
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <cleanup_stdio+0x3c>)
 80014a2:	4299      	cmp	r1, r3
 80014a4:	d004      	beq.n	80014b0 <cleanup_stdio+0x30>
 80014a6:	4620      	mov	r0, r4
 80014a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014ac:	f000 be74 	b.w	8002198 <_fflush_r>
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	bf00      	nop
 80014b4:	2000008c 	.word	0x2000008c
 80014b8:	200000f4 	.word	0x200000f4
 80014bc:	2000015c 	.word	0x2000015c

080014c0 <global_stdio_init.part.0>:
 80014c0:	b510      	push	{r4, lr}
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <global_stdio_init.part.0+0x30>)
 80014c4:	4c0b      	ldr	r4, [pc, #44]	@ (80014f4 <global_stdio_init.part.0+0x34>)
 80014c6:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <global_stdio_init.part.0+0x38>)
 80014c8:	4620      	mov	r0, r4
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	2104      	movs	r1, #4
 80014ce:	2200      	movs	r2, #0
 80014d0:	f7ff ff94 	bl	80013fc <std>
 80014d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80014d8:	2201      	movs	r2, #1
 80014da:	2109      	movs	r1, #9
 80014dc:	f7ff ff8e 	bl	80013fc <std>
 80014e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80014e4:	2202      	movs	r2, #2
 80014e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014ea:	2112      	movs	r1, #18
 80014ec:	f7ff bf86 	b.w	80013fc <std>
 80014f0:	200001c4 	.word	0x200001c4
 80014f4:	2000008c 	.word	0x2000008c
 80014f8:	08001469 	.word	0x08001469

080014fc <__sfp_lock_acquire>:
 80014fc:	4801      	ldr	r0, [pc, #4]	@ (8001504 <__sfp_lock_acquire+0x8>)
 80014fe:	f000 ba00 	b.w	8001902 <__retarget_lock_acquire_recursive>
 8001502:	bf00      	nop
 8001504:	200001cd 	.word	0x200001cd

08001508 <__sfp_lock_release>:
 8001508:	4801      	ldr	r0, [pc, #4]	@ (8001510 <__sfp_lock_release+0x8>)
 800150a:	f000 b9fb 	b.w	8001904 <__retarget_lock_release_recursive>
 800150e:	bf00      	nop
 8001510:	200001cd 	.word	0x200001cd

08001514 <__sinit>:
 8001514:	b510      	push	{r4, lr}
 8001516:	4604      	mov	r4, r0
 8001518:	f7ff fff0 	bl	80014fc <__sfp_lock_acquire>
 800151c:	6a23      	ldr	r3, [r4, #32]
 800151e:	b11b      	cbz	r3, 8001528 <__sinit+0x14>
 8001520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001524:	f7ff bff0 	b.w	8001508 <__sfp_lock_release>
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <__sinit+0x28>)
 800152a:	6223      	str	r3, [r4, #32]
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <__sinit+0x2c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f5      	bne.n	8001520 <__sinit+0xc>
 8001534:	f7ff ffc4 	bl	80014c0 <global_stdio_init.part.0>
 8001538:	e7f2      	b.n	8001520 <__sinit+0xc>
 800153a:	bf00      	nop
 800153c:	08001481 	.word	0x08001481
 8001540:	200001c4 	.word	0x200001c4

08001544 <_fwalk_sglue>:
 8001544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001548:	4607      	mov	r7, r0
 800154a:	4688      	mov	r8, r1
 800154c:	4614      	mov	r4, r2
 800154e:	2600      	movs	r6, #0
 8001550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001554:	f1b9 0901 	subs.w	r9, r9, #1
 8001558:	d505      	bpl.n	8001566 <_fwalk_sglue+0x22>
 800155a:	6824      	ldr	r4, [r4, #0]
 800155c:	2c00      	cmp	r4, #0
 800155e:	d1f7      	bne.n	8001550 <_fwalk_sglue+0xc>
 8001560:	4630      	mov	r0, r6
 8001562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001566:	89ab      	ldrh	r3, [r5, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d907      	bls.n	800157c <_fwalk_sglue+0x38>
 800156c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001570:	3301      	adds	r3, #1
 8001572:	d003      	beq.n	800157c <_fwalk_sglue+0x38>
 8001574:	4629      	mov	r1, r5
 8001576:	4638      	mov	r0, r7
 8001578:	47c0      	blx	r8
 800157a:	4306      	orrs	r6, r0
 800157c:	3568      	adds	r5, #104	@ 0x68
 800157e:	e7e9      	b.n	8001554 <_fwalk_sglue+0x10>

08001580 <iprintf>:
 8001580:	b40f      	push	{r0, r1, r2, r3}
 8001582:	b507      	push	{r0, r1, r2, lr}
 8001584:	4906      	ldr	r1, [pc, #24]	@ (80015a0 <iprintf+0x20>)
 8001586:	ab04      	add	r3, sp, #16
 8001588:	6808      	ldr	r0, [r1, #0]
 800158a:	f853 2b04 	ldr.w	r2, [r3], #4
 800158e:	6881      	ldr	r1, [r0, #8]
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f000 fad7 	bl	8001b44 <_vfiprintf_r>
 8001596:	b003      	add	sp, #12
 8001598:	f85d eb04 	ldr.w	lr, [sp], #4
 800159c:	b004      	add	sp, #16
 800159e:	4770      	bx	lr
 80015a0:	20000018 	.word	0x20000018

080015a4 <_puts_r>:
 80015a4:	6a03      	ldr	r3, [r0, #32]
 80015a6:	b570      	push	{r4, r5, r6, lr}
 80015a8:	4605      	mov	r5, r0
 80015aa:	460e      	mov	r6, r1
 80015ac:	6884      	ldr	r4, [r0, #8]
 80015ae:	b90b      	cbnz	r3, 80015b4 <_puts_r+0x10>
 80015b0:	f7ff ffb0 	bl	8001514 <__sinit>
 80015b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015b6:	07db      	lsls	r3, r3, #31
 80015b8:	d405      	bmi.n	80015c6 <_puts_r+0x22>
 80015ba:	89a3      	ldrh	r3, [r4, #12]
 80015bc:	0598      	lsls	r0, r3, #22
 80015be:	d402      	bmi.n	80015c6 <_puts_r+0x22>
 80015c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015c2:	f000 f99e 	bl	8001902 <__retarget_lock_acquire_recursive>
 80015c6:	89a3      	ldrh	r3, [r4, #12]
 80015c8:	0719      	lsls	r1, r3, #28
 80015ca:	d502      	bpl.n	80015d2 <_puts_r+0x2e>
 80015cc:	6923      	ldr	r3, [r4, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d135      	bne.n	800163e <_puts_r+0x9a>
 80015d2:	4621      	mov	r1, r4
 80015d4:	4628      	mov	r0, r5
 80015d6:	f000 f8c5 	bl	8001764 <__swsetup_r>
 80015da:	b380      	cbz	r0, 800163e <_puts_r+0x9a>
 80015dc:	f04f 35ff 	mov.w	r5, #4294967295
 80015e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015e2:	07da      	lsls	r2, r3, #31
 80015e4:	d405      	bmi.n	80015f2 <_puts_r+0x4e>
 80015e6:	89a3      	ldrh	r3, [r4, #12]
 80015e8:	059b      	lsls	r3, r3, #22
 80015ea:	d402      	bmi.n	80015f2 <_puts_r+0x4e>
 80015ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015ee:	f000 f989 	bl	8001904 <__retarget_lock_release_recursive>
 80015f2:	4628      	mov	r0, r5
 80015f4:	bd70      	pop	{r4, r5, r6, pc}
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da04      	bge.n	8001604 <_puts_r+0x60>
 80015fa:	69a2      	ldr	r2, [r4, #24]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dc17      	bgt.n	8001630 <_puts_r+0x8c>
 8001600:	290a      	cmp	r1, #10
 8001602:	d015      	beq.n	8001630 <_puts_r+0x8c>
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	6022      	str	r2, [r4, #0]
 800160a:	7019      	strb	r1, [r3, #0]
 800160c:	68a3      	ldr	r3, [r4, #8]
 800160e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001612:	3b01      	subs	r3, #1
 8001614:	60a3      	str	r3, [r4, #8]
 8001616:	2900      	cmp	r1, #0
 8001618:	d1ed      	bne.n	80015f6 <_puts_r+0x52>
 800161a:	2b00      	cmp	r3, #0
 800161c:	da11      	bge.n	8001642 <_puts_r+0x9e>
 800161e:	4622      	mov	r2, r4
 8001620:	210a      	movs	r1, #10
 8001622:	4628      	mov	r0, r5
 8001624:	f000 f85f 	bl	80016e6 <__swbuf_r>
 8001628:	3001      	adds	r0, #1
 800162a:	d0d7      	beq.n	80015dc <_puts_r+0x38>
 800162c:	250a      	movs	r5, #10
 800162e:	e7d7      	b.n	80015e0 <_puts_r+0x3c>
 8001630:	4622      	mov	r2, r4
 8001632:	4628      	mov	r0, r5
 8001634:	f000 f857 	bl	80016e6 <__swbuf_r>
 8001638:	3001      	adds	r0, #1
 800163a:	d1e7      	bne.n	800160c <_puts_r+0x68>
 800163c:	e7ce      	b.n	80015dc <_puts_r+0x38>
 800163e:	3e01      	subs	r6, #1
 8001640:	e7e4      	b.n	800160c <_puts_r+0x68>
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	6022      	str	r2, [r4, #0]
 8001648:	220a      	movs	r2, #10
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e7ee      	b.n	800162c <_puts_r+0x88>
	...

08001650 <puts>:
 8001650:	4b02      	ldr	r3, [pc, #8]	@ (800165c <puts+0xc>)
 8001652:	4601      	mov	r1, r0
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	f7ff bfa5 	b.w	80015a4 <_puts_r>
 800165a:	bf00      	nop
 800165c:	20000018 	.word	0x20000018

08001660 <__sread>:
 8001660:	b510      	push	{r4, lr}
 8001662:	460c      	mov	r4, r1
 8001664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001668:	f000 f8fc 	bl	8001864 <_read_r>
 800166c:	2800      	cmp	r0, #0
 800166e:	bfab      	itete	ge
 8001670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001672:	89a3      	ldrhlt	r3, [r4, #12]
 8001674:	181b      	addge	r3, r3, r0
 8001676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800167a:	bfac      	ite	ge
 800167c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800167e:	81a3      	strhlt	r3, [r4, #12]
 8001680:	bd10      	pop	{r4, pc}

08001682 <__swrite>:
 8001682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001686:	461f      	mov	r7, r3
 8001688:	898b      	ldrh	r3, [r1, #12]
 800168a:	4605      	mov	r5, r0
 800168c:	05db      	lsls	r3, r3, #23
 800168e:	460c      	mov	r4, r1
 8001690:	4616      	mov	r6, r2
 8001692:	d505      	bpl.n	80016a0 <__swrite+0x1e>
 8001694:	2302      	movs	r3, #2
 8001696:	2200      	movs	r2, #0
 8001698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800169c:	f000 f8d0 	bl	8001840 <_lseek_r>
 80016a0:	89a3      	ldrh	r3, [r4, #12]
 80016a2:	4632      	mov	r2, r6
 80016a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016a8:	81a3      	strh	r3, [r4, #12]
 80016aa:	4628      	mov	r0, r5
 80016ac:	463b      	mov	r3, r7
 80016ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016b6:	f000 b8e7 	b.w	8001888 <_write_r>

080016ba <__sseek>:
 80016ba:	b510      	push	{r4, lr}
 80016bc:	460c      	mov	r4, r1
 80016be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016c2:	f000 f8bd 	bl	8001840 <_lseek_r>
 80016c6:	1c43      	adds	r3, r0, #1
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	bf15      	itete	ne
 80016cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80016ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80016d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80016d6:	81a3      	strheq	r3, [r4, #12]
 80016d8:	bf18      	it	ne
 80016da:	81a3      	strhne	r3, [r4, #12]
 80016dc:	bd10      	pop	{r4, pc}

080016de <__sclose>:
 80016de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e2:	f000 b89d 	b.w	8001820 <_close_r>

080016e6 <__swbuf_r>:
 80016e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e8:	460e      	mov	r6, r1
 80016ea:	4614      	mov	r4, r2
 80016ec:	4605      	mov	r5, r0
 80016ee:	b118      	cbz	r0, 80016f8 <__swbuf_r+0x12>
 80016f0:	6a03      	ldr	r3, [r0, #32]
 80016f2:	b90b      	cbnz	r3, 80016f8 <__swbuf_r+0x12>
 80016f4:	f7ff ff0e 	bl	8001514 <__sinit>
 80016f8:	69a3      	ldr	r3, [r4, #24]
 80016fa:	60a3      	str	r3, [r4, #8]
 80016fc:	89a3      	ldrh	r3, [r4, #12]
 80016fe:	071a      	lsls	r2, r3, #28
 8001700:	d501      	bpl.n	8001706 <__swbuf_r+0x20>
 8001702:	6923      	ldr	r3, [r4, #16]
 8001704:	b943      	cbnz	r3, 8001718 <__swbuf_r+0x32>
 8001706:	4621      	mov	r1, r4
 8001708:	4628      	mov	r0, r5
 800170a:	f000 f82b 	bl	8001764 <__swsetup_r>
 800170e:	b118      	cbz	r0, 8001718 <__swbuf_r+0x32>
 8001710:	f04f 37ff 	mov.w	r7, #4294967295
 8001714:	4638      	mov	r0, r7
 8001716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	6922      	ldr	r2, [r4, #16]
 800171c:	b2f6      	uxtb	r6, r6
 800171e:	1a98      	subs	r0, r3, r2
 8001720:	6963      	ldr	r3, [r4, #20]
 8001722:	4637      	mov	r7, r6
 8001724:	4283      	cmp	r3, r0
 8001726:	dc05      	bgt.n	8001734 <__swbuf_r+0x4e>
 8001728:	4621      	mov	r1, r4
 800172a:	4628      	mov	r0, r5
 800172c:	f000 fd34 	bl	8002198 <_fflush_r>
 8001730:	2800      	cmp	r0, #0
 8001732:	d1ed      	bne.n	8001710 <__swbuf_r+0x2a>
 8001734:	68a3      	ldr	r3, [r4, #8]
 8001736:	3b01      	subs	r3, #1
 8001738:	60a3      	str	r3, [r4, #8]
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	6022      	str	r2, [r4, #0]
 8001740:	701e      	strb	r6, [r3, #0]
 8001742:	6962      	ldr	r2, [r4, #20]
 8001744:	1c43      	adds	r3, r0, #1
 8001746:	429a      	cmp	r2, r3
 8001748:	d004      	beq.n	8001754 <__swbuf_r+0x6e>
 800174a:	89a3      	ldrh	r3, [r4, #12]
 800174c:	07db      	lsls	r3, r3, #31
 800174e:	d5e1      	bpl.n	8001714 <__swbuf_r+0x2e>
 8001750:	2e0a      	cmp	r6, #10
 8001752:	d1df      	bne.n	8001714 <__swbuf_r+0x2e>
 8001754:	4621      	mov	r1, r4
 8001756:	4628      	mov	r0, r5
 8001758:	f000 fd1e 	bl	8002198 <_fflush_r>
 800175c:	2800      	cmp	r0, #0
 800175e:	d0d9      	beq.n	8001714 <__swbuf_r+0x2e>
 8001760:	e7d6      	b.n	8001710 <__swbuf_r+0x2a>
	...

08001764 <__swsetup_r>:
 8001764:	b538      	push	{r3, r4, r5, lr}
 8001766:	4b29      	ldr	r3, [pc, #164]	@ (800180c <__swsetup_r+0xa8>)
 8001768:	4605      	mov	r5, r0
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	460c      	mov	r4, r1
 800176e:	b118      	cbz	r0, 8001778 <__swsetup_r+0x14>
 8001770:	6a03      	ldr	r3, [r0, #32]
 8001772:	b90b      	cbnz	r3, 8001778 <__swsetup_r+0x14>
 8001774:	f7ff fece 	bl	8001514 <__sinit>
 8001778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800177c:	0719      	lsls	r1, r3, #28
 800177e:	d422      	bmi.n	80017c6 <__swsetup_r+0x62>
 8001780:	06da      	lsls	r2, r3, #27
 8001782:	d407      	bmi.n	8001794 <__swsetup_r+0x30>
 8001784:	2209      	movs	r2, #9
 8001786:	602a      	str	r2, [r5, #0]
 8001788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	e033      	b.n	80017fc <__swsetup_r+0x98>
 8001794:	0758      	lsls	r0, r3, #29
 8001796:	d512      	bpl.n	80017be <__swsetup_r+0x5a>
 8001798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800179a:	b141      	cbz	r1, 80017ae <__swsetup_r+0x4a>
 800179c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80017a0:	4299      	cmp	r1, r3
 80017a2:	d002      	beq.n	80017aa <__swsetup_r+0x46>
 80017a4:	4628      	mov	r0, r5
 80017a6:	f000 f8af 	bl	8001908 <_free_r>
 80017aa:	2300      	movs	r3, #0
 80017ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80017b4:	81a3      	strh	r3, [r4, #12]
 80017b6:	2300      	movs	r3, #0
 80017b8:	6063      	str	r3, [r4, #4]
 80017ba:	6923      	ldr	r3, [r4, #16]
 80017bc:	6023      	str	r3, [r4, #0]
 80017be:	89a3      	ldrh	r3, [r4, #12]
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	81a3      	strh	r3, [r4, #12]
 80017c6:	6923      	ldr	r3, [r4, #16]
 80017c8:	b94b      	cbnz	r3, 80017de <__swsetup_r+0x7a>
 80017ca:	89a3      	ldrh	r3, [r4, #12]
 80017cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80017d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017d4:	d003      	beq.n	80017de <__swsetup_r+0x7a>
 80017d6:	4621      	mov	r1, r4
 80017d8:	4628      	mov	r0, r5
 80017da:	f000 fd2a 	bl	8002232 <__smakebuf_r>
 80017de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e2:	f013 0201 	ands.w	r2, r3, #1
 80017e6:	d00a      	beq.n	80017fe <__swsetup_r+0x9a>
 80017e8:	2200      	movs	r2, #0
 80017ea:	60a2      	str	r2, [r4, #8]
 80017ec:	6962      	ldr	r2, [r4, #20]
 80017ee:	4252      	negs	r2, r2
 80017f0:	61a2      	str	r2, [r4, #24]
 80017f2:	6922      	ldr	r2, [r4, #16]
 80017f4:	b942      	cbnz	r2, 8001808 <__swsetup_r+0xa4>
 80017f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80017fa:	d1c5      	bne.n	8001788 <__swsetup_r+0x24>
 80017fc:	bd38      	pop	{r3, r4, r5, pc}
 80017fe:	0799      	lsls	r1, r3, #30
 8001800:	bf58      	it	pl
 8001802:	6962      	ldrpl	r2, [r4, #20]
 8001804:	60a2      	str	r2, [r4, #8]
 8001806:	e7f4      	b.n	80017f2 <__swsetup_r+0x8e>
 8001808:	2000      	movs	r0, #0
 800180a:	e7f7      	b.n	80017fc <__swsetup_r+0x98>
 800180c:	20000018 	.word	0x20000018

08001810 <memset>:
 8001810:	4603      	mov	r3, r0
 8001812:	4402      	add	r2, r0
 8001814:	4293      	cmp	r3, r2
 8001816:	d100      	bne.n	800181a <memset+0xa>
 8001818:	4770      	bx	lr
 800181a:	f803 1b01 	strb.w	r1, [r3], #1
 800181e:	e7f9      	b.n	8001814 <memset+0x4>

08001820 <_close_r>:
 8001820:	b538      	push	{r3, r4, r5, lr}
 8001822:	2300      	movs	r3, #0
 8001824:	4d05      	ldr	r5, [pc, #20]	@ (800183c <_close_r+0x1c>)
 8001826:	4604      	mov	r4, r0
 8001828:	4608      	mov	r0, r1
 800182a:	602b      	str	r3, [r5, #0]
 800182c:	f7fe fe6f 	bl	800050e <_close>
 8001830:	1c43      	adds	r3, r0, #1
 8001832:	d102      	bne.n	800183a <_close_r+0x1a>
 8001834:	682b      	ldr	r3, [r5, #0]
 8001836:	b103      	cbz	r3, 800183a <_close_r+0x1a>
 8001838:	6023      	str	r3, [r4, #0]
 800183a:	bd38      	pop	{r3, r4, r5, pc}
 800183c:	200001c8 	.word	0x200001c8

08001840 <_lseek_r>:
 8001840:	b538      	push	{r3, r4, r5, lr}
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	2200      	movs	r2, #0
 800184a:	4d05      	ldr	r5, [pc, #20]	@ (8001860 <_lseek_r+0x20>)
 800184c:	602a      	str	r2, [r5, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	f7fe fe81 	bl	8000556 <_lseek>
 8001854:	1c43      	adds	r3, r0, #1
 8001856:	d102      	bne.n	800185e <_lseek_r+0x1e>
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	b103      	cbz	r3, 800185e <_lseek_r+0x1e>
 800185c:	6023      	str	r3, [r4, #0]
 800185e:	bd38      	pop	{r3, r4, r5, pc}
 8001860:	200001c8 	.word	0x200001c8

08001864 <_read_r>:
 8001864:	b538      	push	{r3, r4, r5, lr}
 8001866:	4604      	mov	r4, r0
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	2200      	movs	r2, #0
 800186e:	4d05      	ldr	r5, [pc, #20]	@ (8001884 <_read_r+0x20>)
 8001870:	602a      	str	r2, [r5, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	f7fe fe2e 	bl	80004d4 <_read>
 8001878:	1c43      	adds	r3, r0, #1
 800187a:	d102      	bne.n	8001882 <_read_r+0x1e>
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	b103      	cbz	r3, 8001882 <_read_r+0x1e>
 8001880:	6023      	str	r3, [r4, #0]
 8001882:	bd38      	pop	{r3, r4, r5, pc}
 8001884:	200001c8 	.word	0x200001c8

08001888 <_write_r>:
 8001888:	b538      	push	{r3, r4, r5, lr}
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	2200      	movs	r2, #0
 8001892:	4d05      	ldr	r5, [pc, #20]	@ (80018a8 <_write_r+0x20>)
 8001894:	602a      	str	r2, [r5, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	f7fe fd9c 	bl	80003d4 <_write>
 800189c:	1c43      	adds	r3, r0, #1
 800189e:	d102      	bne.n	80018a6 <_write_r+0x1e>
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	b103      	cbz	r3, 80018a6 <_write_r+0x1e>
 80018a4:	6023      	str	r3, [r4, #0]
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
 80018a8:	200001c8 	.word	0x200001c8

080018ac <__errno>:
 80018ac:	4b01      	ldr	r3, [pc, #4]	@ (80018b4 <__errno+0x8>)
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000018 	.word	0x20000018

080018b8 <__libc_init_array>:
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	2600      	movs	r6, #0
 80018bc:	4d0c      	ldr	r5, [pc, #48]	@ (80018f0 <__libc_init_array+0x38>)
 80018be:	4c0d      	ldr	r4, [pc, #52]	@ (80018f4 <__libc_init_array+0x3c>)
 80018c0:	1b64      	subs	r4, r4, r5
 80018c2:	10a4      	asrs	r4, r4, #2
 80018c4:	42a6      	cmp	r6, r4
 80018c6:	d109      	bne.n	80018dc <__libc_init_array+0x24>
 80018c8:	f000 fd30 	bl	800232c <_init>
 80018cc:	2600      	movs	r6, #0
 80018ce:	4d0a      	ldr	r5, [pc, #40]	@ (80018f8 <__libc_init_array+0x40>)
 80018d0:	4c0a      	ldr	r4, [pc, #40]	@ (80018fc <__libc_init_array+0x44>)
 80018d2:	1b64      	subs	r4, r4, r5
 80018d4:	10a4      	asrs	r4, r4, #2
 80018d6:	42a6      	cmp	r6, r4
 80018d8:	d105      	bne.n	80018e6 <__libc_init_array+0x2e>
 80018da:	bd70      	pop	{r4, r5, r6, pc}
 80018dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e0:	4798      	blx	r3
 80018e2:	3601      	adds	r6, #1
 80018e4:	e7ee      	b.n	80018c4 <__libc_init_array+0xc>
 80018e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ea:	4798      	blx	r3
 80018ec:	3601      	adds	r6, #1
 80018ee:	e7f2      	b.n	80018d6 <__libc_init_array+0x1e>
 80018f0:	0800242c 	.word	0x0800242c
 80018f4:	0800242c 	.word	0x0800242c
 80018f8:	0800242c 	.word	0x0800242c
 80018fc:	08002430 	.word	0x08002430

08001900 <__retarget_lock_init_recursive>:
 8001900:	4770      	bx	lr

08001902 <__retarget_lock_acquire_recursive>:
 8001902:	4770      	bx	lr

08001904 <__retarget_lock_release_recursive>:
 8001904:	4770      	bx	lr
	...

08001908 <_free_r>:
 8001908:	b538      	push	{r3, r4, r5, lr}
 800190a:	4605      	mov	r5, r0
 800190c:	2900      	cmp	r1, #0
 800190e:	d040      	beq.n	8001992 <_free_r+0x8a>
 8001910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001914:	1f0c      	subs	r4, r1, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	bfb8      	it	lt
 800191a:	18e4      	addlt	r4, r4, r3
 800191c:	f000 f8de 	bl	8001adc <__malloc_lock>
 8001920:	4a1c      	ldr	r2, [pc, #112]	@ (8001994 <_free_r+0x8c>)
 8001922:	6813      	ldr	r3, [r2, #0]
 8001924:	b933      	cbnz	r3, 8001934 <_free_r+0x2c>
 8001926:	6063      	str	r3, [r4, #4]
 8001928:	6014      	str	r4, [r2, #0]
 800192a:	4628      	mov	r0, r5
 800192c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001930:	f000 b8da 	b.w	8001ae8 <__malloc_unlock>
 8001934:	42a3      	cmp	r3, r4
 8001936:	d908      	bls.n	800194a <_free_r+0x42>
 8001938:	6820      	ldr	r0, [r4, #0]
 800193a:	1821      	adds	r1, r4, r0
 800193c:	428b      	cmp	r3, r1
 800193e:	bf01      	itttt	eq
 8001940:	6819      	ldreq	r1, [r3, #0]
 8001942:	685b      	ldreq	r3, [r3, #4]
 8001944:	1809      	addeq	r1, r1, r0
 8001946:	6021      	streq	r1, [r4, #0]
 8001948:	e7ed      	b.n	8001926 <_free_r+0x1e>
 800194a:	461a      	mov	r2, r3
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	b10b      	cbz	r3, 8001954 <_free_r+0x4c>
 8001950:	42a3      	cmp	r3, r4
 8001952:	d9fa      	bls.n	800194a <_free_r+0x42>
 8001954:	6811      	ldr	r1, [r2, #0]
 8001956:	1850      	adds	r0, r2, r1
 8001958:	42a0      	cmp	r0, r4
 800195a:	d10b      	bne.n	8001974 <_free_r+0x6c>
 800195c:	6820      	ldr	r0, [r4, #0]
 800195e:	4401      	add	r1, r0
 8001960:	1850      	adds	r0, r2, r1
 8001962:	4283      	cmp	r3, r0
 8001964:	6011      	str	r1, [r2, #0]
 8001966:	d1e0      	bne.n	800192a <_free_r+0x22>
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4408      	add	r0, r1
 800196e:	6010      	str	r0, [r2, #0]
 8001970:	6053      	str	r3, [r2, #4]
 8001972:	e7da      	b.n	800192a <_free_r+0x22>
 8001974:	d902      	bls.n	800197c <_free_r+0x74>
 8001976:	230c      	movs	r3, #12
 8001978:	602b      	str	r3, [r5, #0]
 800197a:	e7d6      	b.n	800192a <_free_r+0x22>
 800197c:	6820      	ldr	r0, [r4, #0]
 800197e:	1821      	adds	r1, r4, r0
 8001980:	428b      	cmp	r3, r1
 8001982:	bf01      	itttt	eq
 8001984:	6819      	ldreq	r1, [r3, #0]
 8001986:	685b      	ldreq	r3, [r3, #4]
 8001988:	1809      	addeq	r1, r1, r0
 800198a:	6021      	streq	r1, [r4, #0]
 800198c:	6063      	str	r3, [r4, #4]
 800198e:	6054      	str	r4, [r2, #4]
 8001990:	e7cb      	b.n	800192a <_free_r+0x22>
 8001992:	bd38      	pop	{r3, r4, r5, pc}
 8001994:	200001d4 	.word	0x200001d4

08001998 <sbrk_aligned>:
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	4e0f      	ldr	r6, [pc, #60]	@ (80019d8 <sbrk_aligned+0x40>)
 800199c:	460c      	mov	r4, r1
 800199e:	6831      	ldr	r1, [r6, #0]
 80019a0:	4605      	mov	r5, r0
 80019a2:	b911      	cbnz	r1, 80019aa <sbrk_aligned+0x12>
 80019a4:	f000 fca4 	bl	80022f0 <_sbrk_r>
 80019a8:	6030      	str	r0, [r6, #0]
 80019aa:	4621      	mov	r1, r4
 80019ac:	4628      	mov	r0, r5
 80019ae:	f000 fc9f 	bl	80022f0 <_sbrk_r>
 80019b2:	1c43      	adds	r3, r0, #1
 80019b4:	d103      	bne.n	80019be <sbrk_aligned+0x26>
 80019b6:	f04f 34ff 	mov.w	r4, #4294967295
 80019ba:	4620      	mov	r0, r4
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
 80019be:	1cc4      	adds	r4, r0, #3
 80019c0:	f024 0403 	bic.w	r4, r4, #3
 80019c4:	42a0      	cmp	r0, r4
 80019c6:	d0f8      	beq.n	80019ba <sbrk_aligned+0x22>
 80019c8:	1a21      	subs	r1, r4, r0
 80019ca:	4628      	mov	r0, r5
 80019cc:	f000 fc90 	bl	80022f0 <_sbrk_r>
 80019d0:	3001      	adds	r0, #1
 80019d2:	d1f2      	bne.n	80019ba <sbrk_aligned+0x22>
 80019d4:	e7ef      	b.n	80019b6 <sbrk_aligned+0x1e>
 80019d6:	bf00      	nop
 80019d8:	200001d0 	.word	0x200001d0

080019dc <_malloc_r>:
 80019dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019e0:	1ccd      	adds	r5, r1, #3
 80019e2:	f025 0503 	bic.w	r5, r5, #3
 80019e6:	3508      	adds	r5, #8
 80019e8:	2d0c      	cmp	r5, #12
 80019ea:	bf38      	it	cc
 80019ec:	250c      	movcc	r5, #12
 80019ee:	2d00      	cmp	r5, #0
 80019f0:	4606      	mov	r6, r0
 80019f2:	db01      	blt.n	80019f8 <_malloc_r+0x1c>
 80019f4:	42a9      	cmp	r1, r5
 80019f6:	d904      	bls.n	8001a02 <_malloc_r+0x26>
 80019f8:	230c      	movs	r3, #12
 80019fa:	6033      	str	r3, [r6, #0]
 80019fc:	2000      	movs	r0, #0
 80019fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ad8 <_malloc_r+0xfc>
 8001a06:	f000 f869 	bl	8001adc <__malloc_lock>
 8001a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8001a0e:	461c      	mov	r4, r3
 8001a10:	bb44      	cbnz	r4, 8001a64 <_malloc_r+0x88>
 8001a12:	4629      	mov	r1, r5
 8001a14:	4630      	mov	r0, r6
 8001a16:	f7ff ffbf 	bl	8001998 <sbrk_aligned>
 8001a1a:	1c43      	adds	r3, r0, #1
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	d158      	bne.n	8001ad2 <_malloc_r+0xf6>
 8001a20:	f8d8 4000 	ldr.w	r4, [r8]
 8001a24:	4627      	mov	r7, r4
 8001a26:	2f00      	cmp	r7, #0
 8001a28:	d143      	bne.n	8001ab2 <_malloc_r+0xd6>
 8001a2a:	2c00      	cmp	r4, #0
 8001a2c:	d04b      	beq.n	8001ac6 <_malloc_r+0xea>
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	4639      	mov	r1, r7
 8001a32:	4630      	mov	r0, r6
 8001a34:	eb04 0903 	add.w	r9, r4, r3
 8001a38:	f000 fc5a 	bl	80022f0 <_sbrk_r>
 8001a3c:	4581      	cmp	r9, r0
 8001a3e:	d142      	bne.n	8001ac6 <_malloc_r+0xea>
 8001a40:	6821      	ldr	r1, [r4, #0]
 8001a42:	4630      	mov	r0, r6
 8001a44:	1a6d      	subs	r5, r5, r1
 8001a46:	4629      	mov	r1, r5
 8001a48:	f7ff ffa6 	bl	8001998 <sbrk_aligned>
 8001a4c:	3001      	adds	r0, #1
 8001a4e:	d03a      	beq.n	8001ac6 <_malloc_r+0xea>
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	442b      	add	r3, r5
 8001a54:	6023      	str	r3, [r4, #0]
 8001a56:	f8d8 3000 	ldr.w	r3, [r8]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	bb62      	cbnz	r2, 8001ab8 <_malloc_r+0xdc>
 8001a5e:	f8c8 7000 	str.w	r7, [r8]
 8001a62:	e00f      	b.n	8001a84 <_malloc_r+0xa8>
 8001a64:	6822      	ldr	r2, [r4, #0]
 8001a66:	1b52      	subs	r2, r2, r5
 8001a68:	d420      	bmi.n	8001aac <_malloc_r+0xd0>
 8001a6a:	2a0b      	cmp	r2, #11
 8001a6c:	d917      	bls.n	8001a9e <_malloc_r+0xc2>
 8001a6e:	1961      	adds	r1, r4, r5
 8001a70:	42a3      	cmp	r3, r4
 8001a72:	6025      	str	r5, [r4, #0]
 8001a74:	bf18      	it	ne
 8001a76:	6059      	strne	r1, [r3, #4]
 8001a78:	6863      	ldr	r3, [r4, #4]
 8001a7a:	bf08      	it	eq
 8001a7c:	f8c8 1000 	streq.w	r1, [r8]
 8001a80:	5162      	str	r2, [r4, r5]
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	4630      	mov	r0, r6
 8001a86:	f000 f82f 	bl	8001ae8 <__malloc_unlock>
 8001a8a:	f104 000b 	add.w	r0, r4, #11
 8001a8e:	1d23      	adds	r3, r4, #4
 8001a90:	f020 0007 	bic.w	r0, r0, #7
 8001a94:	1ac2      	subs	r2, r0, r3
 8001a96:	bf1c      	itt	ne
 8001a98:	1a1b      	subne	r3, r3, r0
 8001a9a:	50a3      	strne	r3, [r4, r2]
 8001a9c:	e7af      	b.n	80019fe <_malloc_r+0x22>
 8001a9e:	6862      	ldr	r2, [r4, #4]
 8001aa0:	42a3      	cmp	r3, r4
 8001aa2:	bf0c      	ite	eq
 8001aa4:	f8c8 2000 	streq.w	r2, [r8]
 8001aa8:	605a      	strne	r2, [r3, #4]
 8001aaa:	e7eb      	b.n	8001a84 <_malloc_r+0xa8>
 8001aac:	4623      	mov	r3, r4
 8001aae:	6864      	ldr	r4, [r4, #4]
 8001ab0:	e7ae      	b.n	8001a10 <_malloc_r+0x34>
 8001ab2:	463c      	mov	r4, r7
 8001ab4:	687f      	ldr	r7, [r7, #4]
 8001ab6:	e7b6      	b.n	8001a26 <_malloc_r+0x4a>
 8001ab8:	461a      	mov	r2, r3
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	42a3      	cmp	r3, r4
 8001abe:	d1fb      	bne.n	8001ab8 <_malloc_r+0xdc>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6053      	str	r3, [r2, #4]
 8001ac4:	e7de      	b.n	8001a84 <_malloc_r+0xa8>
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	4630      	mov	r0, r6
 8001aca:	6033      	str	r3, [r6, #0]
 8001acc:	f000 f80c 	bl	8001ae8 <__malloc_unlock>
 8001ad0:	e794      	b.n	80019fc <_malloc_r+0x20>
 8001ad2:	6005      	str	r5, [r0, #0]
 8001ad4:	e7d6      	b.n	8001a84 <_malloc_r+0xa8>
 8001ad6:	bf00      	nop
 8001ad8:	200001d4 	.word	0x200001d4

08001adc <__malloc_lock>:
 8001adc:	4801      	ldr	r0, [pc, #4]	@ (8001ae4 <__malloc_lock+0x8>)
 8001ade:	f7ff bf10 	b.w	8001902 <__retarget_lock_acquire_recursive>
 8001ae2:	bf00      	nop
 8001ae4:	200001cc 	.word	0x200001cc

08001ae8 <__malloc_unlock>:
 8001ae8:	4801      	ldr	r0, [pc, #4]	@ (8001af0 <__malloc_unlock+0x8>)
 8001aea:	f7ff bf0b 	b.w	8001904 <__retarget_lock_release_recursive>
 8001aee:	bf00      	nop
 8001af0:	200001cc 	.word	0x200001cc

08001af4 <__sfputc_r>:
 8001af4:	6893      	ldr	r3, [r2, #8]
 8001af6:	b410      	push	{r4}
 8001af8:	3b01      	subs	r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	6093      	str	r3, [r2, #8]
 8001afe:	da07      	bge.n	8001b10 <__sfputc_r+0x1c>
 8001b00:	6994      	ldr	r4, [r2, #24]
 8001b02:	42a3      	cmp	r3, r4
 8001b04:	db01      	blt.n	8001b0a <__sfputc_r+0x16>
 8001b06:	290a      	cmp	r1, #10
 8001b08:	d102      	bne.n	8001b10 <__sfputc_r+0x1c>
 8001b0a:	bc10      	pop	{r4}
 8001b0c:	f7ff bdeb 	b.w	80016e6 <__swbuf_r>
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	1c58      	adds	r0, r3, #1
 8001b14:	6010      	str	r0, [r2, #0]
 8001b16:	7019      	strb	r1, [r3, #0]
 8001b18:	4608      	mov	r0, r1
 8001b1a:	bc10      	pop	{r4}
 8001b1c:	4770      	bx	lr

08001b1e <__sfputs_r>:
 8001b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b20:	4606      	mov	r6, r0
 8001b22:	460f      	mov	r7, r1
 8001b24:	4614      	mov	r4, r2
 8001b26:	18d5      	adds	r5, r2, r3
 8001b28:	42ac      	cmp	r4, r5
 8001b2a:	d101      	bne.n	8001b30 <__sfputs_r+0x12>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	e007      	b.n	8001b40 <__sfputs_r+0x22>
 8001b30:	463a      	mov	r2, r7
 8001b32:	4630      	mov	r0, r6
 8001b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b38:	f7ff ffdc 	bl	8001af4 <__sfputc_r>
 8001b3c:	1c43      	adds	r3, r0, #1
 8001b3e:	d1f3      	bne.n	8001b28 <__sfputs_r+0xa>
 8001b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b44 <_vfiprintf_r>:
 8001b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b48:	460d      	mov	r5, r1
 8001b4a:	4614      	mov	r4, r2
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4606      	mov	r6, r0
 8001b50:	b09d      	sub	sp, #116	@ 0x74
 8001b52:	b118      	cbz	r0, 8001b5c <_vfiprintf_r+0x18>
 8001b54:	6a03      	ldr	r3, [r0, #32]
 8001b56:	b90b      	cbnz	r3, 8001b5c <_vfiprintf_r+0x18>
 8001b58:	f7ff fcdc 	bl	8001514 <__sinit>
 8001b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b5e:	07d9      	lsls	r1, r3, #31
 8001b60:	d405      	bmi.n	8001b6e <_vfiprintf_r+0x2a>
 8001b62:	89ab      	ldrh	r3, [r5, #12]
 8001b64:	059a      	lsls	r2, r3, #22
 8001b66:	d402      	bmi.n	8001b6e <_vfiprintf_r+0x2a>
 8001b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b6a:	f7ff feca 	bl	8001902 <__retarget_lock_acquire_recursive>
 8001b6e:	89ab      	ldrh	r3, [r5, #12]
 8001b70:	071b      	lsls	r3, r3, #28
 8001b72:	d501      	bpl.n	8001b78 <_vfiprintf_r+0x34>
 8001b74:	692b      	ldr	r3, [r5, #16]
 8001b76:	b99b      	cbnz	r3, 8001ba0 <_vfiprintf_r+0x5c>
 8001b78:	4629      	mov	r1, r5
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f7ff fdf2 	bl	8001764 <__swsetup_r>
 8001b80:	b170      	cbz	r0, 8001ba0 <_vfiprintf_r+0x5c>
 8001b82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b84:	07dc      	lsls	r4, r3, #31
 8001b86:	d504      	bpl.n	8001b92 <_vfiprintf_r+0x4e>
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	b01d      	add	sp, #116	@ 0x74
 8001b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b92:	89ab      	ldrh	r3, [r5, #12]
 8001b94:	0598      	lsls	r0, r3, #22
 8001b96:	d4f7      	bmi.n	8001b88 <_vfiprintf_r+0x44>
 8001b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b9a:	f7ff feb3 	bl	8001904 <__retarget_lock_release_recursive>
 8001b9e:	e7f3      	b.n	8001b88 <_vfiprintf_r+0x44>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001baa:	2330      	movs	r3, #48	@ 0x30
 8001bac:	f04f 0901 	mov.w	r9, #1
 8001bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bb4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8001d60 <_vfiprintf_r+0x21c>
 8001bb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	469a      	mov	sl, r3
 8001bc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bc4:	b10a      	cbz	r2, 8001bca <_vfiprintf_r+0x86>
 8001bc6:	2a25      	cmp	r2, #37	@ 0x25
 8001bc8:	d1f9      	bne.n	8001bbe <_vfiprintf_r+0x7a>
 8001bca:	ebba 0b04 	subs.w	fp, sl, r4
 8001bce:	d00b      	beq.n	8001be8 <_vfiprintf_r+0xa4>
 8001bd0:	465b      	mov	r3, fp
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	f7ff ffa1 	bl	8001b1e <__sfputs_r>
 8001bdc:	3001      	adds	r0, #1
 8001bde:	f000 80a7 	beq.w	8001d30 <_vfiprintf_r+0x1ec>
 8001be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001be4:	445a      	add	r2, fp
 8001be6:	9209      	str	r2, [sp, #36]	@ 0x24
 8001be8:	f89a 3000 	ldrb.w	r3, [sl]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 809f 	beq.w	8001d30 <_vfiprintf_r+0x1ec>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bfc:	f10a 0a01 	add.w	sl, sl, #1
 8001c00:	9304      	str	r3, [sp, #16]
 8001c02:	9307      	str	r3, [sp, #28]
 8001c04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c08:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c0a:	4654      	mov	r4, sl
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c12:	4853      	ldr	r0, [pc, #332]	@ (8001d60 <_vfiprintf_r+0x21c>)
 8001c14:	f000 fb7c 	bl	8002310 <memchr>
 8001c18:	9a04      	ldr	r2, [sp, #16]
 8001c1a:	b9d8      	cbnz	r0, 8001c54 <_vfiprintf_r+0x110>
 8001c1c:	06d1      	lsls	r1, r2, #27
 8001c1e:	bf44      	itt	mi
 8001c20:	2320      	movmi	r3, #32
 8001c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c26:	0713      	lsls	r3, r2, #28
 8001c28:	bf44      	itt	mi
 8001c2a:	232b      	movmi	r3, #43	@ 0x2b
 8001c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c30:	f89a 3000 	ldrb.w	r3, [sl]
 8001c34:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c36:	d015      	beq.n	8001c64 <_vfiprintf_r+0x120>
 8001c38:	4654      	mov	r4, sl
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f04f 0c0a 	mov.w	ip, #10
 8001c40:	9a07      	ldr	r2, [sp, #28]
 8001c42:	4621      	mov	r1, r4
 8001c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c48:	3b30      	subs	r3, #48	@ 0x30
 8001c4a:	2b09      	cmp	r3, #9
 8001c4c:	d94b      	bls.n	8001ce6 <_vfiprintf_r+0x1a2>
 8001c4e:	b1b0      	cbz	r0, 8001c7e <_vfiprintf_r+0x13a>
 8001c50:	9207      	str	r2, [sp, #28]
 8001c52:	e014      	b.n	8001c7e <_vfiprintf_r+0x13a>
 8001c54:	eba0 0308 	sub.w	r3, r0, r8
 8001c58:	fa09 f303 	lsl.w	r3, r9, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	46a2      	mov	sl, r4
 8001c60:	9304      	str	r3, [sp, #16]
 8001c62:	e7d2      	b.n	8001c0a <_vfiprintf_r+0xc6>
 8001c64:	9b03      	ldr	r3, [sp, #12]
 8001c66:	1d19      	adds	r1, r3, #4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	9103      	str	r1, [sp, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bfbb      	ittet	lt
 8001c70:	425b      	neglt	r3, r3
 8001c72:	f042 0202 	orrlt.w	r2, r2, #2
 8001c76:	9307      	strge	r3, [sp, #28]
 8001c78:	9307      	strlt	r3, [sp, #28]
 8001c7a:	bfb8      	it	lt
 8001c7c:	9204      	strlt	r2, [sp, #16]
 8001c7e:	7823      	ldrb	r3, [r4, #0]
 8001c80:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c82:	d10a      	bne.n	8001c9a <_vfiprintf_r+0x156>
 8001c84:	7863      	ldrb	r3, [r4, #1]
 8001c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c88:	d132      	bne.n	8001cf0 <_vfiprintf_r+0x1ac>
 8001c8a:	9b03      	ldr	r3, [sp, #12]
 8001c8c:	3402      	adds	r4, #2
 8001c8e:	1d1a      	adds	r2, r3, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	9203      	str	r2, [sp, #12]
 8001c94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001c98:	9305      	str	r3, [sp, #20]
 8001c9a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001d64 <_vfiprintf_r+0x220>
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	4650      	mov	r0, sl
 8001ca2:	7821      	ldrb	r1, [r4, #0]
 8001ca4:	f000 fb34 	bl	8002310 <memchr>
 8001ca8:	b138      	cbz	r0, 8001cba <_vfiprintf_r+0x176>
 8001caa:	2240      	movs	r2, #64	@ 0x40
 8001cac:	9b04      	ldr	r3, [sp, #16]
 8001cae:	eba0 000a 	sub.w	r0, r0, sl
 8001cb2:	4082      	lsls	r2, r0
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	3401      	adds	r4, #1
 8001cb8:	9304      	str	r3, [sp, #16]
 8001cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cbe:	2206      	movs	r2, #6
 8001cc0:	4829      	ldr	r0, [pc, #164]	@ (8001d68 <_vfiprintf_r+0x224>)
 8001cc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001cc6:	f000 fb23 	bl	8002310 <memchr>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d03f      	beq.n	8001d4e <_vfiprintf_r+0x20a>
 8001cce:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <_vfiprintf_r+0x228>)
 8001cd0:	bb1b      	cbnz	r3, 8001d1a <_vfiprintf_r+0x1d6>
 8001cd2:	9b03      	ldr	r3, [sp, #12]
 8001cd4:	3307      	adds	r3, #7
 8001cd6:	f023 0307 	bic.w	r3, r3, #7
 8001cda:	3308      	adds	r3, #8
 8001cdc:	9303      	str	r3, [sp, #12]
 8001cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ce0:	443b      	add	r3, r7
 8001ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ce4:	e76a      	b.n	8001bbc <_vfiprintf_r+0x78>
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cee:	e7a8      	b.n	8001c42 <_vfiprintf_r+0xfe>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f04f 0c0a 	mov.w	ip, #10
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	3401      	adds	r4, #1
 8001cfa:	9305      	str	r3, [sp, #20]
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d02:	3a30      	subs	r2, #48	@ 0x30
 8001d04:	2a09      	cmp	r2, #9
 8001d06:	d903      	bls.n	8001d10 <_vfiprintf_r+0x1cc>
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0c6      	beq.n	8001c9a <_vfiprintf_r+0x156>
 8001d0c:	9105      	str	r1, [sp, #20]
 8001d0e:	e7c4      	b.n	8001c9a <_vfiprintf_r+0x156>
 8001d10:	4604      	mov	r4, r0
 8001d12:	2301      	movs	r3, #1
 8001d14:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d18:	e7f0      	b.n	8001cfc <_vfiprintf_r+0x1b8>
 8001d1a:	ab03      	add	r3, sp, #12
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	462a      	mov	r2, r5
 8001d20:	4630      	mov	r0, r6
 8001d22:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <_vfiprintf_r+0x22c>)
 8001d24:	a904      	add	r1, sp, #16
 8001d26:	f3af 8000 	nop.w
 8001d2a:	4607      	mov	r7, r0
 8001d2c:	1c78      	adds	r0, r7, #1
 8001d2e:	d1d6      	bne.n	8001cde <_vfiprintf_r+0x19a>
 8001d30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d32:	07d9      	lsls	r1, r3, #31
 8001d34:	d405      	bmi.n	8001d42 <_vfiprintf_r+0x1fe>
 8001d36:	89ab      	ldrh	r3, [r5, #12]
 8001d38:	059a      	lsls	r2, r3, #22
 8001d3a:	d402      	bmi.n	8001d42 <_vfiprintf_r+0x1fe>
 8001d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d3e:	f7ff fde1 	bl	8001904 <__retarget_lock_release_recursive>
 8001d42:	89ab      	ldrh	r3, [r5, #12]
 8001d44:	065b      	lsls	r3, r3, #25
 8001d46:	f53f af1f 	bmi.w	8001b88 <_vfiprintf_r+0x44>
 8001d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d4c:	e71e      	b.n	8001b8c <_vfiprintf_r+0x48>
 8001d4e:	ab03      	add	r3, sp, #12
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	462a      	mov	r2, r5
 8001d54:	4630      	mov	r0, r6
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <_vfiprintf_r+0x22c>)
 8001d58:	a904      	add	r1, sp, #16
 8001d5a:	f000 f87d 	bl	8001e58 <_printf_i>
 8001d5e:	e7e4      	b.n	8001d2a <_vfiprintf_r+0x1e6>
 8001d60:	080023f6 	.word	0x080023f6
 8001d64:	080023fc 	.word	0x080023fc
 8001d68:	08002400 	.word	0x08002400
 8001d6c:	00000000 	.word	0x00000000
 8001d70:	08001b1f 	.word	0x08001b1f

08001d74 <_printf_common>:
 8001d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d78:	4616      	mov	r6, r2
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	688a      	ldr	r2, [r1, #8]
 8001d7e:	690b      	ldr	r3, [r1, #16]
 8001d80:	4607      	mov	r7, r0
 8001d82:	4293      	cmp	r3, r2
 8001d84:	bfb8      	it	lt
 8001d86:	4613      	movlt	r3, r2
 8001d88:	6033      	str	r3, [r6, #0]
 8001d8a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001d8e:	460c      	mov	r4, r1
 8001d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001d94:	b10a      	cbz	r2, 8001d9a <_printf_common+0x26>
 8001d96:	3301      	adds	r3, #1
 8001d98:	6033      	str	r3, [r6, #0]
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	0699      	lsls	r1, r3, #26
 8001d9e:	bf42      	ittt	mi
 8001da0:	6833      	ldrmi	r3, [r6, #0]
 8001da2:	3302      	addmi	r3, #2
 8001da4:	6033      	strmi	r3, [r6, #0]
 8001da6:	6825      	ldr	r5, [r4, #0]
 8001da8:	f015 0506 	ands.w	r5, r5, #6
 8001dac:	d106      	bne.n	8001dbc <_printf_common+0x48>
 8001dae:	f104 0a19 	add.w	sl, r4, #25
 8001db2:	68e3      	ldr	r3, [r4, #12]
 8001db4:	6832      	ldr	r2, [r6, #0]
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	42ab      	cmp	r3, r5
 8001dba:	dc2b      	bgt.n	8001e14 <_printf_common+0xa0>
 8001dbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	3b00      	subs	r3, #0
 8001dc4:	bf18      	it	ne
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	0692      	lsls	r2, r2, #26
 8001dca:	d430      	bmi.n	8001e2e <_printf_common+0xba>
 8001dcc:	4641      	mov	r1, r8
 8001dce:	4638      	mov	r0, r7
 8001dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001dd4:	47c8      	blx	r9
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	d023      	beq.n	8001e22 <_printf_common+0xae>
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	6922      	ldr	r2, [r4, #16]
 8001dde:	f003 0306 	and.w	r3, r3, #6
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf14      	ite	ne
 8001de6:	2500      	movne	r5, #0
 8001de8:	6833      	ldreq	r3, [r6, #0]
 8001dea:	f04f 0600 	mov.w	r6, #0
 8001dee:	bf08      	it	eq
 8001df0:	68e5      	ldreq	r5, [r4, #12]
 8001df2:	f104 041a 	add.w	r4, r4, #26
 8001df6:	bf08      	it	eq
 8001df8:	1aed      	subeq	r5, r5, r3
 8001dfa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001dfe:	bf08      	it	eq
 8001e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e04:	4293      	cmp	r3, r2
 8001e06:	bfc4      	itt	gt
 8001e08:	1a9b      	subgt	r3, r3, r2
 8001e0a:	18ed      	addgt	r5, r5, r3
 8001e0c:	42b5      	cmp	r5, r6
 8001e0e:	d11a      	bne.n	8001e46 <_printf_common+0xd2>
 8001e10:	2000      	movs	r0, #0
 8001e12:	e008      	b.n	8001e26 <_printf_common+0xb2>
 8001e14:	2301      	movs	r3, #1
 8001e16:	4652      	mov	r2, sl
 8001e18:	4641      	mov	r1, r8
 8001e1a:	4638      	mov	r0, r7
 8001e1c:	47c8      	blx	r9
 8001e1e:	3001      	adds	r0, #1
 8001e20:	d103      	bne.n	8001e2a <_printf_common+0xb6>
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295
 8001e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e2a:	3501      	adds	r5, #1
 8001e2c:	e7c1      	b.n	8001db2 <_printf_common+0x3e>
 8001e2e:	2030      	movs	r0, #48	@ 0x30
 8001e30:	18e1      	adds	r1, r4, r3
 8001e32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001e3c:	4422      	add	r2, r4
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e44:	e7c2      	b.n	8001dcc <_printf_common+0x58>
 8001e46:	2301      	movs	r3, #1
 8001e48:	4622      	mov	r2, r4
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	4638      	mov	r0, r7
 8001e4e:	47c8      	blx	r9
 8001e50:	3001      	adds	r0, #1
 8001e52:	d0e6      	beq.n	8001e22 <_printf_common+0xae>
 8001e54:	3601      	adds	r6, #1
 8001e56:	e7d9      	b.n	8001e0c <_printf_common+0x98>

08001e58 <_printf_i>:
 8001e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e5c:	7e0f      	ldrb	r7, [r1, #24]
 8001e5e:	4691      	mov	r9, r2
 8001e60:	2f78      	cmp	r7, #120	@ 0x78
 8001e62:	4680      	mov	r8, r0
 8001e64:	460c      	mov	r4, r1
 8001e66:	469a      	mov	sl, r3
 8001e68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001e6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001e6e:	d807      	bhi.n	8001e80 <_printf_i+0x28>
 8001e70:	2f62      	cmp	r7, #98	@ 0x62
 8001e72:	d80a      	bhi.n	8001e8a <_printf_i+0x32>
 8001e74:	2f00      	cmp	r7, #0
 8001e76:	f000 80d3 	beq.w	8002020 <_printf_i+0x1c8>
 8001e7a:	2f58      	cmp	r7, #88	@ 0x58
 8001e7c:	f000 80ba 	beq.w	8001ff4 <_printf_i+0x19c>
 8001e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001e88:	e03a      	b.n	8001f00 <_printf_i+0xa8>
 8001e8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001e8e:	2b15      	cmp	r3, #21
 8001e90:	d8f6      	bhi.n	8001e80 <_printf_i+0x28>
 8001e92:	a101      	add	r1, pc, #4	@ (adr r1, 8001e98 <_printf_i+0x40>)
 8001e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e98:	08001ef1 	.word	0x08001ef1
 8001e9c:	08001f05 	.word	0x08001f05
 8001ea0:	08001e81 	.word	0x08001e81
 8001ea4:	08001e81 	.word	0x08001e81
 8001ea8:	08001e81 	.word	0x08001e81
 8001eac:	08001e81 	.word	0x08001e81
 8001eb0:	08001f05 	.word	0x08001f05
 8001eb4:	08001e81 	.word	0x08001e81
 8001eb8:	08001e81 	.word	0x08001e81
 8001ebc:	08001e81 	.word	0x08001e81
 8001ec0:	08001e81 	.word	0x08001e81
 8001ec4:	08002007 	.word	0x08002007
 8001ec8:	08001f2f 	.word	0x08001f2f
 8001ecc:	08001fc1 	.word	0x08001fc1
 8001ed0:	08001e81 	.word	0x08001e81
 8001ed4:	08001e81 	.word	0x08001e81
 8001ed8:	08002029 	.word	0x08002029
 8001edc:	08001e81 	.word	0x08001e81
 8001ee0:	08001f2f 	.word	0x08001f2f
 8001ee4:	08001e81 	.word	0x08001e81
 8001ee8:	08001e81 	.word	0x08001e81
 8001eec:	08001fc9 	.word	0x08001fc9
 8001ef0:	6833      	ldr	r3, [r6, #0]
 8001ef2:	1d1a      	adds	r2, r3, #4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6032      	str	r2, [r6, #0]
 8001ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f00:	2301      	movs	r3, #1
 8001f02:	e09e      	b.n	8002042 <_printf_i+0x1ea>
 8001f04:	6833      	ldr	r3, [r6, #0]
 8001f06:	6820      	ldr	r0, [r4, #0]
 8001f08:	1d19      	adds	r1, r3, #4
 8001f0a:	6031      	str	r1, [r6, #0]
 8001f0c:	0606      	lsls	r6, r0, #24
 8001f0e:	d501      	bpl.n	8001f14 <_printf_i+0xbc>
 8001f10:	681d      	ldr	r5, [r3, #0]
 8001f12:	e003      	b.n	8001f1c <_printf_i+0xc4>
 8001f14:	0645      	lsls	r5, r0, #25
 8001f16:	d5fb      	bpl.n	8001f10 <_printf_i+0xb8>
 8001f18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f1c:	2d00      	cmp	r5, #0
 8001f1e:	da03      	bge.n	8001f28 <_printf_i+0xd0>
 8001f20:	232d      	movs	r3, #45	@ 0x2d
 8001f22:	426d      	negs	r5, r5
 8001f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f28:	230a      	movs	r3, #10
 8001f2a:	4859      	ldr	r0, [pc, #356]	@ (8002090 <_printf_i+0x238>)
 8001f2c:	e011      	b.n	8001f52 <_printf_i+0xfa>
 8001f2e:	6821      	ldr	r1, [r4, #0]
 8001f30:	6833      	ldr	r3, [r6, #0]
 8001f32:	0608      	lsls	r0, r1, #24
 8001f34:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f38:	d402      	bmi.n	8001f40 <_printf_i+0xe8>
 8001f3a:	0649      	lsls	r1, r1, #25
 8001f3c:	bf48      	it	mi
 8001f3e:	b2ad      	uxthmi	r5, r5
 8001f40:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f42:	6033      	str	r3, [r6, #0]
 8001f44:	bf14      	ite	ne
 8001f46:	230a      	movne	r3, #10
 8001f48:	2308      	moveq	r3, #8
 8001f4a:	4851      	ldr	r0, [pc, #324]	@ (8002090 <_printf_i+0x238>)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f52:	6866      	ldr	r6, [r4, #4]
 8001f54:	2e00      	cmp	r6, #0
 8001f56:	bfa8      	it	ge
 8001f58:	6821      	ldrge	r1, [r4, #0]
 8001f5a:	60a6      	str	r6, [r4, #8]
 8001f5c:	bfa4      	itt	ge
 8001f5e:	f021 0104 	bicge.w	r1, r1, #4
 8001f62:	6021      	strge	r1, [r4, #0]
 8001f64:	b90d      	cbnz	r5, 8001f6a <_printf_i+0x112>
 8001f66:	2e00      	cmp	r6, #0
 8001f68:	d04b      	beq.n	8002002 <_printf_i+0x1aa>
 8001f6a:	4616      	mov	r6, r2
 8001f6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f70:	fb03 5711 	mls	r7, r3, r1, r5
 8001f74:	5dc7      	ldrb	r7, [r0, r7]
 8001f76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f7a:	462f      	mov	r7, r5
 8001f7c:	42bb      	cmp	r3, r7
 8001f7e:	460d      	mov	r5, r1
 8001f80:	d9f4      	bls.n	8001f6c <_printf_i+0x114>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d10b      	bne.n	8001f9e <_printf_i+0x146>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	07df      	lsls	r7, r3, #31
 8001f8a:	d508      	bpl.n	8001f9e <_printf_i+0x146>
 8001f8c:	6923      	ldr	r3, [r4, #16]
 8001f8e:	6861      	ldr	r1, [r4, #4]
 8001f90:	4299      	cmp	r1, r3
 8001f92:	bfde      	ittt	le
 8001f94:	2330      	movle	r3, #48	@ 0x30
 8001f96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f9e:	1b92      	subs	r2, r2, r6
 8001fa0:	6122      	str	r2, [r4, #16]
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	f8cd a000 	str.w	sl, [sp]
 8001fac:	aa03      	add	r2, sp, #12
 8001fae:	f7ff fee1 	bl	8001d74 <_printf_common>
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	d14a      	bne.n	800204c <_printf_i+0x1f4>
 8001fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fba:	b004      	add	sp, #16
 8001fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	f043 0320 	orr.w	r3, r3, #32
 8001fc6:	6023      	str	r3, [r4, #0]
 8001fc8:	2778      	movs	r7, #120	@ 0x78
 8001fca:	4832      	ldr	r0, [pc, #200]	@ (8002094 <_printf_i+0x23c>)
 8001fcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	6831      	ldr	r1, [r6, #0]
 8001fd4:	061f      	lsls	r7, r3, #24
 8001fd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8001fda:	d402      	bmi.n	8001fe2 <_printf_i+0x18a>
 8001fdc:	065f      	lsls	r7, r3, #25
 8001fde:	bf48      	it	mi
 8001fe0:	b2ad      	uxthmi	r5, r5
 8001fe2:	6031      	str	r1, [r6, #0]
 8001fe4:	07d9      	lsls	r1, r3, #31
 8001fe6:	bf44      	itt	mi
 8001fe8:	f043 0320 	orrmi.w	r3, r3, #32
 8001fec:	6023      	strmi	r3, [r4, #0]
 8001fee:	b11d      	cbz	r5, 8001ff8 <_printf_i+0x1a0>
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	e7ab      	b.n	8001f4c <_printf_i+0xf4>
 8001ff4:	4826      	ldr	r0, [pc, #152]	@ (8002090 <_printf_i+0x238>)
 8001ff6:	e7e9      	b.n	8001fcc <_printf_i+0x174>
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	f023 0320 	bic.w	r3, r3, #32
 8001ffe:	6023      	str	r3, [r4, #0]
 8002000:	e7f6      	b.n	8001ff0 <_printf_i+0x198>
 8002002:	4616      	mov	r6, r2
 8002004:	e7bd      	b.n	8001f82 <_printf_i+0x12a>
 8002006:	6833      	ldr	r3, [r6, #0]
 8002008:	6825      	ldr	r5, [r4, #0]
 800200a:	1d18      	adds	r0, r3, #4
 800200c:	6961      	ldr	r1, [r4, #20]
 800200e:	6030      	str	r0, [r6, #0]
 8002010:	062e      	lsls	r6, r5, #24
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	d501      	bpl.n	800201a <_printf_i+0x1c2>
 8002016:	6019      	str	r1, [r3, #0]
 8002018:	e002      	b.n	8002020 <_printf_i+0x1c8>
 800201a:	0668      	lsls	r0, r5, #25
 800201c:	d5fb      	bpl.n	8002016 <_printf_i+0x1be>
 800201e:	8019      	strh	r1, [r3, #0]
 8002020:	2300      	movs	r3, #0
 8002022:	4616      	mov	r6, r2
 8002024:	6123      	str	r3, [r4, #16]
 8002026:	e7bc      	b.n	8001fa2 <_printf_i+0x14a>
 8002028:	6833      	ldr	r3, [r6, #0]
 800202a:	2100      	movs	r1, #0
 800202c:	1d1a      	adds	r2, r3, #4
 800202e:	6032      	str	r2, [r6, #0]
 8002030:	681e      	ldr	r6, [r3, #0]
 8002032:	6862      	ldr	r2, [r4, #4]
 8002034:	4630      	mov	r0, r6
 8002036:	f000 f96b 	bl	8002310 <memchr>
 800203a:	b108      	cbz	r0, 8002040 <_printf_i+0x1e8>
 800203c:	1b80      	subs	r0, r0, r6
 800203e:	6060      	str	r0, [r4, #4]
 8002040:	6863      	ldr	r3, [r4, #4]
 8002042:	6123      	str	r3, [r4, #16]
 8002044:	2300      	movs	r3, #0
 8002046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800204a:	e7aa      	b.n	8001fa2 <_printf_i+0x14a>
 800204c:	4632      	mov	r2, r6
 800204e:	4649      	mov	r1, r9
 8002050:	4640      	mov	r0, r8
 8002052:	6923      	ldr	r3, [r4, #16]
 8002054:	47d0      	blx	sl
 8002056:	3001      	adds	r0, #1
 8002058:	d0ad      	beq.n	8001fb6 <_printf_i+0x15e>
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	079b      	lsls	r3, r3, #30
 800205e:	d413      	bmi.n	8002088 <_printf_i+0x230>
 8002060:	68e0      	ldr	r0, [r4, #12]
 8002062:	9b03      	ldr	r3, [sp, #12]
 8002064:	4298      	cmp	r0, r3
 8002066:	bfb8      	it	lt
 8002068:	4618      	movlt	r0, r3
 800206a:	e7a6      	b.n	8001fba <_printf_i+0x162>
 800206c:	2301      	movs	r3, #1
 800206e:	4632      	mov	r2, r6
 8002070:	4649      	mov	r1, r9
 8002072:	4640      	mov	r0, r8
 8002074:	47d0      	blx	sl
 8002076:	3001      	adds	r0, #1
 8002078:	d09d      	beq.n	8001fb6 <_printf_i+0x15e>
 800207a:	3501      	adds	r5, #1
 800207c:	68e3      	ldr	r3, [r4, #12]
 800207e:	9903      	ldr	r1, [sp, #12]
 8002080:	1a5b      	subs	r3, r3, r1
 8002082:	42ab      	cmp	r3, r5
 8002084:	dcf2      	bgt.n	800206c <_printf_i+0x214>
 8002086:	e7eb      	b.n	8002060 <_printf_i+0x208>
 8002088:	2500      	movs	r5, #0
 800208a:	f104 0619 	add.w	r6, r4, #25
 800208e:	e7f5      	b.n	800207c <_printf_i+0x224>
 8002090:	08002407 	.word	0x08002407
 8002094:	08002418 	.word	0x08002418

08002098 <__sflush_r>:
 8002098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	0716      	lsls	r6, r2, #28
 80020a0:	4605      	mov	r5, r0
 80020a2:	460c      	mov	r4, r1
 80020a4:	d454      	bmi.n	8002150 <__sflush_r+0xb8>
 80020a6:	684b      	ldr	r3, [r1, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	dc02      	bgt.n	80020b2 <__sflush_r+0x1a>
 80020ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	dd48      	ble.n	8002144 <__sflush_r+0xac>
 80020b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80020b4:	2e00      	cmp	r6, #0
 80020b6:	d045      	beq.n	8002144 <__sflush_r+0xac>
 80020b8:	2300      	movs	r3, #0
 80020ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80020be:	682f      	ldr	r7, [r5, #0]
 80020c0:	6a21      	ldr	r1, [r4, #32]
 80020c2:	602b      	str	r3, [r5, #0]
 80020c4:	d030      	beq.n	8002128 <__sflush_r+0x90>
 80020c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80020c8:	89a3      	ldrh	r3, [r4, #12]
 80020ca:	0759      	lsls	r1, r3, #29
 80020cc:	d505      	bpl.n	80020da <__sflush_r+0x42>
 80020ce:	6863      	ldr	r3, [r4, #4]
 80020d0:	1ad2      	subs	r2, r2, r3
 80020d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80020d4:	b10b      	cbz	r3, 80020da <__sflush_r+0x42>
 80020d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020d8:	1ad2      	subs	r2, r2, r3
 80020da:	2300      	movs	r3, #0
 80020dc:	4628      	mov	r0, r5
 80020de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80020e0:	6a21      	ldr	r1, [r4, #32]
 80020e2:	47b0      	blx	r6
 80020e4:	1c43      	adds	r3, r0, #1
 80020e6:	89a3      	ldrh	r3, [r4, #12]
 80020e8:	d106      	bne.n	80020f8 <__sflush_r+0x60>
 80020ea:	6829      	ldr	r1, [r5, #0]
 80020ec:	291d      	cmp	r1, #29
 80020ee:	d82b      	bhi.n	8002148 <__sflush_r+0xb0>
 80020f0:	4a28      	ldr	r2, [pc, #160]	@ (8002194 <__sflush_r+0xfc>)
 80020f2:	410a      	asrs	r2, r1
 80020f4:	07d6      	lsls	r6, r2, #31
 80020f6:	d427      	bmi.n	8002148 <__sflush_r+0xb0>
 80020f8:	2200      	movs	r2, #0
 80020fa:	6062      	str	r2, [r4, #4]
 80020fc:	6922      	ldr	r2, [r4, #16]
 80020fe:	04d9      	lsls	r1, r3, #19
 8002100:	6022      	str	r2, [r4, #0]
 8002102:	d504      	bpl.n	800210e <__sflush_r+0x76>
 8002104:	1c42      	adds	r2, r0, #1
 8002106:	d101      	bne.n	800210c <__sflush_r+0x74>
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	b903      	cbnz	r3, 800210e <__sflush_r+0x76>
 800210c:	6560      	str	r0, [r4, #84]	@ 0x54
 800210e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002110:	602f      	str	r7, [r5, #0]
 8002112:	b1b9      	cbz	r1, 8002144 <__sflush_r+0xac>
 8002114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002118:	4299      	cmp	r1, r3
 800211a:	d002      	beq.n	8002122 <__sflush_r+0x8a>
 800211c:	4628      	mov	r0, r5
 800211e:	f7ff fbf3 	bl	8001908 <_free_r>
 8002122:	2300      	movs	r3, #0
 8002124:	6363      	str	r3, [r4, #52]	@ 0x34
 8002126:	e00d      	b.n	8002144 <__sflush_r+0xac>
 8002128:	2301      	movs	r3, #1
 800212a:	4628      	mov	r0, r5
 800212c:	47b0      	blx	r6
 800212e:	4602      	mov	r2, r0
 8002130:	1c50      	adds	r0, r2, #1
 8002132:	d1c9      	bne.n	80020c8 <__sflush_r+0x30>
 8002134:	682b      	ldr	r3, [r5, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0c6      	beq.n	80020c8 <__sflush_r+0x30>
 800213a:	2b1d      	cmp	r3, #29
 800213c:	d001      	beq.n	8002142 <__sflush_r+0xaa>
 800213e:	2b16      	cmp	r3, #22
 8002140:	d11d      	bne.n	800217e <__sflush_r+0xe6>
 8002142:	602f      	str	r7, [r5, #0]
 8002144:	2000      	movs	r0, #0
 8002146:	e021      	b.n	800218c <__sflush_r+0xf4>
 8002148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800214c:	b21b      	sxth	r3, r3
 800214e:	e01a      	b.n	8002186 <__sflush_r+0xee>
 8002150:	690f      	ldr	r7, [r1, #16]
 8002152:	2f00      	cmp	r7, #0
 8002154:	d0f6      	beq.n	8002144 <__sflush_r+0xac>
 8002156:	0793      	lsls	r3, r2, #30
 8002158:	bf18      	it	ne
 800215a:	2300      	movne	r3, #0
 800215c:	680e      	ldr	r6, [r1, #0]
 800215e:	bf08      	it	eq
 8002160:	694b      	ldreq	r3, [r1, #20]
 8002162:	1bf6      	subs	r6, r6, r7
 8002164:	600f      	str	r7, [r1, #0]
 8002166:	608b      	str	r3, [r1, #8]
 8002168:	2e00      	cmp	r6, #0
 800216a:	ddeb      	ble.n	8002144 <__sflush_r+0xac>
 800216c:	4633      	mov	r3, r6
 800216e:	463a      	mov	r2, r7
 8002170:	4628      	mov	r0, r5
 8002172:	6a21      	ldr	r1, [r4, #32]
 8002174:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002178:	47e0      	blx	ip
 800217a:	2800      	cmp	r0, #0
 800217c:	dc07      	bgt.n	800218e <__sflush_r+0xf6>
 800217e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002186:	f04f 30ff 	mov.w	r0, #4294967295
 800218a:	81a3      	strh	r3, [r4, #12]
 800218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800218e:	4407      	add	r7, r0
 8002190:	1a36      	subs	r6, r6, r0
 8002192:	e7e9      	b.n	8002168 <__sflush_r+0xd0>
 8002194:	dfbffffe 	.word	0xdfbffffe

08002198 <_fflush_r>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	690b      	ldr	r3, [r1, #16]
 800219c:	4605      	mov	r5, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	b913      	cbnz	r3, 80021a8 <_fflush_r+0x10>
 80021a2:	2500      	movs	r5, #0
 80021a4:	4628      	mov	r0, r5
 80021a6:	bd38      	pop	{r3, r4, r5, pc}
 80021a8:	b118      	cbz	r0, 80021b2 <_fflush_r+0x1a>
 80021aa:	6a03      	ldr	r3, [r0, #32]
 80021ac:	b90b      	cbnz	r3, 80021b2 <_fflush_r+0x1a>
 80021ae:	f7ff f9b1 	bl	8001514 <__sinit>
 80021b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f3      	beq.n	80021a2 <_fflush_r+0xa>
 80021ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80021bc:	07d0      	lsls	r0, r2, #31
 80021be:	d404      	bmi.n	80021ca <_fflush_r+0x32>
 80021c0:	0599      	lsls	r1, r3, #22
 80021c2:	d402      	bmi.n	80021ca <_fflush_r+0x32>
 80021c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021c6:	f7ff fb9c 	bl	8001902 <__retarget_lock_acquire_recursive>
 80021ca:	4628      	mov	r0, r5
 80021cc:	4621      	mov	r1, r4
 80021ce:	f7ff ff63 	bl	8002098 <__sflush_r>
 80021d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021d4:	4605      	mov	r5, r0
 80021d6:	07da      	lsls	r2, r3, #31
 80021d8:	d4e4      	bmi.n	80021a4 <_fflush_r+0xc>
 80021da:	89a3      	ldrh	r3, [r4, #12]
 80021dc:	059b      	lsls	r3, r3, #22
 80021de:	d4e1      	bmi.n	80021a4 <_fflush_r+0xc>
 80021e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021e2:	f7ff fb8f 	bl	8001904 <__retarget_lock_release_recursive>
 80021e6:	e7dd      	b.n	80021a4 <_fflush_r+0xc>

080021e8 <__swhatbuf_r>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	460c      	mov	r4, r1
 80021ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021f0:	4615      	mov	r5, r2
 80021f2:	2900      	cmp	r1, #0
 80021f4:	461e      	mov	r6, r3
 80021f6:	b096      	sub	sp, #88	@ 0x58
 80021f8:	da0c      	bge.n	8002214 <__swhatbuf_r+0x2c>
 80021fa:	89a3      	ldrh	r3, [r4, #12]
 80021fc:	2100      	movs	r1, #0
 80021fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002202:	bf14      	ite	ne
 8002204:	2340      	movne	r3, #64	@ 0x40
 8002206:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800220a:	2000      	movs	r0, #0
 800220c:	6031      	str	r1, [r6, #0]
 800220e:	602b      	str	r3, [r5, #0]
 8002210:	b016      	add	sp, #88	@ 0x58
 8002212:	bd70      	pop	{r4, r5, r6, pc}
 8002214:	466a      	mov	r2, sp
 8002216:	f000 f849 	bl	80022ac <_fstat_r>
 800221a:	2800      	cmp	r0, #0
 800221c:	dbed      	blt.n	80021fa <__swhatbuf_r+0x12>
 800221e:	9901      	ldr	r1, [sp, #4]
 8002220:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002224:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002228:	4259      	negs	r1, r3
 800222a:	4159      	adcs	r1, r3
 800222c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002230:	e7eb      	b.n	800220a <__swhatbuf_r+0x22>

08002232 <__smakebuf_r>:
 8002232:	898b      	ldrh	r3, [r1, #12]
 8002234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002236:	079d      	lsls	r5, r3, #30
 8002238:	4606      	mov	r6, r0
 800223a:	460c      	mov	r4, r1
 800223c:	d507      	bpl.n	800224e <__smakebuf_r+0x1c>
 800223e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002242:	6023      	str	r3, [r4, #0]
 8002244:	6123      	str	r3, [r4, #16]
 8002246:	2301      	movs	r3, #1
 8002248:	6163      	str	r3, [r4, #20]
 800224a:	b003      	add	sp, #12
 800224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224e:	466a      	mov	r2, sp
 8002250:	ab01      	add	r3, sp, #4
 8002252:	f7ff ffc9 	bl	80021e8 <__swhatbuf_r>
 8002256:	9f00      	ldr	r7, [sp, #0]
 8002258:	4605      	mov	r5, r0
 800225a:	4639      	mov	r1, r7
 800225c:	4630      	mov	r0, r6
 800225e:	f7ff fbbd 	bl	80019dc <_malloc_r>
 8002262:	b948      	cbnz	r0, 8002278 <__smakebuf_r+0x46>
 8002264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002268:	059a      	lsls	r2, r3, #22
 800226a:	d4ee      	bmi.n	800224a <__smakebuf_r+0x18>
 800226c:	f023 0303 	bic.w	r3, r3, #3
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	81a3      	strh	r3, [r4, #12]
 8002276:	e7e2      	b.n	800223e <__smakebuf_r+0xc>
 8002278:	89a3      	ldrh	r3, [r4, #12]
 800227a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800227e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002282:	81a3      	strh	r3, [r4, #12]
 8002284:	9b01      	ldr	r3, [sp, #4]
 8002286:	6020      	str	r0, [r4, #0]
 8002288:	b15b      	cbz	r3, 80022a2 <__smakebuf_r+0x70>
 800228a:	4630      	mov	r0, r6
 800228c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002290:	f000 f81e 	bl	80022d0 <_isatty_r>
 8002294:	b128      	cbz	r0, 80022a2 <__smakebuf_r+0x70>
 8002296:	89a3      	ldrh	r3, [r4, #12]
 8002298:	f023 0303 	bic.w	r3, r3, #3
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	81a3      	strh	r3, [r4, #12]
 80022a2:	89a3      	ldrh	r3, [r4, #12]
 80022a4:	431d      	orrs	r5, r3
 80022a6:	81a5      	strh	r5, [r4, #12]
 80022a8:	e7cf      	b.n	800224a <__smakebuf_r+0x18>
	...

080022ac <_fstat_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	2300      	movs	r3, #0
 80022b0:	4d06      	ldr	r5, [pc, #24]	@ (80022cc <_fstat_r+0x20>)
 80022b2:	4604      	mov	r4, r0
 80022b4:	4608      	mov	r0, r1
 80022b6:	4611      	mov	r1, r2
 80022b8:	602b      	str	r3, [r5, #0]
 80022ba:	f7fe f933 	bl	8000524 <_fstat>
 80022be:	1c43      	adds	r3, r0, #1
 80022c0:	d102      	bne.n	80022c8 <_fstat_r+0x1c>
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	b103      	cbz	r3, 80022c8 <_fstat_r+0x1c>
 80022c6:	6023      	str	r3, [r4, #0]
 80022c8:	bd38      	pop	{r3, r4, r5, pc}
 80022ca:	bf00      	nop
 80022cc:	200001c8 	.word	0x200001c8

080022d0 <_isatty_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	2300      	movs	r3, #0
 80022d4:	4d05      	ldr	r5, [pc, #20]	@ (80022ec <_isatty_r+0x1c>)
 80022d6:	4604      	mov	r4, r0
 80022d8:	4608      	mov	r0, r1
 80022da:	602b      	str	r3, [r5, #0]
 80022dc:	f7fe f931 	bl	8000542 <_isatty>
 80022e0:	1c43      	adds	r3, r0, #1
 80022e2:	d102      	bne.n	80022ea <_isatty_r+0x1a>
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	b103      	cbz	r3, 80022ea <_isatty_r+0x1a>
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
 80022ec:	200001c8 	.word	0x200001c8

080022f0 <_sbrk_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	2300      	movs	r3, #0
 80022f4:	4d05      	ldr	r5, [pc, #20]	@ (800230c <_sbrk_r+0x1c>)
 80022f6:	4604      	mov	r4, r0
 80022f8:	4608      	mov	r0, r1
 80022fa:	602b      	str	r3, [r5, #0]
 80022fc:	f7fe f938 	bl	8000570 <_sbrk>
 8002300:	1c43      	adds	r3, r0, #1
 8002302:	d102      	bne.n	800230a <_sbrk_r+0x1a>
 8002304:	682b      	ldr	r3, [r5, #0]
 8002306:	b103      	cbz	r3, 800230a <_sbrk_r+0x1a>
 8002308:	6023      	str	r3, [r4, #0]
 800230a:	bd38      	pop	{r3, r4, r5, pc}
 800230c:	200001c8 	.word	0x200001c8

08002310 <memchr>:
 8002310:	4603      	mov	r3, r0
 8002312:	b510      	push	{r4, lr}
 8002314:	b2c9      	uxtb	r1, r1
 8002316:	4402      	add	r2, r0
 8002318:	4293      	cmp	r3, r2
 800231a:	4618      	mov	r0, r3
 800231c:	d101      	bne.n	8002322 <memchr+0x12>
 800231e:	2000      	movs	r0, #0
 8002320:	e003      	b.n	800232a <memchr+0x1a>
 8002322:	7804      	ldrb	r4, [r0, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	428c      	cmp	r4, r1
 8002328:	d1f6      	bne.n	8002318 <memchr+0x8>
 800232a:	bd10      	pop	{r4, pc}

0800232c <_init>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	bf00      	nop
 8002330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002332:	bc08      	pop	{r3}
 8002334:	469e      	mov	lr, r3
 8002336:	4770      	bx	lr

08002338 <_fini>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr
