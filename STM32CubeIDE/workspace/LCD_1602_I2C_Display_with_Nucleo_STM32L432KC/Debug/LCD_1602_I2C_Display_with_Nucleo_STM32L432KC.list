
LCD_1602_I2C_Display_with_Nucleo_STM32L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004468  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080045f8  080045f8  000055f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046bc  080046bc  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046bc  080046bc  000056bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c4  080046c4  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080046cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000006c  08004738  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004738  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e711  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f6  00000000  00000000  000147ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000168a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  000175e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002083a  00000000  00000000  00018021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fce6  00000000  00000000  0003885b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c26a0  00000000  00000000  00048541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010abe1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b08  00000000  00000000  0010ac24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0010e72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045e0 	.word	0x080045e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080045e0 	.word	0x080045e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HD44780_Init>:
		0b10011, 0b00000 };

uint8_t special2[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01001,
		0b00110, 0b00000 };

void HD44780_Init(uint8_t rows) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 80005a6:	4a38      	ldr	r2, [pc, #224]	@ (8000688 <HD44780_Init+0xec>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	7013      	strb	r3, [r2, #0]

	dpBacklight = LCD_BACKLIGHT;
 80005ac:	4b37      	ldr	r3, [pc, #220]	@ (800068c <HD44780_Init+0xf0>)
 80005ae:	2208      	movs	r2, #8
 80005b0:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005b2:	4b37      	ldr	r3, [pc, #220]	@ (8000690 <HD44780_Init+0xf4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]

	if (dpRows > 1) {
 80005b8:	4b33      	ldr	r3, [pc, #204]	@ (8000688 <HD44780_Init+0xec>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d907      	bls.n	80005d0 <HD44780_Init+0x34>
		dpFunction |= LCD_2LINE;
 80005c0:	4b33      	ldr	r3, [pc, #204]	@ (8000690 <HD44780_Init+0xf4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <HD44780_Init+0xf4>)
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e006      	b.n	80005de <HD44780_Init+0x42>
	} else {
		dpFunction |= LCD_5x10DOTS;
 80005d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <HD44780_Init+0xf4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <HD44780_Init+0xf4>)
 80005dc:	701a      	strb	r2, [r3, #0]
	}

	/* Wait for initialization */
	DelayInit();
 80005de:	f000 fa13 	bl	8000a08 <DelayInit>
	HAL_Delay(50);
 80005e2:	2032      	movs	r0, #50	@ 0x32
 80005e4:	f000 fe1c 	bl	8001220 <HAL_Delay>

	ExpanderWrite(dpBacklight);
 80005e8:	4b28      	ldr	r3, [pc, #160]	@ (800068c <HD44780_Init+0xf0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f9d1 	bl	8000994 <ExpanderWrite>
	HAL_Delay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f6:	f000 fe13 	bl	8001220 <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 80005fa:	2030      	movs	r0, #48	@ 0x30
 80005fc:	f000 f9b9 	bl	8000972 <Write4Bits>
	DelayUS(4500);
 8000600:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000604:	f000 fa2a 	bl	8000a5c <DelayUS>

	Write4Bits(0x03 << 4);
 8000608:	2030      	movs	r0, #48	@ 0x30
 800060a:	f000 f9b2 	bl	8000972 <Write4Bits>
	DelayUS(4500);
 800060e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000612:	f000 fa23 	bl	8000a5c <DelayUS>

	Write4Bits(0x03 << 4);
 8000616:	2030      	movs	r0, #48	@ 0x30
 8000618:	f000 f9ab 	bl	8000972 <Write4Bits>
	DelayUS(4500);
 800061c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000620:	f000 fa1c 	bl	8000a5c <DelayUS>

	Write4Bits(0x02 << 4);
 8000624:	2020      	movs	r0, #32
 8000626:	f000 f9a4 	bl	8000972 <Write4Bits>
	DelayUS(100);
 800062a:	2064      	movs	r0, #100	@ 0x64
 800062c:	f000 fa16 	bl	8000a5c <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000630:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <HD44780_Init+0xf4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f043 0320 	orr.w	r3, r3, #32
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f95c 	bl	80008f8 <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000640:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <HD44780_Init+0xf8>)
 8000642:	2204      	movs	r2, #4
 8000644:	701a      	strb	r2, [r3, #0]
	HD44780_Display();
 8000646:	f000 f88b 	bl	8000760 <HD44780_Display>
	HD44780_Clear();
 800064a:	f000 f82b 	bl	80006a4 <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800064e:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HD44780_Init+0xfc>)
 8000650:	2202      	movs	r2, #2
 8000652:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 8000654:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <HD44780_Init+0xfc>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f94a 	bl	80008f8 <SendCommand>
	DelayUS(4500);
 8000664:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000668:	f000 f9f8 	bl	8000a5c <DelayUS>

	HD44780_CreateSpecialChar(0, special1);
 800066c:	490b      	ldr	r1, [pc, #44]	@ (800069c <HD44780_Init+0x100>)
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f8eb 	bl	800084a <HD44780_CreateSpecialChar>
	HD44780_CreateSpecialChar(1, special2);
 8000674:	490a      	ldr	r1, [pc, #40]	@ (80006a0 <HD44780_Init+0x104>)
 8000676:	2001      	movs	r0, #1
 8000678:	f000 f8e7 	bl	800084a <HD44780_CreateSpecialChar>

	HD44780_Home();
 800067c:	f000 f81d 	bl	80006ba <HD44780_Home>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000008b 	.word	0x2000008b
 800068c:	2000008c 	.word	0x2000008c
 8000690:	20000088 	.word	0x20000088
 8000694:	20000089 	.word	0x20000089
 8000698:	2000008a 	.word	0x2000008a
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008

080006a4 <HD44780_Clear>:

void HD44780_Clear() {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 f925 	bl	80008f8 <SendCommand>
	DelayUS(2000);
 80006ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006b2:	f000 f9d3 	bl	8000a5c <DelayUS>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HD44780_Home>:

void HD44780_Home() {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 80006be:	2002      	movs	r0, #2
 80006c0:	f000 f91a 	bl	80008f8 <SendCommand>
	DelayUS(2000);
 80006c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006c8:	f000 f9c8 	bl	8000a5c <DelayUS>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <HD44780_SetCursor+0x5c>)
 80006e2:	f107 0408 	add.w	r4, r7, #8
 80006e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <HD44780_SetCursor+0x60>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d303      	bcc.n	80006fe <HD44780_SetCursor+0x2e>
		row = dpRows - 1;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <HD44780_SetCursor+0x60>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006fe:	79bb      	ldrb	r3, [r7, #6]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	3318      	adds	r3, #24
 8000704:	443b      	add	r3, r7
 8000706:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800070a:	b2da      	uxtb	r2, r3
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4413      	add	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	b25b      	sxtb	r3, r3
 8000714:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000718:	b25b      	sxtb	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f8eb 	bl	80008f8 <SendCommand>
}
 8000722:	bf00      	nop
 8000724:	371c      	adds	r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	bf00      	nop
 800072c:	080045f8 	.word	0x080045f8
 8000730:	2000008b 	.word	0x2000008b

08000734 <HD44780_NoDisplay>:

void HD44780_NoDisplay() {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	dpControl &= ~LCD_DISPLAYON;
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <HD44780_NoDisplay+0x28>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f023 0304 	bic.w	r3, r3, #4
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HD44780_NoDisplay+0x28>)
 8000744:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HD44780_NoDisplay+0x28>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f8d1 	bl	80008f8 <SendCommand>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000089 	.word	0x20000089

08000760 <HD44780_Display>:

void HD44780_Display() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	dpControl |= LCD_DISPLAYON;
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <HD44780_Display+0x28>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <HD44780_Display+0x28>)
 8000770:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000772:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <HD44780_Display+0x28>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f8bb 	bl	80008f8 <SendCommand>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000089 	.word	0x20000089

0800078c <HD44780_NoCursor>:

void HD44780_NoCursor() {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	dpControl &= ~LCD_CURSORON;
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <HD44780_NoCursor+0x28>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f023 0302 	bic.w	r3, r3, #2
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HD44780_NoCursor+0x28>)
 800079c:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HD44780_NoCursor+0x28>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f8a5 	bl	80008f8 <SendCommand>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000089 	.word	0x20000089

080007b8 <HD44780_Cursor>:

void HD44780_Cursor() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	dpControl |= LCD_CURSORON;
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HD44780_Cursor+0x28>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HD44780_Cursor+0x28>)
 80007c8:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HD44780_Cursor+0x28>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f88f 	bl	80008f8 <SendCommand>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000089 	.word	0x20000089

080007e4 <HD44780_NoBlink>:

void HD44780_NoBlink() {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	dpControl &= ~LCD_BLINKON;
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <HD44780_NoBlink+0x28>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f023 0301 	bic.w	r3, r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HD44780_NoBlink+0x28>)
 80007f4:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007f6:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HD44780_NoBlink+0x28>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f879 	bl	80008f8 <SendCommand>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000089 	.word	0x20000089

08000810 <HD44780_Blink>:

void HD44780_Blink() {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	dpControl |= LCD_BLINKON;
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <HD44780_Blink+0x28>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HD44780_Blink+0x28>)
 8000820:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000822:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HD44780_Blink+0x28>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f863 	bl	80008f8 <SendCommand>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000089 	.word	0x20000089

0800083c <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8000840:	2018      	movs	r0, #24
 8000842:	f000 f859 	bl	80008f8 <SendCommand>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}

0800084a <HD44780_CreateSpecialChar>:
void HD44780_NoAutoScroll(void) {
	dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
	SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 800084a:	b580      	push	{r7, lr}
 800084c:	b084      	sub	sp, #16
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	6039      	str	r1, [r7, #0]
 8000854:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 0307 	and.w	r3, r3, #7
 800085c:	71fb      	strb	r3, [r7, #7]
	SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	b25b      	sxtb	r3, r3
 8000866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800086a:	b25b      	sxtb	r3, r3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f842 	bl	80008f8 <SendCommand>
	for (int i = 0; i < 8; i++) {
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e009      	b.n	800088e <HD44780_CreateSpecialChar+0x44>
		SendChar(charmap[i]);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f846 	bl	8000914 <SendChar>
	for (int i = 0; i < 8; i++) {
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b07      	cmp	r3, #7
 8000892:	ddf2      	ble.n	800087a <HD44780_CreateSpecialChar+0x30>
	}
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
	HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	while (*c)
 80008a6:	e006      	b.n	80008b6 <HD44780_PrintStr+0x18>
		SendChar(*c++);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f82f 	bl	8000914 <SendChar>
	while (*c)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f4      	bne.n	80008a8 <HD44780_PrintStr+0xa>
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <HD44780_NoBacklight>:
		HD44780_Backlight();
	else
		HD44780_NoBacklight();
}

void HD44780_NoBacklight(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	dpBacklight = LCD_NOBACKLIGHT;
 80008cc:	4b03      	ldr	r3, [pc, #12]	@ (80008dc <HD44780_NoBacklight+0x14>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
	ExpanderWrite(0);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f85e 	bl	8000994 <ExpanderWrite>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000008c 	.word	0x2000008c

080008e0 <HD44780_Backlight>:

void HD44780_Backlight(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	dpBacklight = LCD_BACKLIGHT;
 80008e4:	4b03      	ldr	r3, [pc, #12]	@ (80008f4 <HD44780_Backlight+0x14>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	701a      	strb	r2, [r3, #0]
	ExpanderWrite(0);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f852 	bl	8000994 <ExpanderWrite>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000008c 	.word	0x2000008c

080008f8 <SendCommand>:

static void SendCommand(uint8_t cmd) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f812 	bl	8000930 <Send>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <SendChar>:

static void SendChar(uint8_t ch) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f804 	bl	8000930 <Send>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <Send>:

static void Send(uint8_t value, uint8_t mode) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	460a      	mov	r2, r1
 800093a:	71fb      	strb	r3, [r7, #7]
 800093c:	4613      	mov	r3, r2
 800093e:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f023 030f 	bic.w	r3, r3, #15
 8000946:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	4313      	orrs	r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f80b 	bl	8000972 <Write4Bits>
	Write4Bits((lownib) | mode);
 800095c:	7bba      	ldrb	r2, [r7, #14]
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	4313      	orrs	r3, r2
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f804 	bl	8000972 <Write4Bits>
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <Write4Bits>:

static void Write4Bits(uint8_t value) {
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f808 	bl	8000994 <ExpanderWrite>
	PulseEnable(value);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f820 	bl	80009cc <PulseEnable>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <ExpanderWrite+0x30>)
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 80009aa:	f107 020f 	add.w	r2, r7, #15
 80009ae:	230a      	movs	r3, #10
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	214e      	movs	r1, #78	@ 0x4e
 80009b6:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <ExpanderWrite+0x34>)
 80009b8:	f000 ff5a 	bl	8001870 <HAL_I2C_Master_Transmit>
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000008c 	.word	0x2000008c
 80009c8:	20000090 	.word	0x20000090

080009cc <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffd8 	bl	8000994 <ExpanderWrite>
	DelayUS(20);
 80009e4:	2014      	movs	r0, #20
 80009e6:	f000 f839 	bl	8000a5c <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f023 0304 	bic.w	r3, r3, #4
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffce 	bl	8000994 <ExpanderWrite>
	DelayUS(20);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f000 f82f 	bl	8000a5c <DelayUS>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <DelayInit>:

static void DelayInit(void) {
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <DelayInit+0x4c>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <DelayInit+0x4c>)
 8000a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000a16:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <DelayInit+0x4c>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <DelayInit+0x4c>)
 8000a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a22:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <DelayInit+0x50>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <DelayInit+0x50>)
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <DelayInit+0x50>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <DelayInit+0x50>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <DelayInit+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8000a42:	bf00      	nop
	__ASM volatile ("NOP");
 8000a44:	bf00      	nop
	__ASM volatile ("NOP");
 8000a46:	bf00      	nop
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000edf0 	.word	0xe000edf0
 8000a58:	e0001000 	.word	0xe0001000

08000a5c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <DelayUS+0x44>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <DelayUS+0x48>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9a      	lsrs	r2, r3, #18
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <DelayUS+0x4c>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <DelayUS+0x4c>)
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d8f6      	bhi.n	8000a7e <DelayUS+0x22>
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000010 	.word	0x20000010
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	e0001000 	.word	0xe0001000

08000aac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ab2:	f000 fb40 	bl	8001136 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ab6:	f000 f895 	bl	8000be4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aba:	f000 f965 	bl	8000d88 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000abe:	f000 f933 	bl	8000d28 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000ac2:	f000 f8f1 	bl	8000ca8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HD44780_Init(2);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f7ff fd68 	bl	800059c <HD44780_Init>
	HD44780_Clear();
 8000acc:	f7ff fdea 	bl	80006a4 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fdfc 	bl	80006d0 <HD44780_SetCursor>
	HD44780_PrintStr("HELLO");
 8000ad8:	483e      	ldr	r0, [pc, #248]	@ (8000bd4 <main+0x128>)
 8000ada:	f7ff fee0 	bl	800089e <HD44780_PrintStr>
	HD44780_SetCursor(10, 1);
 8000ade:	2101      	movs	r1, #1
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	f7ff fdf5 	bl	80006d0 <HD44780_SetCursor>
	HD44780_PrintStr("WORLD");
 8000ae6:	483c      	ldr	r0, [pc, #240]	@ (8000bd8 <main+0x12c>)
 8000ae8:	f7ff fed9 	bl	800089e <HD44780_PrintStr>
	HAL_Delay(2000);
 8000aec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000af0:	f000 fb96 	bl	8001220 <HAL_Delay>

	HD44780_Clear();
 8000af4:	f7ff fdd6 	bl	80006a4 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fde8 	bl	80006d0 <HD44780_SetCursor>
	HD44780_PrintStr("HELLO");
 8000b00:	4834      	ldr	r0, [pc, #208]	@ (8000bd4 <main+0x128>)
 8000b02:	f7ff fecc 	bl	800089e <HD44780_PrintStr>
	HAL_Delay(2000);
 8000b06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b0a:	f000 fb89 	bl	8001220 <HAL_Delay>
	HD44780_NoBacklight();
 8000b0e:	f7ff fedb 	bl	80008c8 <HD44780_NoBacklight>
	HAL_Delay(2000);
 8000b12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b16:	f000 fb83 	bl	8001220 <HAL_Delay>
	HD44780_Backlight();
 8000b1a:	f7ff fee1 	bl	80008e0 <HD44780_Backlight>

	HAL_Delay(2000);
 8000b1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b22:	f000 fb7d 	bl	8001220 <HAL_Delay>
	HD44780_Cursor();
 8000b26:	f7ff fe47 	bl	80007b8 <HD44780_Cursor>
	HAL_Delay(2000);
 8000b2a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b2e:	f000 fb77 	bl	8001220 <HAL_Delay>
	HD44780_Blink();
 8000b32:	f7ff fe6d 	bl	8000810 <HD44780_Blink>
	HAL_Delay(5000);
 8000b36:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b3a:	f000 fb71 	bl	8001220 <HAL_Delay>
	HD44780_NoBlink();
 8000b3e:	f7ff fe51 	bl	80007e4 <HD44780_NoBlink>
	HAL_Delay(2000);
 8000b42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b46:	f000 fb6b 	bl	8001220 <HAL_Delay>
	HD44780_NoCursor();
 8000b4a:	f7ff fe1f 	bl	800078c <HD44780_NoCursor>
	HAL_Delay(2000);
 8000b4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b52:	f000 fb65 	bl	8001220 <HAL_Delay>

	HD44780_NoDisplay();
 8000b56:	f7ff fded 	bl	8000734 <HD44780_NoDisplay>
	HAL_Delay(2000);
 8000b5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b5e:	f000 fb5f 	bl	8001220 <HAL_Delay>
	HD44780_Display();
 8000b62:	f7ff fdfd 	bl	8000760 <HD44780_Display>

	HD44780_Clear();
 8000b66:	f7ff fd9d 	bl	80006a4 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fdaf 	bl	80006d0 <HD44780_SetCursor>
	HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 8000b72:	481a      	ldr	r0, [pc, #104]	@ (8000bdc <main+0x130>)
 8000b74:	f7ff fe93 	bl	800089e <HD44780_PrintStr>
	//int x;
	for (int x = 0; x < 40; x = x + 1) {
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	e008      	b.n	8000b90 <main+0xe4>
		HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000b7e:	f7ff fe5d 	bl	800083c <HD44780_ScrollDisplayLeft>
		HAL_Delay(500);
 8000b82:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b86:	f000 fb4b 	bl	8001220 <HAL_Delay>
	for (int x = 0; x < 40; x = x + 1) {
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b27      	cmp	r3, #39	@ 0x27
 8000b94:	ddf3      	ble.n	8000b7e <main+0xd2>
	}

	char snum[5];
	for (int x = 1; x <= 200; x++) {
 8000b96:	2301      	movs	r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	e016      	b.n	8000bca <main+0x11e>
		// itoa(x, snum, 10);
		snprintf(snum, sizeof(snum), "%d", x);
 8000b9c:	4638      	mov	r0, r7
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8000be0 <main+0x134>)
 8000ba2:	2105      	movs	r1, #5
 8000ba4:	f003 f868 	bl	8003c78 <sniprintf>
		HD44780_Clear();
 8000ba8:	f7ff fd7c 	bl	80006a4 <HD44780_Clear>
		HD44780_SetCursor(0, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fd8e 	bl	80006d0 <HD44780_SetCursor>
		HD44780_PrintStr(snum);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe71 	bl	800089e <HD44780_PrintStr>
		HAL_Delay(1000);
 8000bbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc0:	f000 fb2e 	bl	8001220 <HAL_Delay>
	for (int x = 1; x <= 200; x++) {
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	2bc8      	cmp	r3, #200	@ 0xc8
 8000bce:	dde5      	ble.n	8000b9c <main+0xf0>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <main+0x124>
 8000bd4:	08004608 	.word	0x08004608
 8000bd8:	08004610 	.word	0x08004610
 8000bdc:	08004618 	.word	0x08004618
 8000be0:	0800463c 	.word	0x0800463c

08000be4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b096      	sub	sp, #88	@ 0x58
 8000be8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2244      	movs	r2, #68	@ 0x44
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 f876 	bl	8003ce4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c0a:	f001 fa19 	bl	8002040 <HAL_PWREx_ControlVoltageScaling>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000c14:	f000 f902 	bl	8000e1c <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000c18:	f001 f9f4 	bl	8002004 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <SystemClock_Config+0xc0>)
 8000c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c22:	4a20      	ldr	r2, [pc, #128]	@ (8000ca4 <SystemClock_Config+0xc0>)
 8000c24:	f023 0318 	bic.w	r3, r3, #24
 8000c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000c2c:	2314      	movs	r3, #20
 8000c2e:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c3c:	2360      	movs	r3, #96	@ 0x60
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c40:	2302      	movs	r3, #2
 8000c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c44:	2301      	movs	r3, #1
 8000c46:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c50:	2307      	movs	r3, #7
 8000c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4618      	mov	r0, r3
 8000c62:	f001 fa43 	bl	80020ec <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x8c>
		Error_Handler();
 8000c6c:	f000 f8d6 	bl	8000e1c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c70:	230f      	movs	r3, #15
 8000c72:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2303      	movs	r3, #3
 8000c76:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000c84:	463b      	mov	r3, r7
 8000c86:	2101      	movs	r1, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fe43 	bl	8002914 <HAL_RCC_ClockConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0xb4>
		Error_Handler();
 8000c94:	f000 f8c2 	bl	8000e1c <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000c98:	f002 fa56 	bl	8003148 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c9c:	bf00      	nop
 8000c9e:	3758      	adds	r7, #88	@ 0x58
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <MX_I2C1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B07CB4;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <MX_I2C1_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ce2:	480e      	ldr	r0, [pc, #56]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000ce4:	f000 fd28 	bl	8001738 <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000cee:	f000 f895 	bl	8000e1c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000cf6:	f001 f8ed 	bl	8001ed4 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000d00:	f000 f88c 	bl	8000e1c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_I2C1_Init+0x74>)
 8000d08:	f001 f92f 	bl	8001f6a <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000d12:	f000 f883 	bl	8000e1c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000090 	.word	0x20000090
 8000d20:	40005400 	.word	0x40005400
 8000d24:	00b07cb4 	.word	0x00b07cb4

08000d28 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d2e:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <MX_USART2_UART_Init+0x5c>)
 8000d30:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_USART2_UART_Init+0x58>)
 8000d6c:	f002 faee 	bl	800334c <HAL_UART_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000d76:	f000 f851 	bl	8000e1c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000e4 	.word	0x200000e4
 8000d84:	40004400 	.word	0x40004400

08000d88 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_GPIO_Init+0x8c>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e14 <MX_GPIO_Init+0x8c>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_GPIO_Init+0x8c>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_GPIO_Init+0x8c>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a16      	ldr	r2, [pc, #88]	@ (8000e14 <MX_GPIO_Init+0x8c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_GPIO_Init+0x8c>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_GPIO_Init+0x8c>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a10      	ldr	r2, [pc, #64]	@ (8000e14 <MX_GPIO_Init+0x8c>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_GPIO_Init+0x8c>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <MX_GPIO_Init+0x90>)
 8000dec:	f000 fc8c 	bl	8001708 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8000df0:	2308      	movs	r3, #8
 8000df2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <MX_GPIO_Init+0x90>)
 8000e08:	f000 fb14 	bl	8001434 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400

08000e1c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <Error_Handler+0x8>

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09e      	sub	sp, #120	@ 0x78
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2254      	movs	r2, #84	@ 0x54
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 ff27 	bl	8003ce4 <memset>
  if(hi2c->Instance==I2C1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <HAL_I2C_MspInit+0xa8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d137      	bne.n	8000f10 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ea0:	2340      	movs	r3, #64	@ 0x40
 8000ea2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 ff55 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000eb8:	f7ff ffb0 	bl	8000e1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_I2C_MspInit+0xac>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <HAL_I2C_MspInit+0xac>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_I2C_MspInit+0xac>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ed4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ed8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eda:	2312      	movs	r3, #18
 8000edc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef4:	f000 fa9e 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_I2C_MspInit+0xac>)
 8000efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_I2C_MspInit+0xac>)
 8000efe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_I2C_MspInit+0xac>)
 8000f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f10:	bf00      	nop
 8000f12:	3778      	adds	r7, #120	@ 0x78
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b09e      	sub	sp, #120	@ 0x78
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	2254      	movs	r2, #84	@ 0x54
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 fecf 	bl	8003ce4 <memset>
  if(huart->Instance==USART2)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a28      	ldr	r2, [pc, #160]	@ (8000fec <HAL_UART_MspInit+0xcc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d148      	bne.n	8000fe2 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fefd 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff ff58 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <HAL_UART_MspInit+0xd0>)
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f70:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_UART_MspInit+0xd0>)
 8000f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_UART_MspInit+0xd0>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <HAL_UART_MspInit+0xd0>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <HAL_UART_MspInit+0xd0>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <HAL_UART_MspInit+0xd0>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fac:	2307      	movs	r3, #7
 8000fae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fba:	f000 fa3b 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fc2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f000 fa29 	bl	8001434 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3778      	adds	r7, #120	@ 0x78
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40004400 	.word	0x40004400
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104a:	f000 f8c9 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f002 fe36 	bl	8003cf4 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000c000 	.word	0x2000c000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	2000016c 	.word	0x2000016c
 80010bc:	200002c0 	.word	0x200002c0

080010c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800111c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e8:	f7ff ffea 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	@ (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	@ (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	@ (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001112:	f002 fdf5 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001116:	f7ff fcc9 	bl	8000aac <main>

0800111a <LoopForever>:

LoopForever:
    b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001128:	080046cc 	.word	0x080046cc
  ldr r2, =_sbss
 800112c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001130:	200002bc 	.word	0x200002bc

08001134 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_IRQHandler>

08001136 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f943 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f80e 	bl	8001168 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e001      	b.n	800115c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001158:	f7ff fe66 	bl	8000e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800115c:	79fb      	ldrb	r3, [r7, #7]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800117c:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_InitTick+0x70>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f941 	bl	800141a <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d809      	bhi.n	80011b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f919 	bl	80013e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_InitTick+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e001      	b.n	80011c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000018 	.word	0x20000018
 80011d8:	20000010 	.word	0x20000010
 80011dc:	20000014 	.word	0x20000014

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000018 	.word	0x20000018
 8001204:	20000170 	.word	0x20000170

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000170 	.word	0x20000170

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000018 	.word	0x20000018

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	@ (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	@ (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	@ 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff8e 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff47 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff5c 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff8e 	bl	8001320 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5d 	bl	80012cc <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffb0 	bl	8001388 <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e148      	b.n	80016d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 813a 	beq.w	80016d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d005      	beq.n	8001474 <HAL_GPIO_Init+0x40>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d130      	bne.n	80014d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014aa:	2201      	movs	r2, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	f003 0201 	and.w	r2, r3, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d017      	beq.n	8001512 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8094 	beq.w	80016d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b52      	ldr	r3, [pc, #328]	@ (80016f4 <HAL_GPIO_Init+0x2c0>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ac:	4a51      	ldr	r2, [pc, #324]	@ (80016f4 <HAL_GPIO_Init+0x2c0>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80015b4:	4b4f      	ldr	r3, [pc, #316]	@ (80016f4 <HAL_GPIO_Init+0x2c0>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c0:	4a4d      	ldr	r2, [pc, #308]	@ (80016f8 <HAL_GPIO_Init+0x2c4>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015ea:	d00d      	beq.n	8001608 <HAL_GPIO_Init+0x1d4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a43      	ldr	r2, [pc, #268]	@ (80016fc <HAL_GPIO_Init+0x2c8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_Init+0x1d0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a42      	ldr	r2, [pc, #264]	@ (8001700 <HAL_GPIO_Init+0x2cc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_GPIO_Init+0x1cc>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e004      	b.n	800160a <HAL_GPIO_Init+0x1d6>
 8001600:	2307      	movs	r3, #7
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x1d6>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_GPIO_Init+0x1d6>
 8001608:	2300      	movs	r3, #0
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	f002 0203 	and.w	r2, r2, #3
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	4093      	lsls	r3, r2
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800161a:	4937      	ldr	r1, [pc, #220]	@ (80016f8 <HAL_GPIO_Init+0x2c4>)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3302      	adds	r3, #2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001628:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800164c:	4a2d      	ldr	r2, [pc, #180]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001652:	4b2c      	ldr	r3, [pc, #176]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001676:	4a23      	ldr	r2, [pc, #140]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016a0:	4a18      	ldr	r2, [pc, #96]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016a6:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f aeaf 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001724:	e002      	b.n	800172c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e08d      	b.n	8001866 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d106      	bne.n	8001764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fb86 	bl	8000e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2224      	movs	r2, #36	@ 0x24
 8001768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001788:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001798:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d107      	bne.n	80017b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	e006      	b.n	80017c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d108      	bne.n	80017da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	e007      	b.n	80017ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800180c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69d9      	ldr	r1, [r3, #28]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1a      	ldr	r2, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	461a      	mov	r2, r3
 800187c:	460b      	mov	r3, r1
 800187e:	817b      	strh	r3, [r7, #10]
 8001880:	4613      	mov	r3, r2
 8001882:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b20      	cmp	r3, #32
 800188e:	f040 80fd 	bne.w	8001a8c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_I2C_Master_Transmit+0x30>
 800189c:	2302      	movs	r3, #2
 800189e:	e0f6      	b.n	8001a8e <HAL_I2C_Master_Transmit+0x21e>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018a8:	f7ff fcae 	bl	8001208 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2319      	movs	r3, #25
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 f914 	bl	8001ae8 <I2C_WaitOnFlagUntilTimeout>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0e1      	b.n	8001a8e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2221      	movs	r2, #33	@ 0x21
 80018ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2210      	movs	r2, #16
 80018d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	893a      	ldrh	r2, [r7, #8]
 80018ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2bff      	cmp	r3, #255	@ 0xff
 80018fa:	d906      	bls.n	800190a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	22ff      	movs	r2, #255	@ 0xff
 8001900:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001902:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e007      	b.n	800191a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001918:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191e:	2b00      	cmp	r3, #0
 8001920:	d024      	beq.n	800196c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800193c:	b29b      	uxth	r3, r3
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001956:	b2db      	uxtb	r3, r3
 8001958:	3301      	adds	r3, #1
 800195a:	b2da      	uxtb	r2, r3
 800195c:	8979      	ldrh	r1, [r7, #10]
 800195e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a98 <HAL_I2C_Master_Transmit+0x228>)
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 fa83 	bl	8001e70 <I2C_TransferConfig>
 800196a:	e066      	b.n	8001a3a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001970:	b2da      	uxtb	r2, r3
 8001972:	8979      	ldrh	r1, [r7, #10]
 8001974:	4b48      	ldr	r3, [pc, #288]	@ (8001a98 <HAL_I2C_Master_Transmit+0x228>)
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fa78 	bl	8001e70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001980:	e05b      	b.n	8001a3a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	6a39      	ldr	r1, [r7, #32]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f907 	bl	8001b9a <I2C_WaitOnTXISFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07b      	b.n	8001a8e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d034      	beq.n	8001a3a <HAL_I2C_Master_Transmit+0x1ca>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d130      	bne.n	8001a3a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	2200      	movs	r2, #0
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f880 	bl	8001ae8 <I2C_WaitOnFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e04d      	b.n	8001a8e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2bff      	cmp	r3, #255	@ 0xff
 80019fa:	d90e      	bls.n	8001a1a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	22ff      	movs	r2, #255	@ 0xff
 8001a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	8979      	ldrh	r1, [r7, #10]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fa2c 	bl	8001e70 <I2C_TransferConfig>
 8001a18:	e00f      	b.n	8001a3a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	8979      	ldrh	r1, [r7, #10]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 fa1b 	bl	8001e70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d19e      	bne.n	8001982 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	6a39      	ldr	r1, [r7, #32]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f8ed 	bl	8001c28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e01a      	b.n	8001a8e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6859      	ldr	r1, [r3, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_I2C_Master_Transmit+0x22c>)
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e000      	b.n	8001a8e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001a8c:	2302      	movs	r3, #2
  }
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	80002000 	.word	0x80002000
 8001a9c:	fe00e800 	.word	0xfe00e800

08001aa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d103      	bne.n	8001abe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d007      	beq.n	8001adc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	619a      	str	r2, [r3, #24]
  }
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af8:	e03b      	b.n	8001b72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f8d6 	bl	8001cb0 <I2C_IsErrorOccurred>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e041      	b.n	8001b92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d02d      	beq.n	8001b72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b16:	f7ff fb77 	bl	8001208 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d302      	bcc.n	8001b2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d122      	bne.n	8001b72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4013      	ands	r3, r2
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d113      	bne.n	8001b72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f043 0220 	orr.w	r2, r3, #32
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	bf0c      	ite	eq
 8001b82:	2301      	moveq	r3, #1
 8001b84:	2300      	movne	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d0b4      	beq.n	8001afa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ba6:	e033      	b.n	8001c10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f87f 	bl	8001cb0 <I2C_IsErrorOccurred>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e031      	b.n	8001c20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d025      	beq.n	8001c10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc4:	f7ff fb20 	bl	8001208 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d302      	bcc.n	8001bda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d11a      	bne.n	8001c10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d013      	beq.n	8001c10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	f043 0220 	orr.w	r2, r3, #32
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e007      	b.n	8001c20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d1c4      	bne.n	8001ba8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c34:	e02f      	b.n	8001c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f838 	bl	8001cb0 <I2C_IsErrorOccurred>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e02d      	b.n	8001ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4a:	f7ff fadd 	bl	8001208 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d302      	bcc.n	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d11a      	bne.n	8001c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d013      	beq.n	8001c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f043 0220 	orr.w	r2, r3, #32
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e007      	b.n	8001ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d1c8      	bne.n	8001c36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	@ 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d068      	beq.n	8001dae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ce4:	e049      	b.n	8001d7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d045      	beq.n	8001d7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cee:	f7ff fa8b 	bl	8001208 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d302      	bcc.n	8001d04 <I2C_IsErrorOccurred+0x54>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d13a      	bne.n	8001d7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d26:	d121      	bne.n	8001d6c <I2C_IsErrorOccurred+0xbc>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d2e:	d01d      	beq.n	8001d6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d30:	7cfb      	ldrb	r3, [r7, #19]
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d01a      	beq.n	8001d6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d46:	f7ff fa5f 	bl	8001208 <HAL_GetTick>
 8001d4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d4c:	e00e      	b.n	8001d6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d4e:	f7ff fa5b 	bl	8001208 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b19      	cmp	r3, #25
 8001d5a:	d907      	bls.n	8001d6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f043 0320 	orr.w	r3, r3, #32
 8001d62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d6a:	e006      	b.n	8001d7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d1e9      	bne.n	8001d4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d003      	beq.n	8001d90 <I2C_IsErrorOccurred+0xe0>
 8001d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0aa      	beq.n	8001ce6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001df2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00b      	beq.n	8001e1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01c      	beq.n	8001e5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fe3b 	bl	8001aa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <I2C_IsErrorOccurred+0x1bc>)
 8001e36:	400b      	ands	r3, r1
 8001e38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3728      	adds	r7, #40	@ 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	fe00e800 	.word	0xfe00e800

08001e70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	817b      	strh	r3, [r7, #10]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e82:	897b      	ldrh	r3, [r7, #10]
 8001e84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e88:	7a7b      	ldrb	r3, [r7, #9]
 8001e8a:	041b      	lsls	r3, r3, #16
 8001e8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	0d5b      	lsrs	r3, r3, #21
 8001eaa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001eae:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <I2C_TransferConfig+0x60>)
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	ea02 0103 	and.w	r1, r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	03ff63ff 	.word	0x03ff63ff

08001ed4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d138      	bne.n	8001f5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e032      	b.n	8001f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	@ 0x24
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d139      	bne.n	8001ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e033      	b.n	8001ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2224      	movs	r2, #36	@ 0x24
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
  }
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40007000 	.word	0x40007000

08002024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <HAL_PWREx_GetVoltageRange+0x18>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000

08002040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800204e:	d130      	bne.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002050:	4b23      	ldr	r3, [pc, #140]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800205c:	d038      	beq.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800205e:	4b20      	ldr	r3, [pc, #128]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002066:	4a1e      	ldr	r2, [pc, #120]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002068:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800206c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800206e:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2232      	movs	r2, #50	@ 0x32
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	4a1b      	ldr	r2, [pc, #108]	@ (80020e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0c9b      	lsrs	r3, r3, #18
 8002080:	3301      	adds	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002084:	e002      	b.n	800208c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3b01      	subs	r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002098:	d102      	bne.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f2      	bne.n	8002086 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a0:	4b0f      	ldr	r3, [pc, #60]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ac:	d110      	bne.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e00f      	b.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020b2:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020be:	d007      	beq.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020c8:	4a05      	ldr	r2, [pc, #20]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40007000 	.word	0x40007000
 80020e4:	20000010 	.word	0x20000010
 80020e8:	431bde83 	.word	0x431bde83

080020ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f000 bc02 	b.w	8002904 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002100:	4b96      	ldr	r3, [pc, #600]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210a:	4b94      	ldr	r3, [pc, #592]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80e4 	beq.w	80022ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_RCC_OscConfig+0x4c>
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2b0c      	cmp	r3, #12
 800212c:	f040 808b 	bne.w	8002246 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b01      	cmp	r3, #1
 8002134:	f040 8087 	bne.w	8002246 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002138:	4b88      	ldr	r3, [pc, #544]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_OscConfig+0x64>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e3d9      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1a      	ldr	r2, [r3, #32]
 8002154:	4b81      	ldr	r3, [pc, #516]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_RCC_OscConfig+0x7e>
 8002160:	4b7e      	ldr	r3, [pc, #504]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002168:	e005      	b.n	8002176 <HAL_RCC_OscConfig+0x8a>
 800216a:	4b7c      	ldr	r3, [pc, #496]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 800216c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002176:	4293      	cmp	r3, r2
 8002178:	d223      	bcs.n	80021c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fd8c 	bl	8002c9c <RCC_SetFlashLatencyFromMSIRange>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e3ba      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218e:	4b73      	ldr	r3, [pc, #460]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a72      	ldr	r2, [pc, #456]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b70      	ldr	r3, [pc, #448]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	496d      	ldr	r1, [pc, #436]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ac:	4b6b      	ldr	r3, [pc, #428]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	4968      	ldr	r1, [pc, #416]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e025      	b.n	800220e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c2:	4b66      	ldr	r3, [pc, #408]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a65      	ldr	r2, [pc, #404]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b63      	ldr	r3, [pc, #396]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4960      	ldr	r1, [pc, #384]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e0:	4b5e      	ldr	r3, [pc, #376]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	495b      	ldr	r1, [pc, #364]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fd4c 	bl	8002c9c <RCC_SetFlashLatencyFromMSIRange>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e37a      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800220e:	f000 fc81 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002212:	4602      	mov	r2, r0
 8002214:	4b51      	ldr	r3, [pc, #324]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	4950      	ldr	r1, [pc, #320]	@ (8002360 <HAL_RCC_OscConfig+0x274>)
 8002220:	5ccb      	ldrb	r3, [r1, r3]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a4e      	ldr	r2, [pc, #312]	@ (8002364 <HAL_RCC_OscConfig+0x278>)
 800222c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800222e:	4b4e      	ldr	r3, [pc, #312]	@ (8002368 <HAL_RCC_OscConfig+0x27c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff98 	bl	8001168 <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d052      	beq.n	80022e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	e35e      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d032      	beq.n	80022b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800224e:	4b43      	ldr	r3, [pc, #268]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a42      	ldr	r2, [pc, #264]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800225a:	f7fe ffd5 	bl	8001208 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002262:	f7fe ffd1 	bl	8001208 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e347      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002274:	4b39      	ldr	r3, [pc, #228]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002280:	4b36      	ldr	r3, [pc, #216]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a35      	ldr	r2, [pc, #212]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002286:	f043 0308 	orr.w	r3, r3, #8
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b33      	ldr	r3, [pc, #204]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4930      	ldr	r1, [pc, #192]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229e:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	492b      	ldr	r1, [pc, #172]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
 80022b2:	e01a      	b.n	80022ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b4:	4b29      	ldr	r3, [pc, #164]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a28      	ldr	r2, [pc, #160]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022c0:	f7fe ffa2 	bl	8001208 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c8:	f7fe ff9e 	bl	8001208 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e314      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022da:	4b20      	ldr	r3, [pc, #128]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1dc>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d073      	beq.n	80023de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_OscConfig+0x21c>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d10e      	bne.n	8002320 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d10b      	bne.n	8002320 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	4b14      	ldr	r3, [pc, #80]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d063      	beq.n	80023dc <HAL_RCC_OscConfig+0x2f0>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d15f      	bne.n	80023dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e2f1      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002328:	d106      	bne.n	8002338 <HAL_RCC_OscConfig+0x24c>
 800232a:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a0b      	ldr	r2, [pc, #44]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e025      	b.n	8002384 <HAL_RCC_OscConfig+0x298>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002340:	d114      	bne.n	800236c <HAL_RCC_OscConfig+0x280>
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a05      	ldr	r2, [pc, #20]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a02      	ldr	r2, [pc, #8]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e013      	b.n	8002384 <HAL_RCC_OscConfig+0x298>
 800235c:	40021000 	.word	0x40021000
 8002360:	08004640 	.word	0x08004640
 8002364:	20000010 	.word	0x20000010
 8002368:	20000014 	.word	0x20000014
 800236c:	4ba0      	ldr	r3, [pc, #640]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a9f      	ldr	r2, [pc, #636]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b9d      	ldr	r3, [pc, #628]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a9c      	ldr	r2, [pc, #624]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe ff3c 	bl	8001208 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe ff38 	bl	8001208 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e2ae      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a6:	4b92      	ldr	r3, [pc, #584]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x2a8>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe ff28 	bl	8001208 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe ff24 	bl	8001208 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e29a      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ce:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x2d0>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d060      	beq.n	80024ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_OscConfig+0x310>
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d119      	bne.n	800242a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d116      	bne.n	800242a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023fc:	4b7c      	ldr	r3, [pc, #496]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_OscConfig+0x328>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e277      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b76      	ldr	r3, [pc, #472]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	4973      	ldr	r1, [pc, #460]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002428:	e040      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d023      	beq.n	800247a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002432:	4b6f      	ldr	r3, [pc, #444]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a6e      	ldr	r2, [pc, #440]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe fee3 	bl	8001208 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002446:	f7fe fedf 	bl	8001208 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e255      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002458:	4b65      	ldr	r3, [pc, #404]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b62      	ldr	r3, [pc, #392]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	495f      	ldr	r1, [pc, #380]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
 8002478:	e018      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247a:	4b5d      	ldr	r3, [pc, #372]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a5c      	ldr	r2, [pc, #368]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe febf 	bl	8001208 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248e:	f7fe febb 	bl	8001208 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e231      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a0:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d03c      	beq.n	8002532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01c      	beq.n	80024fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c0:	4b4b      	ldr	r3, [pc, #300]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80024c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c6:	4a4a      	ldr	r2, [pc, #296]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7fe fe9a 	bl	8001208 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7fe fe96 	bl	8001208 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e20c      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ea:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80024ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ef      	beq.n	80024d8 <HAL_RCC_OscConfig+0x3ec>
 80024f8:	e01b      	b.n	8002532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fa:	4b3d      	ldr	r3, [pc, #244]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80024fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002500:	4a3b      	ldr	r2, [pc, #236]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7fe fe7d 	bl	8001208 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe fe79 	bl	8001208 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e1ef      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002524:	4b32      	ldr	r3, [pc, #200]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1ef      	bne.n	8002512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80a6 	beq.w	800268c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002544:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	4a26      	ldr	r2, [pc, #152]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800255a:	6593      	str	r3, [r2, #88]	@ 0x58
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002568:	2301      	movs	r3, #1
 800256a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256c:	4b21      	ldr	r3, [pc, #132]	@ (80025f4 <HAL_RCC_OscConfig+0x508>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d118      	bne.n	80025aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002578:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <HAL_RCC_OscConfig+0x508>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1d      	ldr	r2, [pc, #116]	@ (80025f4 <HAL_RCC_OscConfig+0x508>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002584:	f7fe fe40 	bl	8001208 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258c:	f7fe fe3c 	bl	8001208 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1b2      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <HAL_RCC_OscConfig+0x508>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4d8>
 80025b2:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b8:	4a0d      	ldr	r2, [pc, #52]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c2:	e029      	b.n	8002618 <HAL_RCC_OscConfig+0x52c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d115      	bne.n	80025f8 <HAL_RCC_OscConfig+0x50c>
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d2:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e2:	4a03      	ldr	r2, [pc, #12]	@ (80025f0 <HAL_RCC_OscConfig+0x504>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ec:	e014      	b.n	8002618 <HAL_RCC_OscConfig+0x52c>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
 80025f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fe:	4a99      	ldr	r2, [pc, #612]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002608:	4b96      	ldr	r3, [pc, #600]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260e:	4a95      	ldr	r2, [pc, #596]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d016      	beq.n	800264e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fdf2 	bl	8001208 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fdee 	bl	8001208 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e162      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263e:	4b89      	ldr	r3, [pc, #548]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ed      	beq.n	8002628 <HAL_RCC_OscConfig+0x53c>
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7fe fddb 	bl	8001208 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fdd7 	bl	8001208 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e14b      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800266c:	4b7d      	ldr	r3, [pc, #500]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ed      	bne.n	8002656 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267a:	7ffb      	ldrb	r3, [r7, #31]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002680:	4b78      	ldr	r3, [pc, #480]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	4a77      	ldr	r2, [pc, #476]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800268a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03c      	beq.n	8002712 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01c      	beq.n	80026da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026a0:	4b70      	ldr	r3, [pc, #448]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80026a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe fdaa 	bl	8001208 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b8:	f7fe fda6 	bl	8001208 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e11c      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ca:	4b66      	ldr	r3, [pc, #408]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80026cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <HAL_RCC_OscConfig+0x5cc>
 80026d8:	e01b      	b.n	8002712 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026da:	4b62      	ldr	r3, [pc, #392]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80026dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026e0:	4a60      	ldr	r2, [pc, #384]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fd8d 	bl	8001208 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026f2:	f7fe fd89 	bl	8001208 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e0ff      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002704:	4b57      	ldr	r3, [pc, #348]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ef      	bne.n	80026f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80f3 	beq.w	8002902 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	2b02      	cmp	r3, #2
 8002722:	f040 80c9 	bne.w	80028b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002726:	4b4f      	ldr	r3, [pc, #316]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0203 	and.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002736:	429a      	cmp	r2, r3
 8002738:	d12c      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002744:	3b01      	subs	r3, #1
 8002746:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d123      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002756:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d11b      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002766:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d113      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	3b01      	subs	r3, #1
 800277a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d109      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d06b      	beq.n	800286c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d062      	beq.n	8002860 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800279a:	4b32      	ldr	r3, [pc, #200]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0ac      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80027b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027b6:	f7fe fd27 	bl	8001208 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe fd23 	bl	8001208 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e099      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d0:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027dc:	4b21      	ldr	r3, [pc, #132]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	4b21      	ldr	r3, [pc, #132]	@ (8002868 <HAL_RCC_OscConfig+0x77c>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027ec:	3a01      	subs	r2, #1
 80027ee:	0112      	lsls	r2, r2, #4
 80027f0:	4311      	orrs	r1, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027f6:	0212      	lsls	r2, r2, #8
 80027f8:	4311      	orrs	r1, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027fe:	0852      	lsrs	r2, r2, #1
 8002800:	3a01      	subs	r2, #1
 8002802:	0552      	lsls	r2, r2, #21
 8002804:	4311      	orrs	r1, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800280a:	0852      	lsrs	r2, r2, #1
 800280c:	3a01      	subs	r2, #1
 800280e:	0652      	lsls	r2, r2, #25
 8002810:	4311      	orrs	r1, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002816:	06d2      	lsls	r2, r2, #27
 8002818:	430a      	orrs	r2, r1
 800281a:	4912      	ldr	r1, [pc, #72]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 800281c:	4313      	orrs	r3, r2
 800281e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002820:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0f      	ldr	r2, [pc, #60]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800282a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800282c:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a0c      	ldr	r2, [pc, #48]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002836:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002838:	f7fe fce6 	bl	8001208 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fce2 	bl	8001208 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e058      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002852:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <HAL_RCC_OscConfig+0x778>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800285e:	e050      	b.n	8002902 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e04f      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
 8002864:	40021000 	.word	0x40021000
 8002868:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286c:	4b27      	ldr	r3, [pc, #156]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d144      	bne.n	8002902 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002878:	4b24      	ldr	r3, [pc, #144]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a23      	ldr	r2, [pc, #140]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002882:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002884:	4b21      	ldr	r3, [pc, #132]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a20      	ldr	r2, [pc, #128]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 800288a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800288e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002890:	f7fe fcba 	bl	8001208 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fcb6 	bl	8001208 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e02c      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	4b18      	ldr	r3, [pc, #96]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x7ac>
 80028b6:	e024      	b.n	8002902 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d01f      	beq.n	80028fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b13      	ldr	r3, [pc, #76]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a12      	ldr	r2, [pc, #72]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 80028c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fc9d 	bl	8001208 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d2:	f7fe fc99 	bl	8001208 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e00f      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e4:	4b09      	ldr	r3, [pc, #36]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	4905      	ldr	r1, [pc, #20]	@ (800290c <HAL_RCC_OscConfig+0x820>)
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_RCC_OscConfig+0x824>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	60cb      	str	r3, [r1, #12]
 80028fc:	e001      	b.n	8002902 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	feeefffc 	.word	0xfeeefffc

08002914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0e7      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b75      	ldr	r3, [pc, #468]	@ (8002b00 <HAL_RCC_ClockConfig+0x1ec>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b72      	ldr	r3, [pc, #456]	@ (8002b00 <HAL_RCC_ClockConfig+0x1ec>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4970      	ldr	r1, [pc, #448]	@ (8002b00 <HAL_RCC_ClockConfig+0x1ec>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b6e      	ldr	r3, [pc, #440]	@ (8002b00 <HAL_RCC_ClockConfig+0x1ec>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0cf      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d010      	beq.n	8002986 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	4b66      	ldr	r3, [pc, #408]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002970:	429a      	cmp	r2, r3
 8002972:	d908      	bls.n	8002986 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4960      	ldr	r1, [pc, #384]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d04c      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	4b5a      	ldr	r3, [pc, #360]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d121      	bne.n	80029ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0a6      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b2:	4b54      	ldr	r3, [pc, #336]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d115      	bne.n	80029ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e09a      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e08e      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029da:	4b4a      	ldr	r3, [pc, #296]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e086      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b46      	ldr	r3, [pc, #280]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4943      	ldr	r1, [pc, #268]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7fe fc04 	bl	8001208 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7fe fc00 	bl	8001208 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e06e      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d010      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d208      	bcs.n	8002a5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	492b      	ldr	r1, [pc, #172]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a5a:	4b29      	ldr	r3, [pc, #164]	@ (8002b00 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d210      	bcs.n	8002a8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a68:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <HAL_RCC_ClockConfig+0x1ec>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 0207 	bic.w	r2, r3, #7
 8002a70:	4923      	ldr	r1, [pc, #140]	@ (8002b00 <HAL_RCC_ClockConfig+0x1ec>)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a78:	4b21      	ldr	r3, [pc, #132]	@ (8002b00 <HAL_RCC_ClockConfig+0x1ec>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e036      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a96:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	4918      	ldr	r1, [pc, #96]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab4:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4910      	ldr	r1, [pc, #64]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac8:	f000 f824 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	490b      	ldr	r1, [pc, #44]	@ (8002b08 <HAL_RCC_ClockConfig+0x1f4>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	4a09      	ldr	r2, [pc, #36]	@ (8002b0c <HAL_RCC_ClockConfig+0x1f8>)
 8002ae6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1fc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe fb3b 	bl	8001168 <HAL_InitTick>
 8002af2:	4603      	mov	r3, r0
 8002af4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002af6:	7afb      	ldrb	r3, [r7, #11]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40022000 	.word	0x40022000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08004640 	.word	0x08004640
 8002b0c:	20000010 	.word	0x20000010
 8002b10:	20000014 	.word	0x20000014

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	@ 0x24
 8002b18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b22:	4b3e      	ldr	r3, [pc, #248]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d121      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d11e      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b48:	4b34      	ldr	r3, [pc, #208]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b54:	4b31      	ldr	r3, [pc, #196]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e005      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b64:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b70:	4a2b      	ldr	r2, [pc, #172]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b8c:	4b25      	ldr	r3, [pc, #148]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	e004      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b98:	4b23      	ldr	r3, [pc, #140]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d134      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0xa6>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d003      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xac>
 8002bb8:	e005      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bbc:	617b      	str	r3, [r7, #20]
      break;
 8002bbe:	e005      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bc2:	617b      	str	r3, [r7, #20]
      break;
 8002bc4:	e002      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	617b      	str	r3, [r7, #20]
      break;
 8002bca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bda:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	fb03 f202 	mul.w	r2, r3, r2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	0e5b      	lsrs	r3, r3, #25
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	@ 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08004658 	.word	0x08004658
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	007a1200 	.word	0x007a1200

08002c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b03      	ldr	r3, [pc, #12]	@ (8002c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000010 	.word	0x20000010

08002c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c48:	f7ff fff0 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4904      	ldr	r1, [pc, #16]	@ (8002c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08004650 	.word	0x08004650

08002c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c74:	f7ff ffda 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0adb      	lsrs	r3, r3, #11
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4904      	ldr	r1, [pc, #16]	@ (8002c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08004650 	.word	0x08004650

08002c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cb4:	f7ff f9b6 	bl	8002024 <HAL_PWREx_GetVoltageRange>
 8002cb8:	6178      	str	r0, [r7, #20]
 8002cba:	e014      	b.n	8002ce6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	4b25      	ldr	r3, [pc, #148]	@ (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc0:	4a24      	ldr	r2, [pc, #144]	@ (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc8:	4b22      	ldr	r3, [pc, #136]	@ (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cd4:	f7ff f9a6 	bl	8002024 <HAL_PWREx_GetVoltageRange>
 8002cd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cda:	4b1e      	ldr	r3, [pc, #120]	@ (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	4a1d      	ldr	r2, [pc, #116]	@ (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cec:	d10b      	bne.n	8002d06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b80      	cmp	r3, #128	@ 0x80
 8002cf2:	d919      	bls.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cf8:	d902      	bls.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e013      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d00:	2301      	movs	r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	e010      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b80      	cmp	r3, #128	@ 0x80
 8002d0a:	d902      	bls.n	8002d12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	e00a      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b80      	cmp	r3, #128	@ 0x80
 8002d16:	d102      	bne.n	8002d1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d18:	2302      	movs	r3, #2
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	e004      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b70      	cmp	r3, #112	@ 0x70
 8002d22:	d101      	bne.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d24:	2301      	movs	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 0207 	bic.w	r2, r3, #7
 8002d30:	4909      	ldr	r1, [pc, #36]	@ (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d38:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40022000 	.word	0x40022000

08002d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d64:	2300      	movs	r3, #0
 8002d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d031      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d80:	d01a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d86:	d814      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d90:	d10f      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d92:	4b5d      	ldr	r3, [pc, #372]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4a5c      	ldr	r2, [pc, #368]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d9e:	e00c      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f9de 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002db0:	e003      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	74fb      	strb	r3, [r7, #19]
      break;
 8002db6:	e000      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dc0:	4b51      	ldr	r3, [pc, #324]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	494e      	ldr	r1, [pc, #312]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dd6:	e001      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 809e 	beq.w	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dee:	4b46      	ldr	r3, [pc, #280]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	4b40      	ldr	r3, [pc, #256]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	4a3f      	ldr	r2, [pc, #252]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e10:	4b3d      	ldr	r3, [pc, #244]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e20:	4b3a      	ldr	r3, [pc, #232]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a39      	ldr	r2, [pc, #228]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e2c:	f7fe f9ec 	bl	8001208 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e32:	e009      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e34:	f7fe f9e8 	bl	8001208 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	74fb      	strb	r3, [r7, #19]
        break;
 8002e46:	e005      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e48:	4b30      	ldr	r3, [pc, #192]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ef      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d15a      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01e      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d019      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e76:	4b24      	ldr	r3, [pc, #144]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e82:	4b21      	ldr	r3, [pc, #132]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	4a1f      	ldr	r2, [pc, #124]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e92:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e98:	4a1b      	ldr	r2, [pc, #108]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ea2:	4a19      	ldr	r2, [pc, #100]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d016      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe f9a8 	bl	8001208 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe f9a4 	bl	8001208 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d902      	bls.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ed2:	e006      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ec      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002ee2:	7cfb      	ldrb	r3, [r7, #19]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee8:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef6:	4904      	ldr	r1, [pc, #16]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002efe:	e009      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	74bb      	strb	r3, [r7, #18]
 8002f04:	e006      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f14:	7c7b      	ldrb	r3, [r7, #17]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1a:	4b8a      	ldr	r3, [pc, #552]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	4a89      	ldr	r2, [pc, #548]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f32:	4b84      	ldr	r3, [pc, #528]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f38:	f023 0203 	bic.w	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4980      	ldr	r1, [pc, #512]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f54:	4b7b      	ldr	r3, [pc, #492]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5a:	f023 020c 	bic.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	4978      	ldr	r1, [pc, #480]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f76:	4b73      	ldr	r3, [pc, #460]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	496f      	ldr	r1, [pc, #444]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f98:	4b6a      	ldr	r3, [pc, #424]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa6:	4967      	ldr	r1, [pc, #412]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fba:	4b62      	ldr	r3, [pc, #392]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc8:	495e      	ldr	r1, [pc, #376]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fdc:	4b59      	ldr	r3, [pc, #356]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	4956      	ldr	r1, [pc, #344]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ffe:	4b51      	ldr	r3, [pc, #324]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003004:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	494d      	ldr	r1, [pc, #308]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d028      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003020:	4b48      	ldr	r3, [pc, #288]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003026:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	4945      	ldr	r1, [pc, #276]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800303e:	d106      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003040:	4b40      	ldr	r3, [pc, #256]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a3f      	ldr	r2, [pc, #252]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800304a:	60d3      	str	r3, [r2, #12]
 800304c:	e011      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003056:	d10c      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f882 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d028      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800307e:	4b31      	ldr	r3, [pc, #196]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003084:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308c:	492d      	ldr	r1, [pc, #180]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800309c:	d106      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800309e:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4a28      	ldr	r2, [pc, #160]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030a8:	60d3      	str	r3, [r2, #12]
 80030aa:	e011      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f853 	bl	8003168 <RCCEx_PLLSAI1_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c6:	7cfb      	ldrb	r3, [r7, #19]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01c      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030dc:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ea:	4916      	ldr	r1, [pc, #88]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030fa:	d10c      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	2102      	movs	r1, #2
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f830 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003122:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003128:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003130:	4904      	ldr	r1, [pc, #16]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003138:	7cbb      	ldrb	r3, [r7, #18]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800314c:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a04      	ldr	r2, [pc, #16]	@ (8003164 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000

08003168 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003176:	4b74      	ldr	r3, [pc, #464]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d018      	beq.n	80031b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003182:	4b71      	ldr	r3, [pc, #452]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0203 	and.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d10d      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
       ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800319a:	4b6b      	ldr	r3, [pc, #428]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
       ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d047      	beq.n	800323e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e044      	b.n	800323e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d018      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0x86>
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d825      	bhi.n	800320c <RCCEx_PLLSAI1_Config+0xa4>
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d002      	beq.n	80031ca <RCCEx_PLLSAI1_Config+0x62>
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d009      	beq.n	80031dc <RCCEx_PLLSAI1_Config+0x74>
 80031c8:	e020      	b.n	800320c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11d      	bne.n	8003212 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e01a      	b.n	8003212 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ec:	e013      	b.n	8003216 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ee:	4b56      	ldr	r3, [pc, #344]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031fa:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800320a:	e006      	b.n	800321a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e004      	b.n	800321c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003212:	bf00      	nop
 8003214:	e002      	b.n	800321c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003216:	bf00      	nop
 8003218:	e000      	b.n	800321c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800321a:	bf00      	nop
    }

    if(status == HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003222:	4b49      	ldr	r3, [pc, #292]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	430b      	orrs	r3, r1
 8003238:	4943      	ldr	r1, [pc, #268]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d17c      	bne.n	800333e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003244:	4b40      	ldr	r3, [pc, #256]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3f      	ldr	r2, [pc, #252]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800324e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fd ffda 	bl	8001208 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003256:	e009      	b.n	800326c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003258:	f7fd ffd6 	bl	8001208 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d902      	bls.n	800326c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	73fb      	strb	r3, [r7, #15]
        break;
 800326a:	e005      	b.n	8003278 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800326c:	4b36      	ldr	r3, [pc, #216]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ef      	bne.n	8003258 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d15f      	bne.n	800333e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d110      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003284:	4b30      	ldr	r3, [pc, #192]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800328c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6892      	ldr	r2, [r2, #8]
 8003294:	0211      	lsls	r1, r2, #8
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	06d2      	lsls	r2, r2, #27
 800329c:	430a      	orrs	r2, r1
 800329e:	492a      	ldr	r1, [pc, #168]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	610b      	str	r3, [r1, #16]
 80032a4:	e027      	b.n	80032f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d112      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ac:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80032b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6892      	ldr	r2, [r2, #8]
 80032bc:	0211      	lsls	r1, r2, #8
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6912      	ldr	r2, [r2, #16]
 80032c2:	0852      	lsrs	r2, r2, #1
 80032c4:	3a01      	subs	r2, #1
 80032c6:	0552      	lsls	r2, r2, #21
 80032c8:	430a      	orrs	r2, r1
 80032ca:	491f      	ldr	r1, [pc, #124]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	610b      	str	r3, [r1, #16]
 80032d0:	e011      	b.n	80032f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80032da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	0211      	lsls	r1, r2, #8
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6952      	ldr	r2, [r2, #20]
 80032e8:	0852      	lsrs	r2, r2, #1
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0652      	lsls	r2, r2, #25
 80032ee:	430a      	orrs	r2, r1
 80032f0:	4915      	ldr	r1, [pc, #84]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032f6:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a13      	ldr	r2, [pc, #76]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003300:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fd ff81 	bl	8001208 <HAL_GetTick>
 8003306:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003308:	e009      	b.n	800331e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800330a:	f7fd ff7d 	bl	8001208 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d902      	bls.n	800331e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	73fb      	strb	r3, [r7, #15]
          break;
 800331c:	e005      	b.n	800332a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800331e:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ef      	beq.n	800330a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4903      	ldr	r1, [pc, #12]	@ (8003348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333a:	4313      	orrs	r3, r2
 800333c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e040      	b.n	80033e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fdd6 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	@ 0x24
 8003378:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa54 	bl	8003840 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f825 	bl	80033e8 <UART_SetConfig>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e01b      	b.n	80033e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fad3 	bl	8003984 <UART_CheckIdleState>
 80033de:	4603      	mov	r3, r0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b08a      	sub	sp, #40	@ 0x28
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	4313      	orrs	r3, r2
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4bb4      	ldr	r3, [pc, #720]	@ (80036e8 <UART_SetConfig+0x300>)
 8003418:	4013      	ands	r3, r2
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003420:	430b      	orrs	r3, r1
 8003422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4aa9      	ldr	r2, [pc, #676]	@ (80036ec <UART_SetConfig+0x304>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003450:	4313      	orrs	r3, r2
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4aa0      	ldr	r2, [pc, #640]	@ (80036f0 <UART_SetConfig+0x308>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d126      	bne.n	80034c0 <UART_SetConfig+0xd8>
 8003472:	4ba0      	ldr	r3, [pc, #640]	@ (80036f4 <UART_SetConfig+0x30c>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b03      	cmp	r3, #3
 800347e:	d81b      	bhi.n	80034b8 <UART_SetConfig+0xd0>
 8003480:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <UART_SetConfig+0xa0>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	08003499 	.word	0x08003499
 800348c:	080034a9 	.word	0x080034a9
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034b1 	.word	0x080034b1
 8003498:	2301      	movs	r3, #1
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349e:	e080      	b.n	80035a2 <UART_SetConfig+0x1ba>
 80034a0:	2302      	movs	r3, #2
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a6:	e07c      	b.n	80035a2 <UART_SetConfig+0x1ba>
 80034a8:	2304      	movs	r3, #4
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e078      	b.n	80035a2 <UART_SetConfig+0x1ba>
 80034b0:	2308      	movs	r3, #8
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b6:	e074      	b.n	80035a2 <UART_SetConfig+0x1ba>
 80034b8:	2310      	movs	r3, #16
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034be:	e070      	b.n	80035a2 <UART_SetConfig+0x1ba>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a8c      	ldr	r2, [pc, #560]	@ (80036f8 <UART_SetConfig+0x310>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d138      	bne.n	800353c <UART_SetConfig+0x154>
 80034ca:	4b8a      	ldr	r3, [pc, #552]	@ (80036f4 <UART_SetConfig+0x30c>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	d82d      	bhi.n	8003534 <UART_SetConfig+0x14c>
 80034d8:	a201      	add	r2, pc, #4	@ (adr r2, 80034e0 <UART_SetConfig+0xf8>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003515 	.word	0x08003515
 80034e4:	08003535 	.word	0x08003535
 80034e8:	08003535 	.word	0x08003535
 80034ec:	08003535 	.word	0x08003535
 80034f0:	08003525 	.word	0x08003525
 80034f4:	08003535 	.word	0x08003535
 80034f8:	08003535 	.word	0x08003535
 80034fc:	08003535 	.word	0x08003535
 8003500:	0800351d 	.word	0x0800351d
 8003504:	08003535 	.word	0x08003535
 8003508:	08003535 	.word	0x08003535
 800350c:	08003535 	.word	0x08003535
 8003510:	0800352d 	.word	0x0800352d
 8003514:	2300      	movs	r3, #0
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351a:	e042      	b.n	80035a2 <UART_SetConfig+0x1ba>
 800351c:	2302      	movs	r3, #2
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003522:	e03e      	b.n	80035a2 <UART_SetConfig+0x1ba>
 8003524:	2304      	movs	r3, #4
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352a:	e03a      	b.n	80035a2 <UART_SetConfig+0x1ba>
 800352c:	2308      	movs	r3, #8
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003532:	e036      	b.n	80035a2 <UART_SetConfig+0x1ba>
 8003534:	2310      	movs	r3, #16
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800353a:	e032      	b.n	80035a2 <UART_SetConfig+0x1ba>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a6a      	ldr	r2, [pc, #424]	@ (80036ec <UART_SetConfig+0x304>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d12a      	bne.n	800359c <UART_SetConfig+0x1b4>
 8003546:	4b6b      	ldr	r3, [pc, #428]	@ (80036f4 <UART_SetConfig+0x30c>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003550:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003554:	d01a      	beq.n	800358c <UART_SetConfig+0x1a4>
 8003556:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800355a:	d81b      	bhi.n	8003594 <UART_SetConfig+0x1ac>
 800355c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003560:	d00c      	beq.n	800357c <UART_SetConfig+0x194>
 8003562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003566:	d815      	bhi.n	8003594 <UART_SetConfig+0x1ac>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <UART_SetConfig+0x18c>
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003570:	d008      	beq.n	8003584 <UART_SetConfig+0x19c>
 8003572:	e00f      	b.n	8003594 <UART_SetConfig+0x1ac>
 8003574:	2300      	movs	r3, #0
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800357a:	e012      	b.n	80035a2 <UART_SetConfig+0x1ba>
 800357c:	2302      	movs	r3, #2
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003582:	e00e      	b.n	80035a2 <UART_SetConfig+0x1ba>
 8003584:	2304      	movs	r3, #4
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800358a:	e00a      	b.n	80035a2 <UART_SetConfig+0x1ba>
 800358c:	2308      	movs	r3, #8
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003592:	e006      	b.n	80035a2 <UART_SetConfig+0x1ba>
 8003594:	2310      	movs	r3, #16
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359a:	e002      	b.n	80035a2 <UART_SetConfig+0x1ba>
 800359c:	2310      	movs	r3, #16
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a51      	ldr	r2, [pc, #324]	@ (80036ec <UART_SetConfig+0x304>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d17a      	bne.n	80036a2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d824      	bhi.n	80035fe <UART_SetConfig+0x216>
 80035b4:	a201      	add	r2, pc, #4	@ (adr r2, 80035bc <UART_SetConfig+0x1d4>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035e1 	.word	0x080035e1
 80035c0:	080035ff 	.word	0x080035ff
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	080035ff 	.word	0x080035ff
 80035cc:	080035ef 	.word	0x080035ef
 80035d0:	080035ff 	.word	0x080035ff
 80035d4:	080035ff 	.word	0x080035ff
 80035d8:	080035ff 	.word	0x080035ff
 80035dc:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e0:	f7ff fb30 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 80035e4:	61f8      	str	r0, [r7, #28]
        break;
 80035e6:	e010      	b.n	800360a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b44      	ldr	r3, [pc, #272]	@ (80036fc <UART_SetConfig+0x314>)
 80035ea:	61fb      	str	r3, [r7, #28]
        break;
 80035ec:	e00d      	b.n	800360a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7ff fa91 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 80035f2:	61f8      	str	r0, [r7, #28]
        break;
 80035f4:	e009      	b.n	800360a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035fa:	61fb      	str	r3, [r7, #28]
        break;
 80035fc:	e005      	b.n	800360a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003608:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8107 	beq.w	8003820 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	429a      	cmp	r2, r3
 8003620:	d305      	bcc.n	800362e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	429a      	cmp	r2, r3
 800362c:	d903      	bls.n	8003636 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003634:	e0f4      	b.n	8003820 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2200      	movs	r2, #0
 800363a:	461c      	mov	r4, r3
 800363c:	4615      	mov	r5, r2
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	022b      	lsls	r3, r5, #8
 8003648:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800364c:	0222      	lsls	r2, r4, #8
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	6849      	ldr	r1, [r1, #4]
 8003652:	0849      	lsrs	r1, r1, #1
 8003654:	2000      	movs	r0, #0
 8003656:	4688      	mov	r8, r1
 8003658:	4681      	mov	r9, r0
 800365a:	eb12 0a08 	adds.w	sl, r2, r8
 800365e:	eb43 0b09 	adc.w	fp, r3, r9
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003670:	4650      	mov	r0, sl
 8003672:	4659      	mov	r1, fp
 8003674:	f7fc fdfc 	bl	8000270 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003686:	d308      	bcc.n	800369a <UART_SetConfig+0x2b2>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800368e:	d204      	bcs.n	800369a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	e0c2      	b.n	8003820 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036a0:	e0be      	b.n	8003820 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036aa:	d16a      	bne.n	8003782 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80036ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d834      	bhi.n	800371e <UART_SetConfig+0x336>
 80036b4:	a201      	add	r2, pc, #4	@ (adr r2, 80036bc <UART_SetConfig+0x2d4>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036e1 	.word	0x080036e1
 80036c0:	08003701 	.word	0x08003701
 80036c4:	08003709 	.word	0x08003709
 80036c8:	0800371f 	.word	0x0800371f
 80036cc:	0800370f 	.word	0x0800370f
 80036d0:	0800371f 	.word	0x0800371f
 80036d4:	0800371f 	.word	0x0800371f
 80036d8:	0800371f 	.word	0x0800371f
 80036dc:	08003717 	.word	0x08003717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e0:	f7ff fab0 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 80036e4:	61f8      	str	r0, [r7, #28]
        break;
 80036e6:	e020      	b.n	800372a <UART_SetConfig+0x342>
 80036e8:	efff69f3 	.word	0xefff69f3
 80036ec:	40008000 	.word	0x40008000
 80036f0:	40013800 	.word	0x40013800
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40004400 	.word	0x40004400
 80036fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7ff fab6 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 8003704:	61f8      	str	r0, [r7, #28]
        break;
 8003706:	e010      	b.n	800372a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003708:	4b4c      	ldr	r3, [pc, #304]	@ (800383c <UART_SetConfig+0x454>)
 800370a:	61fb      	str	r3, [r7, #28]
        break;
 800370c:	e00d      	b.n	800372a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370e:	f7ff fa01 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8003712:	61f8      	str	r0, [r7, #28]
        break;
 8003714:	e009      	b.n	800372a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800371a:	61fb      	str	r3, [r7, #28]
        break;
 800371c:	e005      	b.n	800372a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d077      	beq.n	8003820 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005a      	lsls	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	441a      	add	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b0f      	cmp	r3, #15
 800374a:	d916      	bls.n	800377a <UART_SetConfig+0x392>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003752:	d212      	bcs.n	800377a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	b29b      	uxth	r3, r3
 8003758:	f023 030f 	bic.w	r3, r3, #15
 800375c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	b29b      	uxth	r3, r3
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	b29a      	uxth	r2, r3
 800376a:	8afb      	ldrh	r3, [r7, #22]
 800376c:	4313      	orrs	r3, r2
 800376e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	8afa      	ldrh	r2, [r7, #22]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	e052      	b.n	8003820 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003780:	e04e      	b.n	8003820 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003782:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003786:	2b08      	cmp	r3, #8
 8003788:	d827      	bhi.n	80037da <UART_SetConfig+0x3f2>
 800378a:	a201      	add	r2, pc, #4	@ (adr r2, 8003790 <UART_SetConfig+0x3a8>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037b5 	.word	0x080037b5
 8003794:	080037bd 	.word	0x080037bd
 8003798:	080037c5 	.word	0x080037c5
 800379c:	080037db 	.word	0x080037db
 80037a0:	080037cb 	.word	0x080037cb
 80037a4:	080037db 	.word	0x080037db
 80037a8:	080037db 	.word	0x080037db
 80037ac:	080037db 	.word	0x080037db
 80037b0:	080037d3 	.word	0x080037d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b4:	f7ff fa46 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 80037b8:	61f8      	str	r0, [r7, #28]
        break;
 80037ba:	e014      	b.n	80037e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037bc:	f7ff fa58 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 80037c0:	61f8      	str	r0, [r7, #28]
        break;
 80037c2:	e010      	b.n	80037e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c4:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <UART_SetConfig+0x454>)
 80037c6:	61fb      	str	r3, [r7, #28]
        break;
 80037c8:	e00d      	b.n	80037e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ca:	f7ff f9a3 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 80037ce:	61f8      	str	r0, [r7, #28]
        break;
 80037d0:	e009      	b.n	80037e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037d6:	61fb      	str	r3, [r7, #28]
        break;
 80037d8:	e005      	b.n	80037e6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037e4:	bf00      	nop
    }

    if (pclk != 0U)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d019      	beq.n	8003820 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	085a      	lsrs	r2, r3, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	441a      	add	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	d909      	bls.n	800381a <UART_SetConfig+0x432>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800380c:	d205      	bcs.n	800381a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60da      	str	r2, [r3, #12]
 8003818:	e002      	b.n	8003820 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800382c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003830:	4618      	mov	r0, r3
 8003832:	3728      	adds	r7, #40	@ 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	00f42400 	.word	0x00f42400

08003840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01a      	beq.n	8003956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800393e:	d10a      	bne.n	8003956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b098      	sub	sp, #96	@ 0x60
 8003988:	af02      	add	r7, sp, #8
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003994:	f7fd fc38 	bl	8001208 <HAL_GetTick>
 8003998:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d12e      	bne.n	8003a06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b0:	2200      	movs	r2, #0
 80039b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f88c 	bl	8003ad4 <UART_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d021      	beq.n	8003a06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e6      	bne.n	80039c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e062      	b.n	8003acc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d149      	bne.n	8003aa8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f856 	bl	8003ad4 <UART_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d03c      	beq.n	8003aa8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e6      	bne.n	8003a2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3308      	adds	r3, #8
 8003a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a80:	61fa      	str	r2, [r7, #28]
 8003a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e5      	bne.n	8003a60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e011      	b.n	8003acc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3758      	adds	r7, #88	@ 0x58
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae4:	e04f      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d04b      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fd fb8b 	bl	8001208 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e04e      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d037      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b80      	cmp	r3, #128	@ 0x80
 8003b1a:	d034      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b40      	cmp	r3, #64	@ 0x40
 8003b20:	d031      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d110      	bne.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2208      	movs	r2, #8
 8003b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f838 	bl	8003bae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2208      	movs	r2, #8
 8003b42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e029      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b60:	d111      	bne.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f81e 	bl	8003bae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e00f      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d0a0      	beq.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b095      	sub	sp, #84	@ 0x54
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e6      	bne.n	8003bb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3308      	adds	r3, #8
 8003c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d118      	bne.n	8003c56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f023 0310 	bic.w	r3, r3, #16
 8003c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6979      	ldr	r1, [r7, #20]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e6      	bne.n	8003c24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c6a:	bf00      	nop
 8003c6c:	3754      	adds	r7, #84	@ 0x54
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <sniprintf>:
 8003c78:	b40c      	push	{r2, r3}
 8003c7a:	b530      	push	{r4, r5, lr}
 8003c7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ce0 <sniprintf+0x68>)
 8003c7e:	1e0c      	subs	r4, r1, #0
 8003c80:	681d      	ldr	r5, [r3, #0]
 8003c82:	b09d      	sub	sp, #116	@ 0x74
 8003c84:	da08      	bge.n	8003c98 <sniprintf+0x20>
 8003c86:	238b      	movs	r3, #139	@ 0x8b
 8003c88:	602b      	str	r3, [r5, #0]
 8003c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8e:	b01d      	add	sp, #116	@ 0x74
 8003c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c94:	b002      	add	sp, #8
 8003c96:	4770      	bx	lr
 8003c98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003c9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003ca6:	bf14      	ite	ne
 8003ca8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003cac:	4623      	moveq	r3, r4
 8003cae:	9304      	str	r3, [sp, #16]
 8003cb0:	9307      	str	r3, [sp, #28]
 8003cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cb6:	9002      	str	r0, [sp, #8]
 8003cb8:	9006      	str	r0, [sp, #24]
 8003cba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003cbe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003cc0:	ab21      	add	r3, sp, #132	@ 0x84
 8003cc2:	a902      	add	r1, sp, #8
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	f000 f994 	bl	8003ff4 <_svfiprintf_r>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	bfbc      	itt	lt
 8003cd0:	238b      	movlt	r3, #139	@ 0x8b
 8003cd2:	602b      	strlt	r3, [r5, #0]
 8003cd4:	2c00      	cmp	r4, #0
 8003cd6:	d0da      	beq.n	8003c8e <sniprintf+0x16>
 8003cd8:	9b02      	ldr	r3, [sp, #8]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e7d6      	b.n	8003c8e <sniprintf+0x16>
 8003ce0:	2000001c 	.word	0x2000001c

08003ce4 <memset>:
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <__errno>:
 8003cf4:	4b01      	ldr	r3, [pc, #4]	@ (8003cfc <__errno+0x8>)
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	2000001c 	.word	0x2000001c

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	4d0d      	ldr	r5, [pc, #52]	@ (8003d38 <__libc_init_array+0x38>)
 8003d04:	4c0d      	ldr	r4, [pc, #52]	@ (8003d3c <__libc_init_array+0x3c>)
 8003d06:	1b64      	subs	r4, r4, r5
 8003d08:	10a4      	asrs	r4, r4, #2
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	4d0b      	ldr	r5, [pc, #44]	@ (8003d40 <__libc_init_array+0x40>)
 8003d12:	4c0c      	ldr	r4, [pc, #48]	@ (8003d44 <__libc_init_array+0x44>)
 8003d14:	f000 fc64 	bl	80045e0 <_init>
 8003d18:	1b64      	subs	r4, r4, r5
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	080046c4 	.word	0x080046c4
 8003d3c:	080046c4 	.word	0x080046c4
 8003d40:	080046c4 	.word	0x080046c4
 8003d44:	080046c8 	.word	0x080046c8

08003d48 <__retarget_lock_acquire_recursive>:
 8003d48:	4770      	bx	lr

08003d4a <__retarget_lock_release_recursive>:
 8003d4a:	4770      	bx	lr

08003d4c <_free_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4605      	mov	r5, r0
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d041      	beq.n	8003dd8 <_free_r+0x8c>
 8003d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d58:	1f0c      	subs	r4, r1, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	18e4      	addlt	r4, r4, r3
 8003d60:	f000 f8e0 	bl	8003f24 <__malloc_lock>
 8003d64:	4a1d      	ldr	r2, [pc, #116]	@ (8003ddc <_free_r+0x90>)
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	b933      	cbnz	r3, 8003d78 <_free_r+0x2c>
 8003d6a:	6063      	str	r3, [r4, #4]
 8003d6c:	6014      	str	r4, [r2, #0]
 8003d6e:	4628      	mov	r0, r5
 8003d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d74:	f000 b8dc 	b.w	8003f30 <__malloc_unlock>
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	d908      	bls.n	8003d8e <_free_r+0x42>
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	1821      	adds	r1, r4, r0
 8003d80:	428b      	cmp	r3, r1
 8003d82:	bf01      	itttt	eq
 8003d84:	6819      	ldreq	r1, [r3, #0]
 8003d86:	685b      	ldreq	r3, [r3, #4]
 8003d88:	1809      	addeq	r1, r1, r0
 8003d8a:	6021      	streq	r1, [r4, #0]
 8003d8c:	e7ed      	b.n	8003d6a <_free_r+0x1e>
 8003d8e:	461a      	mov	r2, r3
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	b10b      	cbz	r3, 8003d98 <_free_r+0x4c>
 8003d94:	42a3      	cmp	r3, r4
 8003d96:	d9fa      	bls.n	8003d8e <_free_r+0x42>
 8003d98:	6811      	ldr	r1, [r2, #0]
 8003d9a:	1850      	adds	r0, r2, r1
 8003d9c:	42a0      	cmp	r0, r4
 8003d9e:	d10b      	bne.n	8003db8 <_free_r+0x6c>
 8003da0:	6820      	ldr	r0, [r4, #0]
 8003da2:	4401      	add	r1, r0
 8003da4:	1850      	adds	r0, r2, r1
 8003da6:	4283      	cmp	r3, r0
 8003da8:	6011      	str	r1, [r2, #0]
 8003daa:	d1e0      	bne.n	8003d6e <_free_r+0x22>
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	6053      	str	r3, [r2, #4]
 8003db2:	4408      	add	r0, r1
 8003db4:	6010      	str	r0, [r2, #0]
 8003db6:	e7da      	b.n	8003d6e <_free_r+0x22>
 8003db8:	d902      	bls.n	8003dc0 <_free_r+0x74>
 8003dba:	230c      	movs	r3, #12
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	e7d6      	b.n	8003d6e <_free_r+0x22>
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	1821      	adds	r1, r4, r0
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	bf04      	itt	eq
 8003dc8:	6819      	ldreq	r1, [r3, #0]
 8003dca:	685b      	ldreq	r3, [r3, #4]
 8003dcc:	6063      	str	r3, [r4, #4]
 8003dce:	bf04      	itt	eq
 8003dd0:	1809      	addeq	r1, r1, r0
 8003dd2:	6021      	streq	r1, [r4, #0]
 8003dd4:	6054      	str	r4, [r2, #4]
 8003dd6:	e7ca      	b.n	8003d6e <_free_r+0x22>
 8003dd8:	bd38      	pop	{r3, r4, r5, pc}
 8003dda:	bf00      	nop
 8003ddc:	200002b8 	.word	0x200002b8

08003de0 <sbrk_aligned>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4e0f      	ldr	r6, [pc, #60]	@ (8003e20 <sbrk_aligned+0x40>)
 8003de4:	460c      	mov	r4, r1
 8003de6:	6831      	ldr	r1, [r6, #0]
 8003de8:	4605      	mov	r5, r0
 8003dea:	b911      	cbnz	r1, 8003df2 <sbrk_aligned+0x12>
 8003dec:	f000 fba4 	bl	8004538 <_sbrk_r>
 8003df0:	6030      	str	r0, [r6, #0]
 8003df2:	4621      	mov	r1, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 fb9f 	bl	8004538 <_sbrk_r>
 8003dfa:	1c43      	adds	r3, r0, #1
 8003dfc:	d103      	bne.n	8003e06 <sbrk_aligned+0x26>
 8003dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8003e02:	4620      	mov	r0, r4
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	1cc4      	adds	r4, r0, #3
 8003e08:	f024 0403 	bic.w	r4, r4, #3
 8003e0c:	42a0      	cmp	r0, r4
 8003e0e:	d0f8      	beq.n	8003e02 <sbrk_aligned+0x22>
 8003e10:	1a21      	subs	r1, r4, r0
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 fb90 	bl	8004538 <_sbrk_r>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d1f2      	bne.n	8003e02 <sbrk_aligned+0x22>
 8003e1c:	e7ef      	b.n	8003dfe <sbrk_aligned+0x1e>
 8003e1e:	bf00      	nop
 8003e20:	200002b4 	.word	0x200002b4

08003e24 <_malloc_r>:
 8003e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e28:	1ccd      	adds	r5, r1, #3
 8003e2a:	f025 0503 	bic.w	r5, r5, #3
 8003e2e:	3508      	adds	r5, #8
 8003e30:	2d0c      	cmp	r5, #12
 8003e32:	bf38      	it	cc
 8003e34:	250c      	movcc	r5, #12
 8003e36:	2d00      	cmp	r5, #0
 8003e38:	4606      	mov	r6, r0
 8003e3a:	db01      	blt.n	8003e40 <_malloc_r+0x1c>
 8003e3c:	42a9      	cmp	r1, r5
 8003e3e:	d904      	bls.n	8003e4a <_malloc_r+0x26>
 8003e40:	230c      	movs	r3, #12
 8003e42:	6033      	str	r3, [r6, #0]
 8003e44:	2000      	movs	r0, #0
 8003e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f20 <_malloc_r+0xfc>
 8003e4e:	f000 f869 	bl	8003f24 <__malloc_lock>
 8003e52:	f8d8 3000 	ldr.w	r3, [r8]
 8003e56:	461c      	mov	r4, r3
 8003e58:	bb44      	cbnz	r4, 8003eac <_malloc_r+0x88>
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f7ff ffbf 	bl	8003de0 <sbrk_aligned>
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	4604      	mov	r4, r0
 8003e66:	d158      	bne.n	8003f1a <_malloc_r+0xf6>
 8003e68:	f8d8 4000 	ldr.w	r4, [r8]
 8003e6c:	4627      	mov	r7, r4
 8003e6e:	2f00      	cmp	r7, #0
 8003e70:	d143      	bne.n	8003efa <_malloc_r+0xd6>
 8003e72:	2c00      	cmp	r4, #0
 8003e74:	d04b      	beq.n	8003f0e <_malloc_r+0xea>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	4639      	mov	r1, r7
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	eb04 0903 	add.w	r9, r4, r3
 8003e80:	f000 fb5a 	bl	8004538 <_sbrk_r>
 8003e84:	4581      	cmp	r9, r0
 8003e86:	d142      	bne.n	8003f0e <_malloc_r+0xea>
 8003e88:	6821      	ldr	r1, [r4, #0]
 8003e8a:	1a6d      	subs	r5, r5, r1
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	4630      	mov	r0, r6
 8003e90:	f7ff ffa6 	bl	8003de0 <sbrk_aligned>
 8003e94:	3001      	adds	r0, #1
 8003e96:	d03a      	beq.n	8003f0e <_malloc_r+0xea>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	442b      	add	r3, r5
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	bb62      	cbnz	r2, 8003f00 <_malloc_r+0xdc>
 8003ea6:	f8c8 7000 	str.w	r7, [r8]
 8003eaa:	e00f      	b.n	8003ecc <_malloc_r+0xa8>
 8003eac:	6822      	ldr	r2, [r4, #0]
 8003eae:	1b52      	subs	r2, r2, r5
 8003eb0:	d420      	bmi.n	8003ef4 <_malloc_r+0xd0>
 8003eb2:	2a0b      	cmp	r2, #11
 8003eb4:	d917      	bls.n	8003ee6 <_malloc_r+0xc2>
 8003eb6:	1961      	adds	r1, r4, r5
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	6025      	str	r5, [r4, #0]
 8003ebc:	bf18      	it	ne
 8003ebe:	6059      	strne	r1, [r3, #4]
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	bf08      	it	eq
 8003ec4:	f8c8 1000 	streq.w	r1, [r8]
 8003ec8:	5162      	str	r2, [r4, r5]
 8003eca:	604b      	str	r3, [r1, #4]
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f000 f82f 	bl	8003f30 <__malloc_unlock>
 8003ed2:	f104 000b 	add.w	r0, r4, #11
 8003ed6:	1d23      	adds	r3, r4, #4
 8003ed8:	f020 0007 	bic.w	r0, r0, #7
 8003edc:	1ac2      	subs	r2, r0, r3
 8003ede:	bf1c      	itt	ne
 8003ee0:	1a1b      	subne	r3, r3, r0
 8003ee2:	50a3      	strne	r3, [r4, r2]
 8003ee4:	e7af      	b.n	8003e46 <_malloc_r+0x22>
 8003ee6:	6862      	ldr	r2, [r4, #4]
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	bf0c      	ite	eq
 8003eec:	f8c8 2000 	streq.w	r2, [r8]
 8003ef0:	605a      	strne	r2, [r3, #4]
 8003ef2:	e7eb      	b.n	8003ecc <_malloc_r+0xa8>
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	6864      	ldr	r4, [r4, #4]
 8003ef8:	e7ae      	b.n	8003e58 <_malloc_r+0x34>
 8003efa:	463c      	mov	r4, r7
 8003efc:	687f      	ldr	r7, [r7, #4]
 8003efe:	e7b6      	b.n	8003e6e <_malloc_r+0x4a>
 8003f00:	461a      	mov	r2, r3
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	d1fb      	bne.n	8003f00 <_malloc_r+0xdc>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	6053      	str	r3, [r2, #4]
 8003f0c:	e7de      	b.n	8003ecc <_malloc_r+0xa8>
 8003f0e:	230c      	movs	r3, #12
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	4630      	mov	r0, r6
 8003f14:	f000 f80c 	bl	8003f30 <__malloc_unlock>
 8003f18:	e794      	b.n	8003e44 <_malloc_r+0x20>
 8003f1a:	6005      	str	r5, [r0, #0]
 8003f1c:	e7d6      	b.n	8003ecc <_malloc_r+0xa8>
 8003f1e:	bf00      	nop
 8003f20:	200002b8 	.word	0x200002b8

08003f24 <__malloc_lock>:
 8003f24:	4801      	ldr	r0, [pc, #4]	@ (8003f2c <__malloc_lock+0x8>)
 8003f26:	f7ff bf0f 	b.w	8003d48 <__retarget_lock_acquire_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	200002b0 	.word	0x200002b0

08003f30 <__malloc_unlock>:
 8003f30:	4801      	ldr	r0, [pc, #4]	@ (8003f38 <__malloc_unlock+0x8>)
 8003f32:	f7ff bf0a 	b.w	8003d4a <__retarget_lock_release_recursive>
 8003f36:	bf00      	nop
 8003f38:	200002b0 	.word	0x200002b0

08003f3c <__ssputs_r>:
 8003f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f40:	688e      	ldr	r6, [r1, #8]
 8003f42:	461f      	mov	r7, r3
 8003f44:	42be      	cmp	r6, r7
 8003f46:	680b      	ldr	r3, [r1, #0]
 8003f48:	4682      	mov	sl, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	4690      	mov	r8, r2
 8003f4e:	d82d      	bhi.n	8003fac <__ssputs_r+0x70>
 8003f50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f58:	d026      	beq.n	8003fa8 <__ssputs_r+0x6c>
 8003f5a:	6965      	ldr	r5, [r4, #20]
 8003f5c:	6909      	ldr	r1, [r1, #16]
 8003f5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f62:	eba3 0901 	sub.w	r9, r3, r1
 8003f66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f6a:	1c7b      	adds	r3, r7, #1
 8003f6c:	444b      	add	r3, r9
 8003f6e:	106d      	asrs	r5, r5, #1
 8003f70:	429d      	cmp	r5, r3
 8003f72:	bf38      	it	cc
 8003f74:	461d      	movcc	r5, r3
 8003f76:	0553      	lsls	r3, r2, #21
 8003f78:	d527      	bpl.n	8003fca <__ssputs_r+0x8e>
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f7ff ff52 	bl	8003e24 <_malloc_r>
 8003f80:	4606      	mov	r6, r0
 8003f82:	b360      	cbz	r0, 8003fde <__ssputs_r+0xa2>
 8003f84:	6921      	ldr	r1, [r4, #16]
 8003f86:	464a      	mov	r2, r9
 8003f88:	f000 fae6 	bl	8004558 <memcpy>
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f96:	81a3      	strh	r3, [r4, #12]
 8003f98:	6126      	str	r6, [r4, #16]
 8003f9a:	6165      	str	r5, [r4, #20]
 8003f9c:	444e      	add	r6, r9
 8003f9e:	eba5 0509 	sub.w	r5, r5, r9
 8003fa2:	6026      	str	r6, [r4, #0]
 8003fa4:	60a5      	str	r5, [r4, #8]
 8003fa6:	463e      	mov	r6, r7
 8003fa8:	42be      	cmp	r6, r7
 8003faa:	d900      	bls.n	8003fae <__ssputs_r+0x72>
 8003fac:	463e      	mov	r6, r7
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	4632      	mov	r2, r6
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	f000 faa6 	bl	8004504 <memmove>
 8003fb8:	68a3      	ldr	r3, [r4, #8]
 8003fba:	1b9b      	subs	r3, r3, r6
 8003fbc:	60a3      	str	r3, [r4, #8]
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	4433      	add	r3, r6
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fca:	462a      	mov	r2, r5
 8003fcc:	f000 fad2 	bl	8004574 <_realloc_r>
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d1e0      	bne.n	8003f98 <__ssputs_r+0x5c>
 8003fd6:	6921      	ldr	r1, [r4, #16]
 8003fd8:	4650      	mov	r0, sl
 8003fda:	f7ff feb7 	bl	8003d4c <_free_r>
 8003fde:	230c      	movs	r3, #12
 8003fe0:	f8ca 3000 	str.w	r3, [sl]
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	e7e9      	b.n	8003fc6 <__ssputs_r+0x8a>
	...

08003ff4 <_svfiprintf_r>:
 8003ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff8:	4698      	mov	r8, r3
 8003ffa:	898b      	ldrh	r3, [r1, #12]
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	b09d      	sub	sp, #116	@ 0x74
 8004000:	4607      	mov	r7, r0
 8004002:	460d      	mov	r5, r1
 8004004:	4614      	mov	r4, r2
 8004006:	d510      	bpl.n	800402a <_svfiprintf_r+0x36>
 8004008:	690b      	ldr	r3, [r1, #16]
 800400a:	b973      	cbnz	r3, 800402a <_svfiprintf_r+0x36>
 800400c:	2140      	movs	r1, #64	@ 0x40
 800400e:	f7ff ff09 	bl	8003e24 <_malloc_r>
 8004012:	6028      	str	r0, [r5, #0]
 8004014:	6128      	str	r0, [r5, #16]
 8004016:	b930      	cbnz	r0, 8004026 <_svfiprintf_r+0x32>
 8004018:	230c      	movs	r3, #12
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	b01d      	add	sp, #116	@ 0x74
 8004022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004026:	2340      	movs	r3, #64	@ 0x40
 8004028:	616b      	str	r3, [r5, #20]
 800402a:	2300      	movs	r3, #0
 800402c:	9309      	str	r3, [sp, #36]	@ 0x24
 800402e:	2320      	movs	r3, #32
 8004030:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004034:	f8cd 800c 	str.w	r8, [sp, #12]
 8004038:	2330      	movs	r3, #48	@ 0x30
 800403a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041d8 <_svfiprintf_r+0x1e4>
 800403e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004042:	f04f 0901 	mov.w	r9, #1
 8004046:	4623      	mov	r3, r4
 8004048:	469a      	mov	sl, r3
 800404a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800404e:	b10a      	cbz	r2, 8004054 <_svfiprintf_r+0x60>
 8004050:	2a25      	cmp	r2, #37	@ 0x25
 8004052:	d1f9      	bne.n	8004048 <_svfiprintf_r+0x54>
 8004054:	ebba 0b04 	subs.w	fp, sl, r4
 8004058:	d00b      	beq.n	8004072 <_svfiprintf_r+0x7e>
 800405a:	465b      	mov	r3, fp
 800405c:	4622      	mov	r2, r4
 800405e:	4629      	mov	r1, r5
 8004060:	4638      	mov	r0, r7
 8004062:	f7ff ff6b 	bl	8003f3c <__ssputs_r>
 8004066:	3001      	adds	r0, #1
 8004068:	f000 80a7 	beq.w	80041ba <_svfiprintf_r+0x1c6>
 800406c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800406e:	445a      	add	r2, fp
 8004070:	9209      	str	r2, [sp, #36]	@ 0x24
 8004072:	f89a 3000 	ldrb.w	r3, [sl]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 809f 	beq.w	80041ba <_svfiprintf_r+0x1c6>
 800407c:	2300      	movs	r3, #0
 800407e:	f04f 32ff 	mov.w	r2, #4294967295
 8004082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004086:	f10a 0a01 	add.w	sl, sl, #1
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	9307      	str	r3, [sp, #28]
 800408e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004092:	931a      	str	r3, [sp, #104]	@ 0x68
 8004094:	4654      	mov	r4, sl
 8004096:	2205      	movs	r2, #5
 8004098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800409c:	484e      	ldr	r0, [pc, #312]	@ (80041d8 <_svfiprintf_r+0x1e4>)
 800409e:	f7fc f897 	bl	80001d0 <memchr>
 80040a2:	9a04      	ldr	r2, [sp, #16]
 80040a4:	b9d8      	cbnz	r0, 80040de <_svfiprintf_r+0xea>
 80040a6:	06d0      	lsls	r0, r2, #27
 80040a8:	bf44      	itt	mi
 80040aa:	2320      	movmi	r3, #32
 80040ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040b0:	0711      	lsls	r1, r2, #28
 80040b2:	bf44      	itt	mi
 80040b4:	232b      	movmi	r3, #43	@ 0x2b
 80040b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ba:	f89a 3000 	ldrb.w	r3, [sl]
 80040be:	2b2a      	cmp	r3, #42	@ 0x2a
 80040c0:	d015      	beq.n	80040ee <_svfiprintf_r+0xfa>
 80040c2:	9a07      	ldr	r2, [sp, #28]
 80040c4:	4654      	mov	r4, sl
 80040c6:	2000      	movs	r0, #0
 80040c8:	f04f 0c0a 	mov.w	ip, #10
 80040cc:	4621      	mov	r1, r4
 80040ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d2:	3b30      	subs	r3, #48	@ 0x30
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d94b      	bls.n	8004170 <_svfiprintf_r+0x17c>
 80040d8:	b1b0      	cbz	r0, 8004108 <_svfiprintf_r+0x114>
 80040da:	9207      	str	r2, [sp, #28]
 80040dc:	e014      	b.n	8004108 <_svfiprintf_r+0x114>
 80040de:	eba0 0308 	sub.w	r3, r0, r8
 80040e2:	fa09 f303 	lsl.w	r3, r9, r3
 80040e6:	4313      	orrs	r3, r2
 80040e8:	9304      	str	r3, [sp, #16]
 80040ea:	46a2      	mov	sl, r4
 80040ec:	e7d2      	b.n	8004094 <_svfiprintf_r+0xa0>
 80040ee:	9b03      	ldr	r3, [sp, #12]
 80040f0:	1d19      	adds	r1, r3, #4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	9103      	str	r1, [sp, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bfbb      	ittet	lt
 80040fa:	425b      	neglt	r3, r3
 80040fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004100:	9307      	strge	r3, [sp, #28]
 8004102:	9307      	strlt	r3, [sp, #28]
 8004104:	bfb8      	it	lt
 8004106:	9204      	strlt	r2, [sp, #16]
 8004108:	7823      	ldrb	r3, [r4, #0]
 800410a:	2b2e      	cmp	r3, #46	@ 0x2e
 800410c:	d10a      	bne.n	8004124 <_svfiprintf_r+0x130>
 800410e:	7863      	ldrb	r3, [r4, #1]
 8004110:	2b2a      	cmp	r3, #42	@ 0x2a
 8004112:	d132      	bne.n	800417a <_svfiprintf_r+0x186>
 8004114:	9b03      	ldr	r3, [sp, #12]
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	9203      	str	r2, [sp, #12]
 800411c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004120:	3402      	adds	r4, #2
 8004122:	9305      	str	r3, [sp, #20]
 8004124:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041e8 <_svfiprintf_r+0x1f4>
 8004128:	7821      	ldrb	r1, [r4, #0]
 800412a:	2203      	movs	r2, #3
 800412c:	4650      	mov	r0, sl
 800412e:	f7fc f84f 	bl	80001d0 <memchr>
 8004132:	b138      	cbz	r0, 8004144 <_svfiprintf_r+0x150>
 8004134:	9b04      	ldr	r3, [sp, #16]
 8004136:	eba0 000a 	sub.w	r0, r0, sl
 800413a:	2240      	movs	r2, #64	@ 0x40
 800413c:	4082      	lsls	r2, r0
 800413e:	4313      	orrs	r3, r2
 8004140:	3401      	adds	r4, #1
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004148:	4824      	ldr	r0, [pc, #144]	@ (80041dc <_svfiprintf_r+0x1e8>)
 800414a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800414e:	2206      	movs	r2, #6
 8004150:	f7fc f83e 	bl	80001d0 <memchr>
 8004154:	2800      	cmp	r0, #0
 8004156:	d036      	beq.n	80041c6 <_svfiprintf_r+0x1d2>
 8004158:	4b21      	ldr	r3, [pc, #132]	@ (80041e0 <_svfiprintf_r+0x1ec>)
 800415a:	bb1b      	cbnz	r3, 80041a4 <_svfiprintf_r+0x1b0>
 800415c:	9b03      	ldr	r3, [sp, #12]
 800415e:	3307      	adds	r3, #7
 8004160:	f023 0307 	bic.w	r3, r3, #7
 8004164:	3308      	adds	r3, #8
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800416a:	4433      	add	r3, r6
 800416c:	9309      	str	r3, [sp, #36]	@ 0x24
 800416e:	e76a      	b.n	8004046 <_svfiprintf_r+0x52>
 8004170:	fb0c 3202 	mla	r2, ip, r2, r3
 8004174:	460c      	mov	r4, r1
 8004176:	2001      	movs	r0, #1
 8004178:	e7a8      	b.n	80040cc <_svfiprintf_r+0xd8>
 800417a:	2300      	movs	r3, #0
 800417c:	3401      	adds	r4, #1
 800417e:	9305      	str	r3, [sp, #20]
 8004180:	4619      	mov	r1, r3
 8004182:	f04f 0c0a 	mov.w	ip, #10
 8004186:	4620      	mov	r0, r4
 8004188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800418c:	3a30      	subs	r2, #48	@ 0x30
 800418e:	2a09      	cmp	r2, #9
 8004190:	d903      	bls.n	800419a <_svfiprintf_r+0x1a6>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0c6      	beq.n	8004124 <_svfiprintf_r+0x130>
 8004196:	9105      	str	r1, [sp, #20]
 8004198:	e7c4      	b.n	8004124 <_svfiprintf_r+0x130>
 800419a:	fb0c 2101 	mla	r1, ip, r1, r2
 800419e:	4604      	mov	r4, r0
 80041a0:	2301      	movs	r3, #1
 80041a2:	e7f0      	b.n	8004186 <_svfiprintf_r+0x192>
 80041a4:	ab03      	add	r3, sp, #12
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	462a      	mov	r2, r5
 80041aa:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <_svfiprintf_r+0x1f0>)
 80041ac:	a904      	add	r1, sp, #16
 80041ae:	4638      	mov	r0, r7
 80041b0:	f3af 8000 	nop.w
 80041b4:	1c42      	adds	r2, r0, #1
 80041b6:	4606      	mov	r6, r0
 80041b8:	d1d6      	bne.n	8004168 <_svfiprintf_r+0x174>
 80041ba:	89ab      	ldrh	r3, [r5, #12]
 80041bc:	065b      	lsls	r3, r3, #25
 80041be:	f53f af2d 	bmi.w	800401c <_svfiprintf_r+0x28>
 80041c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041c4:	e72c      	b.n	8004020 <_svfiprintf_r+0x2c>
 80041c6:	ab03      	add	r3, sp, #12
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	462a      	mov	r2, r5
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <_svfiprintf_r+0x1f0>)
 80041ce:	a904      	add	r1, sp, #16
 80041d0:	4638      	mov	r0, r7
 80041d2:	f000 f879 	bl	80042c8 <_printf_i>
 80041d6:	e7ed      	b.n	80041b4 <_svfiprintf_r+0x1c0>
 80041d8:	08004688 	.word	0x08004688
 80041dc:	08004692 	.word	0x08004692
 80041e0:	00000000 	.word	0x00000000
 80041e4:	08003f3d 	.word	0x08003f3d
 80041e8:	0800468e 	.word	0x0800468e

080041ec <_printf_common>:
 80041ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f0:	4616      	mov	r6, r2
 80041f2:	4698      	mov	r8, r3
 80041f4:	688a      	ldr	r2, [r1, #8]
 80041f6:	690b      	ldr	r3, [r1, #16]
 80041f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041fc:	4293      	cmp	r3, r2
 80041fe:	bfb8      	it	lt
 8004200:	4613      	movlt	r3, r2
 8004202:	6033      	str	r3, [r6, #0]
 8004204:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004208:	4607      	mov	r7, r0
 800420a:	460c      	mov	r4, r1
 800420c:	b10a      	cbz	r2, 8004212 <_printf_common+0x26>
 800420e:	3301      	adds	r3, #1
 8004210:	6033      	str	r3, [r6, #0]
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	0699      	lsls	r1, r3, #26
 8004216:	bf42      	ittt	mi
 8004218:	6833      	ldrmi	r3, [r6, #0]
 800421a:	3302      	addmi	r3, #2
 800421c:	6033      	strmi	r3, [r6, #0]
 800421e:	6825      	ldr	r5, [r4, #0]
 8004220:	f015 0506 	ands.w	r5, r5, #6
 8004224:	d106      	bne.n	8004234 <_printf_common+0x48>
 8004226:	f104 0a19 	add.w	sl, r4, #25
 800422a:	68e3      	ldr	r3, [r4, #12]
 800422c:	6832      	ldr	r2, [r6, #0]
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	42ab      	cmp	r3, r5
 8004232:	dc26      	bgt.n	8004282 <_printf_common+0x96>
 8004234:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004238:	6822      	ldr	r2, [r4, #0]
 800423a:	3b00      	subs	r3, #0
 800423c:	bf18      	it	ne
 800423e:	2301      	movne	r3, #1
 8004240:	0692      	lsls	r2, r2, #26
 8004242:	d42b      	bmi.n	800429c <_printf_common+0xb0>
 8004244:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004248:	4641      	mov	r1, r8
 800424a:	4638      	mov	r0, r7
 800424c:	47c8      	blx	r9
 800424e:	3001      	adds	r0, #1
 8004250:	d01e      	beq.n	8004290 <_printf_common+0xa4>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	6922      	ldr	r2, [r4, #16]
 8004256:	f003 0306 	and.w	r3, r3, #6
 800425a:	2b04      	cmp	r3, #4
 800425c:	bf02      	ittt	eq
 800425e:	68e5      	ldreq	r5, [r4, #12]
 8004260:	6833      	ldreq	r3, [r6, #0]
 8004262:	1aed      	subeq	r5, r5, r3
 8004264:	68a3      	ldr	r3, [r4, #8]
 8004266:	bf0c      	ite	eq
 8004268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800426c:	2500      	movne	r5, #0
 800426e:	4293      	cmp	r3, r2
 8004270:	bfc4      	itt	gt
 8004272:	1a9b      	subgt	r3, r3, r2
 8004274:	18ed      	addgt	r5, r5, r3
 8004276:	2600      	movs	r6, #0
 8004278:	341a      	adds	r4, #26
 800427a:	42b5      	cmp	r5, r6
 800427c:	d11a      	bne.n	80042b4 <_printf_common+0xc8>
 800427e:	2000      	movs	r0, #0
 8004280:	e008      	b.n	8004294 <_printf_common+0xa8>
 8004282:	2301      	movs	r3, #1
 8004284:	4652      	mov	r2, sl
 8004286:	4641      	mov	r1, r8
 8004288:	4638      	mov	r0, r7
 800428a:	47c8      	blx	r9
 800428c:	3001      	adds	r0, #1
 800428e:	d103      	bne.n	8004298 <_printf_common+0xac>
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004298:	3501      	adds	r5, #1
 800429a:	e7c6      	b.n	800422a <_printf_common+0x3e>
 800429c:	18e1      	adds	r1, r4, r3
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	2030      	movs	r0, #48	@ 0x30
 80042a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042a6:	4422      	add	r2, r4
 80042a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042b0:	3302      	adds	r3, #2
 80042b2:	e7c7      	b.n	8004244 <_printf_common+0x58>
 80042b4:	2301      	movs	r3, #1
 80042b6:	4622      	mov	r2, r4
 80042b8:	4641      	mov	r1, r8
 80042ba:	4638      	mov	r0, r7
 80042bc:	47c8      	blx	r9
 80042be:	3001      	adds	r0, #1
 80042c0:	d0e6      	beq.n	8004290 <_printf_common+0xa4>
 80042c2:	3601      	adds	r6, #1
 80042c4:	e7d9      	b.n	800427a <_printf_common+0x8e>
	...

080042c8 <_printf_i>:
 80042c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	7e0f      	ldrb	r7, [r1, #24]
 80042ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042d0:	2f78      	cmp	r7, #120	@ 0x78
 80042d2:	4691      	mov	r9, r2
 80042d4:	4680      	mov	r8, r0
 80042d6:	460c      	mov	r4, r1
 80042d8:	469a      	mov	sl, r3
 80042da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042de:	d807      	bhi.n	80042f0 <_printf_i+0x28>
 80042e0:	2f62      	cmp	r7, #98	@ 0x62
 80042e2:	d80a      	bhi.n	80042fa <_printf_i+0x32>
 80042e4:	2f00      	cmp	r7, #0
 80042e6:	f000 80d1 	beq.w	800448c <_printf_i+0x1c4>
 80042ea:	2f58      	cmp	r7, #88	@ 0x58
 80042ec:	f000 80b8 	beq.w	8004460 <_printf_i+0x198>
 80042f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042f8:	e03a      	b.n	8004370 <_printf_i+0xa8>
 80042fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042fe:	2b15      	cmp	r3, #21
 8004300:	d8f6      	bhi.n	80042f0 <_printf_i+0x28>
 8004302:	a101      	add	r1, pc, #4	@ (adr r1, 8004308 <_printf_i+0x40>)
 8004304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004308:	08004361 	.word	0x08004361
 800430c:	08004375 	.word	0x08004375
 8004310:	080042f1 	.word	0x080042f1
 8004314:	080042f1 	.word	0x080042f1
 8004318:	080042f1 	.word	0x080042f1
 800431c:	080042f1 	.word	0x080042f1
 8004320:	08004375 	.word	0x08004375
 8004324:	080042f1 	.word	0x080042f1
 8004328:	080042f1 	.word	0x080042f1
 800432c:	080042f1 	.word	0x080042f1
 8004330:	080042f1 	.word	0x080042f1
 8004334:	08004473 	.word	0x08004473
 8004338:	0800439f 	.word	0x0800439f
 800433c:	0800442d 	.word	0x0800442d
 8004340:	080042f1 	.word	0x080042f1
 8004344:	080042f1 	.word	0x080042f1
 8004348:	08004495 	.word	0x08004495
 800434c:	080042f1 	.word	0x080042f1
 8004350:	0800439f 	.word	0x0800439f
 8004354:	080042f1 	.word	0x080042f1
 8004358:	080042f1 	.word	0x080042f1
 800435c:	08004435 	.word	0x08004435
 8004360:	6833      	ldr	r3, [r6, #0]
 8004362:	1d1a      	adds	r2, r3, #4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6032      	str	r2, [r6, #0]
 8004368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800436c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004370:	2301      	movs	r3, #1
 8004372:	e09c      	b.n	80044ae <_printf_i+0x1e6>
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	1d19      	adds	r1, r3, #4
 800437a:	6031      	str	r1, [r6, #0]
 800437c:	0606      	lsls	r6, r0, #24
 800437e:	d501      	bpl.n	8004384 <_printf_i+0xbc>
 8004380:	681d      	ldr	r5, [r3, #0]
 8004382:	e003      	b.n	800438c <_printf_i+0xc4>
 8004384:	0645      	lsls	r5, r0, #25
 8004386:	d5fb      	bpl.n	8004380 <_printf_i+0xb8>
 8004388:	f9b3 5000 	ldrsh.w	r5, [r3]
 800438c:	2d00      	cmp	r5, #0
 800438e:	da03      	bge.n	8004398 <_printf_i+0xd0>
 8004390:	232d      	movs	r3, #45	@ 0x2d
 8004392:	426d      	negs	r5, r5
 8004394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004398:	4858      	ldr	r0, [pc, #352]	@ (80044fc <_printf_i+0x234>)
 800439a:	230a      	movs	r3, #10
 800439c:	e011      	b.n	80043c2 <_printf_i+0xfa>
 800439e:	6821      	ldr	r1, [r4, #0]
 80043a0:	6833      	ldr	r3, [r6, #0]
 80043a2:	0608      	lsls	r0, r1, #24
 80043a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043a8:	d402      	bmi.n	80043b0 <_printf_i+0xe8>
 80043aa:	0649      	lsls	r1, r1, #25
 80043ac:	bf48      	it	mi
 80043ae:	b2ad      	uxthmi	r5, r5
 80043b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043b2:	4852      	ldr	r0, [pc, #328]	@ (80044fc <_printf_i+0x234>)
 80043b4:	6033      	str	r3, [r6, #0]
 80043b6:	bf14      	ite	ne
 80043b8:	230a      	movne	r3, #10
 80043ba:	2308      	moveq	r3, #8
 80043bc:	2100      	movs	r1, #0
 80043be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043c2:	6866      	ldr	r6, [r4, #4]
 80043c4:	60a6      	str	r6, [r4, #8]
 80043c6:	2e00      	cmp	r6, #0
 80043c8:	db05      	blt.n	80043d6 <_printf_i+0x10e>
 80043ca:	6821      	ldr	r1, [r4, #0]
 80043cc:	432e      	orrs	r6, r5
 80043ce:	f021 0104 	bic.w	r1, r1, #4
 80043d2:	6021      	str	r1, [r4, #0]
 80043d4:	d04b      	beq.n	800446e <_printf_i+0x1a6>
 80043d6:	4616      	mov	r6, r2
 80043d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80043dc:	fb03 5711 	mls	r7, r3, r1, r5
 80043e0:	5dc7      	ldrb	r7, [r0, r7]
 80043e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043e6:	462f      	mov	r7, r5
 80043e8:	42bb      	cmp	r3, r7
 80043ea:	460d      	mov	r5, r1
 80043ec:	d9f4      	bls.n	80043d8 <_printf_i+0x110>
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d10b      	bne.n	800440a <_printf_i+0x142>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	07df      	lsls	r7, r3, #31
 80043f6:	d508      	bpl.n	800440a <_printf_i+0x142>
 80043f8:	6923      	ldr	r3, [r4, #16]
 80043fa:	6861      	ldr	r1, [r4, #4]
 80043fc:	4299      	cmp	r1, r3
 80043fe:	bfde      	ittt	le
 8004400:	2330      	movle	r3, #48	@ 0x30
 8004402:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004406:	f106 36ff 	addle.w	r6, r6, #4294967295
 800440a:	1b92      	subs	r2, r2, r6
 800440c:	6122      	str	r2, [r4, #16]
 800440e:	f8cd a000 	str.w	sl, [sp]
 8004412:	464b      	mov	r3, r9
 8004414:	aa03      	add	r2, sp, #12
 8004416:	4621      	mov	r1, r4
 8004418:	4640      	mov	r0, r8
 800441a:	f7ff fee7 	bl	80041ec <_printf_common>
 800441e:	3001      	adds	r0, #1
 8004420:	d14a      	bne.n	80044b8 <_printf_i+0x1f0>
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
 8004426:	b004      	add	sp, #16
 8004428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	f043 0320 	orr.w	r3, r3, #32
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	4832      	ldr	r0, [pc, #200]	@ (8004500 <_printf_i+0x238>)
 8004436:	2778      	movs	r7, #120	@ 0x78
 8004438:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	6831      	ldr	r1, [r6, #0]
 8004440:	061f      	lsls	r7, r3, #24
 8004442:	f851 5b04 	ldr.w	r5, [r1], #4
 8004446:	d402      	bmi.n	800444e <_printf_i+0x186>
 8004448:	065f      	lsls	r7, r3, #25
 800444a:	bf48      	it	mi
 800444c:	b2ad      	uxthmi	r5, r5
 800444e:	6031      	str	r1, [r6, #0]
 8004450:	07d9      	lsls	r1, r3, #31
 8004452:	bf44      	itt	mi
 8004454:	f043 0320 	orrmi.w	r3, r3, #32
 8004458:	6023      	strmi	r3, [r4, #0]
 800445a:	b11d      	cbz	r5, 8004464 <_printf_i+0x19c>
 800445c:	2310      	movs	r3, #16
 800445e:	e7ad      	b.n	80043bc <_printf_i+0xf4>
 8004460:	4826      	ldr	r0, [pc, #152]	@ (80044fc <_printf_i+0x234>)
 8004462:	e7e9      	b.n	8004438 <_printf_i+0x170>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	f023 0320 	bic.w	r3, r3, #32
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	e7f6      	b.n	800445c <_printf_i+0x194>
 800446e:	4616      	mov	r6, r2
 8004470:	e7bd      	b.n	80043ee <_printf_i+0x126>
 8004472:	6833      	ldr	r3, [r6, #0]
 8004474:	6825      	ldr	r5, [r4, #0]
 8004476:	6961      	ldr	r1, [r4, #20]
 8004478:	1d18      	adds	r0, r3, #4
 800447a:	6030      	str	r0, [r6, #0]
 800447c:	062e      	lsls	r6, r5, #24
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	d501      	bpl.n	8004486 <_printf_i+0x1be>
 8004482:	6019      	str	r1, [r3, #0]
 8004484:	e002      	b.n	800448c <_printf_i+0x1c4>
 8004486:	0668      	lsls	r0, r5, #25
 8004488:	d5fb      	bpl.n	8004482 <_printf_i+0x1ba>
 800448a:	8019      	strh	r1, [r3, #0]
 800448c:	2300      	movs	r3, #0
 800448e:	6123      	str	r3, [r4, #16]
 8004490:	4616      	mov	r6, r2
 8004492:	e7bc      	b.n	800440e <_printf_i+0x146>
 8004494:	6833      	ldr	r3, [r6, #0]
 8004496:	1d1a      	adds	r2, r3, #4
 8004498:	6032      	str	r2, [r6, #0]
 800449a:	681e      	ldr	r6, [r3, #0]
 800449c:	6862      	ldr	r2, [r4, #4]
 800449e:	2100      	movs	r1, #0
 80044a0:	4630      	mov	r0, r6
 80044a2:	f7fb fe95 	bl	80001d0 <memchr>
 80044a6:	b108      	cbz	r0, 80044ac <_printf_i+0x1e4>
 80044a8:	1b80      	subs	r0, r0, r6
 80044aa:	6060      	str	r0, [r4, #4]
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	6123      	str	r3, [r4, #16]
 80044b0:	2300      	movs	r3, #0
 80044b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044b6:	e7aa      	b.n	800440e <_printf_i+0x146>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	4632      	mov	r2, r6
 80044bc:	4649      	mov	r1, r9
 80044be:	4640      	mov	r0, r8
 80044c0:	47d0      	blx	sl
 80044c2:	3001      	adds	r0, #1
 80044c4:	d0ad      	beq.n	8004422 <_printf_i+0x15a>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	079b      	lsls	r3, r3, #30
 80044ca:	d413      	bmi.n	80044f4 <_printf_i+0x22c>
 80044cc:	68e0      	ldr	r0, [r4, #12]
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	4298      	cmp	r0, r3
 80044d2:	bfb8      	it	lt
 80044d4:	4618      	movlt	r0, r3
 80044d6:	e7a6      	b.n	8004426 <_printf_i+0x15e>
 80044d8:	2301      	movs	r3, #1
 80044da:	4632      	mov	r2, r6
 80044dc:	4649      	mov	r1, r9
 80044de:	4640      	mov	r0, r8
 80044e0:	47d0      	blx	sl
 80044e2:	3001      	adds	r0, #1
 80044e4:	d09d      	beq.n	8004422 <_printf_i+0x15a>
 80044e6:	3501      	adds	r5, #1
 80044e8:	68e3      	ldr	r3, [r4, #12]
 80044ea:	9903      	ldr	r1, [sp, #12]
 80044ec:	1a5b      	subs	r3, r3, r1
 80044ee:	42ab      	cmp	r3, r5
 80044f0:	dcf2      	bgt.n	80044d8 <_printf_i+0x210>
 80044f2:	e7eb      	b.n	80044cc <_printf_i+0x204>
 80044f4:	2500      	movs	r5, #0
 80044f6:	f104 0619 	add.w	r6, r4, #25
 80044fa:	e7f5      	b.n	80044e8 <_printf_i+0x220>
 80044fc:	08004699 	.word	0x08004699
 8004500:	080046aa 	.word	0x080046aa

08004504 <memmove>:
 8004504:	4288      	cmp	r0, r1
 8004506:	b510      	push	{r4, lr}
 8004508:	eb01 0402 	add.w	r4, r1, r2
 800450c:	d902      	bls.n	8004514 <memmove+0x10>
 800450e:	4284      	cmp	r4, r0
 8004510:	4623      	mov	r3, r4
 8004512:	d807      	bhi.n	8004524 <memmove+0x20>
 8004514:	1e43      	subs	r3, r0, #1
 8004516:	42a1      	cmp	r1, r4
 8004518:	d008      	beq.n	800452c <memmove+0x28>
 800451a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800451e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004522:	e7f8      	b.n	8004516 <memmove+0x12>
 8004524:	4402      	add	r2, r0
 8004526:	4601      	mov	r1, r0
 8004528:	428a      	cmp	r2, r1
 800452a:	d100      	bne.n	800452e <memmove+0x2a>
 800452c:	bd10      	pop	{r4, pc}
 800452e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004536:	e7f7      	b.n	8004528 <memmove+0x24>

08004538 <_sbrk_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4d06      	ldr	r5, [pc, #24]	@ (8004554 <_sbrk_r+0x1c>)
 800453c:	2300      	movs	r3, #0
 800453e:	4604      	mov	r4, r0
 8004540:	4608      	mov	r0, r1
 8004542:	602b      	str	r3, [r5, #0]
 8004544:	f7fc fd86 	bl	8001054 <_sbrk>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_sbrk_r+0x1a>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	b103      	cbz	r3, 8004552 <_sbrk_r+0x1a>
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	200002ac 	.word	0x200002ac

08004558 <memcpy>:
 8004558:	440a      	add	r2, r1
 800455a:	4291      	cmp	r1, r2
 800455c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004560:	d100      	bne.n	8004564 <memcpy+0xc>
 8004562:	4770      	bx	lr
 8004564:	b510      	push	{r4, lr}
 8004566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800456a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800456e:	4291      	cmp	r1, r2
 8004570:	d1f9      	bne.n	8004566 <memcpy+0xe>
 8004572:	bd10      	pop	{r4, pc}

08004574 <_realloc_r>:
 8004574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004578:	4607      	mov	r7, r0
 800457a:	4614      	mov	r4, r2
 800457c:	460d      	mov	r5, r1
 800457e:	b921      	cbnz	r1, 800458a <_realloc_r+0x16>
 8004580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004584:	4611      	mov	r1, r2
 8004586:	f7ff bc4d 	b.w	8003e24 <_malloc_r>
 800458a:	b92a      	cbnz	r2, 8004598 <_realloc_r+0x24>
 800458c:	f7ff fbde 	bl	8003d4c <_free_r>
 8004590:	4625      	mov	r5, r4
 8004592:	4628      	mov	r0, r5
 8004594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004598:	f000 f81a 	bl	80045d0 <_malloc_usable_size_r>
 800459c:	4284      	cmp	r4, r0
 800459e:	4606      	mov	r6, r0
 80045a0:	d802      	bhi.n	80045a8 <_realloc_r+0x34>
 80045a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045a6:	d8f4      	bhi.n	8004592 <_realloc_r+0x1e>
 80045a8:	4621      	mov	r1, r4
 80045aa:	4638      	mov	r0, r7
 80045ac:	f7ff fc3a 	bl	8003e24 <_malloc_r>
 80045b0:	4680      	mov	r8, r0
 80045b2:	b908      	cbnz	r0, 80045b8 <_realloc_r+0x44>
 80045b4:	4645      	mov	r5, r8
 80045b6:	e7ec      	b.n	8004592 <_realloc_r+0x1e>
 80045b8:	42b4      	cmp	r4, r6
 80045ba:	4622      	mov	r2, r4
 80045bc:	4629      	mov	r1, r5
 80045be:	bf28      	it	cs
 80045c0:	4632      	movcs	r2, r6
 80045c2:	f7ff ffc9 	bl	8004558 <memcpy>
 80045c6:	4629      	mov	r1, r5
 80045c8:	4638      	mov	r0, r7
 80045ca:	f7ff fbbf 	bl	8003d4c <_free_r>
 80045ce:	e7f1      	b.n	80045b4 <_realloc_r+0x40>

080045d0 <_malloc_usable_size_r>:
 80045d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d4:	1f18      	subs	r0, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bfbc      	itt	lt
 80045da:	580b      	ldrlt	r3, [r1, r0]
 80045dc:	18c0      	addlt	r0, r0, r3
 80045de:	4770      	bx	lr

080045e0 <_init>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr

080045ec <_fini>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	bf00      	nop
 80045f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f2:	bc08      	pop	{r3}
 80045f4:	469e      	mov	lr, r3
 80045f6:	4770      	bx	lr
