
LCD_1602_I2C_Display_with_Nucleo_STM32L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004704  08004704  00005704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c8  080047c8  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080047c8  080047c8  000057c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d0  080047d0  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047d4  080047d4  000057d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080047d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000006c  08004844  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004844  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e75c  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e0  00000000  00000000  000147f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000168d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  00017618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002083a  00000000  00000000  00018051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd38  00000000  00000000  0003888b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c26a0  00000000  00000000  000485c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ac63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b08  00000000  00000000  0010aca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0010e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046ec 	.word	0x080046ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080046ec 	.word	0x080046ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HD44780_Init>:
		0b10011, 0b00000 };

uint8_t special2[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01001,
		0b00110, 0b00000 };

void HD44780_Init(uint8_t rows) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 80005a6:	4a38      	ldr	r2, [pc, #224]	@ (8000688 <HD44780_Init+0xec>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	7013      	strb	r3, [r2, #0]

	dpBacklight = LCD_BACKLIGHT;
 80005ac:	4b37      	ldr	r3, [pc, #220]	@ (800068c <HD44780_Init+0xf0>)
 80005ae:	2208      	movs	r2, #8
 80005b0:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005b2:	4b37      	ldr	r3, [pc, #220]	@ (8000690 <HD44780_Init+0xf4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]

	if (dpRows > 1) {
 80005b8:	4b33      	ldr	r3, [pc, #204]	@ (8000688 <HD44780_Init+0xec>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d907      	bls.n	80005d0 <HD44780_Init+0x34>
		dpFunction |= LCD_2LINE;
 80005c0:	4b33      	ldr	r3, [pc, #204]	@ (8000690 <HD44780_Init+0xf4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <HD44780_Init+0xf4>)
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e006      	b.n	80005de <HD44780_Init+0x42>
	} else {
		dpFunction |= LCD_5x10DOTS;
 80005d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <HD44780_Init+0xf4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <HD44780_Init+0xf4>)
 80005dc:	701a      	strb	r2, [r3, #0]
	}

	/* Wait for initialization */
	DelayInit();
 80005de:	f000 fa13 	bl	8000a08 <DelayInit>
	HAL_Delay(50);
 80005e2:	2032      	movs	r0, #50	@ 0x32
 80005e4:	f000 fea2 	bl	800132c <HAL_Delay>

	ExpanderWrite(dpBacklight);
 80005e8:	4b28      	ldr	r3, [pc, #160]	@ (800068c <HD44780_Init+0xf0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f9d1 	bl	8000994 <ExpanderWrite>
	HAL_Delay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f6:	f000 fe99 	bl	800132c <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 80005fa:	2030      	movs	r0, #48	@ 0x30
 80005fc:	f000 f9b9 	bl	8000972 <Write4Bits>
	DelayUS(4500);
 8000600:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000604:	f000 fa2a 	bl	8000a5c <DelayUS>

	Write4Bits(0x03 << 4);
 8000608:	2030      	movs	r0, #48	@ 0x30
 800060a:	f000 f9b2 	bl	8000972 <Write4Bits>
	DelayUS(4500);
 800060e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000612:	f000 fa23 	bl	8000a5c <DelayUS>

	Write4Bits(0x03 << 4);
 8000616:	2030      	movs	r0, #48	@ 0x30
 8000618:	f000 f9ab 	bl	8000972 <Write4Bits>
	DelayUS(4500);
 800061c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000620:	f000 fa1c 	bl	8000a5c <DelayUS>

	Write4Bits(0x02 << 4);
 8000624:	2020      	movs	r0, #32
 8000626:	f000 f9a4 	bl	8000972 <Write4Bits>
	DelayUS(100);
 800062a:	2064      	movs	r0, #100	@ 0x64
 800062c:	f000 fa16 	bl	8000a5c <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000630:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <HD44780_Init+0xf4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f043 0320 	orr.w	r3, r3, #32
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f95c 	bl	80008f8 <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000640:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <HD44780_Init+0xf8>)
 8000642:	2204      	movs	r2, #4
 8000644:	701a      	strb	r2, [r3, #0]
	HD44780_Display();
 8000646:	f000 f88b 	bl	8000760 <HD44780_Display>
	HD44780_Clear();
 800064a:	f000 f82b 	bl	80006a4 <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800064e:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HD44780_Init+0xfc>)
 8000650:	2202      	movs	r2, #2
 8000652:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 8000654:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <HD44780_Init+0xfc>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f94a 	bl	80008f8 <SendCommand>
	DelayUS(4500);
 8000664:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000668:	f000 f9f8 	bl	8000a5c <DelayUS>

	HD44780_CreateSpecialChar(0, special1);
 800066c:	490b      	ldr	r1, [pc, #44]	@ (800069c <HD44780_Init+0x100>)
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f8eb 	bl	800084a <HD44780_CreateSpecialChar>
	HD44780_CreateSpecialChar(1, special2);
 8000674:	490a      	ldr	r1, [pc, #40]	@ (80006a0 <HD44780_Init+0x104>)
 8000676:	2001      	movs	r0, #1
 8000678:	f000 f8e7 	bl	800084a <HD44780_CreateSpecialChar>

	HD44780_Home();
 800067c:	f000 f81d 	bl	80006ba <HD44780_Home>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000008b 	.word	0x2000008b
 800068c:	2000008c 	.word	0x2000008c
 8000690:	20000088 	.word	0x20000088
 8000694:	20000089 	.word	0x20000089
 8000698:	2000008a 	.word	0x2000008a
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008

080006a4 <HD44780_Clear>:

void HD44780_Clear() {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 f925 	bl	80008f8 <SendCommand>
	DelayUS(2000);
 80006ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006b2:	f000 f9d3 	bl	8000a5c <DelayUS>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HD44780_Home>:

void HD44780_Home() {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 80006be:	2002      	movs	r0, #2
 80006c0:	f000 f91a 	bl	80008f8 <SendCommand>
	DelayUS(2000);
 80006c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006c8:	f000 f9c8 	bl	8000a5c <DelayUS>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <HD44780_SetCursor+0x5c>)
 80006e2:	f107 0408 	add.w	r4, r7, #8
 80006e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <HD44780_SetCursor+0x60>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d303      	bcc.n	80006fe <HD44780_SetCursor+0x2e>
		row = dpRows - 1;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <HD44780_SetCursor+0x60>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006fe:	79bb      	ldrb	r3, [r7, #6]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	3318      	adds	r3, #24
 8000704:	443b      	add	r3, r7
 8000706:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800070a:	b2da      	uxtb	r2, r3
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4413      	add	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	b25b      	sxtb	r3, r3
 8000714:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000718:	b25b      	sxtb	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f8eb 	bl	80008f8 <SendCommand>
}
 8000722:	bf00      	nop
 8000724:	371c      	adds	r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	bf00      	nop
 800072c:	08004704 	.word	0x08004704
 8000730:	2000008b 	.word	0x2000008b

08000734 <HD44780_NoDisplay>:

void HD44780_NoDisplay() {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	dpControl &= ~LCD_DISPLAYON;
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <HD44780_NoDisplay+0x28>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f023 0304 	bic.w	r3, r3, #4
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HD44780_NoDisplay+0x28>)
 8000744:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HD44780_NoDisplay+0x28>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f8d1 	bl	80008f8 <SendCommand>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000089 	.word	0x20000089

08000760 <HD44780_Display>:

void HD44780_Display() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	dpControl |= LCD_DISPLAYON;
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <HD44780_Display+0x28>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <HD44780_Display+0x28>)
 8000770:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000772:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <HD44780_Display+0x28>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f8bb 	bl	80008f8 <SendCommand>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000089 	.word	0x20000089

0800078c <HD44780_NoCursor>:

void HD44780_NoCursor() {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	dpControl &= ~LCD_CURSORON;
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <HD44780_NoCursor+0x28>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f023 0302 	bic.w	r3, r3, #2
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HD44780_NoCursor+0x28>)
 800079c:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HD44780_NoCursor+0x28>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f8a5 	bl	80008f8 <SendCommand>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000089 	.word	0x20000089

080007b8 <HD44780_Cursor>:

void HD44780_Cursor() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	dpControl |= LCD_CURSORON;
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HD44780_Cursor+0x28>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HD44780_Cursor+0x28>)
 80007c8:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HD44780_Cursor+0x28>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f88f 	bl	80008f8 <SendCommand>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000089 	.word	0x20000089

080007e4 <HD44780_NoBlink>:

void HD44780_NoBlink() {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	dpControl &= ~LCD_BLINKON;
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <HD44780_NoBlink+0x28>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f023 0301 	bic.w	r3, r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HD44780_NoBlink+0x28>)
 80007f4:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007f6:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HD44780_NoBlink+0x28>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f879 	bl	80008f8 <SendCommand>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000089 	.word	0x20000089

08000810 <HD44780_Blink>:

void HD44780_Blink() {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	dpControl |= LCD_BLINKON;
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <HD44780_Blink+0x28>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HD44780_Blink+0x28>)
 8000820:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000822:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HD44780_Blink+0x28>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f863 	bl	80008f8 <SendCommand>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000089 	.word	0x20000089

0800083c <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8000840:	2018      	movs	r0, #24
 8000842:	f000 f859 	bl	80008f8 <SendCommand>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}

0800084a <HD44780_CreateSpecialChar>:
void HD44780_NoAutoScroll(void) {
	dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
	SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 800084a:	b580      	push	{r7, lr}
 800084c:	b084      	sub	sp, #16
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	6039      	str	r1, [r7, #0]
 8000854:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 0307 	and.w	r3, r3, #7
 800085c:	71fb      	strb	r3, [r7, #7]
	SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	b25b      	sxtb	r3, r3
 8000866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800086a:	b25b      	sxtb	r3, r3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f842 	bl	80008f8 <SendCommand>
	for (int i = 0; i < 8; i++) {
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e009      	b.n	800088e <HD44780_CreateSpecialChar+0x44>
		SendChar(charmap[i]);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f846 	bl	8000914 <SendChar>
	for (int i = 0; i < 8; i++) {
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b07      	cmp	r3, #7
 8000892:	ddf2      	ble.n	800087a <HD44780_CreateSpecialChar+0x30>
	}
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
	HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	while (*c)
 80008a6:	e006      	b.n	80008b6 <HD44780_PrintStr+0x18>
		SendChar(*c++);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f82f 	bl	8000914 <SendChar>
	while (*c)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f4      	bne.n	80008a8 <HD44780_PrintStr+0xa>
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <HD44780_NoBacklight>:
		HD44780_Backlight();
	else
		HD44780_NoBacklight();
}

void HD44780_NoBacklight(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	dpBacklight = LCD_NOBACKLIGHT;
 80008cc:	4b03      	ldr	r3, [pc, #12]	@ (80008dc <HD44780_NoBacklight+0x14>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
	ExpanderWrite(0);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f85e 	bl	8000994 <ExpanderWrite>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000008c 	.word	0x2000008c

080008e0 <HD44780_Backlight>:

void HD44780_Backlight(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	dpBacklight = LCD_BACKLIGHT;
 80008e4:	4b03      	ldr	r3, [pc, #12]	@ (80008f4 <HD44780_Backlight+0x14>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	701a      	strb	r2, [r3, #0]
	ExpanderWrite(0);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f852 	bl	8000994 <ExpanderWrite>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000008c 	.word	0x2000008c

080008f8 <SendCommand>:

static void SendCommand(uint8_t cmd) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f812 	bl	8000930 <Send>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <SendChar>:

static void SendChar(uint8_t ch) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f804 	bl	8000930 <Send>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <Send>:

static void Send(uint8_t value, uint8_t mode) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	460a      	mov	r2, r1
 800093a:	71fb      	strb	r3, [r7, #7]
 800093c:	4613      	mov	r3, r2
 800093e:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f023 030f 	bic.w	r3, r3, #15
 8000946:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	4313      	orrs	r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f80b 	bl	8000972 <Write4Bits>
	Write4Bits((lownib) | mode);
 800095c:	7bba      	ldrb	r2, [r7, #14]
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	4313      	orrs	r3, r2
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f804 	bl	8000972 <Write4Bits>
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <Write4Bits>:

static void Write4Bits(uint8_t value) {
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f808 	bl	8000994 <ExpanderWrite>
	PulseEnable(value);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f820 	bl	80009cc <PulseEnable>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <ExpanderWrite+0x30>)
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 80009aa:	f107 020f 	add.w	r2, r7, #15
 80009ae:	230a      	movs	r3, #10
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	214e      	movs	r1, #78	@ 0x4e
 80009b6:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <ExpanderWrite+0x34>)
 80009b8:	f000 ffe0 	bl	800197c <HAL_I2C_Master_Transmit>
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000008c 	.word	0x2000008c
 80009c8:	20000090 	.word	0x20000090

080009cc <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffd8 	bl	8000994 <ExpanderWrite>
	DelayUS(20);
 80009e4:	2014      	movs	r0, #20
 80009e6:	f000 f839 	bl	8000a5c <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f023 0304 	bic.w	r3, r3, #4
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffce 	bl	8000994 <ExpanderWrite>
	DelayUS(20);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f000 f82f 	bl	8000a5c <DelayUS>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <DelayInit>:

static void DelayInit(void) {
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <DelayInit+0x4c>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <DelayInit+0x4c>)
 8000a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000a16:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <DelayInit+0x4c>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <DelayInit+0x4c>)
 8000a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a22:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <DelayInit+0x50>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <DelayInit+0x50>)
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <DelayInit+0x50>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <DelayInit+0x50>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <DelayInit+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8000a42:	bf00      	nop
	__ASM volatile ("NOP");
 8000a44:	bf00      	nop
	__ASM volatile ("NOP");
 8000a46:	bf00      	nop
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000edf0 	.word	0xe000edf0
 8000a58:	e0001000 	.word	0xe0001000

08000a5c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <DelayUS+0x44>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <DelayUS+0x48>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9a      	lsrs	r2, r3, #18
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <DelayUS+0x4c>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <DelayUS+0x4c>)
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d8f6      	bhi.n	8000a7e <DelayUS+0x22>
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000010 	.word	0x20000010
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	e0001000 	.word	0xe0001000

08000aac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ab2:	f000 fbc6 	bl	8001242 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ab6:	f000 f91b 	bl	8000cf0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aba:	f000 f9eb 	bl	8000e94 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000abe:	f000 f9b9 	bl	8000e34 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000ac2:	f000 f977 	bl	8000db4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HD44780_Init(2);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f7ff fd68 	bl	800059c <HD44780_Init>
	HD44780_Clear();
 8000acc:	f7ff fdea 	bl	80006a4 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fdfc 	bl	80006d0 <HD44780_SetCursor>
	HD44780_PrintStr("HELLO");
 8000ad8:	4881      	ldr	r0, [pc, #516]	@ (8000ce0 <main+0x234>)
 8000ada:	f7ff fee0 	bl	800089e <HD44780_PrintStr>
	HD44780_SetCursor(10, 1);
 8000ade:	2101      	movs	r1, #1
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	f7ff fdf5 	bl	80006d0 <HD44780_SetCursor>
	HD44780_PrintStr("WORLD");
 8000ae6:	487f      	ldr	r0, [pc, #508]	@ (8000ce4 <main+0x238>)
 8000ae8:	f7ff fed9 	bl	800089e <HD44780_PrintStr>
	HAL_Delay(2000);
 8000aec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000af0:	f000 fc1c 	bl	800132c <HAL_Delay>

	HD44780_Clear();
 8000af4:	f7ff fdd6 	bl	80006a4 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fde8 	bl	80006d0 <HD44780_SetCursor>
	HD44780_PrintStr("HELLO");
 8000b00:	4877      	ldr	r0, [pc, #476]	@ (8000ce0 <main+0x234>)
 8000b02:	f7ff fecc 	bl	800089e <HD44780_PrintStr>
	HAL_Delay(2000);
 8000b06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b0a:	f000 fc0f 	bl	800132c <HAL_Delay>
	HD44780_NoBacklight();
 8000b0e:	f7ff fedb 	bl	80008c8 <HD44780_NoBacklight>
	HAL_Delay(2000);
 8000b12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b16:	f000 fc09 	bl	800132c <HAL_Delay>
	HD44780_Backlight();
 8000b1a:	f7ff fee1 	bl	80008e0 <HD44780_Backlight>

	HAL_Delay(2000);
 8000b1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b22:	f000 fc03 	bl	800132c <HAL_Delay>
	HD44780_Cursor();
 8000b26:	f7ff fe47 	bl	80007b8 <HD44780_Cursor>
	HAL_Delay(2000);
 8000b2a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b2e:	f000 fbfd 	bl	800132c <HAL_Delay>
	HD44780_Blink();
 8000b32:	f7ff fe6d 	bl	8000810 <HD44780_Blink>
	HAL_Delay(5000);
 8000b36:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b3a:	f000 fbf7 	bl	800132c <HAL_Delay>
	HD44780_NoBlink();
 8000b3e:	f7ff fe51 	bl	80007e4 <HD44780_NoBlink>
	HAL_Delay(2000);
 8000b42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b46:	f000 fbf1 	bl	800132c <HAL_Delay>
	HD44780_NoCursor();
 8000b4a:	f7ff fe1f 	bl	800078c <HD44780_NoCursor>
	HAL_Delay(2000);
 8000b4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b52:	f000 fbeb 	bl	800132c <HAL_Delay>

	HD44780_NoDisplay();
 8000b56:	f7ff fded 	bl	8000734 <HD44780_NoDisplay>
	HAL_Delay(2000);
 8000b5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b5e:	f000 fbe5 	bl	800132c <HAL_Delay>
	HD44780_Display();
 8000b62:	f7ff fdfd 	bl	8000760 <HD44780_Display>

	HD44780_Clear();
 8000b66:	f7ff fd9d 	bl	80006a4 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fdaf 	bl	80006d0 <HD44780_SetCursor>
	HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 8000b72:	485d      	ldr	r0, [pc, #372]	@ (8000ce8 <main+0x23c>)
 8000b74:	f7ff fe93 	bl	800089e <HD44780_PrintStr>

	for (int x = 0; x < 40; x = x + 1) {
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
 8000b7c:	e008      	b.n	8000b90 <main+0xe4>
		HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000b7e:	f7ff fe5d 	bl	800083c <HD44780_ScrollDisplayLeft>
		HAL_Delay(500);
 8000b82:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b86:	f000 fbd1 	bl	800132c <HAL_Delay>
	for (int x = 0; x < 40; x = x + 1) {
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	2b27      	cmp	r3, #39	@ 0x27
 8000b94:	ddf3      	ble.n	8000b7e <main+0xd2>
	}

	char snum[5];
	for (int x = 1; x <= 200; x++) {
 8000b96:	2301      	movs	r3, #1
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	e018      	b.n	8000bce <main+0x122>
		snprintf(snum, sizeof(snum), "%d", x);
 8000b9c:	f107 0008 	add.w	r0, r7, #8
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	4a52      	ldr	r2, [pc, #328]	@ (8000cec <main+0x240>)
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	f003 f8ed 	bl	8003d84 <sniprintf>
		HD44780_Clear();
 8000baa:	f7ff fd7b 	bl	80006a4 <HD44780_Clear>
		HD44780_SetCursor(0, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fd8d 	bl	80006d0 <HD44780_SetCursor>
		HD44780_PrintStr(snum);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe6f 	bl	800089e <HD44780_PrintStr>
		HAL_Delay(1000);
 8000bc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc4:	f000 fbb2 	bl	800132c <HAL_Delay>
	for (int x = 1; x <= 200; x++) {
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	2bc8      	cmp	r3, #200	@ 0xc8
 8000bd2:	dde3      	ble.n	8000b9c <main+0xf0>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HD44780_Init(2);
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f7ff fce1 	bl	800059c <HD44780_Init>
		HD44780_Clear();
 8000bda:	f7ff fd63 	bl	80006a4 <HD44780_Clear>
		HD44780_SetCursor(0, 0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fd75 	bl	80006d0 <HD44780_SetCursor>
		HD44780_PrintStr("HELLO");
 8000be6:	483e      	ldr	r0, [pc, #248]	@ (8000ce0 <main+0x234>)
 8000be8:	f7ff fe59 	bl	800089e <HD44780_PrintStr>
		HD44780_SetCursor(10, 1);
 8000bec:	2101      	movs	r1, #1
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f7ff fd6e 	bl	80006d0 <HD44780_SetCursor>
		HD44780_PrintStr("WORLD");
 8000bf4:	483b      	ldr	r0, [pc, #236]	@ (8000ce4 <main+0x238>)
 8000bf6:	f7ff fe52 	bl	800089e <HD44780_PrintStr>
		HAL_Delay(2000);
 8000bfa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bfe:	f000 fb95 	bl	800132c <HAL_Delay>

		HD44780_Clear();
 8000c02:	f7ff fd4f 	bl	80006a4 <HD44780_Clear>
		HD44780_SetCursor(0, 0);
 8000c06:	2100      	movs	r1, #0
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff fd61 	bl	80006d0 <HD44780_SetCursor>
		HD44780_PrintStr("HELLO");
 8000c0e:	4834      	ldr	r0, [pc, #208]	@ (8000ce0 <main+0x234>)
 8000c10:	f7ff fe45 	bl	800089e <HD44780_PrintStr>
		HAL_Delay(2000);
 8000c14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c18:	f000 fb88 	bl	800132c <HAL_Delay>
		HD44780_NoBacklight();
 8000c1c:	f7ff fe54 	bl	80008c8 <HD44780_NoBacklight>
		HAL_Delay(2000);
 8000c20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c24:	f000 fb82 	bl	800132c <HAL_Delay>
		HD44780_Backlight();
 8000c28:	f7ff fe5a 	bl	80008e0 <HD44780_Backlight>

		HAL_Delay(2000);
 8000c2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c30:	f000 fb7c 	bl	800132c <HAL_Delay>
		HD44780_Cursor();
 8000c34:	f7ff fdc0 	bl	80007b8 <HD44780_Cursor>
		HAL_Delay(2000);
 8000c38:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c3c:	f000 fb76 	bl	800132c <HAL_Delay>
		HD44780_Blink();
 8000c40:	f7ff fde6 	bl	8000810 <HD44780_Blink>
		HAL_Delay(5000);
 8000c44:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c48:	f000 fb70 	bl	800132c <HAL_Delay>
		HD44780_NoBlink();
 8000c4c:	f7ff fdca 	bl	80007e4 <HD44780_NoBlink>
		HAL_Delay(2000);
 8000c50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c54:	f000 fb6a 	bl	800132c <HAL_Delay>
		HD44780_NoCursor();
 8000c58:	f7ff fd98 	bl	800078c <HD44780_NoCursor>
		HAL_Delay(2000);
 8000c5c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c60:	f000 fb64 	bl	800132c <HAL_Delay>

		HD44780_NoDisplay();
 8000c64:	f7ff fd66 	bl	8000734 <HD44780_NoDisplay>
		HAL_Delay(2000);
 8000c68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c6c:	f000 fb5e 	bl	800132c <HAL_Delay>
		HD44780_Display();
 8000c70:	f7ff fd76 	bl	8000760 <HD44780_Display>

		HD44780_Clear();
 8000c74:	f7ff fd16 	bl	80006a4 <HD44780_Clear>
		HD44780_SetCursor(0, 0);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fd28 	bl	80006d0 <HD44780_SetCursor>
		HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 8000c80:	4819      	ldr	r0, [pc, #100]	@ (8000ce8 <main+0x23c>)
 8000c82:	f7ff fe0c 	bl	800089e <HD44780_PrintStr>

		for (int x = 0; x < 40; x = x + 1) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e008      	b.n	8000c9e <main+0x1f2>
			HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000c8c:	f7ff fdd6 	bl	800083c <HD44780_ScrollDisplayLeft>
			HAL_Delay(500);
 8000c90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c94:	f000 fb4a 	bl	800132c <HAL_Delay>
		for (int x = 0; x < 40; x = x + 1) {
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2b27      	cmp	r3, #39	@ 0x27
 8000ca2:	ddf3      	ble.n	8000c8c <main+0x1e0>
		}

		char snum[5];
		for (int x = 1; x <= 200; x++) {
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	e016      	b.n	8000cd8 <main+0x22c>
			snprintf(snum, sizeof(snum), "%d", x);
 8000caa:	4638      	mov	r0, r7
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <main+0x240>)
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	f003 f867 	bl	8003d84 <sniprintf>
			HD44780_Clear();
 8000cb6:	f7ff fcf5 	bl	80006a4 <HD44780_Clear>
			HD44780_SetCursor(0, 0);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fd07 	bl	80006d0 <HD44780_SetCursor>
			HD44780_PrintStr(snum);
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fdea 	bl	800089e <HD44780_PrintStr>
			HAL_Delay(1000);
 8000cca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cce:	f000 fb2d 	bl	800132c <HAL_Delay>
		for (int x = 1; x <= 200; x++) {
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	2bc8      	cmp	r3, #200	@ 0xc8
 8000cdc:	dde5      	ble.n	8000caa <main+0x1fe>
	while (1) {
 8000cde:	e779      	b.n	8000bd4 <main+0x128>
 8000ce0:	08004714 	.word	0x08004714
 8000ce4:	0800471c 	.word	0x0800471c
 8000ce8:	08004724 	.word	0x08004724
 8000cec:	08004748 	.word	0x08004748

08000cf0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b096      	sub	sp, #88	@ 0x58
 8000cf4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2244      	movs	r2, #68	@ 0x44
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 f876 	bl	8003df0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d12:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d16:	f001 fa19 	bl	800214c <HAL_PWREx_ControlVoltageScaling>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000d20:	f000 f902 	bl	8000f28 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000d24:	f001 f9f4 	bl	8002110 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d28:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <SystemClock_Config+0xc0>)
 8000d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d2e:	4a20      	ldr	r2, [pc, #128]	@ (8000db0 <SystemClock_Config+0xc0>)
 8000d30:	f023 0318 	bic.w	r3, r3, #24
 8000d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000d38:	2314      	movs	r3, #20
 8000d3a:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d48:	2360      	movs	r3, #96	@ 0x60
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d50:	2301      	movs	r3, #1
 8000d52:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000d58:	2310      	movs	r3, #16
 8000d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fa43 	bl	80021f8 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x8c>
		Error_Handler();
 8000d78:	f000 f8d6 	bl	8000f28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2303      	movs	r3, #3
 8000d82:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d90:	463b      	mov	r3, r7
 8000d92:	2101      	movs	r1, #1
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fe43 	bl	8002a20 <HAL_RCC_ClockConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0xb4>
		Error_Handler();
 8000da0:	f000 f8c2 	bl	8000f28 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000da4:	f002 fa56 	bl	8003254 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000da8:	bf00      	nop
 8000daa:	3758      	adds	r7, #88	@ 0x58
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000

08000db4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000dba:	4a1c      	ldr	r2, [pc, #112]	@ (8000e2c <MX_I2C1_Init+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B07CB4;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e30 <MX_I2C1_Init+0x7c>)
 8000dc2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000dee:	480e      	ldr	r0, [pc, #56]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000df0:	f000 fd28 	bl	8001844 <HAL_I2C_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000dfa:	f000 f895 	bl	8000f28 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4809      	ldr	r0, [pc, #36]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000e02:	f001 f8ed 	bl	8001fe0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000e0c:	f000 f88c 	bl	8000f28 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000e10:	2100      	movs	r1, #0
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_I2C1_Init+0x74>)
 8000e14:	f001 f92f 	bl	8002076 <HAL_I2CEx_ConfigDigitalFilter>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000e1e:	f000 f883 	bl	8000f28 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000090 	.word	0x20000090
 8000e2c:	40005400 	.word	0x40005400
 8000e30:	00b07cb4 	.word	0x00b07cb4

08000e34 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000e38:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e3a:	4a15      	ldr	r2, [pc, #84]	@ (8000e90 <MX_USART2_UART_Init+0x5c>)
 8000e3c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_USART2_UART_Init+0x58>)
 8000e78:	f002 faee 	bl	8003458 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000e82:	f000 f851 	bl	8000f28 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000e4 	.word	0x200000e4
 8000e90:	40004400 	.word	0x40004400

08000e94 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <MX_GPIO_Init+0x8c>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <MX_GPIO_Init+0x8c>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_GPIO_Init+0x8c>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_GPIO_Init+0x8c>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a16      	ldr	r2, [pc, #88]	@ (8000f20 <MX_GPIO_Init+0x8c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_GPIO_Init+0x8c>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_GPIO_Init+0x8c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a10      	ldr	r2, [pc, #64]	@ (8000f20 <MX_GPIO_Init+0x8c>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <MX_GPIO_Init+0x8c>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <MX_GPIO_Init+0x90>)
 8000ef8:	f000 fc8c 	bl	8001814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8000efc:	2308      	movs	r3, #8
 8000efe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_GPIO_Init+0x90>)
 8000f14:	f000 fb14 	bl	8001540 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000400 	.word	0x48000400

08000f28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <Error_Handler+0x8>

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f78 <HAL_MspInit+0x44>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <HAL_MspInit+0x44>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <HAL_MspInit+0x44>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_MspInit+0x44>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09e      	sub	sp, #120	@ 0x78
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2254      	movs	r2, #84	@ 0x54
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 ff27 	bl	8003df0 <memset>
  if(hi2c->Instance==I2C1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001024 <HAL_I2C_MspInit+0xa8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d137      	bne.n	800101c <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fac:	2340      	movs	r3, #64	@ 0x40
 8000fae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 ff55 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fc4:	f7ff ffb0 	bl	8000f28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <HAL_I2C_MspInit+0xac>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fcc:	4a16      	ldr	r2, [pc, #88]	@ (8001028 <HAL_I2C_MspInit+0xac>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <HAL_I2C_MspInit+0xac>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fe0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fe4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe6:	2312      	movs	r3, #18
 8000fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001000:	f000 fa9e 	bl	8001540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_I2C_MspInit+0xac>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_I2C_MspInit+0xac>)
 800100a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800100e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <HAL_I2C_MspInit+0xac>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800101c:	bf00      	nop
 800101e:	3778      	adds	r7, #120	@ 0x78
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40005400 	.word	0x40005400
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b09e      	sub	sp, #120	@ 0x78
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2254      	movs	r2, #84	@ 0x54
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fecf 	bl	8003df0 <memset>
  if(huart->Instance==USART2)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a28      	ldr	r2, [pc, #160]	@ (80010f8 <HAL_UART_MspInit+0xcc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d148      	bne.n	80010ee <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fefd 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001074:	f7ff ff58 	bl	8000f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <HAL_UART_MspInit+0xd0>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107c:	4a1f      	ldr	r2, [pc, #124]	@ (80010fc <HAL_UART_MspInit+0xd0>)
 800107e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001082:	6593      	str	r3, [r2, #88]	@ 0x58
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HAL_UART_MspInit+0xd0>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_UART_MspInit+0xd0>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001094:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <HAL_UART_MspInit+0xd0>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_UART_MspInit+0xd0>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010a8:	2304      	movs	r3, #4
 80010aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b8:	2307      	movs	r3, #7
 80010ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c6:	f000 fa3b 	bl	8001540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010dc:	2303      	movs	r3, #3
 80010de:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ea:	f000 fa29 	bl	8001540 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80010ee:	bf00      	nop
 80010f0:	3778      	adds	r7, #120	@ 0x78
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40004400 	.word	0x40004400
 80010fc:	40021000 	.word	0x40021000

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <NMI_Handler+0x4>

08001108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <MemManage_Handler+0x4>

08001118 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <UsageFault_Handler+0x4>

08001128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001156:	f000 f8c9 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f002 fe36 	bl	8003e00 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000c000 	.word	0x2000c000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	2000016c 	.word	0x2000016c
 80011c8:	200002c0 	.word	0x200002c0

080011cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001228 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f4:	f7ff ffea 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480c      	ldr	r0, [pc, #48]	@ (800122c <LoopForever+0x6>)
  ldr r1, =_edata
 80011fa:	490d      	ldr	r1, [pc, #52]	@ (8001230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <LoopForever+0xe>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001210:	4c0a      	ldr	r4, [pc, #40]	@ (800123c <LoopForever+0x16>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121e:	f002 fdf5 	bl	8003e0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001222:	f7ff fc43 	bl	8000aac <main>

08001226 <LoopForever>:

LoopForever:
    b LoopForever
 8001226:	e7fe      	b.n	8001226 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001228:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001234:	080047d8 	.word	0x080047d8
  ldr r2, =_sbss
 8001238:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800123c:	200002bc 	.word	0x200002bc

08001240 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC1_IRQHandler>

08001242 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 f943 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001252:	2000      	movs	r0, #0
 8001254:	f000 f80e 	bl	8001274 <HAL_InitTick>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	e001      	b.n	8001268 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001264:	f7ff fe66 	bl	8000f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001268:	79fb      	ldrb	r3, [r7, #7]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <HAL_InitTick+0x6c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d023      	beq.n	80012d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <HAL_InitTick+0x70>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <HAL_InitTick+0x6c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f941 	bl	8001526 <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10f      	bne.n	80012ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d809      	bhi.n	80012c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f919 	bl	80014ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012bc:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <HAL_InitTick+0x74>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e007      	b.n	80012d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e004      	b.n	80012d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e001      	b.n	80012d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000018 	.word	0x20000018
 80012e4:	20000010 	.word	0x20000010
 80012e8:	20000014 	.word	0x20000014

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000018 	.word	0x20000018
 8001310:	20000170 	.word	0x20000170

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000170 	.word	0x20000170

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff ffee 	bl	8001314 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_Delay+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffde 	bl	8001314 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000018 	.word	0x20000018

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	@ (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	@ (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	@ 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	@ 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff47 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff5c 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff8e 	bl	800142c <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffb0 	bl	8001494 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154e:	e148      	b.n	80017e2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2101      	movs	r1, #1
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 813a 	beq.w	80017dc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b01      	cmp	r3, #1
 8001572:	d005      	beq.n	8001580 <HAL_GPIO_Init+0x40>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d130      	bne.n	80015e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015b6:	2201      	movs	r2, #1
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	f003 0201 	and.w	r2, r3, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d017      	beq.n	800161e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d123      	bne.n	8001672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	220f      	movs	r2, #15
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	6939      	ldr	r1, [r7, #16]
 800166e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0203 	and.w	r2, r3, #3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8094 	beq.w	80017dc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b4:	4b52      	ldr	r3, [pc, #328]	@ (8001800 <HAL_GPIO_Init+0x2c0>)
 80016b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b8:	4a51      	ldr	r2, [pc, #324]	@ (8001800 <HAL_GPIO_Init+0x2c0>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6613      	str	r3, [r2, #96]	@ 0x60
 80016c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001800 <HAL_GPIO_Init+0x2c0>)
 80016c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001804 <HAL_GPIO_Init+0x2c4>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	220f      	movs	r2, #15
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016f6:	d00d      	beq.n	8001714 <HAL_GPIO_Init+0x1d4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a43      	ldr	r2, [pc, #268]	@ (8001808 <HAL_GPIO_Init+0x2c8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0x1d0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a42      	ldr	r2, [pc, #264]	@ (800180c <HAL_GPIO_Init+0x2cc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_GPIO_Init+0x1cc>
 8001708:	2302      	movs	r3, #2
 800170a:	e004      	b.n	8001716 <HAL_GPIO_Init+0x1d6>
 800170c:	2307      	movs	r3, #7
 800170e:	e002      	b.n	8001716 <HAL_GPIO_Init+0x1d6>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_GPIO_Init+0x1d6>
 8001714:	2300      	movs	r3, #0
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	f002 0203 	and.w	r2, r2, #3
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	4093      	lsls	r3, r2
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001726:	4937      	ldr	r1, [pc, #220]	@ (8001804 <HAL_GPIO_Init+0x2c4>)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001734:	4b36      	ldr	r3, [pc, #216]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001758:	4a2d      	ldr	r2, [pc, #180]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800175e:	4b2c      	ldr	r3, [pc, #176]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001782:	4a23      	ldr	r2, [pc, #140]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001788:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ac:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <HAL_GPIO_Init+0x2d0>)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f47f aeaf 	bne.w	8001550 <HAL_GPIO_Init+0x10>
  }
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000
 8001808:	48000400 	.word	0x48000400
 800180c:	48000800 	.word	0x48000800
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001830:	e002      	b.n	8001838 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e08d      	b.n	8001972 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fb86 	bl	8000f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2224      	movs	r2, #36	@ 0x24
 8001874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001894:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	e006      	b.n	80018cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d108      	bne.n	80018e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	e007      	b.n	80018f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69d9      	ldr	r1, [r3, #28]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1a      	ldr	r2, [r3, #32]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	461a      	mov	r2, r3
 8001988:	460b      	mov	r3, r1
 800198a:	817b      	strh	r3, [r7, #10]
 800198c:	4613      	mov	r3, r2
 800198e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b20      	cmp	r3, #32
 800199a:	f040 80fd 	bne.w	8001b98 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_I2C_Master_Transmit+0x30>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e0f6      	b.n	8001b9a <HAL_I2C_Master_Transmit+0x21e>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019b4:	f7ff fcae 	bl	8001314 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2319      	movs	r3, #25
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f914 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0e1      	b.n	8001b9a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2221      	movs	r2, #33	@ 0x21
 80019da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2210      	movs	r2, #16
 80019e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	893a      	ldrh	r2, [r7, #8]
 80019f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2bff      	cmp	r3, #255	@ 0xff
 8001a06:	d906      	bls.n	8001a16 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	22ff      	movs	r2, #255	@ 0xff
 8001a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e007      	b.n	8001a26 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a24:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d024      	beq.n	8001a78 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	781a      	ldrb	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	8979      	ldrh	r1, [r7, #10]
 8001a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba4 <HAL_I2C_Master_Transmit+0x228>)
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fa83 	bl	8001f7c <I2C_TransferConfig>
 8001a76:	e066      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	8979      	ldrh	r1, [r7, #10]
 8001a80:	4b48      	ldr	r3, [pc, #288]	@ (8001ba4 <HAL_I2C_Master_Transmit+0x228>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 fa78 	bl	8001f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a8c:	e05b      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	6a39      	ldr	r1, [r7, #32]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f907 	bl	8001ca6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e07b      	b.n	8001b9a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d034      	beq.n	8001b46 <HAL_I2C_Master_Transmit+0x1ca>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d130      	bne.n	8001b46 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	2200      	movs	r2, #0
 8001aec:	2180      	movs	r1, #128	@ 0x80
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f880 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e04d      	b.n	8001b9a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2bff      	cmp	r3, #255	@ 0xff
 8001b06:	d90e      	bls.n	8001b26 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	22ff      	movs	r2, #255	@ 0xff
 8001b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	8979      	ldrh	r1, [r7, #10]
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fa2c 	bl	8001f7c <I2C_TransferConfig>
 8001b24:	e00f      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	8979      	ldrh	r1, [r7, #10]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 fa1b 	bl	8001f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d19e      	bne.n	8001a8e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	6a39      	ldr	r1, [r7, #32]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f8ed 	bl	8001d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e01a      	b.n	8001b9a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6859      	ldr	r1, [r3, #4]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <HAL_I2C_Master_Transmit+0x22c>)
 8001b78:	400b      	ands	r3, r1
 8001b7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e000      	b.n	8001b9a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001b98:	2302      	movs	r3, #2
  }
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	80002000 	.word	0x80002000
 8001ba8:	fe00e800 	.word	0xfe00e800

08001bac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d103      	bne.n	8001bca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d007      	beq.n	8001be8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	619a      	str	r2, [r3, #24]
  }
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c04:	e03b      	b.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	6839      	ldr	r1, [r7, #0]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f8d6 	bl	8001dbc <I2C_IsErrorOccurred>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e041      	b.n	8001c9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d02d      	beq.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c22:	f7ff fb77 	bl	8001314 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d302      	bcc.n	8001c38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d122      	bne.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4013      	ands	r3, r2
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d113      	bne.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f043 0220 	orr.w	r2, r3, #32
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4013      	ands	r3, r2
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	bf0c      	ite	eq
 8001c8e:	2301      	moveq	r3, #1
 8001c90:	2300      	movne	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d0b4      	beq.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cb2:	e033      	b.n	8001d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f87f 	bl	8001dbc <I2C_IsErrorOccurred>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e031      	b.n	8001d2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cce:	d025      	beq.n	8001d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd0:	f7ff fb20 	bl	8001314 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d302      	bcc.n	8001ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11a      	bne.n	8001d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d013      	beq.n	8001d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf8:	f043 0220 	orr.w	r2, r3, #32
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e007      	b.n	8001d2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d1c4      	bne.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d40:	e02f      	b.n	8001da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f838 	bl	8001dbc <I2C_IsErrorOccurred>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e02d      	b.n	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d56:	f7ff fadd 	bl	8001314 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d302      	bcc.n	8001d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11a      	bne.n	8001da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d013      	beq.n	8001da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f043 0220 	orr.w	r2, r3, #32
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e007      	b.n	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d1c8      	bne.n	8001d42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d068      	beq.n	8001eba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2210      	movs	r2, #16
 8001dee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001df0:	e049      	b.n	8001e86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d045      	beq.n	8001e86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dfa:	f7ff fa8b 	bl	8001314 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <I2C_IsErrorOccurred+0x54>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d13a      	bne.n	8001e86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e32:	d121      	bne.n	8001e78 <I2C_IsErrorOccurred+0xbc>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e3a:	d01d      	beq.n	8001e78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e3c:	7cfb      	ldrb	r3, [r7, #19]
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d01a      	beq.n	8001e78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e52:	f7ff fa5f 	bl	8001314 <HAL_GetTick>
 8001e56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e58:	e00e      	b.n	8001e78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e5a:	f7ff fa5b 	bl	8001314 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b19      	cmp	r3, #25
 8001e66:	d907      	bls.n	8001e78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
 8001e6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001e76:	e006      	b.n	8001e86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d1e9      	bne.n	8001e5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d003      	beq.n	8001e9c <I2C_IsErrorOccurred+0xe0>
 8001e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0aa      	beq.n	8001df2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001efe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00b      	beq.n	8001f28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01c      	beq.n	8001f6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff fe3b 	bl	8001bac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <I2C_IsErrorOccurred+0x1bc>)
 8001f42:	400b      	ands	r3, r1
 8001f44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3728      	adds	r7, #40	@ 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	fe00e800 	.word	0xfe00e800

08001f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	817b      	strh	r3, [r7, #10]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f8e:	897b      	ldrh	r3, [r7, #10]
 8001f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001faa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	0d5b      	lsrs	r3, r3, #21
 8001fb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001fba:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <I2C_TransferConfig+0x60>)
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	ea02 0103 	and.w	r1, r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fce:	bf00      	nop
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	03ff63ff 	.word	0x03ff63ff

08001fe0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d138      	bne.n	8002068 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002000:	2302      	movs	r3, #2
 8002002:	e032      	b.n	800206a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	@ 0x24
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002032:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002068:	2302      	movs	r3, #2
  }
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b20      	cmp	r3, #32
 800208a:	d139      	bne.n	8002100 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002096:	2302      	movs	r3, #2
 8002098:	e033      	b.n	8002102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2224      	movs	r2, #36	@ 0x24
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002100:	2302      	movs	r3, #2
  }
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a04      	ldr	r2, [pc, #16]	@ (800212c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40007000 	.word	0x40007000

08002130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <HAL_PWREx_GetVoltageRange+0x18>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40007000 	.word	0x40007000

0800214c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800215a:	d130      	bne.n	80021be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002168:	d038      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002172:	4a1e      	ldr	r2, [pc, #120]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800217a:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2232      	movs	r2, #50	@ 0x32
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002190:	e002      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3b01      	subs	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a4:	d102      	bne.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f2      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ac:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b8:	d110      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e00f      	b.n	80021de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ca:	d007      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021cc:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021d4:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000
 80021f0:	20000010 	.word	0x20000010
 80021f4:	431bde83 	.word	0x431bde83

080021f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f000 bc02 	b.w	8002a10 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220c:	4b96      	ldr	r3, [pc, #600]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002216:	4b94      	ldr	r3, [pc, #592]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80e4 	beq.w	80023f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_RCC_OscConfig+0x4c>
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	f040 808b 	bne.w	8002352 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b01      	cmp	r3, #1
 8002240:	f040 8087 	bne.w	8002352 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002244:	4b88      	ldr	r3, [pc, #544]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x64>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e3d9      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	4b81      	ldr	r3, [pc, #516]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_RCC_OscConfig+0x7e>
 800226c:	4b7e      	ldr	r3, [pc, #504]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002274:	e005      	b.n	8002282 <HAL_RCC_OscConfig+0x8a>
 8002276:	4b7c      	ldr	r3, [pc, #496]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002282:	4293      	cmp	r3, r2
 8002284:	d223      	bcs.n	80022ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fd8c 	bl	8002da8 <RCC_SetFlashLatencyFromMSIRange>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e3ba      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800229a:	4b73      	ldr	r3, [pc, #460]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a72      	ldr	r2, [pc, #456]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b70      	ldr	r3, [pc, #448]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	496d      	ldr	r1, [pc, #436]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	4968      	ldr	r1, [pc, #416]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
 80022cc:	e025      	b.n	800231a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ce:	4b66      	ldr	r3, [pc, #408]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a65      	ldr	r2, [pc, #404]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b63      	ldr	r3, [pc, #396]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4960      	ldr	r1, [pc, #384]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	495b      	ldr	r1, [pc, #364]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fd4c 	bl	8002da8 <RCC_SetFlashLatencyFromMSIRange>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e37a      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231a:	f000 fc81 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b51      	ldr	r3, [pc, #324]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	4950      	ldr	r1, [pc, #320]	@ (800246c <HAL_RCC_OscConfig+0x274>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a4e      	ldr	r2, [pc, #312]	@ (8002470 <HAL_RCC_OscConfig+0x278>)
 8002338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800233a:	4b4e      	ldr	r3, [pc, #312]	@ (8002474 <HAL_RCC_OscConfig+0x27c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe ff98 	bl	8001274 <HAL_InitTick>
 8002344:	4603      	mov	r3, r0
 8002346:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d052      	beq.n	80023f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	e35e      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d032      	beq.n	80023c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800235a:	4b43      	ldr	r3, [pc, #268]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a42      	ldr	r2, [pc, #264]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002366:	f7fe ffd5 	bl	8001314 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236e:	f7fe ffd1 	bl	8001314 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e347      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002380:	4b39      	ldr	r3, [pc, #228]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238c:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a35      	ldr	r2, [pc, #212]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4930      	ldr	r1, [pc, #192]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	492b      	ldr	r1, [pc, #172]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
 80023be:	e01a      	b.n	80023f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023c0:	4b29      	ldr	r3, [pc, #164]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a28      	ldr	r2, [pc, #160]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023cc:	f7fe ffa2 	bl	8001314 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d4:	f7fe ff9e 	bl	8001314 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e314      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e6:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1dc>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d073      	beq.n	80024ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d005      	beq.n	8002414 <HAL_RCC_OscConfig+0x21c>
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d10e      	bne.n	800242c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d063      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d15f      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e2f1      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x24c>
 8002436:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a0b      	ldr	r2, [pc, #44]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e025      	b.n	8002490 <HAL_RCC_OscConfig+0x298>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800244c:	d114      	bne.n	8002478 <HAL_RCC_OscConfig+0x280>
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a02      	ldr	r2, [pc, #8]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e013      	b.n	8002490 <HAL_RCC_OscConfig+0x298>
 8002468:	40021000 	.word	0x40021000
 800246c:	0800474c 	.word	0x0800474c
 8002470:	20000010 	.word	0x20000010
 8002474:	20000014 	.word	0x20000014
 8002478:	4ba0      	ldr	r3, [pc, #640]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a9f      	ldr	r2, [pc, #636]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b9d      	ldr	r3, [pc, #628]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a9c      	ldr	r2, [pc, #624]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe ff3c 	bl	8001314 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe ff38 	bl	8001314 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	@ 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e2ae      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	4b92      	ldr	r3, [pc, #584]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2a8>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe ff28 	bl	8001314 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe ff24 	bl	8001314 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	@ 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e29a      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	4b88      	ldr	r3, [pc, #544]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2d0>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d060      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x310>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d119      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	4b7c      	ldr	r3, [pc, #496]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x328>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e277      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b76      	ldr	r3, [pc, #472]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4973      	ldr	r1, [pc, #460]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002534:	e040      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d023      	beq.n	8002586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253e:	4b6f      	ldr	r3, [pc, #444]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6e      	ldr	r2, [pc, #440]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe fee3 	bl	8001314 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7fe fedf 	bl	8001314 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e255      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	4b65      	ldr	r3, [pc, #404]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b62      	ldr	r3, [pc, #392]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	495f      	ldr	r1, [pc, #380]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b5d      	ldr	r3, [pc, #372]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5c      	ldr	r2, [pc, #368]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800258c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe febf 	bl	8001314 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe febb 	bl	8001314 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e231      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03c      	beq.n	800263e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01c      	beq.n	8002606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	4b4b      	ldr	r3, [pc, #300]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d2:	4a4a      	ldr	r2, [pc, #296]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe fe9a 	bl	8001314 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe fe96 	bl	8001314 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e20c      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	4b41      	ldr	r3, [pc, #260]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80025f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCC_OscConfig+0x3ec>
 8002604:	e01b      	b.n	800263e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260c:	4a3b      	ldr	r2, [pc, #236]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe fe7d 	bl	8001314 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe fe79 	bl	8001314 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1ef      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	4b32      	ldr	r3, [pc, #200]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ef      	bne.n	800261e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80a6 	beq.w	8002798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002650:	4b2a      	ldr	r3, [pc, #168]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	4a26      	ldr	r2, [pc, #152]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	@ 0x58
 8002668:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002674:	2301      	movs	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002678:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <HAL_RCC_OscConfig+0x508>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d118      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002684:	4b1e      	ldr	r3, [pc, #120]	@ (8002700 <HAL_RCC_OscConfig+0x508>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1d      	ldr	r2, [pc, #116]	@ (8002700 <HAL_RCC_OscConfig+0x508>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002690:	f7fe fe40 	bl	8001314 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7fe fe3c 	bl	8001314 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1b2      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <HAL_RCC_OscConfig+0x508>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4d8>
 80026be:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ce:	e029      	b.n	8002724 <HAL_RCC_OscConfig+0x52c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d115      	bne.n	8002704 <HAL_RCC_OscConfig+0x50c>
 80026d8:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026de:	4a07      	ldr	r2, [pc, #28]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ee:	4a03      	ldr	r2, [pc, #12]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f8:	e014      	b.n	8002724 <HAL_RCC_OscConfig+0x52c>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40007000 	.word	0x40007000
 8002704:	4b9a      	ldr	r3, [pc, #616]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270a:	4a99      	ldr	r2, [pc, #612]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002714:	4b96      	ldr	r3, [pc, #600]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271a:	4a95      	ldr	r2, [pc, #596]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d016      	beq.n	800275a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe fdf2 	bl	8001314 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe fdee 	bl	8001314 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e162      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274a:	4b89      	ldr	r3, [pc, #548]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ed      	beq.n	8002734 <HAL_RCC_OscConfig+0x53c>
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7fe fddb 	bl	8001314 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fdd7 	bl	8001314 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e14b      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002778:	4b7d      	ldr	r3, [pc, #500]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ed      	bne.n	8002762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b78      	ldr	r3, [pc, #480]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	4a77      	ldr	r2, [pc, #476]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d03c      	beq.n	800281e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027ac:	4b70      	ldr	r3, [pc, #448]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80027ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fdaa 	bl	8001314 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c4:	f7fe fda6 	bl	8001314 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e11c      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027d6:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80027d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ef      	beq.n	80027c4 <HAL_RCC_OscConfig+0x5cc>
 80027e4:	e01b      	b.n	800281e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027e6:	4b62      	ldr	r3, [pc, #392]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80027e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027ec:	4a60      	ldr	r2, [pc, #384]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe fd8d 	bl	8001314 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027fe:	f7fe fd89 	bl	8001314 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0ff      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002810:	4b57      	ldr	r3, [pc, #348]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 8002812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ef      	bne.n	80027fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80f3 	beq.w	8002a0e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282c:	2b02      	cmp	r3, #2
 800282e:	f040 80c9 	bne.w	80029c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002832:	4b4f      	ldr	r3, [pc, #316]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0203 	and.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002842:	429a      	cmp	r2, r3
 8002844:	d12c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	3b01      	subs	r3, #1
 8002852:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d123      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002862:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d11b      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002872:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d113      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	3b01      	subs	r3, #1
 8002886:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d109      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	3b01      	subs	r3, #1
 800289a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d06b      	beq.n	8002978 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d062      	beq.n	800296c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028a6:	4b32      	ldr	r3, [pc, #200]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0ac      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80028bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c2:	f7fe fd27 	bl	8001314 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe fd23 	bl	8001314 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e099      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028dc:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e8:	4b21      	ldr	r3, [pc, #132]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	4b21      	ldr	r3, [pc, #132]	@ (8002974 <HAL_RCC_OscConfig+0x77c>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002902:	0212      	lsls	r2, r2, #8
 8002904:	4311      	orrs	r1, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800290a:	0852      	lsrs	r2, r2, #1
 800290c:	3a01      	subs	r2, #1
 800290e:	0552      	lsls	r2, r2, #21
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002916:	0852      	lsrs	r2, r2, #1
 8002918:	3a01      	subs	r2, #1
 800291a:	0652      	lsls	r2, r2, #25
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002922:	06d2      	lsls	r2, r2, #27
 8002924:	430a      	orrs	r2, r1
 8002926:	4912      	ldr	r1, [pc, #72]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0f      	ldr	r2, [pc, #60]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002938:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a0c      	ldr	r2, [pc, #48]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002944:	f7fe fce6 	bl	8001314 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fce2 	bl	8001314 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e058      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <HAL_RCC_OscConfig+0x778>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800296a:	e050      	b.n	8002a0e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e04f      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
 8002970:	40021000 	.word	0x40021000
 8002974:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002978:	4b27      	ldr	r3, [pc, #156]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d144      	bne.n	8002a0e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002984:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 800298a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800298e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002990:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a20      	ldr	r2, [pc, #128]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800299c:	f7fe fcba 	bl	8001314 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fcb6 	bl	8001314 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e02c      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b6:	4b18      	ldr	r3, [pc, #96]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x7ac>
 80029c2:	e024      	b.n	8002a0e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d01f      	beq.n	8002a0a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 80029d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fc9d 	bl	8001314 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029de:	f7fe fc99 	bl	8001314 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e00f      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4905      	ldr	r1, [pc, #20]	@ (8002a18 <HAL_RCC_OscConfig+0x820>)
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_RCC_OscConfig+0x824>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	60cb      	str	r3, [r1, #12]
 8002a08:	e001      	b.n	8002a0e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	feeefffc 	.word	0xfeeefffc

08002a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0e7      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b75      	ldr	r3, [pc, #468]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b72      	ldr	r3, [pc, #456]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4970      	ldr	r1, [pc, #448]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b6e      	ldr	r3, [pc, #440]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cf      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d010      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4b66      	ldr	r3, [pc, #408]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d908      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4b63      	ldr	r3, [pc, #396]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4960      	ldr	r1, [pc, #384]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d04c      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d121      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0a6      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002abe:	4b54      	ldr	r3, [pc, #336]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e09a      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e08e      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e086      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b46      	ldr	r3, [pc, #280]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4943      	ldr	r1, [pc, #268]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7fe fc04 	bl	8001314 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe fc00 	bl	8001314 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e06e      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b3a      	ldr	r3, [pc, #232]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d208      	bcs.n	8002b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b2e      	ldr	r3, [pc, #184]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	492b      	ldr	r1, [pc, #172]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b66:	4b29      	ldr	r3, [pc, #164]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d210      	bcs.n	8002b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b74:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 0207 	bic.w	r2, r3, #7
 8002b7c:	4923      	ldr	r1, [pc, #140]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b84:	4b21      	ldr	r3, [pc, #132]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e036      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4918      	ldr	r1, [pc, #96]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4910      	ldr	r1, [pc, #64]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd4:	f000 f824 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	490b      	ldr	r1, [pc, #44]	@ (8002c14 <HAL_RCC_ClockConfig+0x1f4>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	4a09      	ldr	r2, [pc, #36]	@ (8002c18 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf4:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_RCC_ClockConfig+0x1fc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe fb3b 	bl	8001274 <HAL_InitTick>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c02:	7afb      	ldrb	r3, [r7, #11]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	0800474c 	.word	0x0800474c
 8002c18:	20000010 	.word	0x20000010
 8002c1c:	20000014 	.word	0x20000014

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	@ 0x24
 8002c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x34>
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d121      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d11e      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c54:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c60:	4b31      	ldr	r3, [pc, #196]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c98:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e004      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca4:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d134      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cae:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xac>
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc8:	617b      	str	r3, [r7, #20]
      break;
 8002cca:	e005      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cce:	617b      	str	r3, [r7, #20]
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	617b      	str	r3, [r7, #20]
      break;
 8002cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	fb03 f202 	mul.w	r2, r3, r2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0e5b      	lsrs	r3, r3, #25
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d18:	69bb      	ldr	r3, [r7, #24]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	@ 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08004764 	.word	0x08004764
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200

08002d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000010 	.word	0x20000010

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4904      	ldr	r1, [pc, #16]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	0800475c 	.word	0x0800475c

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d80:	f7ff ffda 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0adb      	lsrs	r3, r3, #11
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4904      	ldr	r1, [pc, #16]	@ (8002da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	0800475c 	.word	0x0800475c

08002da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002db4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff f9b6 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
 8002dc6:	e014      	b.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc8:	4b25      	ldr	r3, [pc, #148]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	4a24      	ldr	r2, [pc, #144]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dd4:	4b22      	ldr	r3, [pc, #136]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002de0:	f7ff f9a6 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dea:	4a1d      	ldr	r2, [pc, #116]	@ (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df8:	d10b      	bne.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b80      	cmp	r3, #128	@ 0x80
 8002dfe:	d919      	bls.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e04:	d902      	bls.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e06:	2302      	movs	r3, #2
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e013      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e010      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b80      	cmp	r3, #128	@ 0x80
 8002e16:	d902      	bls.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e18:	2303      	movs	r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e00a      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b80      	cmp	r3, #128	@ 0x80
 8002e22:	d102      	bne.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e24:	2302      	movs	r3, #2
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	e004      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b70      	cmp	r3, #112	@ 0x70
 8002e2e:	d101      	bne.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e30:	2301      	movs	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 0207 	bic.w	r2, r3, #7
 8002e3c:	4909      	ldr	r1, [pc, #36]	@ (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e44:	4b07      	ldr	r3, [pc, #28]	@ (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40022000 	.word	0x40022000

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e70:	2300      	movs	r3, #0
 8002e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e74:	2300      	movs	r3, #0
 8002e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d031      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e8c:	d01a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e92:	d814      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d009      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e9c:	d10f      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eaa:	e00c      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f9de 	bl	8003274 <RCCEx_PLLSAI1_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ecc:	4b51      	ldr	r3, [pc, #324]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eda:	494e      	ldr	r1, [pc, #312]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ee2:	e001      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 809e 	beq.w	8003032 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002efa:	4b46      	ldr	r3, [pc, #280]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00d      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f10:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	4a3f      	ldr	r2, [pc, #252]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a39      	ldr	r2, [pc, #228]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f38:	f7fe f9ec 	bl	8001314 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f3e:	e009      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f40:	f7fe f9e8 	bl	8001314 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d902      	bls.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	74fb      	strb	r3, [r7, #19]
        break;
 8002f52:	e005      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f54:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ef      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d15a      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f66:	4b2b      	ldr	r3, [pc, #172]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01e      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d019      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f82:	4b24      	ldr	r3, [pc, #144]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f8e:	4b21      	ldr	r3, [pc, #132]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f94:	4a1f      	ldr	r2, [pc, #124]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002faa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fae:	4a19      	ldr	r2, [pc, #100]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d016      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe f9a8 	bl	8001314 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fe f9a4 	bl	8001314 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d902      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	74fb      	strb	r3, [r7, #19]
            break;
 8002fde:	e006      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ec      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff4:	4b07      	ldr	r3, [pc, #28]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003002:	4904      	ldr	r1, [pc, #16]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800300a:	e009      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	74bb      	strb	r3, [r7, #18]
 8003010:	e006      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7cfb      	ldrb	r3, [r7, #19]
 800301e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003020:	7c7b      	ldrb	r3, [r7, #17]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003026:	4b8a      	ldr	r3, [pc, #552]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	4a89      	ldr	r2, [pc, #548]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800302c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003030:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800303e:	4b84      	ldr	r3, [pc, #528]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003044:	f023 0203 	bic.w	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4980      	ldr	r1, [pc, #512]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003060:	4b7b      	ldr	r3, [pc, #492]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003066:	f023 020c 	bic.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	4978      	ldr	r1, [pc, #480]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003082:	4b73      	ldr	r3, [pc, #460]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003088:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	496f      	ldr	r1, [pc, #444]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b2:	4967      	ldr	r1, [pc, #412]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030c6:	4b62      	ldr	r3, [pc, #392]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	495e      	ldr	r1, [pc, #376]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030e8:	4b59      	ldr	r3, [pc, #356]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	4956      	ldr	r1, [pc, #344]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800310a:	4b51      	ldr	r3, [pc, #324]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	494d      	ldr	r1, [pc, #308]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d028      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800312c:	4b48      	ldr	r3, [pc, #288]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	4945      	ldr	r1, [pc, #276]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800314a:	d106      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800314c:	4b40      	ldr	r3, [pc, #256]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a3f      	ldr	r2, [pc, #252]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003156:	60d3      	str	r3, [r2, #12]
 8003158:	e011      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003162:	d10c      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f882 	bl	8003274 <RCCEx_PLLSAI1_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d028      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800318a:	4b31      	ldr	r3, [pc, #196]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003190:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003198:	492d      	ldr	r1, [pc, #180]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031a8:	d106      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031aa:	4b29      	ldr	r3, [pc, #164]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	4a28      	ldr	r2, [pc, #160]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031b4:	60d3      	str	r3, [r2, #12]
 80031b6:	e011      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	2101      	movs	r1, #1
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f853 	bl	8003274 <RCCEx_PLLSAI1_Config>
 80031ce:	4603      	mov	r3, r0
 80031d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01c      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f6:	4916      	ldr	r1, [pc, #88]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003206:	d10c      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	2102      	movs	r1, #2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f830 	bl	8003274 <RCCEx_PLLSAI1_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800322e:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003234:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323c:	4904      	ldr	r1, [pc, #16]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003244:	7cbb      	ldrb	r3, [r7, #18]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000

08003274 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003282:	4b74      	ldr	r3, [pc, #464]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800328e:	4b71      	ldr	r3, [pc, #452]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d10d      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
       ||
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032a6:	4b6b      	ldr	r3, [pc, #428]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
       ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d047      	beq.n	800334a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	e044      	b.n	800334a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d018      	beq.n	80032fa <RCCEx_PLLSAI1_Config+0x86>
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d825      	bhi.n	8003318 <RCCEx_PLLSAI1_Config+0xa4>
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d002      	beq.n	80032d6 <RCCEx_PLLSAI1_Config+0x62>
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d009      	beq.n	80032e8 <RCCEx_PLLSAI1_Config+0x74>
 80032d4:	e020      	b.n	8003318 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11d      	bne.n	800331e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e6:	e01a      	b.n	800331e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d116      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f8:	e013      	b.n	8003322 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032fa:	4b56      	ldr	r3, [pc, #344]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003306:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003316:	e006      	b.n	8003326 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e004      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800331e:	bf00      	nop
 8003320:	e002      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003326:	bf00      	nop
    }

    if(status == HAL_OK)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800332e:	4b49      	ldr	r3, [pc, #292]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	430b      	orrs	r3, r1
 8003344:	4943      	ldr	r1, [pc, #268]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003346:	4313      	orrs	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d17c      	bne.n	800344a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003350:	4b40      	ldr	r3, [pc, #256]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3f      	ldr	r2, [pc, #252]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003356:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800335a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335c:	f7fd ffda 	bl	8001314 <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003362:	e009      	b.n	8003378 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003364:	f7fd ffd6 	bl	8001314 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	73fb      	strb	r3, [r7, #15]
        break;
 8003376:	e005      	b.n	8003384 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003378:	4b36      	ldr	r3, [pc, #216]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ef      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d15f      	bne.n	800344a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d110      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003390:	4b30      	ldr	r3, [pc, #192]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003398:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6892      	ldr	r2, [r2, #8]
 80033a0:	0211      	lsls	r1, r2, #8
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	06d2      	lsls	r2, r2, #27
 80033a8:	430a      	orrs	r2, r1
 80033aa:	492a      	ldr	r1, [pc, #168]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	610b      	str	r3, [r1, #16]
 80033b0:	e027      	b.n	8003402 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d112      	bne.n	80033de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033b8:	4b26      	ldr	r3, [pc, #152]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6892      	ldr	r2, [r2, #8]
 80033c8:	0211      	lsls	r1, r2, #8
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6912      	ldr	r2, [r2, #16]
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0552      	lsls	r2, r2, #21
 80033d4:	430a      	orrs	r2, r1
 80033d6:	491f      	ldr	r1, [pc, #124]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	610b      	str	r3, [r1, #16]
 80033dc:	e011      	b.n	8003402 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033de:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6892      	ldr	r2, [r2, #8]
 80033ee:	0211      	lsls	r1, r2, #8
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6952      	ldr	r2, [r2, #20]
 80033f4:	0852      	lsrs	r2, r2, #1
 80033f6:	3a01      	subs	r2, #1
 80033f8:	0652      	lsls	r2, r2, #25
 80033fa:	430a      	orrs	r2, r1
 80033fc:	4915      	ldr	r1, [pc, #84]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003402:	4b14      	ldr	r3, [pc, #80]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a13      	ldr	r2, [pc, #76]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003408:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800340c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fd ff81 	bl	8001314 <HAL_GetTick>
 8003412:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003414:	e009      	b.n	800342a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003416:	f7fd ff7d 	bl	8001314 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d902      	bls.n	800342a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	73fb      	strb	r3, [r7, #15]
          break;
 8003428:	e005      	b.n	8003436 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800342a:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ef      	beq.n	8003416 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d106      	bne.n	800344a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4903      	ldr	r1, [pc, #12]	@ (8003454 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003446:	4313      	orrs	r3, r2
 8003448:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800344a:	7bfb      	ldrb	r3, [r7, #15]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000

08003458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e040      	b.n	80034ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fdd6 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2224      	movs	r2, #36	@ 0x24
 8003484:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fa54 	bl	800394c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f825 	bl	80034f4 <UART_SetConfig>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e01b      	b.n	80034ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fad3 	bl	8003a90 <UART_CheckIdleState>
 80034ea:	4603      	mov	r3, r0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b08a      	sub	sp, #40	@ 0x28
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	431a      	orrs	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	4313      	orrs	r3, r2
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4bb4      	ldr	r3, [pc, #720]	@ (80037f4 <UART_SetConfig+0x300>)
 8003524:	4013      	ands	r3, r2
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800352c:	430b      	orrs	r3, r1
 800352e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4aa9      	ldr	r2, [pc, #676]	@ (80037f8 <UART_SetConfig+0x304>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355c:	4313      	orrs	r3, r2
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4aa0      	ldr	r2, [pc, #640]	@ (80037fc <UART_SetConfig+0x308>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d126      	bne.n	80035cc <UART_SetConfig+0xd8>
 800357e:	4ba0      	ldr	r3, [pc, #640]	@ (8003800 <UART_SetConfig+0x30c>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	2b03      	cmp	r3, #3
 800358a:	d81b      	bhi.n	80035c4 <UART_SetConfig+0xd0>
 800358c:	a201      	add	r2, pc, #4	@ (adr r2, 8003594 <UART_SetConfig+0xa0>)
 800358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003592:	bf00      	nop
 8003594:	080035a5 	.word	0x080035a5
 8003598:	080035b5 	.word	0x080035b5
 800359c:	080035ad 	.word	0x080035ad
 80035a0:	080035bd 	.word	0x080035bd
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035aa:	e080      	b.n	80036ae <UART_SetConfig+0x1ba>
 80035ac:	2302      	movs	r3, #2
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b2:	e07c      	b.n	80036ae <UART_SetConfig+0x1ba>
 80035b4:	2304      	movs	r3, #4
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ba:	e078      	b.n	80036ae <UART_SetConfig+0x1ba>
 80035bc:	2308      	movs	r3, #8
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c2:	e074      	b.n	80036ae <UART_SetConfig+0x1ba>
 80035c4:	2310      	movs	r3, #16
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ca:	e070      	b.n	80036ae <UART_SetConfig+0x1ba>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a8c      	ldr	r2, [pc, #560]	@ (8003804 <UART_SetConfig+0x310>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d138      	bne.n	8003648 <UART_SetConfig+0x154>
 80035d6:	4b8a      	ldr	r3, [pc, #552]	@ (8003800 <UART_SetConfig+0x30c>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b0c      	cmp	r3, #12
 80035e2:	d82d      	bhi.n	8003640 <UART_SetConfig+0x14c>
 80035e4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ec <UART_SetConfig+0xf8>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	08003621 	.word	0x08003621
 80035f0:	08003641 	.word	0x08003641
 80035f4:	08003641 	.word	0x08003641
 80035f8:	08003641 	.word	0x08003641
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003641 	.word	0x08003641
 8003604:	08003641 	.word	0x08003641
 8003608:	08003641 	.word	0x08003641
 800360c:	08003629 	.word	0x08003629
 8003610:	08003641 	.word	0x08003641
 8003614:	08003641 	.word	0x08003641
 8003618:	08003641 	.word	0x08003641
 800361c:	08003639 	.word	0x08003639
 8003620:	2300      	movs	r3, #0
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003626:	e042      	b.n	80036ae <UART_SetConfig+0x1ba>
 8003628:	2302      	movs	r3, #2
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800362e:	e03e      	b.n	80036ae <UART_SetConfig+0x1ba>
 8003630:	2304      	movs	r3, #4
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003636:	e03a      	b.n	80036ae <UART_SetConfig+0x1ba>
 8003638:	2308      	movs	r3, #8
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800363e:	e036      	b.n	80036ae <UART_SetConfig+0x1ba>
 8003640:	2310      	movs	r3, #16
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003646:	e032      	b.n	80036ae <UART_SetConfig+0x1ba>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a6a      	ldr	r2, [pc, #424]	@ (80037f8 <UART_SetConfig+0x304>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d12a      	bne.n	80036a8 <UART_SetConfig+0x1b4>
 8003652:	4b6b      	ldr	r3, [pc, #428]	@ (8003800 <UART_SetConfig+0x30c>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003658:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800365c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003660:	d01a      	beq.n	8003698 <UART_SetConfig+0x1a4>
 8003662:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003666:	d81b      	bhi.n	80036a0 <UART_SetConfig+0x1ac>
 8003668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800366c:	d00c      	beq.n	8003688 <UART_SetConfig+0x194>
 800366e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003672:	d815      	bhi.n	80036a0 <UART_SetConfig+0x1ac>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <UART_SetConfig+0x18c>
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800367c:	d008      	beq.n	8003690 <UART_SetConfig+0x19c>
 800367e:	e00f      	b.n	80036a0 <UART_SetConfig+0x1ac>
 8003680:	2300      	movs	r3, #0
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003686:	e012      	b.n	80036ae <UART_SetConfig+0x1ba>
 8003688:	2302      	movs	r3, #2
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368e:	e00e      	b.n	80036ae <UART_SetConfig+0x1ba>
 8003690:	2304      	movs	r3, #4
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003696:	e00a      	b.n	80036ae <UART_SetConfig+0x1ba>
 8003698:	2308      	movs	r3, #8
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800369e:	e006      	b.n	80036ae <UART_SetConfig+0x1ba>
 80036a0:	2310      	movs	r3, #16
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a6:	e002      	b.n	80036ae <UART_SetConfig+0x1ba>
 80036a8:	2310      	movs	r3, #16
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a51      	ldr	r2, [pc, #324]	@ (80037f8 <UART_SetConfig+0x304>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d17a      	bne.n	80037ae <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d824      	bhi.n	800370a <UART_SetConfig+0x216>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <UART_SetConfig+0x1d4>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	0800370b 	.word	0x0800370b
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	0800370b 	.word	0x0800370b
 80036d8:	080036fb 	.word	0x080036fb
 80036dc:	0800370b 	.word	0x0800370b
 80036e0:	0800370b 	.word	0x0800370b
 80036e4:	0800370b 	.word	0x0800370b
 80036e8:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ec:	f7ff fb30 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 80036f0:	61f8      	str	r0, [r7, #28]
        break;
 80036f2:	e010      	b.n	8003716 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b44      	ldr	r3, [pc, #272]	@ (8003808 <UART_SetConfig+0x314>)
 80036f6:	61fb      	str	r3, [r7, #28]
        break;
 80036f8:	e00d      	b.n	8003716 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7ff fa91 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 80036fe:	61f8      	str	r0, [r7, #28]
        break;
 8003700:	e009      	b.n	8003716 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003706:	61fb      	str	r3, [r7, #28]
        break;
 8003708:	e005      	b.n	8003716 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003714:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8107 	beq.w	800392c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	429a      	cmp	r2, r3
 800372c:	d305      	bcc.n	800373a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	429a      	cmp	r2, r3
 8003738:	d903      	bls.n	8003742 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003740:	e0f4      	b.n	800392c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	2200      	movs	r2, #0
 8003746:	461c      	mov	r4, r3
 8003748:	4615      	mov	r5, r2
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	022b      	lsls	r3, r5, #8
 8003754:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003758:	0222      	lsls	r2, r4, #8
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	6849      	ldr	r1, [r1, #4]
 800375e:	0849      	lsrs	r1, r1, #1
 8003760:	2000      	movs	r0, #0
 8003762:	4688      	mov	r8, r1
 8003764:	4681      	mov	r9, r0
 8003766:	eb12 0a08 	adds.w	sl, r2, r8
 800376a:	eb43 0b09 	adc.w	fp, r3, r9
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800377c:	4650      	mov	r0, sl
 800377e:	4659      	mov	r1, fp
 8003780:	f7fc fd76 	bl	8000270 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4613      	mov	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003792:	d308      	bcc.n	80037a6 <UART_SetConfig+0x2b2>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800379a:	d204      	bcs.n	80037a6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	60da      	str	r2, [r3, #12]
 80037a4:	e0c2      	b.n	800392c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037ac:	e0be      	b.n	800392c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b6:	d16a      	bne.n	800388e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80037b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d834      	bhi.n	800382a <UART_SetConfig+0x336>
 80037c0:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <UART_SetConfig+0x2d4>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	0800380d 	.word	0x0800380d
 80037d0:	08003815 	.word	0x08003815
 80037d4:	0800382b 	.word	0x0800382b
 80037d8:	0800381b 	.word	0x0800381b
 80037dc:	0800382b 	.word	0x0800382b
 80037e0:	0800382b 	.word	0x0800382b
 80037e4:	0800382b 	.word	0x0800382b
 80037e8:	08003823 	.word	0x08003823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ec:	f7ff fab0 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 80037f0:	61f8      	str	r0, [r7, #28]
        break;
 80037f2:	e020      	b.n	8003836 <UART_SetConfig+0x342>
 80037f4:	efff69f3 	.word	0xefff69f3
 80037f8:	40008000 	.word	0x40008000
 80037fc:	40013800 	.word	0x40013800
 8003800:	40021000 	.word	0x40021000
 8003804:	40004400 	.word	0x40004400
 8003808:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800380c:	f7ff fab6 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8003810:	61f8      	str	r0, [r7, #28]
        break;
 8003812:	e010      	b.n	8003836 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003814:	4b4c      	ldr	r3, [pc, #304]	@ (8003948 <UART_SetConfig+0x454>)
 8003816:	61fb      	str	r3, [r7, #28]
        break;
 8003818:	e00d      	b.n	8003836 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381a:	f7ff fa01 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 800381e:	61f8      	str	r0, [r7, #28]
        break;
 8003820:	e009      	b.n	8003836 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003826:	61fb      	str	r3, [r7, #28]
        break;
 8003828:	e005      	b.n	8003836 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003834:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d077      	beq.n	800392c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005a      	lsls	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	441a      	add	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d916      	bls.n	8003886 <UART_SetConfig+0x392>
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800385e:	d212      	bcs.n	8003886 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f023 030f 	bic.w	r3, r3, #15
 8003868:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	b29b      	uxth	r3, r3
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	b29a      	uxth	r2, r3
 8003876:	8afb      	ldrh	r3, [r7, #22]
 8003878:	4313      	orrs	r3, r2
 800387a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	8afa      	ldrh	r2, [r7, #22]
 8003882:	60da      	str	r2, [r3, #12]
 8003884:	e052      	b.n	800392c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800388c:	e04e      	b.n	800392c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800388e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003892:	2b08      	cmp	r3, #8
 8003894:	d827      	bhi.n	80038e6 <UART_SetConfig+0x3f2>
 8003896:	a201      	add	r2, pc, #4	@ (adr r2, 800389c <UART_SetConfig+0x3a8>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	080038c9 	.word	0x080038c9
 80038a4:	080038d1 	.word	0x080038d1
 80038a8:	080038e7 	.word	0x080038e7
 80038ac:	080038d7 	.word	0x080038d7
 80038b0:	080038e7 	.word	0x080038e7
 80038b4:	080038e7 	.word	0x080038e7
 80038b8:	080038e7 	.word	0x080038e7
 80038bc:	080038df 	.word	0x080038df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c0:	f7ff fa46 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 80038c4:	61f8      	str	r0, [r7, #28]
        break;
 80038c6:	e014      	b.n	80038f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c8:	f7ff fa58 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 80038cc:	61f8      	str	r0, [r7, #28]
        break;
 80038ce:	e010      	b.n	80038f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <UART_SetConfig+0x454>)
 80038d2:	61fb      	str	r3, [r7, #28]
        break;
 80038d4:	e00d      	b.n	80038f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d6:	f7ff f9a3 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 80038da:	61f8      	str	r0, [r7, #28]
        break;
 80038dc:	e009      	b.n	80038f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038e2:	61fb      	str	r3, [r7, #28]
        break;
 80038e4:	e005      	b.n	80038f2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038f0:	bf00      	nop
    }

    if (pclk != 0U)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d019      	beq.n	800392c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	085a      	lsrs	r2, r3, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	441a      	add	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b0f      	cmp	r3, #15
 8003910:	d909      	bls.n	8003926 <UART_SetConfig+0x432>
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003918:	d205      	bcs.n	8003926 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60da      	str	r2, [r3, #12]
 8003924:	e002      	b.n	800392c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003938:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800393c:	4618      	mov	r0, r3
 800393e:	3728      	adds	r7, #40	@ 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003946:	bf00      	nop
 8003948:	00f42400 	.word	0x00f42400

0800394c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a4a:	d10a      	bne.n	8003a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b098      	sub	sp, #96	@ 0x60
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003aa0:	f7fd fc38 	bl	8001314 <HAL_GetTick>
 8003aa4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d12e      	bne.n	8003b12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003abc:	2200      	movs	r2, #0
 8003abe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f88c 	bl	8003be0 <UART_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d021      	beq.n	8003b12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ade:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ae2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003af2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e6      	bne.n	8003ace <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e062      	b.n	8003bd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d149      	bne.n	8003bb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f856 	bl	8003be0 <UART_WaitOnFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03c      	beq.n	8003bb4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	623b      	str	r3, [r7, #32]
   return(result);
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e6      	bne.n	8003b3a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3308      	adds	r3, #8
 8003b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3308      	adds	r3, #8
 8003b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b8c:	61fa      	str	r2, [r7, #28]
 8003b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	617b      	str	r3, [r7, #20]
   return(result);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e011      	b.n	8003bd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3758      	adds	r7, #88	@ 0x58
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf0:	e04f      	b.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d04b      	beq.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfa:	f7fd fb8b 	bl	8001314 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d302      	bcc.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e04e      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d037      	beq.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b80      	cmp	r3, #128	@ 0x80
 8003c26:	d034      	beq.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b40      	cmp	r3, #64	@ 0x40
 8003c2c:	d031      	beq.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d110      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2208      	movs	r2, #8
 8003c42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f838 	bl	8003cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e029      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c6c:	d111      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f81e 	bl	8003cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e00f      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d0a0      	beq.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b095      	sub	sp, #84	@ 0x54
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ce2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e6      	bne.n	8003cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3308      	adds	r3, #8
 8003d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e5      	bne.n	8003cf4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d118      	bne.n	8003d62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f023 0310 	bic.w	r3, r3, #16
 8003d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6979      	ldr	r1, [r7, #20]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e6      	bne.n	8003d30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d76:	bf00      	nop
 8003d78:	3754      	adds	r7, #84	@ 0x54
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <sniprintf>:
 8003d84:	b40c      	push	{r2, r3}
 8003d86:	b530      	push	{r4, r5, lr}
 8003d88:	4b18      	ldr	r3, [pc, #96]	@ (8003dec <sniprintf+0x68>)
 8003d8a:	1e0c      	subs	r4, r1, #0
 8003d8c:	681d      	ldr	r5, [r3, #0]
 8003d8e:	b09d      	sub	sp, #116	@ 0x74
 8003d90:	da08      	bge.n	8003da4 <sniprintf+0x20>
 8003d92:	238b      	movs	r3, #139	@ 0x8b
 8003d94:	602b      	str	r3, [r5, #0]
 8003d96:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9a:	b01d      	add	sp, #116	@ 0x74
 8003d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003da0:	b002      	add	sp, #8
 8003da2:	4770      	bx	lr
 8003da4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003da8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003db2:	bf14      	ite	ne
 8003db4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003db8:	4623      	moveq	r3, r4
 8003dba:	9304      	str	r3, [sp, #16]
 8003dbc:	9307      	str	r3, [sp, #28]
 8003dbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dc2:	9002      	str	r0, [sp, #8]
 8003dc4:	9006      	str	r0, [sp, #24]
 8003dc6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003dca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003dcc:	ab21      	add	r3, sp, #132	@ 0x84
 8003dce:	a902      	add	r1, sp, #8
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	f000 f994 	bl	8004100 <_svfiprintf_r>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	bfbc      	itt	lt
 8003ddc:	238b      	movlt	r3, #139	@ 0x8b
 8003dde:	602b      	strlt	r3, [r5, #0]
 8003de0:	2c00      	cmp	r4, #0
 8003de2:	d0da      	beq.n	8003d9a <sniprintf+0x16>
 8003de4:	9b02      	ldr	r3, [sp, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e7d6      	b.n	8003d9a <sniprintf+0x16>
 8003dec:	2000001c 	.word	0x2000001c

08003df0 <memset>:
 8003df0:	4402      	add	r2, r0
 8003df2:	4603      	mov	r3, r0
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d100      	bne.n	8003dfa <memset+0xa>
 8003df8:	4770      	bx	lr
 8003dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfe:	e7f9      	b.n	8003df4 <memset+0x4>

08003e00 <__errno>:
 8003e00:	4b01      	ldr	r3, [pc, #4]	@ (8003e08 <__errno+0x8>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	2000001c 	.word	0x2000001c

08003e0c <__libc_init_array>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e44 <__libc_init_array+0x38>)
 8003e10:	4c0d      	ldr	r4, [pc, #52]	@ (8003e48 <__libc_init_array+0x3c>)
 8003e12:	1b64      	subs	r4, r4, r5
 8003e14:	10a4      	asrs	r4, r4, #2
 8003e16:	2600      	movs	r6, #0
 8003e18:	42a6      	cmp	r6, r4
 8003e1a:	d109      	bne.n	8003e30 <__libc_init_array+0x24>
 8003e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e4c <__libc_init_array+0x40>)
 8003e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003e50 <__libc_init_array+0x44>)
 8003e20:	f000 fc64 	bl	80046ec <_init>
 8003e24:	1b64      	subs	r4, r4, r5
 8003e26:	10a4      	asrs	r4, r4, #2
 8003e28:	2600      	movs	r6, #0
 8003e2a:	42a6      	cmp	r6, r4
 8003e2c:	d105      	bne.n	8003e3a <__libc_init_array+0x2e>
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e34:	4798      	blx	r3
 8003e36:	3601      	adds	r6, #1
 8003e38:	e7ee      	b.n	8003e18 <__libc_init_array+0xc>
 8003e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3e:	4798      	blx	r3
 8003e40:	3601      	adds	r6, #1
 8003e42:	e7f2      	b.n	8003e2a <__libc_init_array+0x1e>
 8003e44:	080047d0 	.word	0x080047d0
 8003e48:	080047d0 	.word	0x080047d0
 8003e4c:	080047d0 	.word	0x080047d0
 8003e50:	080047d4 	.word	0x080047d4

08003e54 <__retarget_lock_acquire_recursive>:
 8003e54:	4770      	bx	lr

08003e56 <__retarget_lock_release_recursive>:
 8003e56:	4770      	bx	lr

08003e58 <_free_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d041      	beq.n	8003ee4 <_free_r+0x8c>
 8003e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e64:	1f0c      	subs	r4, r1, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfb8      	it	lt
 8003e6a:	18e4      	addlt	r4, r4, r3
 8003e6c:	f000 f8e0 	bl	8004030 <__malloc_lock>
 8003e70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee8 <_free_r+0x90>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	b933      	cbnz	r3, 8003e84 <_free_r+0x2c>
 8003e76:	6063      	str	r3, [r4, #4]
 8003e78:	6014      	str	r4, [r2, #0]
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e80:	f000 b8dc 	b.w	800403c <__malloc_unlock>
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	d908      	bls.n	8003e9a <_free_r+0x42>
 8003e88:	6820      	ldr	r0, [r4, #0]
 8003e8a:	1821      	adds	r1, r4, r0
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	bf01      	itttt	eq
 8003e90:	6819      	ldreq	r1, [r3, #0]
 8003e92:	685b      	ldreq	r3, [r3, #4]
 8003e94:	1809      	addeq	r1, r1, r0
 8003e96:	6021      	streq	r1, [r4, #0]
 8003e98:	e7ed      	b.n	8003e76 <_free_r+0x1e>
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	b10b      	cbz	r3, 8003ea4 <_free_r+0x4c>
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	d9fa      	bls.n	8003e9a <_free_r+0x42>
 8003ea4:	6811      	ldr	r1, [r2, #0]
 8003ea6:	1850      	adds	r0, r2, r1
 8003ea8:	42a0      	cmp	r0, r4
 8003eaa:	d10b      	bne.n	8003ec4 <_free_r+0x6c>
 8003eac:	6820      	ldr	r0, [r4, #0]
 8003eae:	4401      	add	r1, r0
 8003eb0:	1850      	adds	r0, r2, r1
 8003eb2:	4283      	cmp	r3, r0
 8003eb4:	6011      	str	r1, [r2, #0]
 8003eb6:	d1e0      	bne.n	8003e7a <_free_r+0x22>
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	6053      	str	r3, [r2, #4]
 8003ebe:	4408      	add	r0, r1
 8003ec0:	6010      	str	r0, [r2, #0]
 8003ec2:	e7da      	b.n	8003e7a <_free_r+0x22>
 8003ec4:	d902      	bls.n	8003ecc <_free_r+0x74>
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	e7d6      	b.n	8003e7a <_free_r+0x22>
 8003ecc:	6820      	ldr	r0, [r4, #0]
 8003ece:	1821      	adds	r1, r4, r0
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	bf04      	itt	eq
 8003ed4:	6819      	ldreq	r1, [r3, #0]
 8003ed6:	685b      	ldreq	r3, [r3, #4]
 8003ed8:	6063      	str	r3, [r4, #4]
 8003eda:	bf04      	itt	eq
 8003edc:	1809      	addeq	r1, r1, r0
 8003ede:	6021      	streq	r1, [r4, #0]
 8003ee0:	6054      	str	r4, [r2, #4]
 8003ee2:	e7ca      	b.n	8003e7a <_free_r+0x22>
 8003ee4:	bd38      	pop	{r3, r4, r5, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200002b8 	.word	0x200002b8

08003eec <sbrk_aligned>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4e0f      	ldr	r6, [pc, #60]	@ (8003f2c <sbrk_aligned+0x40>)
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	6831      	ldr	r1, [r6, #0]
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	b911      	cbnz	r1, 8003efe <sbrk_aligned+0x12>
 8003ef8:	f000 fba4 	bl	8004644 <_sbrk_r>
 8003efc:	6030      	str	r0, [r6, #0]
 8003efe:	4621      	mov	r1, r4
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 fb9f 	bl	8004644 <_sbrk_r>
 8003f06:	1c43      	adds	r3, r0, #1
 8003f08:	d103      	bne.n	8003f12 <sbrk_aligned+0x26>
 8003f0a:	f04f 34ff 	mov.w	r4, #4294967295
 8003f0e:	4620      	mov	r0, r4
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	1cc4      	adds	r4, r0, #3
 8003f14:	f024 0403 	bic.w	r4, r4, #3
 8003f18:	42a0      	cmp	r0, r4
 8003f1a:	d0f8      	beq.n	8003f0e <sbrk_aligned+0x22>
 8003f1c:	1a21      	subs	r1, r4, r0
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f000 fb90 	bl	8004644 <_sbrk_r>
 8003f24:	3001      	adds	r0, #1
 8003f26:	d1f2      	bne.n	8003f0e <sbrk_aligned+0x22>
 8003f28:	e7ef      	b.n	8003f0a <sbrk_aligned+0x1e>
 8003f2a:	bf00      	nop
 8003f2c:	200002b4 	.word	0x200002b4

08003f30 <_malloc_r>:
 8003f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f34:	1ccd      	adds	r5, r1, #3
 8003f36:	f025 0503 	bic.w	r5, r5, #3
 8003f3a:	3508      	adds	r5, #8
 8003f3c:	2d0c      	cmp	r5, #12
 8003f3e:	bf38      	it	cc
 8003f40:	250c      	movcc	r5, #12
 8003f42:	2d00      	cmp	r5, #0
 8003f44:	4606      	mov	r6, r0
 8003f46:	db01      	blt.n	8003f4c <_malloc_r+0x1c>
 8003f48:	42a9      	cmp	r1, r5
 8003f4a:	d904      	bls.n	8003f56 <_malloc_r+0x26>
 8003f4c:	230c      	movs	r3, #12
 8003f4e:	6033      	str	r3, [r6, #0]
 8003f50:	2000      	movs	r0, #0
 8003f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800402c <_malloc_r+0xfc>
 8003f5a:	f000 f869 	bl	8004030 <__malloc_lock>
 8003f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f62:	461c      	mov	r4, r3
 8003f64:	bb44      	cbnz	r4, 8003fb8 <_malloc_r+0x88>
 8003f66:	4629      	mov	r1, r5
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f7ff ffbf 	bl	8003eec <sbrk_aligned>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	4604      	mov	r4, r0
 8003f72:	d158      	bne.n	8004026 <_malloc_r+0xf6>
 8003f74:	f8d8 4000 	ldr.w	r4, [r8]
 8003f78:	4627      	mov	r7, r4
 8003f7a:	2f00      	cmp	r7, #0
 8003f7c:	d143      	bne.n	8004006 <_malloc_r+0xd6>
 8003f7e:	2c00      	cmp	r4, #0
 8003f80:	d04b      	beq.n	800401a <_malloc_r+0xea>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	4639      	mov	r1, r7
 8003f86:	4630      	mov	r0, r6
 8003f88:	eb04 0903 	add.w	r9, r4, r3
 8003f8c:	f000 fb5a 	bl	8004644 <_sbrk_r>
 8003f90:	4581      	cmp	r9, r0
 8003f92:	d142      	bne.n	800401a <_malloc_r+0xea>
 8003f94:	6821      	ldr	r1, [r4, #0]
 8003f96:	1a6d      	subs	r5, r5, r1
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f7ff ffa6 	bl	8003eec <sbrk_aligned>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d03a      	beq.n	800401a <_malloc_r+0xea>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	442b      	add	r3, r5
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	f8d8 3000 	ldr.w	r3, [r8]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	bb62      	cbnz	r2, 800400c <_malloc_r+0xdc>
 8003fb2:	f8c8 7000 	str.w	r7, [r8]
 8003fb6:	e00f      	b.n	8003fd8 <_malloc_r+0xa8>
 8003fb8:	6822      	ldr	r2, [r4, #0]
 8003fba:	1b52      	subs	r2, r2, r5
 8003fbc:	d420      	bmi.n	8004000 <_malloc_r+0xd0>
 8003fbe:	2a0b      	cmp	r2, #11
 8003fc0:	d917      	bls.n	8003ff2 <_malloc_r+0xc2>
 8003fc2:	1961      	adds	r1, r4, r5
 8003fc4:	42a3      	cmp	r3, r4
 8003fc6:	6025      	str	r5, [r4, #0]
 8003fc8:	bf18      	it	ne
 8003fca:	6059      	strne	r1, [r3, #4]
 8003fcc:	6863      	ldr	r3, [r4, #4]
 8003fce:	bf08      	it	eq
 8003fd0:	f8c8 1000 	streq.w	r1, [r8]
 8003fd4:	5162      	str	r2, [r4, r5]
 8003fd6:	604b      	str	r3, [r1, #4]
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f82f 	bl	800403c <__malloc_unlock>
 8003fde:	f104 000b 	add.w	r0, r4, #11
 8003fe2:	1d23      	adds	r3, r4, #4
 8003fe4:	f020 0007 	bic.w	r0, r0, #7
 8003fe8:	1ac2      	subs	r2, r0, r3
 8003fea:	bf1c      	itt	ne
 8003fec:	1a1b      	subne	r3, r3, r0
 8003fee:	50a3      	strne	r3, [r4, r2]
 8003ff0:	e7af      	b.n	8003f52 <_malloc_r+0x22>
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	bf0c      	ite	eq
 8003ff8:	f8c8 2000 	streq.w	r2, [r8]
 8003ffc:	605a      	strne	r2, [r3, #4]
 8003ffe:	e7eb      	b.n	8003fd8 <_malloc_r+0xa8>
 8004000:	4623      	mov	r3, r4
 8004002:	6864      	ldr	r4, [r4, #4]
 8004004:	e7ae      	b.n	8003f64 <_malloc_r+0x34>
 8004006:	463c      	mov	r4, r7
 8004008:	687f      	ldr	r7, [r7, #4]
 800400a:	e7b6      	b.n	8003f7a <_malloc_r+0x4a>
 800400c:	461a      	mov	r2, r3
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	42a3      	cmp	r3, r4
 8004012:	d1fb      	bne.n	800400c <_malloc_r+0xdc>
 8004014:	2300      	movs	r3, #0
 8004016:	6053      	str	r3, [r2, #4]
 8004018:	e7de      	b.n	8003fd8 <_malloc_r+0xa8>
 800401a:	230c      	movs	r3, #12
 800401c:	6033      	str	r3, [r6, #0]
 800401e:	4630      	mov	r0, r6
 8004020:	f000 f80c 	bl	800403c <__malloc_unlock>
 8004024:	e794      	b.n	8003f50 <_malloc_r+0x20>
 8004026:	6005      	str	r5, [r0, #0]
 8004028:	e7d6      	b.n	8003fd8 <_malloc_r+0xa8>
 800402a:	bf00      	nop
 800402c:	200002b8 	.word	0x200002b8

08004030 <__malloc_lock>:
 8004030:	4801      	ldr	r0, [pc, #4]	@ (8004038 <__malloc_lock+0x8>)
 8004032:	f7ff bf0f 	b.w	8003e54 <__retarget_lock_acquire_recursive>
 8004036:	bf00      	nop
 8004038:	200002b0 	.word	0x200002b0

0800403c <__malloc_unlock>:
 800403c:	4801      	ldr	r0, [pc, #4]	@ (8004044 <__malloc_unlock+0x8>)
 800403e:	f7ff bf0a 	b.w	8003e56 <__retarget_lock_release_recursive>
 8004042:	bf00      	nop
 8004044:	200002b0 	.word	0x200002b0

08004048 <__ssputs_r>:
 8004048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800404c:	688e      	ldr	r6, [r1, #8]
 800404e:	461f      	mov	r7, r3
 8004050:	42be      	cmp	r6, r7
 8004052:	680b      	ldr	r3, [r1, #0]
 8004054:	4682      	mov	sl, r0
 8004056:	460c      	mov	r4, r1
 8004058:	4690      	mov	r8, r2
 800405a:	d82d      	bhi.n	80040b8 <__ssputs_r+0x70>
 800405c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004060:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004064:	d026      	beq.n	80040b4 <__ssputs_r+0x6c>
 8004066:	6965      	ldr	r5, [r4, #20]
 8004068:	6909      	ldr	r1, [r1, #16]
 800406a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800406e:	eba3 0901 	sub.w	r9, r3, r1
 8004072:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004076:	1c7b      	adds	r3, r7, #1
 8004078:	444b      	add	r3, r9
 800407a:	106d      	asrs	r5, r5, #1
 800407c:	429d      	cmp	r5, r3
 800407e:	bf38      	it	cc
 8004080:	461d      	movcc	r5, r3
 8004082:	0553      	lsls	r3, r2, #21
 8004084:	d527      	bpl.n	80040d6 <__ssputs_r+0x8e>
 8004086:	4629      	mov	r1, r5
 8004088:	f7ff ff52 	bl	8003f30 <_malloc_r>
 800408c:	4606      	mov	r6, r0
 800408e:	b360      	cbz	r0, 80040ea <__ssputs_r+0xa2>
 8004090:	6921      	ldr	r1, [r4, #16]
 8004092:	464a      	mov	r2, r9
 8004094:	f000 fae6 	bl	8004664 <memcpy>
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800409e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040a2:	81a3      	strh	r3, [r4, #12]
 80040a4:	6126      	str	r6, [r4, #16]
 80040a6:	6165      	str	r5, [r4, #20]
 80040a8:	444e      	add	r6, r9
 80040aa:	eba5 0509 	sub.w	r5, r5, r9
 80040ae:	6026      	str	r6, [r4, #0]
 80040b0:	60a5      	str	r5, [r4, #8]
 80040b2:	463e      	mov	r6, r7
 80040b4:	42be      	cmp	r6, r7
 80040b6:	d900      	bls.n	80040ba <__ssputs_r+0x72>
 80040b8:	463e      	mov	r6, r7
 80040ba:	6820      	ldr	r0, [r4, #0]
 80040bc:	4632      	mov	r2, r6
 80040be:	4641      	mov	r1, r8
 80040c0:	f000 faa6 	bl	8004610 <memmove>
 80040c4:	68a3      	ldr	r3, [r4, #8]
 80040c6:	1b9b      	subs	r3, r3, r6
 80040c8:	60a3      	str	r3, [r4, #8]
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	4433      	add	r3, r6
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	2000      	movs	r0, #0
 80040d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d6:	462a      	mov	r2, r5
 80040d8:	f000 fad2 	bl	8004680 <_realloc_r>
 80040dc:	4606      	mov	r6, r0
 80040de:	2800      	cmp	r0, #0
 80040e0:	d1e0      	bne.n	80040a4 <__ssputs_r+0x5c>
 80040e2:	6921      	ldr	r1, [r4, #16]
 80040e4:	4650      	mov	r0, sl
 80040e6:	f7ff feb7 	bl	8003e58 <_free_r>
 80040ea:	230c      	movs	r3, #12
 80040ec:	f8ca 3000 	str.w	r3, [sl]
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	e7e9      	b.n	80040d2 <__ssputs_r+0x8a>
	...

08004100 <_svfiprintf_r>:
 8004100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004104:	4698      	mov	r8, r3
 8004106:	898b      	ldrh	r3, [r1, #12]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	b09d      	sub	sp, #116	@ 0x74
 800410c:	4607      	mov	r7, r0
 800410e:	460d      	mov	r5, r1
 8004110:	4614      	mov	r4, r2
 8004112:	d510      	bpl.n	8004136 <_svfiprintf_r+0x36>
 8004114:	690b      	ldr	r3, [r1, #16]
 8004116:	b973      	cbnz	r3, 8004136 <_svfiprintf_r+0x36>
 8004118:	2140      	movs	r1, #64	@ 0x40
 800411a:	f7ff ff09 	bl	8003f30 <_malloc_r>
 800411e:	6028      	str	r0, [r5, #0]
 8004120:	6128      	str	r0, [r5, #16]
 8004122:	b930      	cbnz	r0, 8004132 <_svfiprintf_r+0x32>
 8004124:	230c      	movs	r3, #12
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	b01d      	add	sp, #116	@ 0x74
 800412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004132:	2340      	movs	r3, #64	@ 0x40
 8004134:	616b      	str	r3, [r5, #20]
 8004136:	2300      	movs	r3, #0
 8004138:	9309      	str	r3, [sp, #36]	@ 0x24
 800413a:	2320      	movs	r3, #32
 800413c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004140:	f8cd 800c 	str.w	r8, [sp, #12]
 8004144:	2330      	movs	r3, #48	@ 0x30
 8004146:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80042e4 <_svfiprintf_r+0x1e4>
 800414a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800414e:	f04f 0901 	mov.w	r9, #1
 8004152:	4623      	mov	r3, r4
 8004154:	469a      	mov	sl, r3
 8004156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800415a:	b10a      	cbz	r2, 8004160 <_svfiprintf_r+0x60>
 800415c:	2a25      	cmp	r2, #37	@ 0x25
 800415e:	d1f9      	bne.n	8004154 <_svfiprintf_r+0x54>
 8004160:	ebba 0b04 	subs.w	fp, sl, r4
 8004164:	d00b      	beq.n	800417e <_svfiprintf_r+0x7e>
 8004166:	465b      	mov	r3, fp
 8004168:	4622      	mov	r2, r4
 800416a:	4629      	mov	r1, r5
 800416c:	4638      	mov	r0, r7
 800416e:	f7ff ff6b 	bl	8004048 <__ssputs_r>
 8004172:	3001      	adds	r0, #1
 8004174:	f000 80a7 	beq.w	80042c6 <_svfiprintf_r+0x1c6>
 8004178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800417a:	445a      	add	r2, fp
 800417c:	9209      	str	r2, [sp, #36]	@ 0x24
 800417e:	f89a 3000 	ldrb.w	r3, [sl]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 809f 	beq.w	80042c6 <_svfiprintf_r+0x1c6>
 8004188:	2300      	movs	r3, #0
 800418a:	f04f 32ff 	mov.w	r2, #4294967295
 800418e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004192:	f10a 0a01 	add.w	sl, sl, #1
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	9307      	str	r3, [sp, #28]
 800419a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800419e:	931a      	str	r3, [sp, #104]	@ 0x68
 80041a0:	4654      	mov	r4, sl
 80041a2:	2205      	movs	r2, #5
 80041a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041a8:	484e      	ldr	r0, [pc, #312]	@ (80042e4 <_svfiprintf_r+0x1e4>)
 80041aa:	f7fc f811 	bl	80001d0 <memchr>
 80041ae:	9a04      	ldr	r2, [sp, #16]
 80041b0:	b9d8      	cbnz	r0, 80041ea <_svfiprintf_r+0xea>
 80041b2:	06d0      	lsls	r0, r2, #27
 80041b4:	bf44      	itt	mi
 80041b6:	2320      	movmi	r3, #32
 80041b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041bc:	0711      	lsls	r1, r2, #28
 80041be:	bf44      	itt	mi
 80041c0:	232b      	movmi	r3, #43	@ 0x2b
 80041c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041c6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80041cc:	d015      	beq.n	80041fa <_svfiprintf_r+0xfa>
 80041ce:	9a07      	ldr	r2, [sp, #28]
 80041d0:	4654      	mov	r4, sl
 80041d2:	2000      	movs	r0, #0
 80041d4:	f04f 0c0a 	mov.w	ip, #10
 80041d8:	4621      	mov	r1, r4
 80041da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041de:	3b30      	subs	r3, #48	@ 0x30
 80041e0:	2b09      	cmp	r3, #9
 80041e2:	d94b      	bls.n	800427c <_svfiprintf_r+0x17c>
 80041e4:	b1b0      	cbz	r0, 8004214 <_svfiprintf_r+0x114>
 80041e6:	9207      	str	r2, [sp, #28]
 80041e8:	e014      	b.n	8004214 <_svfiprintf_r+0x114>
 80041ea:	eba0 0308 	sub.w	r3, r0, r8
 80041ee:	fa09 f303 	lsl.w	r3, r9, r3
 80041f2:	4313      	orrs	r3, r2
 80041f4:	9304      	str	r3, [sp, #16]
 80041f6:	46a2      	mov	sl, r4
 80041f8:	e7d2      	b.n	80041a0 <_svfiprintf_r+0xa0>
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	1d19      	adds	r1, r3, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	9103      	str	r1, [sp, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	bfbb      	ittet	lt
 8004206:	425b      	neglt	r3, r3
 8004208:	f042 0202 	orrlt.w	r2, r2, #2
 800420c:	9307      	strge	r3, [sp, #28]
 800420e:	9307      	strlt	r3, [sp, #28]
 8004210:	bfb8      	it	lt
 8004212:	9204      	strlt	r2, [sp, #16]
 8004214:	7823      	ldrb	r3, [r4, #0]
 8004216:	2b2e      	cmp	r3, #46	@ 0x2e
 8004218:	d10a      	bne.n	8004230 <_svfiprintf_r+0x130>
 800421a:	7863      	ldrb	r3, [r4, #1]
 800421c:	2b2a      	cmp	r3, #42	@ 0x2a
 800421e:	d132      	bne.n	8004286 <_svfiprintf_r+0x186>
 8004220:	9b03      	ldr	r3, [sp, #12]
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	9203      	str	r2, [sp, #12]
 8004228:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800422c:	3402      	adds	r4, #2
 800422e:	9305      	str	r3, [sp, #20]
 8004230:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80042f4 <_svfiprintf_r+0x1f4>
 8004234:	7821      	ldrb	r1, [r4, #0]
 8004236:	2203      	movs	r2, #3
 8004238:	4650      	mov	r0, sl
 800423a:	f7fb ffc9 	bl	80001d0 <memchr>
 800423e:	b138      	cbz	r0, 8004250 <_svfiprintf_r+0x150>
 8004240:	9b04      	ldr	r3, [sp, #16]
 8004242:	eba0 000a 	sub.w	r0, r0, sl
 8004246:	2240      	movs	r2, #64	@ 0x40
 8004248:	4082      	lsls	r2, r0
 800424a:	4313      	orrs	r3, r2
 800424c:	3401      	adds	r4, #1
 800424e:	9304      	str	r3, [sp, #16]
 8004250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004254:	4824      	ldr	r0, [pc, #144]	@ (80042e8 <_svfiprintf_r+0x1e8>)
 8004256:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800425a:	2206      	movs	r2, #6
 800425c:	f7fb ffb8 	bl	80001d0 <memchr>
 8004260:	2800      	cmp	r0, #0
 8004262:	d036      	beq.n	80042d2 <_svfiprintf_r+0x1d2>
 8004264:	4b21      	ldr	r3, [pc, #132]	@ (80042ec <_svfiprintf_r+0x1ec>)
 8004266:	bb1b      	cbnz	r3, 80042b0 <_svfiprintf_r+0x1b0>
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	3307      	adds	r3, #7
 800426c:	f023 0307 	bic.w	r3, r3, #7
 8004270:	3308      	adds	r3, #8
 8004272:	9303      	str	r3, [sp, #12]
 8004274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004276:	4433      	add	r3, r6
 8004278:	9309      	str	r3, [sp, #36]	@ 0x24
 800427a:	e76a      	b.n	8004152 <_svfiprintf_r+0x52>
 800427c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004280:	460c      	mov	r4, r1
 8004282:	2001      	movs	r0, #1
 8004284:	e7a8      	b.n	80041d8 <_svfiprintf_r+0xd8>
 8004286:	2300      	movs	r3, #0
 8004288:	3401      	adds	r4, #1
 800428a:	9305      	str	r3, [sp, #20]
 800428c:	4619      	mov	r1, r3
 800428e:	f04f 0c0a 	mov.w	ip, #10
 8004292:	4620      	mov	r0, r4
 8004294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004298:	3a30      	subs	r2, #48	@ 0x30
 800429a:	2a09      	cmp	r2, #9
 800429c:	d903      	bls.n	80042a6 <_svfiprintf_r+0x1a6>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0c6      	beq.n	8004230 <_svfiprintf_r+0x130>
 80042a2:	9105      	str	r1, [sp, #20]
 80042a4:	e7c4      	b.n	8004230 <_svfiprintf_r+0x130>
 80042a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042aa:	4604      	mov	r4, r0
 80042ac:	2301      	movs	r3, #1
 80042ae:	e7f0      	b.n	8004292 <_svfiprintf_r+0x192>
 80042b0:	ab03      	add	r3, sp, #12
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	462a      	mov	r2, r5
 80042b6:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <_svfiprintf_r+0x1f0>)
 80042b8:	a904      	add	r1, sp, #16
 80042ba:	4638      	mov	r0, r7
 80042bc:	f3af 8000 	nop.w
 80042c0:	1c42      	adds	r2, r0, #1
 80042c2:	4606      	mov	r6, r0
 80042c4:	d1d6      	bne.n	8004274 <_svfiprintf_r+0x174>
 80042c6:	89ab      	ldrh	r3, [r5, #12]
 80042c8:	065b      	lsls	r3, r3, #25
 80042ca:	f53f af2d 	bmi.w	8004128 <_svfiprintf_r+0x28>
 80042ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042d0:	e72c      	b.n	800412c <_svfiprintf_r+0x2c>
 80042d2:	ab03      	add	r3, sp, #12
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	462a      	mov	r2, r5
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <_svfiprintf_r+0x1f0>)
 80042da:	a904      	add	r1, sp, #16
 80042dc:	4638      	mov	r0, r7
 80042de:	f000 f879 	bl	80043d4 <_printf_i>
 80042e2:	e7ed      	b.n	80042c0 <_svfiprintf_r+0x1c0>
 80042e4:	08004794 	.word	0x08004794
 80042e8:	0800479e 	.word	0x0800479e
 80042ec:	00000000 	.word	0x00000000
 80042f0:	08004049 	.word	0x08004049
 80042f4:	0800479a 	.word	0x0800479a

080042f8 <_printf_common>:
 80042f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	4616      	mov	r6, r2
 80042fe:	4698      	mov	r8, r3
 8004300:	688a      	ldr	r2, [r1, #8]
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004308:	4293      	cmp	r3, r2
 800430a:	bfb8      	it	lt
 800430c:	4613      	movlt	r3, r2
 800430e:	6033      	str	r3, [r6, #0]
 8004310:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004314:	4607      	mov	r7, r0
 8004316:	460c      	mov	r4, r1
 8004318:	b10a      	cbz	r2, 800431e <_printf_common+0x26>
 800431a:	3301      	adds	r3, #1
 800431c:	6033      	str	r3, [r6, #0]
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	0699      	lsls	r1, r3, #26
 8004322:	bf42      	ittt	mi
 8004324:	6833      	ldrmi	r3, [r6, #0]
 8004326:	3302      	addmi	r3, #2
 8004328:	6033      	strmi	r3, [r6, #0]
 800432a:	6825      	ldr	r5, [r4, #0]
 800432c:	f015 0506 	ands.w	r5, r5, #6
 8004330:	d106      	bne.n	8004340 <_printf_common+0x48>
 8004332:	f104 0a19 	add.w	sl, r4, #25
 8004336:	68e3      	ldr	r3, [r4, #12]
 8004338:	6832      	ldr	r2, [r6, #0]
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	42ab      	cmp	r3, r5
 800433e:	dc26      	bgt.n	800438e <_printf_common+0x96>
 8004340:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004344:	6822      	ldr	r2, [r4, #0]
 8004346:	3b00      	subs	r3, #0
 8004348:	bf18      	it	ne
 800434a:	2301      	movne	r3, #1
 800434c:	0692      	lsls	r2, r2, #26
 800434e:	d42b      	bmi.n	80043a8 <_printf_common+0xb0>
 8004350:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004354:	4641      	mov	r1, r8
 8004356:	4638      	mov	r0, r7
 8004358:	47c8      	blx	r9
 800435a:	3001      	adds	r0, #1
 800435c:	d01e      	beq.n	800439c <_printf_common+0xa4>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	6922      	ldr	r2, [r4, #16]
 8004362:	f003 0306 	and.w	r3, r3, #6
 8004366:	2b04      	cmp	r3, #4
 8004368:	bf02      	ittt	eq
 800436a:	68e5      	ldreq	r5, [r4, #12]
 800436c:	6833      	ldreq	r3, [r6, #0]
 800436e:	1aed      	subeq	r5, r5, r3
 8004370:	68a3      	ldr	r3, [r4, #8]
 8004372:	bf0c      	ite	eq
 8004374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004378:	2500      	movne	r5, #0
 800437a:	4293      	cmp	r3, r2
 800437c:	bfc4      	itt	gt
 800437e:	1a9b      	subgt	r3, r3, r2
 8004380:	18ed      	addgt	r5, r5, r3
 8004382:	2600      	movs	r6, #0
 8004384:	341a      	adds	r4, #26
 8004386:	42b5      	cmp	r5, r6
 8004388:	d11a      	bne.n	80043c0 <_printf_common+0xc8>
 800438a:	2000      	movs	r0, #0
 800438c:	e008      	b.n	80043a0 <_printf_common+0xa8>
 800438e:	2301      	movs	r3, #1
 8004390:	4652      	mov	r2, sl
 8004392:	4641      	mov	r1, r8
 8004394:	4638      	mov	r0, r7
 8004396:	47c8      	blx	r9
 8004398:	3001      	adds	r0, #1
 800439a:	d103      	bne.n	80043a4 <_printf_common+0xac>
 800439c:	f04f 30ff 	mov.w	r0, #4294967295
 80043a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a4:	3501      	adds	r5, #1
 80043a6:	e7c6      	b.n	8004336 <_printf_common+0x3e>
 80043a8:	18e1      	adds	r1, r4, r3
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	2030      	movs	r0, #48	@ 0x30
 80043ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043b2:	4422      	add	r2, r4
 80043b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043bc:	3302      	adds	r3, #2
 80043be:	e7c7      	b.n	8004350 <_printf_common+0x58>
 80043c0:	2301      	movs	r3, #1
 80043c2:	4622      	mov	r2, r4
 80043c4:	4641      	mov	r1, r8
 80043c6:	4638      	mov	r0, r7
 80043c8:	47c8      	blx	r9
 80043ca:	3001      	adds	r0, #1
 80043cc:	d0e6      	beq.n	800439c <_printf_common+0xa4>
 80043ce:	3601      	adds	r6, #1
 80043d0:	e7d9      	b.n	8004386 <_printf_common+0x8e>
	...

080043d4 <_printf_i>:
 80043d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043d8:	7e0f      	ldrb	r7, [r1, #24]
 80043da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043dc:	2f78      	cmp	r7, #120	@ 0x78
 80043de:	4691      	mov	r9, r2
 80043e0:	4680      	mov	r8, r0
 80043e2:	460c      	mov	r4, r1
 80043e4:	469a      	mov	sl, r3
 80043e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043ea:	d807      	bhi.n	80043fc <_printf_i+0x28>
 80043ec:	2f62      	cmp	r7, #98	@ 0x62
 80043ee:	d80a      	bhi.n	8004406 <_printf_i+0x32>
 80043f0:	2f00      	cmp	r7, #0
 80043f2:	f000 80d1 	beq.w	8004598 <_printf_i+0x1c4>
 80043f6:	2f58      	cmp	r7, #88	@ 0x58
 80043f8:	f000 80b8 	beq.w	800456c <_printf_i+0x198>
 80043fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004400:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004404:	e03a      	b.n	800447c <_printf_i+0xa8>
 8004406:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800440a:	2b15      	cmp	r3, #21
 800440c:	d8f6      	bhi.n	80043fc <_printf_i+0x28>
 800440e:	a101      	add	r1, pc, #4	@ (adr r1, 8004414 <_printf_i+0x40>)
 8004410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004414:	0800446d 	.word	0x0800446d
 8004418:	08004481 	.word	0x08004481
 800441c:	080043fd 	.word	0x080043fd
 8004420:	080043fd 	.word	0x080043fd
 8004424:	080043fd 	.word	0x080043fd
 8004428:	080043fd 	.word	0x080043fd
 800442c:	08004481 	.word	0x08004481
 8004430:	080043fd 	.word	0x080043fd
 8004434:	080043fd 	.word	0x080043fd
 8004438:	080043fd 	.word	0x080043fd
 800443c:	080043fd 	.word	0x080043fd
 8004440:	0800457f 	.word	0x0800457f
 8004444:	080044ab 	.word	0x080044ab
 8004448:	08004539 	.word	0x08004539
 800444c:	080043fd 	.word	0x080043fd
 8004450:	080043fd 	.word	0x080043fd
 8004454:	080045a1 	.word	0x080045a1
 8004458:	080043fd 	.word	0x080043fd
 800445c:	080044ab 	.word	0x080044ab
 8004460:	080043fd 	.word	0x080043fd
 8004464:	080043fd 	.word	0x080043fd
 8004468:	08004541 	.word	0x08004541
 800446c:	6833      	ldr	r3, [r6, #0]
 800446e:	1d1a      	adds	r2, r3, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6032      	str	r2, [r6, #0]
 8004474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004478:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800447c:	2301      	movs	r3, #1
 800447e:	e09c      	b.n	80045ba <_printf_i+0x1e6>
 8004480:	6833      	ldr	r3, [r6, #0]
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	1d19      	adds	r1, r3, #4
 8004486:	6031      	str	r1, [r6, #0]
 8004488:	0606      	lsls	r6, r0, #24
 800448a:	d501      	bpl.n	8004490 <_printf_i+0xbc>
 800448c:	681d      	ldr	r5, [r3, #0]
 800448e:	e003      	b.n	8004498 <_printf_i+0xc4>
 8004490:	0645      	lsls	r5, r0, #25
 8004492:	d5fb      	bpl.n	800448c <_printf_i+0xb8>
 8004494:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004498:	2d00      	cmp	r5, #0
 800449a:	da03      	bge.n	80044a4 <_printf_i+0xd0>
 800449c:	232d      	movs	r3, #45	@ 0x2d
 800449e:	426d      	negs	r5, r5
 80044a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044a4:	4858      	ldr	r0, [pc, #352]	@ (8004608 <_printf_i+0x234>)
 80044a6:	230a      	movs	r3, #10
 80044a8:	e011      	b.n	80044ce <_printf_i+0xfa>
 80044aa:	6821      	ldr	r1, [r4, #0]
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	0608      	lsls	r0, r1, #24
 80044b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80044b4:	d402      	bmi.n	80044bc <_printf_i+0xe8>
 80044b6:	0649      	lsls	r1, r1, #25
 80044b8:	bf48      	it	mi
 80044ba:	b2ad      	uxthmi	r5, r5
 80044bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80044be:	4852      	ldr	r0, [pc, #328]	@ (8004608 <_printf_i+0x234>)
 80044c0:	6033      	str	r3, [r6, #0]
 80044c2:	bf14      	ite	ne
 80044c4:	230a      	movne	r3, #10
 80044c6:	2308      	moveq	r3, #8
 80044c8:	2100      	movs	r1, #0
 80044ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044ce:	6866      	ldr	r6, [r4, #4]
 80044d0:	60a6      	str	r6, [r4, #8]
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	db05      	blt.n	80044e2 <_printf_i+0x10e>
 80044d6:	6821      	ldr	r1, [r4, #0]
 80044d8:	432e      	orrs	r6, r5
 80044da:	f021 0104 	bic.w	r1, r1, #4
 80044de:	6021      	str	r1, [r4, #0]
 80044e0:	d04b      	beq.n	800457a <_printf_i+0x1a6>
 80044e2:	4616      	mov	r6, r2
 80044e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80044e8:	fb03 5711 	mls	r7, r3, r1, r5
 80044ec:	5dc7      	ldrb	r7, [r0, r7]
 80044ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044f2:	462f      	mov	r7, r5
 80044f4:	42bb      	cmp	r3, r7
 80044f6:	460d      	mov	r5, r1
 80044f8:	d9f4      	bls.n	80044e4 <_printf_i+0x110>
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d10b      	bne.n	8004516 <_printf_i+0x142>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	07df      	lsls	r7, r3, #31
 8004502:	d508      	bpl.n	8004516 <_printf_i+0x142>
 8004504:	6923      	ldr	r3, [r4, #16]
 8004506:	6861      	ldr	r1, [r4, #4]
 8004508:	4299      	cmp	r1, r3
 800450a:	bfde      	ittt	le
 800450c:	2330      	movle	r3, #48	@ 0x30
 800450e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004512:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004516:	1b92      	subs	r2, r2, r6
 8004518:	6122      	str	r2, [r4, #16]
 800451a:	f8cd a000 	str.w	sl, [sp]
 800451e:	464b      	mov	r3, r9
 8004520:	aa03      	add	r2, sp, #12
 8004522:	4621      	mov	r1, r4
 8004524:	4640      	mov	r0, r8
 8004526:	f7ff fee7 	bl	80042f8 <_printf_common>
 800452a:	3001      	adds	r0, #1
 800452c:	d14a      	bne.n	80045c4 <_printf_i+0x1f0>
 800452e:	f04f 30ff 	mov.w	r0, #4294967295
 8004532:	b004      	add	sp, #16
 8004534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f043 0320 	orr.w	r3, r3, #32
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	4832      	ldr	r0, [pc, #200]	@ (800460c <_printf_i+0x238>)
 8004542:	2778      	movs	r7, #120	@ 0x78
 8004544:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	6831      	ldr	r1, [r6, #0]
 800454c:	061f      	lsls	r7, r3, #24
 800454e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004552:	d402      	bmi.n	800455a <_printf_i+0x186>
 8004554:	065f      	lsls	r7, r3, #25
 8004556:	bf48      	it	mi
 8004558:	b2ad      	uxthmi	r5, r5
 800455a:	6031      	str	r1, [r6, #0]
 800455c:	07d9      	lsls	r1, r3, #31
 800455e:	bf44      	itt	mi
 8004560:	f043 0320 	orrmi.w	r3, r3, #32
 8004564:	6023      	strmi	r3, [r4, #0]
 8004566:	b11d      	cbz	r5, 8004570 <_printf_i+0x19c>
 8004568:	2310      	movs	r3, #16
 800456a:	e7ad      	b.n	80044c8 <_printf_i+0xf4>
 800456c:	4826      	ldr	r0, [pc, #152]	@ (8004608 <_printf_i+0x234>)
 800456e:	e7e9      	b.n	8004544 <_printf_i+0x170>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	f023 0320 	bic.w	r3, r3, #32
 8004576:	6023      	str	r3, [r4, #0]
 8004578:	e7f6      	b.n	8004568 <_printf_i+0x194>
 800457a:	4616      	mov	r6, r2
 800457c:	e7bd      	b.n	80044fa <_printf_i+0x126>
 800457e:	6833      	ldr	r3, [r6, #0]
 8004580:	6825      	ldr	r5, [r4, #0]
 8004582:	6961      	ldr	r1, [r4, #20]
 8004584:	1d18      	adds	r0, r3, #4
 8004586:	6030      	str	r0, [r6, #0]
 8004588:	062e      	lsls	r6, r5, #24
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	d501      	bpl.n	8004592 <_printf_i+0x1be>
 800458e:	6019      	str	r1, [r3, #0]
 8004590:	e002      	b.n	8004598 <_printf_i+0x1c4>
 8004592:	0668      	lsls	r0, r5, #25
 8004594:	d5fb      	bpl.n	800458e <_printf_i+0x1ba>
 8004596:	8019      	strh	r1, [r3, #0]
 8004598:	2300      	movs	r3, #0
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	4616      	mov	r6, r2
 800459e:	e7bc      	b.n	800451a <_printf_i+0x146>
 80045a0:	6833      	ldr	r3, [r6, #0]
 80045a2:	1d1a      	adds	r2, r3, #4
 80045a4:	6032      	str	r2, [r6, #0]
 80045a6:	681e      	ldr	r6, [r3, #0]
 80045a8:	6862      	ldr	r2, [r4, #4]
 80045aa:	2100      	movs	r1, #0
 80045ac:	4630      	mov	r0, r6
 80045ae:	f7fb fe0f 	bl	80001d0 <memchr>
 80045b2:	b108      	cbz	r0, 80045b8 <_printf_i+0x1e4>
 80045b4:	1b80      	subs	r0, r0, r6
 80045b6:	6060      	str	r0, [r4, #4]
 80045b8:	6863      	ldr	r3, [r4, #4]
 80045ba:	6123      	str	r3, [r4, #16]
 80045bc:	2300      	movs	r3, #0
 80045be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045c2:	e7aa      	b.n	800451a <_printf_i+0x146>
 80045c4:	6923      	ldr	r3, [r4, #16]
 80045c6:	4632      	mov	r2, r6
 80045c8:	4649      	mov	r1, r9
 80045ca:	4640      	mov	r0, r8
 80045cc:	47d0      	blx	sl
 80045ce:	3001      	adds	r0, #1
 80045d0:	d0ad      	beq.n	800452e <_printf_i+0x15a>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	079b      	lsls	r3, r3, #30
 80045d6:	d413      	bmi.n	8004600 <_printf_i+0x22c>
 80045d8:	68e0      	ldr	r0, [r4, #12]
 80045da:	9b03      	ldr	r3, [sp, #12]
 80045dc:	4298      	cmp	r0, r3
 80045de:	bfb8      	it	lt
 80045e0:	4618      	movlt	r0, r3
 80045e2:	e7a6      	b.n	8004532 <_printf_i+0x15e>
 80045e4:	2301      	movs	r3, #1
 80045e6:	4632      	mov	r2, r6
 80045e8:	4649      	mov	r1, r9
 80045ea:	4640      	mov	r0, r8
 80045ec:	47d0      	blx	sl
 80045ee:	3001      	adds	r0, #1
 80045f0:	d09d      	beq.n	800452e <_printf_i+0x15a>
 80045f2:	3501      	adds	r5, #1
 80045f4:	68e3      	ldr	r3, [r4, #12]
 80045f6:	9903      	ldr	r1, [sp, #12]
 80045f8:	1a5b      	subs	r3, r3, r1
 80045fa:	42ab      	cmp	r3, r5
 80045fc:	dcf2      	bgt.n	80045e4 <_printf_i+0x210>
 80045fe:	e7eb      	b.n	80045d8 <_printf_i+0x204>
 8004600:	2500      	movs	r5, #0
 8004602:	f104 0619 	add.w	r6, r4, #25
 8004606:	e7f5      	b.n	80045f4 <_printf_i+0x220>
 8004608:	080047a5 	.word	0x080047a5
 800460c:	080047b6 	.word	0x080047b6

08004610 <memmove>:
 8004610:	4288      	cmp	r0, r1
 8004612:	b510      	push	{r4, lr}
 8004614:	eb01 0402 	add.w	r4, r1, r2
 8004618:	d902      	bls.n	8004620 <memmove+0x10>
 800461a:	4284      	cmp	r4, r0
 800461c:	4623      	mov	r3, r4
 800461e:	d807      	bhi.n	8004630 <memmove+0x20>
 8004620:	1e43      	subs	r3, r0, #1
 8004622:	42a1      	cmp	r1, r4
 8004624:	d008      	beq.n	8004638 <memmove+0x28>
 8004626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800462a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800462e:	e7f8      	b.n	8004622 <memmove+0x12>
 8004630:	4402      	add	r2, r0
 8004632:	4601      	mov	r1, r0
 8004634:	428a      	cmp	r2, r1
 8004636:	d100      	bne.n	800463a <memmove+0x2a>
 8004638:	bd10      	pop	{r4, pc}
 800463a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800463e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004642:	e7f7      	b.n	8004634 <memmove+0x24>

08004644 <_sbrk_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d06      	ldr	r5, [pc, #24]	@ (8004660 <_sbrk_r+0x1c>)
 8004648:	2300      	movs	r3, #0
 800464a:	4604      	mov	r4, r0
 800464c:	4608      	mov	r0, r1
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	f7fc fd86 	bl	8001160 <_sbrk>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_sbrk_r+0x1a>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_sbrk_r+0x1a>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	200002ac 	.word	0x200002ac

08004664 <memcpy>:
 8004664:	440a      	add	r2, r1
 8004666:	4291      	cmp	r1, r2
 8004668:	f100 33ff 	add.w	r3, r0, #4294967295
 800466c:	d100      	bne.n	8004670 <memcpy+0xc>
 800466e:	4770      	bx	lr
 8004670:	b510      	push	{r4, lr}
 8004672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800467a:	4291      	cmp	r1, r2
 800467c:	d1f9      	bne.n	8004672 <memcpy+0xe>
 800467e:	bd10      	pop	{r4, pc}

08004680 <_realloc_r>:
 8004680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004684:	4607      	mov	r7, r0
 8004686:	4614      	mov	r4, r2
 8004688:	460d      	mov	r5, r1
 800468a:	b921      	cbnz	r1, 8004696 <_realloc_r+0x16>
 800468c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004690:	4611      	mov	r1, r2
 8004692:	f7ff bc4d 	b.w	8003f30 <_malloc_r>
 8004696:	b92a      	cbnz	r2, 80046a4 <_realloc_r+0x24>
 8004698:	f7ff fbde 	bl	8003e58 <_free_r>
 800469c:	4625      	mov	r5, r4
 800469e:	4628      	mov	r0, r5
 80046a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a4:	f000 f81a 	bl	80046dc <_malloc_usable_size_r>
 80046a8:	4284      	cmp	r4, r0
 80046aa:	4606      	mov	r6, r0
 80046ac:	d802      	bhi.n	80046b4 <_realloc_r+0x34>
 80046ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046b2:	d8f4      	bhi.n	800469e <_realloc_r+0x1e>
 80046b4:	4621      	mov	r1, r4
 80046b6:	4638      	mov	r0, r7
 80046b8:	f7ff fc3a 	bl	8003f30 <_malloc_r>
 80046bc:	4680      	mov	r8, r0
 80046be:	b908      	cbnz	r0, 80046c4 <_realloc_r+0x44>
 80046c0:	4645      	mov	r5, r8
 80046c2:	e7ec      	b.n	800469e <_realloc_r+0x1e>
 80046c4:	42b4      	cmp	r4, r6
 80046c6:	4622      	mov	r2, r4
 80046c8:	4629      	mov	r1, r5
 80046ca:	bf28      	it	cs
 80046cc:	4632      	movcs	r2, r6
 80046ce:	f7ff ffc9 	bl	8004664 <memcpy>
 80046d2:	4629      	mov	r1, r5
 80046d4:	4638      	mov	r0, r7
 80046d6:	f7ff fbbf 	bl	8003e58 <_free_r>
 80046da:	e7f1      	b.n	80046c0 <_realloc_r+0x40>

080046dc <_malloc_usable_size_r>:
 80046dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e0:	1f18      	subs	r0, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bfbc      	itt	lt
 80046e6:	580b      	ldrlt	r3, [r1, r0]
 80046e8:	18c0      	addlt	r0, r0, r3
 80046ea:	4770      	bx	lr

080046ec <_init>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr

080046f8 <_fini>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr
