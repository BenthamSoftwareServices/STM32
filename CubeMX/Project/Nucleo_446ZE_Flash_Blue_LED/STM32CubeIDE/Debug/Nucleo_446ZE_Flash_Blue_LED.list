
Nucleo_446ZE_Flash_Blue_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c98  08002c98  00003c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cbc  08002cbc  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002cbc  08002cbc  00003cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cc4  08002cc4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc4  08002cc4  00003cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cc8  08002cc8  00003cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002ccc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002d34  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002d34  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083c4  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ea  00000000  00000000  0000c45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0000db48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059d  00000000  00000000  0000e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ca1  00000000  00000000  0000e84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cf9  00000000  00000000  000304ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca72a  00000000  00000000  0003a1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002358  00000000  00000000  00104954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00106cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c80 	.word	0x08002c80

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08002c80 	.word	0x08002c80

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fb08 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f81e 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8b2 	bl	80006a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000540:	f000 f886 	bl	8000650 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Toggle PB7
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	480a      	ldr	r0, [pc, #40]	@ (8000570 <main+0x40>)
 8000548:	f000 fe27 	bl	800119a <HAL_GPIO_TogglePin>
        HAL_Delay(500);  // 500ms delay
 800054c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000550:	f000 fb6c 	bl	8000c2c <HAL_Delay>

        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // Toggle PB14
 8000554:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000558:	4805      	ldr	r0, [pc, #20]	@ (8000570 <main+0x40>)
 800055a:	f000 fe1e 	bl	800119a <HAL_GPIO_TogglePin>
        HAL_Delay(500);  // 500ms delay
 800055e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000562:	f000 fb63 	bl	8000c2c <HAL_Delay>

        printf(" hello \r\n");
 8000566:	4803      	ldr	r0, [pc, #12]	@ (8000574 <main+0x44>)
 8000568:	f001 fff6 	bl	8002558 <puts>
	 	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Toggle PB7
 800056c:	bf00      	nop
 800056e:	e7e9      	b.n	8000544 <main+0x14>
 8000570:	40020400 	.word	0x40020400
 8000574:	08002c98 	.word	0x08002c98

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	@ 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 f8c6 	bl	8002718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a28      	ldr	r2, [pc, #160]	@ (8000648 <SystemClock_Config+0xd0>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b23      	ldr	r3, [pc, #140]	@ (800064c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a22      	ldr	r2, [pc, #136]	@ (800064c <SystemClock_Config+0xd4>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b20      	ldr	r3, [pc, #128]	@ (800064c <SystemClock_Config+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ec:	23a8      	movs	r3, #168	@ 0xa8
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f4:	2307      	movs	r3, #7
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f92f 	bl	8001864 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800060c:	f000 f918 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000626:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2105      	movs	r1, #5
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fdce 	bl	80011d0 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063a:	f000 f901 	bl	8000840 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	@ 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_USART3_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <MX_USART3_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_USART3_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_USART3_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_USART3_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_USART3_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_USART3_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_USART3_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_USART3_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_USART3_UART_Init+0x4c>)
 8000688:	f001 fb8a 	bl	8001da0 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f8d5 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000084 	.word	0x20000084
 80006a0:	40004800 	.word	0x40004800

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	@ 0x30
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
 80006be:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <MX_GPIO_Init+0x188>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a5a      	ldr	r2, [pc, #360]	@ (800082c <MX_GPIO_Init+0x188>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b58      	ldr	r3, [pc, #352]	@ (800082c <MX_GPIO_Init+0x188>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	4b54      	ldr	r3, [pc, #336]	@ (800082c <MX_GPIO_Init+0x188>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a53      	ldr	r2, [pc, #332]	@ (800082c <MX_GPIO_Init+0x188>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b51      	ldr	r3, [pc, #324]	@ (800082c <MX_GPIO_Init+0x188>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b4d      	ldr	r3, [pc, #308]	@ (800082c <MX_GPIO_Init+0x188>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a4c      	ldr	r2, [pc, #304]	@ (800082c <MX_GPIO_Init+0x188>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b4a      	ldr	r3, [pc, #296]	@ (800082c <MX_GPIO_Init+0x188>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b46      	ldr	r3, [pc, #280]	@ (800082c <MX_GPIO_Init+0x188>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a45      	ldr	r2, [pc, #276]	@ (800082c <MX_GPIO_Init+0x188>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b43      	ldr	r3, [pc, #268]	@ (800082c <MX_GPIO_Init+0x188>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b3f      	ldr	r3, [pc, #252]	@ (800082c <MX_GPIO_Init+0x188>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a3e      	ldr	r2, [pc, #248]	@ (800082c <MX_GPIO_Init+0x188>)
 8000734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b3c      	ldr	r3, [pc, #240]	@ (800082c <MX_GPIO_Init+0x188>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b38      	ldr	r3, [pc, #224]	@ (800082c <MX_GPIO_Init+0x188>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a37      	ldr	r2, [pc, #220]	@ (800082c <MX_GPIO_Init+0x188>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b35      	ldr	r3, [pc, #212]	@ (800082c <MX_GPIO_Init+0x188>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000768:	4831      	ldr	r0, [pc, #196]	@ (8000830 <MX_GPIO_Init+0x18c>)
 800076a:	f000 fcfd 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2140      	movs	r1, #64	@ 0x40
 8000772:	4830      	ldr	r0, [pc, #192]	@ (8000834 <MX_GPIO_Init+0x190>)
 8000774:	f000 fcf8 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	482a      	ldr	r0, [pc, #168]	@ (8000838 <MX_GPIO_Init+0x194>)
 8000790:	f000 fb56 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000794:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	@ (8000830 <MX_GPIO_Init+0x18c>)
 80007ae:	f000 fb47 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b2:	2340      	movs	r3, #64	@ 0x40
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	481a      	ldr	r0, [pc, #104]	@ (8000834 <MX_GPIO_Init+0x190>)
 80007ca:	f000 fb39 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ce:	2380      	movs	r3, #128	@ 0x80
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4814      	ldr	r0, [pc, #80]	@ (8000834 <MX_GPIO_Init+0x190>)
 80007e2:	f000 fb2d 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007e6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007f8:	230a      	movs	r3, #10
 80007fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	480e      	ldr	r0, [pc, #56]	@ (800083c <MX_GPIO_Init+0x198>)
 8000804:	f000 fb1c 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000808:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_GPIO_Init+0x198>)
 800081e:	f000 fb0f 	bl	8000e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	bf00      	nop
 8000824:	3730      	adds	r7, #48	@ 0x30
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40020400 	.word	0x40020400
 8000834:	40021800 	.word	0x40021800
 8000838:	40020800 	.word	0x40020800
 800083c:	40020000 	.word	0x40020000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000860:	6453      	str	r3, [r2, #68]	@ 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	@ 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a19      	ldr	r2, [pc, #100]	@ (8000920 <HAL_UART_MspInit+0x84>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d12c      	bne.n	8000918 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000908:	2307      	movs	r3, #7
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_UART_MspInit+0x8c>)
 8000914:	f000 fa94 	bl	8000e40 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40004800 	.word	0x40004800
 8000924:	40023800 	.word	0x40023800
 8000928:	40020c00 	.word	0x40020c00

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <NMI_Handler+0x4>

08000934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <MemManage_Handler+0x4>

08000944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <UsageFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000982:	f000 f933 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}

0800098a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	e00a      	b.n	80009b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800099c:	f3af 8000 	nop.w
 80009a0:	4601      	mov	r1, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	60ba      	str	r2, [r7, #8]
 80009a8:	b2ca      	uxtb	r2, r1
 80009aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	dbf0      	blt.n	800099c <_read+0x12>
  }

  return len;
 80009ba:	687b      	ldr	r3, [r7, #4]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e009      	b.n	80009ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	60ba      	str	r2, [r7, #8]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3301      	adds	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbf1      	blt.n	80009d6 <_write+0x12>
  }
  return len;
 80009f2:	687b      	ldr	r3, [r7, #4]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_close>:

int _close(int file)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a24:	605a      	str	r2, [r3, #4]
  return 0;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_isatty>:

int _isatty(int file)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b085      	sub	sp, #20
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f001 fe8e 	bl	80027b4 <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20020000 	.word	0x20020000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	200000cc 	.word	0x200000cc
 8000acc:	20000220 	.word	0x20000220

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad4:	f000 f826 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f001 fe5f 	bl	80027c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fd15 	bl	8000530 <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b14:	08002ccc 	.word	0x08002ccc
  ldr r2, =_sbss
 8000b18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b1c:	20000220 	.word	0x20000220

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f931 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fe66 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f93b 	bl	8000e26 <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f911 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	200000d0 	.word	0x200000d0

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200000d0 	.word	0x200000d0

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff ffee 	bl	8000c14 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_Delay+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffde 	bl	8000c14 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	@ (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff47 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff5c 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffb0 	bl	8000d94 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	e165      	b.n	8001128 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f040 8154 	bne.w	8001122 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d005      	beq.n	8000e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d130      	bne.n	8000ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f003 0201 	and.w	r2, r3, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d017      	beq.n	8000f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d123      	bne.n	8000f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	69b9      	ldr	r1, [r7, #24]
 8000f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0203 	and.w	r2, r3, #3
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80ae 	beq.w	8001122 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b5d      	ldr	r3, [pc, #372]	@ (8001140 <HAL_GPIO_Init+0x300>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	4a5c      	ldr	r2, [pc, #368]	@ (8001140 <HAL_GPIO_Init+0x300>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8001140 <HAL_GPIO_Init+0x300>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe2:	4a58      	ldr	r2, [pc, #352]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4f      	ldr	r2, [pc, #316]	@ (8001148 <HAL_GPIO_Init+0x308>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d025      	beq.n	800105a <HAL_GPIO_Init+0x21a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4e      	ldr	r2, [pc, #312]	@ (800114c <HAL_GPIO_Init+0x30c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d01f      	beq.n	8001056 <HAL_GPIO_Init+0x216>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4d      	ldr	r2, [pc, #308]	@ (8001150 <HAL_GPIO_Init+0x310>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d019      	beq.n	8001052 <HAL_GPIO_Init+0x212>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	@ (8001154 <HAL_GPIO_Init+0x314>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x20e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4b      	ldr	r2, [pc, #300]	@ (8001158 <HAL_GPIO_Init+0x318>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00d      	beq.n	800104a <HAL_GPIO_Init+0x20a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4a      	ldr	r2, [pc, #296]	@ (800115c <HAL_GPIO_Init+0x31c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x206>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a49      	ldr	r2, [pc, #292]	@ (8001160 <HAL_GPIO_Init+0x320>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_GPIO_Init+0x202>
 800103e:	2306      	movs	r3, #6
 8001040:	e00c      	b.n	800105c <HAL_GPIO_Init+0x21c>
 8001042:	2307      	movs	r3, #7
 8001044:	e00a      	b.n	800105c <HAL_GPIO_Init+0x21c>
 8001046:	2305      	movs	r3, #5
 8001048:	e008      	b.n	800105c <HAL_GPIO_Init+0x21c>
 800104a:	2304      	movs	r3, #4
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x21c>
 800104e:	2303      	movs	r3, #3
 8001050:	e004      	b.n	800105c <HAL_GPIO_Init+0x21c>
 8001052:	2302      	movs	r3, #2
 8001054:	e002      	b.n	800105c <HAL_GPIO_Init+0x21c>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x21c>
 800105a:	2300      	movs	r3, #0
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	f002 0203 	and.w	r2, r2, #3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4093      	lsls	r3, r2
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106c:	4935      	ldr	r1, [pc, #212]	@ (8001144 <HAL_GPIO_Init+0x304>)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107a:	4b3a      	ldr	r3, [pc, #232]	@ (8001164 <HAL_GPIO_Init+0x324>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109e:	4a31      	ldr	r2, [pc, #196]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c8:	4a26      	ldr	r2, [pc, #152]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ce:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <HAL_GPIO_Init+0x324>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800111c:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <HAL_GPIO_Init+0x324>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3301      	adds	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	f67f ae96 	bls.w	8000e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3724      	adds	r7, #36	@ 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40013800 	.word	0x40013800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400
 8001150:	40020800 	.word	0x40020800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021000 	.word	0x40021000
 800115c:	40021400 	.word	0x40021400
 8001160:	40021800 	.word	0x40021800
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	041a      	lsls	r2, r3, #16
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	400b      	ands	r3, r1
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0cc      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e4:	4b68      	ldr	r3, [pc, #416]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d90c      	bls.n	800120c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4b65      	ldr	r3, [pc, #404]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0b8      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001224:	4b59      	ldr	r3, [pc, #356]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a58      	ldr	r2, [pc, #352]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800122e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123c:	4b53      	ldr	r3, [pc, #332]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4a52      	ldr	r2, [pc, #328]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001248:	4b50      	ldr	r3, [pc, #320]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	494d      	ldr	r1, [pc, #308]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	4313      	orrs	r3, r2
 8001258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d044      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d119      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e07f      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d003      	beq.n	800128e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128a:	2b03      	cmp	r3, #3
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128e:	4b3f      	ldr	r3, [pc, #252]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e06f      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e067      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ae:	4b37      	ldr	r3, [pc, #220]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f023 0203 	bic.w	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4934      	ldr	r1, [pc, #208]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c0:	f7ff fca8 	bl	8000c14 <HAL_GetTick>
 80012c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	e00a      	b.n	80012de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c8:	f7ff fca4 	bl	8000c14 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e04f      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 020c 	and.w	r2, r3, #12
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d1eb      	bne.n	80012c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d20c      	bcs.n	8001318 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e032      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4916      	ldr	r1, [pc, #88]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	490e      	ldr	r1, [pc, #56]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	4313      	orrs	r3, r2
 8001354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001356:	f000 f855 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 800135a:	4602      	mov	r2, r0
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	490a      	ldr	r1, [pc, #40]	@ (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	5ccb      	ldrb	r3, [r1, r3]
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_ClockConfig+0x1c8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fc08 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023c00 	.word	0x40023c00
 800138c:	40023800 	.word	0x40023800
 8001390:	08002ca4 	.word	0x08002ca4
 8001394:	20000000 	.word	0x20000000
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000000 	.word	0x20000000

080013b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013b8:	f7ff fff0 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	0a9b      	lsrs	r3, r3, #10
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	4903      	ldr	r1, [pc, #12]	@ (80013d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	08002cb4 	.word	0x08002cb4

080013dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013e0:	f7ff ffdc 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	0b5b      	lsrs	r3, r3, #13
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	4903      	ldr	r1, [pc, #12]	@ (8001400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013f2:	5ccb      	ldrb	r3, [r1, r3]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	08002cb4 	.word	0x08002cb4

08001404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001408:	b0ae      	sub	sp, #184	@ 0xb8
 800140a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800142a:	4bcb      	ldr	r3, [pc, #812]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b0c      	cmp	r3, #12
 8001434:	f200 8206 	bhi.w	8001844 <HAL_RCC_GetSysClockFreq+0x440>
 8001438:	a201      	add	r2, pc, #4	@ (adr r2, 8001440 <HAL_RCC_GetSysClockFreq+0x3c>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001475 	.word	0x08001475
 8001444:	08001845 	.word	0x08001845
 8001448:	08001845 	.word	0x08001845
 800144c:	08001845 	.word	0x08001845
 8001450:	0800147d 	.word	0x0800147d
 8001454:	08001845 	.word	0x08001845
 8001458:	08001845 	.word	0x08001845
 800145c:	08001845 	.word	0x08001845
 8001460:	08001485 	.word	0x08001485
 8001464:	08001845 	.word	0x08001845
 8001468:	08001845 	.word	0x08001845
 800146c:	08001845 	.word	0x08001845
 8001470:	08001675 	.word	0x08001675
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001474:	4bb9      	ldr	r3, [pc, #740]	@ (800175c <HAL_RCC_GetSysClockFreq+0x358>)
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800147a:	e1e7      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800147c:	4bb8      	ldr	r3, [pc, #736]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x35c>)
 800147e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001482:	e1e3      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001484:	4bb4      	ldr	r3, [pc, #720]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800148c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001490:	4bb1      	ldr	r3, [pc, #708]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d071      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149c:	4bae      	ldr	r3, [pc, #696]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	2200      	movs	r2, #0
 80014a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80014ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014c2:	4622      	mov	r2, r4
 80014c4:	462b      	mov	r3, r5
 80014c6:	f04f 0000 	mov.w	r0, #0
 80014ca:	f04f 0100 	mov.w	r1, #0
 80014ce:	0159      	lsls	r1, r3, #5
 80014d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014d4:	0150      	lsls	r0, r2, #5
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4621      	mov	r1, r4
 80014dc:	1a51      	subs	r1, r2, r1
 80014de:	6439      	str	r1, [r7, #64]	@ 0x40
 80014e0:	4629      	mov	r1, r5
 80014e2:	eb63 0301 	sbc.w	r3, r3, r1
 80014e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014f4:	4649      	mov	r1, r9
 80014f6:	018b      	lsls	r3, r1, #6
 80014f8:	4641      	mov	r1, r8
 80014fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014fe:	4641      	mov	r1, r8
 8001500:	018a      	lsls	r2, r1, #6
 8001502:	4641      	mov	r1, r8
 8001504:	1a51      	subs	r1, r2, r1
 8001506:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001508:	4649      	mov	r1, r9
 800150a:	eb63 0301 	sbc.w	r3, r3, r1
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800151c:	4649      	mov	r1, r9
 800151e:	00cb      	lsls	r3, r1, #3
 8001520:	4641      	mov	r1, r8
 8001522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001526:	4641      	mov	r1, r8
 8001528:	00ca      	lsls	r2, r1, #3
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	4603      	mov	r3, r0
 8001530:	4622      	mov	r2, r4
 8001532:	189b      	adds	r3, r3, r2
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
 8001536:	462b      	mov	r3, r5
 8001538:	460a      	mov	r2, r1
 800153a:	eb42 0303 	adc.w	r3, r2, r3
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800154c:	4629      	mov	r1, r5
 800154e:	024b      	lsls	r3, r1, #9
 8001550:	4621      	mov	r1, r4
 8001552:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001556:	4621      	mov	r1, r4
 8001558:	024a      	lsls	r2, r1, #9
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001562:	2200      	movs	r2, #0
 8001564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001568:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800156c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001570:	f7fe fe48 	bl	8000204 <__aeabi_uldivmod>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4613      	mov	r3, r2
 800157a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800157e:	e067      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001580:	4b75      	ldr	r3, [pc, #468]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	099b      	lsrs	r3, r3, #6
 8001586:	2200      	movs	r2, #0
 8001588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800158c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001590:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001598:	67bb      	str	r3, [r7, #120]	@ 0x78
 800159a:	2300      	movs	r3, #0
 800159c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800159e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015a2:	4622      	mov	r2, r4
 80015a4:	462b      	mov	r3, r5
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	0159      	lsls	r1, r3, #5
 80015b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b4:	0150      	lsls	r0, r2, #5
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4621      	mov	r1, r4
 80015bc:	1a51      	subs	r1, r2, r1
 80015be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015c0:	4629      	mov	r1, r5
 80015c2:	eb63 0301 	sbc.w	r3, r3, r1
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015d4:	4649      	mov	r1, r9
 80015d6:	018b      	lsls	r3, r1, #6
 80015d8:	4641      	mov	r1, r8
 80015da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015de:	4641      	mov	r1, r8
 80015e0:	018a      	lsls	r2, r1, #6
 80015e2:	4641      	mov	r1, r8
 80015e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80015e8:	4649      	mov	r1, r9
 80015ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001602:	4692      	mov	sl, r2
 8001604:	469b      	mov	fp, r3
 8001606:	4623      	mov	r3, r4
 8001608:	eb1a 0303 	adds.w	r3, sl, r3
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	462b      	mov	r3, r5
 8001610:	eb4b 0303 	adc.w	r3, fp, r3
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001622:	4629      	mov	r1, r5
 8001624:	028b      	lsls	r3, r1, #10
 8001626:	4621      	mov	r1, r4
 8001628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800162c:	4621      	mov	r1, r4
 800162e:	028a      	lsls	r2, r1, #10
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001638:	2200      	movs	r2, #0
 800163a:	673b      	str	r3, [r7, #112]	@ 0x70
 800163c:	677a      	str	r2, [r7, #116]	@ 0x74
 800163e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001642:	f7fe fddf 	bl	8000204 <__aeabi_uldivmod>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4613      	mov	r3, r2
 800164c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001650:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	0c1b      	lsrs	r3, r3, #16
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	3301      	adds	r3, #1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001672:	e0eb      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001674:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800167c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001680:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d06b      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	2200      	movs	r2, #0
 8001694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001696:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800169a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169e:	663b      	str	r3, [r7, #96]	@ 0x60
 80016a0:	2300      	movs	r3, #0
 80016a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80016a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016a8:	4622      	mov	r2, r4
 80016aa:	462b      	mov	r3, r5
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	0159      	lsls	r1, r3, #5
 80016b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ba:	0150      	lsls	r0, r2, #5
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4621      	mov	r1, r4
 80016c2:	1a51      	subs	r1, r2, r1
 80016c4:	61b9      	str	r1, [r7, #24]
 80016c6:	4629      	mov	r1, r5
 80016c8:	eb63 0301 	sbc.w	r3, r3, r1
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016da:	4659      	mov	r1, fp
 80016dc:	018b      	lsls	r3, r1, #6
 80016de:	4651      	mov	r1, sl
 80016e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e4:	4651      	mov	r1, sl
 80016e6:	018a      	lsls	r2, r1, #6
 80016e8:	4651      	mov	r1, sl
 80016ea:	ebb2 0801 	subs.w	r8, r2, r1
 80016ee:	4659      	mov	r1, fp
 80016f0:	eb63 0901 	sbc.w	r9, r3, r1
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001700:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001704:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001708:	4690      	mov	r8, r2
 800170a:	4699      	mov	r9, r3
 800170c:	4623      	mov	r3, r4
 800170e:	eb18 0303 	adds.w	r3, r8, r3
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	462b      	mov	r3, r5
 8001716:	eb49 0303 	adc.w	r3, r9, r3
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001728:	4629      	mov	r1, r5
 800172a:	024b      	lsls	r3, r1, #9
 800172c:	4621      	mov	r1, r4
 800172e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001732:	4621      	mov	r1, r4
 8001734:	024a      	lsls	r2, r1, #9
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800173e:	2200      	movs	r2, #0
 8001740:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001742:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001744:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001748:	f7fe fd5c 	bl	8000204 <__aeabi_uldivmod>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4613      	mov	r3, r2
 8001752:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001756:	e065      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x420>
 8001758:	40023800 	.word	0x40023800
 800175c:	00f42400 	.word	0x00f42400
 8001760:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001764:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <HAL_RCC_GetSysClockFreq+0x458>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	2200      	movs	r2, #0
 800176c:	4618      	mov	r0, r3
 800176e:	4611      	mov	r1, r2
 8001770:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001774:	653b      	str	r3, [r7, #80]	@ 0x50
 8001776:	2300      	movs	r3, #0
 8001778:	657b      	str	r3, [r7, #84]	@ 0x54
 800177a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800177e:	4642      	mov	r2, r8
 8001780:	464b      	mov	r3, r9
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	0159      	lsls	r1, r3, #5
 800178c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001790:	0150      	lsls	r0, r2, #5
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4641      	mov	r1, r8
 8001798:	1a51      	subs	r1, r2, r1
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	4649      	mov	r1, r9
 800179e:	eb63 0301 	sbc.w	r3, r3, r1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017b0:	4659      	mov	r1, fp
 80017b2:	018b      	lsls	r3, r1, #6
 80017b4:	4651      	mov	r1, sl
 80017b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ba:	4651      	mov	r1, sl
 80017bc:	018a      	lsls	r2, r1, #6
 80017be:	4651      	mov	r1, sl
 80017c0:	1a54      	subs	r4, r2, r1
 80017c2:	4659      	mov	r1, fp
 80017c4:	eb63 0501 	sbc.w	r5, r3, r1
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	00eb      	lsls	r3, r5, #3
 80017d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017d6:	00e2      	lsls	r2, r4, #3
 80017d8:	4614      	mov	r4, r2
 80017da:	461d      	mov	r5, r3
 80017dc:	4643      	mov	r3, r8
 80017de:	18e3      	adds	r3, r4, r3
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	464b      	mov	r3, r9
 80017e4:	eb45 0303 	adc.w	r3, r5, r3
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017f6:	4629      	mov	r1, r5
 80017f8:	028b      	lsls	r3, r1, #10
 80017fa:	4621      	mov	r1, r4
 80017fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001800:	4621      	mov	r1, r4
 8001802:	028a      	lsls	r2, r1, #10
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800180c:	2200      	movs	r2, #0
 800180e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001810:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001812:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001816:	f7fe fcf5 	bl	8000204 <__aeabi_uldivmod>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4613      	mov	r3, r2
 8001820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001824:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_RCC_GetSysClockFreq+0x458>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0f1b      	lsrs	r3, r3, #28
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001842:	e003      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800184a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800184c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001850:	4618      	mov	r0, r3
 8001852:	37b8      	adds	r7, #184	@ 0xb8
 8001854:	46bd      	mov	sp, r7
 8001856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	00f42400 	.word	0x00f42400

08001864 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e28d      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8083 	beq.w	800198a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001884:	4b94      	ldr	r3, [pc, #592]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b04      	cmp	r3, #4
 800188e:	d019      	beq.n	80018c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001890:	4b91      	ldr	r3, [pc, #580]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
        || \
 8001898:	2b08      	cmp	r3, #8
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800189c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018a8:	d00c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018aa:	4b8b      	ldr	r3, [pc, #556]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d112      	bne.n	80018dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b6:	4b88      	ldr	r3, [pc, #544]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018c2:	d10b      	bne.n	80018dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	4b84      	ldr	r3, [pc, #528]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d05b      	beq.n	8001988 <HAL_RCC_OscConfig+0x124>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d157      	bne.n	8001988 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e25a      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x90>
 80018e6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7b      	ldr	r2, [pc, #492]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0xcc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0xb4>
 80018fe:	4b76      	ldr	r3, [pc, #472]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a75      	ldr	r2, [pc, #468]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b73      	ldr	r3, [pc, #460]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a72      	ldr	r2, [pc, #456]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0xcc>
 8001918:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800191e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6b      	ldr	r2, [pc, #428]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800192a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f96c 	bl	8000c14 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff f968 	bl	8000c14 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	@ 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e21f      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b61      	ldr	r3, [pc, #388]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0xdc>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f958 	bl	8000c14 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f954 	bl	8000c14 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	@ 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e20b      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	4b57      	ldr	r3, [pc, #348]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x104>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06f      	beq.n	8001a76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001996:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d017      	beq.n	80019d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019a2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d105      	bne.n	80019ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019ae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c6:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x186>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1d3      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4937      	ldr	r1, [pc, #220]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f901 	bl	8000c14 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff f8fd 	bl	8000c14 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1b4      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4925      	ldr	r1, [pc, #148]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f8e0 	bl	8000c14 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff f8dc 	bl	8000c14 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e193      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d036      	beq.n	8001af0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f8c0 	bl	8000c14 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff f8bc 	bl	8000c14 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e173      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x234>
 8001ab6:	e01b      	b.n	8001af0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abe:	f7ff f8a9 	bl	8000c14 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	e00e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f8a5 	bl	8000c14 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d907      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e15c      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	42470000 	.word	0x42470000
 8001ae0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b8a      	ldr	r3, [pc, #552]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ea      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8097 	beq.w	8001c2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b83      	ldr	r3, [pc, #524]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b7f      	ldr	r3, [pc, #508]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a7e      	ldr	r2, [pc, #504]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b79      	ldr	r3, [pc, #484]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b76      	ldr	r3, [pc, #472]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a75      	ldr	r2, [pc, #468]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff f865 	bl	8000c14 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff f861 	bl	8000c14 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e118      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b6c      	ldr	r3, [pc, #432]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x31e>
 8001b74:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b78:	4a65      	ldr	r2, [pc, #404]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b80:	e01c      	b.n	8001bbc <HAL_RCC_OscConfig+0x358>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x340>
 8001b8a:	4b61      	ldr	r3, [pc, #388]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	4a60      	ldr	r2, [pc, #384]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b96:	4b5e      	ldr	r3, [pc, #376]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0x358>
 8001ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a59      	ldr	r2, [pc, #356]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb0:	4b57      	ldr	r3, [pc, #348]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb4:	4a56      	ldr	r2, [pc, #344]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	f023 0304 	bic.w	r3, r3, #4
 8001bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d015      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f826 	bl	8000c14 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f822 	bl	8000c14 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0d7      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	4b4b      	ldr	r3, [pc, #300]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0ee      	beq.n	8001bcc <HAL_RCC_OscConfig+0x368>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f810 	bl	8000c14 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f80c 	bl	8000c14 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0c1      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0e:	4b40      	ldr	r3, [pc, #256]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ee      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	4a3a      	ldr	r2, [pc, #232]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80ad 	beq.w	8001d90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c36:	4b36      	ldr	r3, [pc, #216]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d060      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d145      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_RCC_OscConfig+0x4b4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe ffe0 	bl	8000c14 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe ffdc 	bl	8000c14 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e093      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	071b      	lsls	r3, r3, #28
 8001ca2:	491b      	ldr	r1, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x4b4>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7fe ffb1 	bl	8000c14 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe ffad 	bl	8000c14 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e064      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x452>
 8001cd4:	e05c      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_OscConfig+0x4b4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ff9a 	bl	8000c14 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe ff96 	bl	8000c14 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e04d      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x480>
 8001d02:	e045      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e040      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <HAL_RCC_OscConfig+0x538>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d030      	beq.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d129      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d122      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d119      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d10f      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e042      	b.n	8001e38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fd68 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	@ 0x24
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f82b 	bl	8001e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e44:	b0c0      	sub	sp, #256	@ 0x100
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e5c:	68d9      	ldr	r1, [r3, #12]
 8001e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	ea40 0301 	orr.w	r3, r0, r1
 8001e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001e98:	f021 010c 	bic.w	r1, r1, #12
 8001e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eba:	6999      	ldr	r1, [r3, #24]
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	ea40 0301 	orr.w	r3, r0, r1
 8001ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b8f      	ldr	r3, [pc, #572]	@ (800210c <UART_SetConfig+0x2cc>)
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d005      	beq.n	8001ee0 <UART_SetConfig+0xa0>
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b8d      	ldr	r3, [pc, #564]	@ (8002110 <UART_SetConfig+0x2d0>)
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d104      	bne.n	8001eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ee0:	f7ff fa7c 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 8001ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ee8:	e003      	b.n	8001ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001eea:	f7ff fa63 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 8001eee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001efc:	f040 810c 	bne.w	8002118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f04:	2200      	movs	r2, #0
 8001f06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001f12:	4622      	mov	r2, r4
 8001f14:	462b      	mov	r3, r5
 8001f16:	1891      	adds	r1, r2, r2
 8001f18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f1a:	415b      	adcs	r3, r3
 8001f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f22:	4621      	mov	r1, r4
 8001f24:	eb12 0801 	adds.w	r8, r2, r1
 8001f28:	4629      	mov	r1, r5
 8001f2a:	eb43 0901 	adc.w	r9, r3, r1
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f42:	4690      	mov	r8, r2
 8001f44:	4699      	mov	r9, r3
 8001f46:	4623      	mov	r3, r4
 8001f48:	eb18 0303 	adds.w	r3, r8, r3
 8001f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f50:	462b      	mov	r3, r5
 8001f52:	eb49 0303 	adc.w	r3, r9, r3
 8001f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001f6e:	460b      	mov	r3, r1
 8001f70:	18db      	adds	r3, r3, r3
 8001f72:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f74:	4613      	mov	r3, r2
 8001f76:	eb42 0303 	adc.w	r3, r2, r3
 8001f7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f84:	f7fe f93e 	bl	8000204 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4b61      	ldr	r3, [pc, #388]	@ (8002114 <UART_SetConfig+0x2d4>)
 8001f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	011c      	lsls	r4, r3, #4
 8001f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001fa8:	4642      	mov	r2, r8
 8001faa:	464b      	mov	r3, r9
 8001fac:	1891      	adds	r1, r2, r2
 8001fae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fb0:	415b      	adcs	r3, r3
 8001fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fb8:	4641      	mov	r1, r8
 8001fba:	eb12 0a01 	adds.w	sl, r2, r1
 8001fbe:	4649      	mov	r1, r9
 8001fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fd8:	4692      	mov	sl, r2
 8001fda:	469b      	mov	fp, r3
 8001fdc:	4643      	mov	r3, r8
 8001fde:	eb1a 0303 	adds.w	r3, sl, r3
 8001fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8001fec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002004:	460b      	mov	r3, r1
 8002006:	18db      	adds	r3, r3, r3
 8002008:	643b      	str	r3, [r7, #64]	@ 0x40
 800200a:	4613      	mov	r3, r2
 800200c:	eb42 0303 	adc.w	r3, r2, r3
 8002010:	647b      	str	r3, [r7, #68]	@ 0x44
 8002012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800201a:	f7fe f8f3 	bl	8000204 <__aeabi_uldivmod>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4611      	mov	r1, r2
 8002024:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <UART_SetConfig+0x2d4>)
 8002026:	fba3 2301 	umull	r2, r3, r3, r1
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2264      	movs	r2, #100	@ 0x64
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	1acb      	subs	r3, r1, r3
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800203a:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <UART_SetConfig+0x2d4>)
 800203c:	fba3 2302 	umull	r2, r3, r3, r2
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002048:	441c      	add	r4, r3
 800204a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800204e:	2200      	movs	r2, #0
 8002050:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002054:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800205c:	4642      	mov	r2, r8
 800205e:	464b      	mov	r3, r9
 8002060:	1891      	adds	r1, r2, r2
 8002062:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002064:	415b      	adcs	r3, r3
 8002066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800206c:	4641      	mov	r1, r8
 800206e:	1851      	adds	r1, r2, r1
 8002070:	6339      	str	r1, [r7, #48]	@ 0x30
 8002072:	4649      	mov	r1, r9
 8002074:	414b      	adcs	r3, r1
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002084:	4659      	mov	r1, fp
 8002086:	00cb      	lsls	r3, r1, #3
 8002088:	4651      	mov	r1, sl
 800208a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800208e:	4651      	mov	r1, sl
 8002090:	00ca      	lsls	r2, r1, #3
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4603      	mov	r3, r0
 8002098:	4642      	mov	r2, r8
 800209a:	189b      	adds	r3, r3, r2
 800209c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020a0:	464b      	mov	r3, r9
 80020a2:	460a      	mov	r2, r1
 80020a4:	eb42 0303 	adc.w	r3, r2, r3
 80020a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80020b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80020bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80020c0:	460b      	mov	r3, r1
 80020c2:	18db      	adds	r3, r3, r3
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020c6:	4613      	mov	r3, r2
 80020c8:	eb42 0303 	adc.w	r3, r2, r3
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80020d6:	f7fe f895 	bl	8000204 <__aeabi_uldivmod>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4b0d      	ldr	r3, [pc, #52]	@ (8002114 <UART_SetConfig+0x2d4>)
 80020e0:	fba3 1302 	umull	r1, r3, r3, r2
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	2164      	movs	r1, #100	@ 0x64
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	3332      	adds	r3, #50	@ 0x32
 80020f2:	4a08      	ldr	r2, [pc, #32]	@ (8002114 <UART_SetConfig+0x2d4>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	f003 0207 	and.w	r2, r3, #7
 80020fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4422      	add	r2, r4
 8002106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002108:	e106      	b.n	8002318 <UART_SetConfig+0x4d8>
 800210a:	bf00      	nop
 800210c:	40011000 	.word	0x40011000
 8002110:	40011400 	.word	0x40011400
 8002114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800211c:	2200      	movs	r2, #0
 800211e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002122:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800212a:	4642      	mov	r2, r8
 800212c:	464b      	mov	r3, r9
 800212e:	1891      	adds	r1, r2, r2
 8002130:	6239      	str	r1, [r7, #32]
 8002132:	415b      	adcs	r3, r3
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
 8002136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800213a:	4641      	mov	r1, r8
 800213c:	1854      	adds	r4, r2, r1
 800213e:	4649      	mov	r1, r9
 8002140:	eb43 0501 	adc.w	r5, r3, r1
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	00eb      	lsls	r3, r5, #3
 800214e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002152:	00e2      	lsls	r2, r4, #3
 8002154:	4614      	mov	r4, r2
 8002156:	461d      	mov	r5, r3
 8002158:	4643      	mov	r3, r8
 800215a:	18e3      	adds	r3, r4, r3
 800215c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002160:	464b      	mov	r3, r9
 8002162:	eb45 0303 	adc.w	r3, r5, r3
 8002166:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800216a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002176:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002186:	4629      	mov	r1, r5
 8002188:	008b      	lsls	r3, r1, #2
 800218a:	4621      	mov	r1, r4
 800218c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002190:	4621      	mov	r1, r4
 8002192:	008a      	lsls	r2, r1, #2
 8002194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002198:	f7fe f834 	bl	8000204 <__aeabi_uldivmod>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4b60      	ldr	r3, [pc, #384]	@ (8002324 <UART_SetConfig+0x4e4>)
 80021a2:	fba3 2302 	umull	r2, r3, r3, r2
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	011c      	lsls	r4, r3, #4
 80021aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ae:	2200      	movs	r2, #0
 80021b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80021bc:	4642      	mov	r2, r8
 80021be:	464b      	mov	r3, r9
 80021c0:	1891      	adds	r1, r2, r2
 80021c2:	61b9      	str	r1, [r7, #24]
 80021c4:	415b      	adcs	r3, r3
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021cc:	4641      	mov	r1, r8
 80021ce:	1851      	adds	r1, r2, r1
 80021d0:	6139      	str	r1, [r7, #16]
 80021d2:	4649      	mov	r1, r9
 80021d4:	414b      	adcs	r3, r1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021e4:	4659      	mov	r1, fp
 80021e6:	00cb      	lsls	r3, r1, #3
 80021e8:	4651      	mov	r1, sl
 80021ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ee:	4651      	mov	r1, sl
 80021f0:	00ca      	lsls	r2, r1, #3
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	4642      	mov	r2, r8
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002200:	464b      	mov	r3, r9
 8002202:	460a      	mov	r2, r1
 8002204:	eb42 0303 	adc.w	r3, r2, r3
 8002208:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800220c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002216:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002224:	4649      	mov	r1, r9
 8002226:	008b      	lsls	r3, r1, #2
 8002228:	4641      	mov	r1, r8
 800222a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800222e:	4641      	mov	r1, r8
 8002230:	008a      	lsls	r2, r1, #2
 8002232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002236:	f7fd ffe5 	bl	8000204 <__aeabi_uldivmod>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4611      	mov	r1, r2
 8002240:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <UART_SetConfig+0x4e4>)
 8002242:	fba3 2301 	umull	r2, r3, r3, r1
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2264      	movs	r2, #100	@ 0x64
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	1acb      	subs	r3, r1, r3
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	3332      	adds	r3, #50	@ 0x32
 8002254:	4a33      	ldr	r2, [pc, #204]	@ (8002324 <UART_SetConfig+0x4e4>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002260:	441c      	add	r4, r3
 8002262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002266:	2200      	movs	r2, #0
 8002268:	673b      	str	r3, [r7, #112]	@ 0x70
 800226a:	677a      	str	r2, [r7, #116]	@ 0x74
 800226c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002270:	4642      	mov	r2, r8
 8002272:	464b      	mov	r3, r9
 8002274:	1891      	adds	r1, r2, r2
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	415b      	adcs	r3, r3
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002280:	4641      	mov	r1, r8
 8002282:	1851      	adds	r1, r2, r1
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	4649      	mov	r1, r9
 8002288:	414b      	adcs	r3, r1
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002298:	4659      	mov	r1, fp
 800229a:	00cb      	lsls	r3, r1, #3
 800229c:	4651      	mov	r1, sl
 800229e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022a2:	4651      	mov	r1, sl
 80022a4:	00ca      	lsls	r2, r1, #3
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	4642      	mov	r2, r8
 80022ae:	189b      	adds	r3, r3, r2
 80022b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022b2:	464b      	mov	r3, r9
 80022b4:	460a      	mov	r2, r1
 80022b6:	eb42 0303 	adc.w	r3, r2, r3
 80022ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80022c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80022d4:	4649      	mov	r1, r9
 80022d6:	008b      	lsls	r3, r1, #2
 80022d8:	4641      	mov	r1, r8
 80022da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022de:	4641      	mov	r1, r8
 80022e0:	008a      	lsls	r2, r1, #2
 80022e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80022e6:	f7fd ff8d 	bl	8000204 <__aeabi_uldivmod>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <UART_SetConfig+0x4e4>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	2164      	movs	r1, #100	@ 0x64
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	3332      	adds	r3, #50	@ 0x32
 8002302:	4a08      	ldr	r2, [pc, #32]	@ (8002324 <UART_SetConfig+0x4e4>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	f003 020f 	and.w	r2, r3, #15
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4422      	add	r2, r4
 8002316:	609a      	str	r2, [r3, #8]
}
 8002318:	bf00      	nop
 800231a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800231e:	46bd      	mov	sp, r7
 8002320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002324:	51eb851f 	.word	0x51eb851f

08002328 <std>:
 8002328:	2300      	movs	r3, #0
 800232a:	b510      	push	{r4, lr}
 800232c:	4604      	mov	r4, r0
 800232e:	e9c0 3300 	strd	r3, r3, [r0]
 8002332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002336:	6083      	str	r3, [r0, #8]
 8002338:	8181      	strh	r1, [r0, #12]
 800233a:	6643      	str	r3, [r0, #100]	@ 0x64
 800233c:	81c2      	strh	r2, [r0, #14]
 800233e:	6183      	str	r3, [r0, #24]
 8002340:	4619      	mov	r1, r3
 8002342:	2208      	movs	r2, #8
 8002344:	305c      	adds	r0, #92	@ 0x5c
 8002346:	f000 f9e7 	bl	8002718 <memset>
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <std+0x58>)
 800234c:	6263      	str	r3, [r4, #36]	@ 0x24
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <std+0x5c>)
 8002350:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <std+0x60>)
 8002354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002356:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <std+0x64>)
 8002358:	6323      	str	r3, [r4, #48]	@ 0x30
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <std+0x68>)
 800235c:	6224      	str	r4, [r4, #32]
 800235e:	429c      	cmp	r4, r3
 8002360:	d006      	beq.n	8002370 <std+0x48>
 8002362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002366:	4294      	cmp	r4, r2
 8002368:	d002      	beq.n	8002370 <std+0x48>
 800236a:	33d0      	adds	r3, #208	@ 0xd0
 800236c:	429c      	cmp	r4, r3
 800236e:	d105      	bne.n	800237c <std+0x54>
 8002370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002378:	f000 ba46 	b.w	8002808 <__retarget_lock_init_recursive>
 800237c:	bd10      	pop	{r4, pc}
 800237e:	bf00      	nop
 8002380:	08002569 	.word	0x08002569
 8002384:	0800258b 	.word	0x0800258b
 8002388:	080025c3 	.word	0x080025c3
 800238c:	080025e7 	.word	0x080025e7
 8002390:	200000d4 	.word	0x200000d4

08002394 <stdio_exit_handler>:
 8002394:	4a02      	ldr	r2, [pc, #8]	@ (80023a0 <stdio_exit_handler+0xc>)
 8002396:	4903      	ldr	r1, [pc, #12]	@ (80023a4 <stdio_exit_handler+0x10>)
 8002398:	4803      	ldr	r0, [pc, #12]	@ (80023a8 <stdio_exit_handler+0x14>)
 800239a:	f000 b869 	b.w	8002470 <_fwalk_sglue>
 800239e:	bf00      	nop
 80023a0:	2000000c 	.word	0x2000000c
 80023a4:	08002b09 	.word	0x08002b09
 80023a8:	2000001c 	.word	0x2000001c

080023ac <cleanup_stdio>:
 80023ac:	6841      	ldr	r1, [r0, #4]
 80023ae:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <cleanup_stdio+0x34>)
 80023b0:	4299      	cmp	r1, r3
 80023b2:	b510      	push	{r4, lr}
 80023b4:	4604      	mov	r4, r0
 80023b6:	d001      	beq.n	80023bc <cleanup_stdio+0x10>
 80023b8:	f000 fba6 	bl	8002b08 <_fflush_r>
 80023bc:	68a1      	ldr	r1, [r4, #8]
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <cleanup_stdio+0x38>)
 80023c0:	4299      	cmp	r1, r3
 80023c2:	d002      	beq.n	80023ca <cleanup_stdio+0x1e>
 80023c4:	4620      	mov	r0, r4
 80023c6:	f000 fb9f 	bl	8002b08 <_fflush_r>
 80023ca:	68e1      	ldr	r1, [r4, #12]
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <cleanup_stdio+0x3c>)
 80023ce:	4299      	cmp	r1, r3
 80023d0:	d004      	beq.n	80023dc <cleanup_stdio+0x30>
 80023d2:	4620      	mov	r0, r4
 80023d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023d8:	f000 bb96 	b.w	8002b08 <_fflush_r>
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	bf00      	nop
 80023e0:	200000d4 	.word	0x200000d4
 80023e4:	2000013c 	.word	0x2000013c
 80023e8:	200001a4 	.word	0x200001a4

080023ec <global_stdio_init.part.0>:
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <global_stdio_init.part.0+0x30>)
 80023f0:	4c0b      	ldr	r4, [pc, #44]	@ (8002420 <global_stdio_init.part.0+0x34>)
 80023f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <global_stdio_init.part.0+0x38>)
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	4620      	mov	r0, r4
 80023f8:	2200      	movs	r2, #0
 80023fa:	2104      	movs	r1, #4
 80023fc:	f7ff ff94 	bl	8002328 <std>
 8002400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002404:	2201      	movs	r2, #1
 8002406:	2109      	movs	r1, #9
 8002408:	f7ff ff8e 	bl	8002328 <std>
 800240c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002410:	2202      	movs	r2, #2
 8002412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002416:	2112      	movs	r1, #18
 8002418:	f7ff bf86 	b.w	8002328 <std>
 800241c:	2000020c 	.word	0x2000020c
 8002420:	200000d4 	.word	0x200000d4
 8002424:	08002395 	.word	0x08002395

08002428 <__sfp_lock_acquire>:
 8002428:	4801      	ldr	r0, [pc, #4]	@ (8002430 <__sfp_lock_acquire+0x8>)
 800242a:	f000 b9ee 	b.w	800280a <__retarget_lock_acquire_recursive>
 800242e:	bf00      	nop
 8002430:	20000215 	.word	0x20000215

08002434 <__sfp_lock_release>:
 8002434:	4801      	ldr	r0, [pc, #4]	@ (800243c <__sfp_lock_release+0x8>)
 8002436:	f000 b9e9 	b.w	800280c <__retarget_lock_release_recursive>
 800243a:	bf00      	nop
 800243c:	20000215 	.word	0x20000215

08002440 <__sinit>:
 8002440:	b510      	push	{r4, lr}
 8002442:	4604      	mov	r4, r0
 8002444:	f7ff fff0 	bl	8002428 <__sfp_lock_acquire>
 8002448:	6a23      	ldr	r3, [r4, #32]
 800244a:	b11b      	cbz	r3, 8002454 <__sinit+0x14>
 800244c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002450:	f7ff bff0 	b.w	8002434 <__sfp_lock_release>
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <__sinit+0x28>)
 8002456:	6223      	str	r3, [r4, #32]
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__sinit+0x2c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f5      	bne.n	800244c <__sinit+0xc>
 8002460:	f7ff ffc4 	bl	80023ec <global_stdio_init.part.0>
 8002464:	e7f2      	b.n	800244c <__sinit+0xc>
 8002466:	bf00      	nop
 8002468:	080023ad 	.word	0x080023ad
 800246c:	2000020c 	.word	0x2000020c

08002470 <_fwalk_sglue>:
 8002470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002474:	4607      	mov	r7, r0
 8002476:	4688      	mov	r8, r1
 8002478:	4614      	mov	r4, r2
 800247a:	2600      	movs	r6, #0
 800247c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002480:	f1b9 0901 	subs.w	r9, r9, #1
 8002484:	d505      	bpl.n	8002492 <_fwalk_sglue+0x22>
 8002486:	6824      	ldr	r4, [r4, #0]
 8002488:	2c00      	cmp	r4, #0
 800248a:	d1f7      	bne.n	800247c <_fwalk_sglue+0xc>
 800248c:	4630      	mov	r0, r6
 800248e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002492:	89ab      	ldrh	r3, [r5, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d907      	bls.n	80024a8 <_fwalk_sglue+0x38>
 8002498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800249c:	3301      	adds	r3, #1
 800249e:	d003      	beq.n	80024a8 <_fwalk_sglue+0x38>
 80024a0:	4629      	mov	r1, r5
 80024a2:	4638      	mov	r0, r7
 80024a4:	47c0      	blx	r8
 80024a6:	4306      	orrs	r6, r0
 80024a8:	3568      	adds	r5, #104	@ 0x68
 80024aa:	e7e9      	b.n	8002480 <_fwalk_sglue+0x10>

080024ac <_puts_r>:
 80024ac:	6a03      	ldr	r3, [r0, #32]
 80024ae:	b570      	push	{r4, r5, r6, lr}
 80024b0:	6884      	ldr	r4, [r0, #8]
 80024b2:	4605      	mov	r5, r0
 80024b4:	460e      	mov	r6, r1
 80024b6:	b90b      	cbnz	r3, 80024bc <_puts_r+0x10>
 80024b8:	f7ff ffc2 	bl	8002440 <__sinit>
 80024bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024be:	07db      	lsls	r3, r3, #31
 80024c0:	d405      	bmi.n	80024ce <_puts_r+0x22>
 80024c2:	89a3      	ldrh	r3, [r4, #12]
 80024c4:	0598      	lsls	r0, r3, #22
 80024c6:	d402      	bmi.n	80024ce <_puts_r+0x22>
 80024c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024ca:	f000 f99e 	bl	800280a <__retarget_lock_acquire_recursive>
 80024ce:	89a3      	ldrh	r3, [r4, #12]
 80024d0:	0719      	lsls	r1, r3, #28
 80024d2:	d502      	bpl.n	80024da <_puts_r+0x2e>
 80024d4:	6923      	ldr	r3, [r4, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d135      	bne.n	8002546 <_puts_r+0x9a>
 80024da:	4621      	mov	r1, r4
 80024dc:	4628      	mov	r0, r5
 80024de:	f000 f8c5 	bl	800266c <__swsetup_r>
 80024e2:	b380      	cbz	r0, 8002546 <_puts_r+0x9a>
 80024e4:	f04f 35ff 	mov.w	r5, #4294967295
 80024e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024ea:	07da      	lsls	r2, r3, #31
 80024ec:	d405      	bmi.n	80024fa <_puts_r+0x4e>
 80024ee:	89a3      	ldrh	r3, [r4, #12]
 80024f0:	059b      	lsls	r3, r3, #22
 80024f2:	d402      	bmi.n	80024fa <_puts_r+0x4e>
 80024f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024f6:	f000 f989 	bl	800280c <__retarget_lock_release_recursive>
 80024fa:	4628      	mov	r0, r5
 80024fc:	bd70      	pop	{r4, r5, r6, pc}
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da04      	bge.n	800250c <_puts_r+0x60>
 8002502:	69a2      	ldr	r2, [r4, #24]
 8002504:	429a      	cmp	r2, r3
 8002506:	dc17      	bgt.n	8002538 <_puts_r+0x8c>
 8002508:	290a      	cmp	r1, #10
 800250a:	d015      	beq.n	8002538 <_puts_r+0x8c>
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	6022      	str	r2, [r4, #0]
 8002512:	7019      	strb	r1, [r3, #0]
 8002514:	68a3      	ldr	r3, [r4, #8]
 8002516:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800251a:	3b01      	subs	r3, #1
 800251c:	60a3      	str	r3, [r4, #8]
 800251e:	2900      	cmp	r1, #0
 8002520:	d1ed      	bne.n	80024fe <_puts_r+0x52>
 8002522:	2b00      	cmp	r3, #0
 8002524:	da11      	bge.n	800254a <_puts_r+0x9e>
 8002526:	4622      	mov	r2, r4
 8002528:	210a      	movs	r1, #10
 800252a:	4628      	mov	r0, r5
 800252c:	f000 f85f 	bl	80025ee <__swbuf_r>
 8002530:	3001      	adds	r0, #1
 8002532:	d0d7      	beq.n	80024e4 <_puts_r+0x38>
 8002534:	250a      	movs	r5, #10
 8002536:	e7d7      	b.n	80024e8 <_puts_r+0x3c>
 8002538:	4622      	mov	r2, r4
 800253a:	4628      	mov	r0, r5
 800253c:	f000 f857 	bl	80025ee <__swbuf_r>
 8002540:	3001      	adds	r0, #1
 8002542:	d1e7      	bne.n	8002514 <_puts_r+0x68>
 8002544:	e7ce      	b.n	80024e4 <_puts_r+0x38>
 8002546:	3e01      	subs	r6, #1
 8002548:	e7e4      	b.n	8002514 <_puts_r+0x68>
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	6022      	str	r2, [r4, #0]
 8002550:	220a      	movs	r2, #10
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e7ee      	b.n	8002534 <_puts_r+0x88>
	...

08002558 <puts>:
 8002558:	4b02      	ldr	r3, [pc, #8]	@ (8002564 <puts+0xc>)
 800255a:	4601      	mov	r1, r0
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	f7ff bfa5 	b.w	80024ac <_puts_r>
 8002562:	bf00      	nop
 8002564:	20000018 	.word	0x20000018

08002568 <__sread>:
 8002568:	b510      	push	{r4, lr}
 800256a:	460c      	mov	r4, r1
 800256c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002570:	f000 f8fc 	bl	800276c <_read_r>
 8002574:	2800      	cmp	r0, #0
 8002576:	bfab      	itete	ge
 8002578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800257a:	89a3      	ldrhlt	r3, [r4, #12]
 800257c:	181b      	addge	r3, r3, r0
 800257e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002582:	bfac      	ite	ge
 8002584:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002586:	81a3      	strhlt	r3, [r4, #12]
 8002588:	bd10      	pop	{r4, pc}

0800258a <__swrite>:
 800258a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800258e:	461f      	mov	r7, r3
 8002590:	898b      	ldrh	r3, [r1, #12]
 8002592:	05db      	lsls	r3, r3, #23
 8002594:	4605      	mov	r5, r0
 8002596:	460c      	mov	r4, r1
 8002598:	4616      	mov	r6, r2
 800259a:	d505      	bpl.n	80025a8 <__swrite+0x1e>
 800259c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025a0:	2302      	movs	r3, #2
 80025a2:	2200      	movs	r2, #0
 80025a4:	f000 f8d0 	bl	8002748 <_lseek_r>
 80025a8:	89a3      	ldrh	r3, [r4, #12]
 80025aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025b2:	81a3      	strh	r3, [r4, #12]
 80025b4:	4632      	mov	r2, r6
 80025b6:	463b      	mov	r3, r7
 80025b8:	4628      	mov	r0, r5
 80025ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025be:	f000 b8e7 	b.w	8002790 <_write_r>

080025c2 <__sseek>:
 80025c2:	b510      	push	{r4, lr}
 80025c4:	460c      	mov	r4, r1
 80025c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ca:	f000 f8bd 	bl	8002748 <_lseek_r>
 80025ce:	1c43      	adds	r3, r0, #1
 80025d0:	89a3      	ldrh	r3, [r4, #12]
 80025d2:	bf15      	itete	ne
 80025d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80025d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80025da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80025de:	81a3      	strheq	r3, [r4, #12]
 80025e0:	bf18      	it	ne
 80025e2:	81a3      	strhne	r3, [r4, #12]
 80025e4:	bd10      	pop	{r4, pc}

080025e6 <__sclose>:
 80025e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ea:	f000 b89d 	b.w	8002728 <_close_r>

080025ee <__swbuf_r>:
 80025ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f0:	460e      	mov	r6, r1
 80025f2:	4614      	mov	r4, r2
 80025f4:	4605      	mov	r5, r0
 80025f6:	b118      	cbz	r0, 8002600 <__swbuf_r+0x12>
 80025f8:	6a03      	ldr	r3, [r0, #32]
 80025fa:	b90b      	cbnz	r3, 8002600 <__swbuf_r+0x12>
 80025fc:	f7ff ff20 	bl	8002440 <__sinit>
 8002600:	69a3      	ldr	r3, [r4, #24]
 8002602:	60a3      	str	r3, [r4, #8]
 8002604:	89a3      	ldrh	r3, [r4, #12]
 8002606:	071a      	lsls	r2, r3, #28
 8002608:	d501      	bpl.n	800260e <__swbuf_r+0x20>
 800260a:	6923      	ldr	r3, [r4, #16]
 800260c:	b943      	cbnz	r3, 8002620 <__swbuf_r+0x32>
 800260e:	4621      	mov	r1, r4
 8002610:	4628      	mov	r0, r5
 8002612:	f000 f82b 	bl	800266c <__swsetup_r>
 8002616:	b118      	cbz	r0, 8002620 <__swbuf_r+0x32>
 8002618:	f04f 37ff 	mov.w	r7, #4294967295
 800261c:	4638      	mov	r0, r7
 800261e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	6922      	ldr	r2, [r4, #16]
 8002624:	1a98      	subs	r0, r3, r2
 8002626:	6963      	ldr	r3, [r4, #20]
 8002628:	b2f6      	uxtb	r6, r6
 800262a:	4283      	cmp	r3, r0
 800262c:	4637      	mov	r7, r6
 800262e:	dc05      	bgt.n	800263c <__swbuf_r+0x4e>
 8002630:	4621      	mov	r1, r4
 8002632:	4628      	mov	r0, r5
 8002634:	f000 fa68 	bl	8002b08 <_fflush_r>
 8002638:	2800      	cmp	r0, #0
 800263a:	d1ed      	bne.n	8002618 <__swbuf_r+0x2a>
 800263c:	68a3      	ldr	r3, [r4, #8]
 800263e:	3b01      	subs	r3, #1
 8002640:	60a3      	str	r3, [r4, #8]
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	6022      	str	r2, [r4, #0]
 8002648:	701e      	strb	r6, [r3, #0]
 800264a:	6962      	ldr	r2, [r4, #20]
 800264c:	1c43      	adds	r3, r0, #1
 800264e:	429a      	cmp	r2, r3
 8002650:	d004      	beq.n	800265c <__swbuf_r+0x6e>
 8002652:	89a3      	ldrh	r3, [r4, #12]
 8002654:	07db      	lsls	r3, r3, #31
 8002656:	d5e1      	bpl.n	800261c <__swbuf_r+0x2e>
 8002658:	2e0a      	cmp	r6, #10
 800265a:	d1df      	bne.n	800261c <__swbuf_r+0x2e>
 800265c:	4621      	mov	r1, r4
 800265e:	4628      	mov	r0, r5
 8002660:	f000 fa52 	bl	8002b08 <_fflush_r>
 8002664:	2800      	cmp	r0, #0
 8002666:	d0d9      	beq.n	800261c <__swbuf_r+0x2e>
 8002668:	e7d6      	b.n	8002618 <__swbuf_r+0x2a>
	...

0800266c <__swsetup_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4b29      	ldr	r3, [pc, #164]	@ (8002714 <__swsetup_r+0xa8>)
 8002670:	4605      	mov	r5, r0
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	460c      	mov	r4, r1
 8002676:	b118      	cbz	r0, 8002680 <__swsetup_r+0x14>
 8002678:	6a03      	ldr	r3, [r0, #32]
 800267a:	b90b      	cbnz	r3, 8002680 <__swsetup_r+0x14>
 800267c:	f7ff fee0 	bl	8002440 <__sinit>
 8002680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002684:	0719      	lsls	r1, r3, #28
 8002686:	d422      	bmi.n	80026ce <__swsetup_r+0x62>
 8002688:	06da      	lsls	r2, r3, #27
 800268a:	d407      	bmi.n	800269c <__swsetup_r+0x30>
 800268c:	2209      	movs	r2, #9
 800268e:	602a      	str	r2, [r5, #0]
 8002690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002694:	81a3      	strh	r3, [r4, #12]
 8002696:	f04f 30ff 	mov.w	r0, #4294967295
 800269a:	e033      	b.n	8002704 <__swsetup_r+0x98>
 800269c:	0758      	lsls	r0, r3, #29
 800269e:	d512      	bpl.n	80026c6 <__swsetup_r+0x5a>
 80026a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026a2:	b141      	cbz	r1, 80026b6 <__swsetup_r+0x4a>
 80026a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026a8:	4299      	cmp	r1, r3
 80026aa:	d002      	beq.n	80026b2 <__swsetup_r+0x46>
 80026ac:	4628      	mov	r0, r5
 80026ae:	f000 f8af 	bl	8002810 <_free_r>
 80026b2:	2300      	movs	r3, #0
 80026b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80026b6:	89a3      	ldrh	r3, [r4, #12]
 80026b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80026bc:	81a3      	strh	r3, [r4, #12]
 80026be:	2300      	movs	r3, #0
 80026c0:	6063      	str	r3, [r4, #4]
 80026c2:	6923      	ldr	r3, [r4, #16]
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	89a3      	ldrh	r3, [r4, #12]
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	81a3      	strh	r3, [r4, #12]
 80026ce:	6923      	ldr	r3, [r4, #16]
 80026d0:	b94b      	cbnz	r3, 80026e6 <__swsetup_r+0x7a>
 80026d2:	89a3      	ldrh	r3, [r4, #12]
 80026d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80026d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026dc:	d003      	beq.n	80026e6 <__swsetup_r+0x7a>
 80026de:	4621      	mov	r1, r4
 80026e0:	4628      	mov	r0, r5
 80026e2:	f000 fa5f 	bl	8002ba4 <__smakebuf_r>
 80026e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ea:	f013 0201 	ands.w	r2, r3, #1
 80026ee:	d00a      	beq.n	8002706 <__swsetup_r+0x9a>
 80026f0:	2200      	movs	r2, #0
 80026f2:	60a2      	str	r2, [r4, #8]
 80026f4:	6962      	ldr	r2, [r4, #20]
 80026f6:	4252      	negs	r2, r2
 80026f8:	61a2      	str	r2, [r4, #24]
 80026fa:	6922      	ldr	r2, [r4, #16]
 80026fc:	b942      	cbnz	r2, 8002710 <__swsetup_r+0xa4>
 80026fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002702:	d1c5      	bne.n	8002690 <__swsetup_r+0x24>
 8002704:	bd38      	pop	{r3, r4, r5, pc}
 8002706:	0799      	lsls	r1, r3, #30
 8002708:	bf58      	it	pl
 800270a:	6962      	ldrpl	r2, [r4, #20]
 800270c:	60a2      	str	r2, [r4, #8]
 800270e:	e7f4      	b.n	80026fa <__swsetup_r+0x8e>
 8002710:	2000      	movs	r0, #0
 8002712:	e7f7      	b.n	8002704 <__swsetup_r+0x98>
 8002714:	20000018 	.word	0x20000018

08002718 <memset>:
 8002718:	4402      	add	r2, r0
 800271a:	4603      	mov	r3, r0
 800271c:	4293      	cmp	r3, r2
 800271e:	d100      	bne.n	8002722 <memset+0xa>
 8002720:	4770      	bx	lr
 8002722:	f803 1b01 	strb.w	r1, [r3], #1
 8002726:	e7f9      	b.n	800271c <memset+0x4>

08002728 <_close_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4d06      	ldr	r5, [pc, #24]	@ (8002744 <_close_r+0x1c>)
 800272c:	2300      	movs	r3, #0
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	f7fe f962 	bl	80009fc <_close>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d102      	bne.n	8002742 <_close_r+0x1a>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	b103      	cbz	r3, 8002742 <_close_r+0x1a>
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	20000210 	.word	0x20000210

08002748 <_lseek_r>:
 8002748:	b538      	push	{r3, r4, r5, lr}
 800274a:	4d07      	ldr	r5, [pc, #28]	@ (8002768 <_lseek_r+0x20>)
 800274c:	4604      	mov	r4, r0
 800274e:	4608      	mov	r0, r1
 8002750:	4611      	mov	r1, r2
 8002752:	2200      	movs	r2, #0
 8002754:	602a      	str	r2, [r5, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	f7fe f977 	bl	8000a4a <_lseek>
 800275c:	1c43      	adds	r3, r0, #1
 800275e:	d102      	bne.n	8002766 <_lseek_r+0x1e>
 8002760:	682b      	ldr	r3, [r5, #0]
 8002762:	b103      	cbz	r3, 8002766 <_lseek_r+0x1e>
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	bd38      	pop	{r3, r4, r5, pc}
 8002768:	20000210 	.word	0x20000210

0800276c <_read_r>:
 800276c:	b538      	push	{r3, r4, r5, lr}
 800276e:	4d07      	ldr	r5, [pc, #28]	@ (800278c <_read_r+0x20>)
 8002770:	4604      	mov	r4, r0
 8002772:	4608      	mov	r0, r1
 8002774:	4611      	mov	r1, r2
 8002776:	2200      	movs	r2, #0
 8002778:	602a      	str	r2, [r5, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	f7fe f905 	bl	800098a <_read>
 8002780:	1c43      	adds	r3, r0, #1
 8002782:	d102      	bne.n	800278a <_read_r+0x1e>
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	b103      	cbz	r3, 800278a <_read_r+0x1e>
 8002788:	6023      	str	r3, [r4, #0]
 800278a:	bd38      	pop	{r3, r4, r5, pc}
 800278c:	20000210 	.word	0x20000210

08002790 <_write_r>:
 8002790:	b538      	push	{r3, r4, r5, lr}
 8002792:	4d07      	ldr	r5, [pc, #28]	@ (80027b0 <_write_r+0x20>)
 8002794:	4604      	mov	r4, r0
 8002796:	4608      	mov	r0, r1
 8002798:	4611      	mov	r1, r2
 800279a:	2200      	movs	r2, #0
 800279c:	602a      	str	r2, [r5, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	f7fe f910 	bl	80009c4 <_write>
 80027a4:	1c43      	adds	r3, r0, #1
 80027a6:	d102      	bne.n	80027ae <_write_r+0x1e>
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	b103      	cbz	r3, 80027ae <_write_r+0x1e>
 80027ac:	6023      	str	r3, [r4, #0]
 80027ae:	bd38      	pop	{r3, r4, r5, pc}
 80027b0:	20000210 	.word	0x20000210

080027b4 <__errno>:
 80027b4:	4b01      	ldr	r3, [pc, #4]	@ (80027bc <__errno+0x8>)
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000018 	.word	0x20000018

080027c0 <__libc_init_array>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	4d0d      	ldr	r5, [pc, #52]	@ (80027f8 <__libc_init_array+0x38>)
 80027c4:	4c0d      	ldr	r4, [pc, #52]	@ (80027fc <__libc_init_array+0x3c>)
 80027c6:	1b64      	subs	r4, r4, r5
 80027c8:	10a4      	asrs	r4, r4, #2
 80027ca:	2600      	movs	r6, #0
 80027cc:	42a6      	cmp	r6, r4
 80027ce:	d109      	bne.n	80027e4 <__libc_init_array+0x24>
 80027d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002800 <__libc_init_array+0x40>)
 80027d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002804 <__libc_init_array+0x44>)
 80027d4:	f000 fa54 	bl	8002c80 <_init>
 80027d8:	1b64      	subs	r4, r4, r5
 80027da:	10a4      	asrs	r4, r4, #2
 80027dc:	2600      	movs	r6, #0
 80027de:	42a6      	cmp	r6, r4
 80027e0:	d105      	bne.n	80027ee <__libc_init_array+0x2e>
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e8:	4798      	blx	r3
 80027ea:	3601      	adds	r6, #1
 80027ec:	e7ee      	b.n	80027cc <__libc_init_array+0xc>
 80027ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f2:	4798      	blx	r3
 80027f4:	3601      	adds	r6, #1
 80027f6:	e7f2      	b.n	80027de <__libc_init_array+0x1e>
 80027f8:	08002cc4 	.word	0x08002cc4
 80027fc:	08002cc4 	.word	0x08002cc4
 8002800:	08002cc4 	.word	0x08002cc4
 8002804:	08002cc8 	.word	0x08002cc8

08002808 <__retarget_lock_init_recursive>:
 8002808:	4770      	bx	lr

0800280a <__retarget_lock_acquire_recursive>:
 800280a:	4770      	bx	lr

0800280c <__retarget_lock_release_recursive>:
 800280c:	4770      	bx	lr
	...

08002810 <_free_r>:
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4605      	mov	r5, r0
 8002814:	2900      	cmp	r1, #0
 8002816:	d041      	beq.n	800289c <_free_r+0x8c>
 8002818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800281c:	1f0c      	subs	r4, r1, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	bfb8      	it	lt
 8002822:	18e4      	addlt	r4, r4, r3
 8002824:	f000 f8e0 	bl	80029e8 <__malloc_lock>
 8002828:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <_free_r+0x90>)
 800282a:	6813      	ldr	r3, [r2, #0]
 800282c:	b933      	cbnz	r3, 800283c <_free_r+0x2c>
 800282e:	6063      	str	r3, [r4, #4]
 8002830:	6014      	str	r4, [r2, #0]
 8002832:	4628      	mov	r0, r5
 8002834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002838:	f000 b8dc 	b.w	80029f4 <__malloc_unlock>
 800283c:	42a3      	cmp	r3, r4
 800283e:	d908      	bls.n	8002852 <_free_r+0x42>
 8002840:	6820      	ldr	r0, [r4, #0]
 8002842:	1821      	adds	r1, r4, r0
 8002844:	428b      	cmp	r3, r1
 8002846:	bf01      	itttt	eq
 8002848:	6819      	ldreq	r1, [r3, #0]
 800284a:	685b      	ldreq	r3, [r3, #4]
 800284c:	1809      	addeq	r1, r1, r0
 800284e:	6021      	streq	r1, [r4, #0]
 8002850:	e7ed      	b.n	800282e <_free_r+0x1e>
 8002852:	461a      	mov	r2, r3
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	b10b      	cbz	r3, 800285c <_free_r+0x4c>
 8002858:	42a3      	cmp	r3, r4
 800285a:	d9fa      	bls.n	8002852 <_free_r+0x42>
 800285c:	6811      	ldr	r1, [r2, #0]
 800285e:	1850      	adds	r0, r2, r1
 8002860:	42a0      	cmp	r0, r4
 8002862:	d10b      	bne.n	800287c <_free_r+0x6c>
 8002864:	6820      	ldr	r0, [r4, #0]
 8002866:	4401      	add	r1, r0
 8002868:	1850      	adds	r0, r2, r1
 800286a:	4283      	cmp	r3, r0
 800286c:	6011      	str	r1, [r2, #0]
 800286e:	d1e0      	bne.n	8002832 <_free_r+0x22>
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	6053      	str	r3, [r2, #4]
 8002876:	4408      	add	r0, r1
 8002878:	6010      	str	r0, [r2, #0]
 800287a:	e7da      	b.n	8002832 <_free_r+0x22>
 800287c:	d902      	bls.n	8002884 <_free_r+0x74>
 800287e:	230c      	movs	r3, #12
 8002880:	602b      	str	r3, [r5, #0]
 8002882:	e7d6      	b.n	8002832 <_free_r+0x22>
 8002884:	6820      	ldr	r0, [r4, #0]
 8002886:	1821      	adds	r1, r4, r0
 8002888:	428b      	cmp	r3, r1
 800288a:	bf04      	itt	eq
 800288c:	6819      	ldreq	r1, [r3, #0]
 800288e:	685b      	ldreq	r3, [r3, #4]
 8002890:	6063      	str	r3, [r4, #4]
 8002892:	bf04      	itt	eq
 8002894:	1809      	addeq	r1, r1, r0
 8002896:	6021      	streq	r1, [r4, #0]
 8002898:	6054      	str	r4, [r2, #4]
 800289a:	e7ca      	b.n	8002832 <_free_r+0x22>
 800289c:	bd38      	pop	{r3, r4, r5, pc}
 800289e:	bf00      	nop
 80028a0:	2000021c 	.word	0x2000021c

080028a4 <sbrk_aligned>:
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	4e0f      	ldr	r6, [pc, #60]	@ (80028e4 <sbrk_aligned+0x40>)
 80028a8:	460c      	mov	r4, r1
 80028aa:	6831      	ldr	r1, [r6, #0]
 80028ac:	4605      	mov	r5, r0
 80028ae:	b911      	cbnz	r1, 80028b6 <sbrk_aligned+0x12>
 80028b0:	f000 f9d6 	bl	8002c60 <_sbrk_r>
 80028b4:	6030      	str	r0, [r6, #0]
 80028b6:	4621      	mov	r1, r4
 80028b8:	4628      	mov	r0, r5
 80028ba:	f000 f9d1 	bl	8002c60 <_sbrk_r>
 80028be:	1c43      	adds	r3, r0, #1
 80028c0:	d103      	bne.n	80028ca <sbrk_aligned+0x26>
 80028c2:	f04f 34ff 	mov.w	r4, #4294967295
 80028c6:	4620      	mov	r0, r4
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
 80028ca:	1cc4      	adds	r4, r0, #3
 80028cc:	f024 0403 	bic.w	r4, r4, #3
 80028d0:	42a0      	cmp	r0, r4
 80028d2:	d0f8      	beq.n	80028c6 <sbrk_aligned+0x22>
 80028d4:	1a21      	subs	r1, r4, r0
 80028d6:	4628      	mov	r0, r5
 80028d8:	f000 f9c2 	bl	8002c60 <_sbrk_r>
 80028dc:	3001      	adds	r0, #1
 80028de:	d1f2      	bne.n	80028c6 <sbrk_aligned+0x22>
 80028e0:	e7ef      	b.n	80028c2 <sbrk_aligned+0x1e>
 80028e2:	bf00      	nop
 80028e4:	20000218 	.word	0x20000218

080028e8 <_malloc_r>:
 80028e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028ec:	1ccd      	adds	r5, r1, #3
 80028ee:	f025 0503 	bic.w	r5, r5, #3
 80028f2:	3508      	adds	r5, #8
 80028f4:	2d0c      	cmp	r5, #12
 80028f6:	bf38      	it	cc
 80028f8:	250c      	movcc	r5, #12
 80028fa:	2d00      	cmp	r5, #0
 80028fc:	4606      	mov	r6, r0
 80028fe:	db01      	blt.n	8002904 <_malloc_r+0x1c>
 8002900:	42a9      	cmp	r1, r5
 8002902:	d904      	bls.n	800290e <_malloc_r+0x26>
 8002904:	230c      	movs	r3, #12
 8002906:	6033      	str	r3, [r6, #0]
 8002908:	2000      	movs	r0, #0
 800290a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800290e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029e4 <_malloc_r+0xfc>
 8002912:	f000 f869 	bl	80029e8 <__malloc_lock>
 8002916:	f8d8 3000 	ldr.w	r3, [r8]
 800291a:	461c      	mov	r4, r3
 800291c:	bb44      	cbnz	r4, 8002970 <_malloc_r+0x88>
 800291e:	4629      	mov	r1, r5
 8002920:	4630      	mov	r0, r6
 8002922:	f7ff ffbf 	bl	80028a4 <sbrk_aligned>
 8002926:	1c43      	adds	r3, r0, #1
 8002928:	4604      	mov	r4, r0
 800292a:	d158      	bne.n	80029de <_malloc_r+0xf6>
 800292c:	f8d8 4000 	ldr.w	r4, [r8]
 8002930:	4627      	mov	r7, r4
 8002932:	2f00      	cmp	r7, #0
 8002934:	d143      	bne.n	80029be <_malloc_r+0xd6>
 8002936:	2c00      	cmp	r4, #0
 8002938:	d04b      	beq.n	80029d2 <_malloc_r+0xea>
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	4639      	mov	r1, r7
 800293e:	4630      	mov	r0, r6
 8002940:	eb04 0903 	add.w	r9, r4, r3
 8002944:	f000 f98c 	bl	8002c60 <_sbrk_r>
 8002948:	4581      	cmp	r9, r0
 800294a:	d142      	bne.n	80029d2 <_malloc_r+0xea>
 800294c:	6821      	ldr	r1, [r4, #0]
 800294e:	1a6d      	subs	r5, r5, r1
 8002950:	4629      	mov	r1, r5
 8002952:	4630      	mov	r0, r6
 8002954:	f7ff ffa6 	bl	80028a4 <sbrk_aligned>
 8002958:	3001      	adds	r0, #1
 800295a:	d03a      	beq.n	80029d2 <_malloc_r+0xea>
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	442b      	add	r3, r5
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	f8d8 3000 	ldr.w	r3, [r8]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	bb62      	cbnz	r2, 80029c4 <_malloc_r+0xdc>
 800296a:	f8c8 7000 	str.w	r7, [r8]
 800296e:	e00f      	b.n	8002990 <_malloc_r+0xa8>
 8002970:	6822      	ldr	r2, [r4, #0]
 8002972:	1b52      	subs	r2, r2, r5
 8002974:	d420      	bmi.n	80029b8 <_malloc_r+0xd0>
 8002976:	2a0b      	cmp	r2, #11
 8002978:	d917      	bls.n	80029aa <_malloc_r+0xc2>
 800297a:	1961      	adds	r1, r4, r5
 800297c:	42a3      	cmp	r3, r4
 800297e:	6025      	str	r5, [r4, #0]
 8002980:	bf18      	it	ne
 8002982:	6059      	strne	r1, [r3, #4]
 8002984:	6863      	ldr	r3, [r4, #4]
 8002986:	bf08      	it	eq
 8002988:	f8c8 1000 	streq.w	r1, [r8]
 800298c:	5162      	str	r2, [r4, r5]
 800298e:	604b      	str	r3, [r1, #4]
 8002990:	4630      	mov	r0, r6
 8002992:	f000 f82f 	bl	80029f4 <__malloc_unlock>
 8002996:	f104 000b 	add.w	r0, r4, #11
 800299a:	1d23      	adds	r3, r4, #4
 800299c:	f020 0007 	bic.w	r0, r0, #7
 80029a0:	1ac2      	subs	r2, r0, r3
 80029a2:	bf1c      	itt	ne
 80029a4:	1a1b      	subne	r3, r3, r0
 80029a6:	50a3      	strne	r3, [r4, r2]
 80029a8:	e7af      	b.n	800290a <_malloc_r+0x22>
 80029aa:	6862      	ldr	r2, [r4, #4]
 80029ac:	42a3      	cmp	r3, r4
 80029ae:	bf0c      	ite	eq
 80029b0:	f8c8 2000 	streq.w	r2, [r8]
 80029b4:	605a      	strne	r2, [r3, #4]
 80029b6:	e7eb      	b.n	8002990 <_malloc_r+0xa8>
 80029b8:	4623      	mov	r3, r4
 80029ba:	6864      	ldr	r4, [r4, #4]
 80029bc:	e7ae      	b.n	800291c <_malloc_r+0x34>
 80029be:	463c      	mov	r4, r7
 80029c0:	687f      	ldr	r7, [r7, #4]
 80029c2:	e7b6      	b.n	8002932 <_malloc_r+0x4a>
 80029c4:	461a      	mov	r2, r3
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	42a3      	cmp	r3, r4
 80029ca:	d1fb      	bne.n	80029c4 <_malloc_r+0xdc>
 80029cc:	2300      	movs	r3, #0
 80029ce:	6053      	str	r3, [r2, #4]
 80029d0:	e7de      	b.n	8002990 <_malloc_r+0xa8>
 80029d2:	230c      	movs	r3, #12
 80029d4:	6033      	str	r3, [r6, #0]
 80029d6:	4630      	mov	r0, r6
 80029d8:	f000 f80c 	bl	80029f4 <__malloc_unlock>
 80029dc:	e794      	b.n	8002908 <_malloc_r+0x20>
 80029de:	6005      	str	r5, [r0, #0]
 80029e0:	e7d6      	b.n	8002990 <_malloc_r+0xa8>
 80029e2:	bf00      	nop
 80029e4:	2000021c 	.word	0x2000021c

080029e8 <__malloc_lock>:
 80029e8:	4801      	ldr	r0, [pc, #4]	@ (80029f0 <__malloc_lock+0x8>)
 80029ea:	f7ff bf0e 	b.w	800280a <__retarget_lock_acquire_recursive>
 80029ee:	bf00      	nop
 80029f0:	20000214 	.word	0x20000214

080029f4 <__malloc_unlock>:
 80029f4:	4801      	ldr	r0, [pc, #4]	@ (80029fc <__malloc_unlock+0x8>)
 80029f6:	f7ff bf09 	b.w	800280c <__retarget_lock_release_recursive>
 80029fa:	bf00      	nop
 80029fc:	20000214 	.word	0x20000214

08002a00 <__sflush_r>:
 8002a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a08:	0716      	lsls	r6, r2, #28
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	d454      	bmi.n	8002aba <__sflush_r+0xba>
 8002a10:	684b      	ldr	r3, [r1, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	dc02      	bgt.n	8002a1c <__sflush_r+0x1c>
 8002a16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	dd48      	ble.n	8002aae <__sflush_r+0xae>
 8002a1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a1e:	2e00      	cmp	r6, #0
 8002a20:	d045      	beq.n	8002aae <__sflush_r+0xae>
 8002a22:	2300      	movs	r3, #0
 8002a24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a28:	682f      	ldr	r7, [r5, #0]
 8002a2a:	6a21      	ldr	r1, [r4, #32]
 8002a2c:	602b      	str	r3, [r5, #0]
 8002a2e:	d030      	beq.n	8002a92 <__sflush_r+0x92>
 8002a30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a32:	89a3      	ldrh	r3, [r4, #12]
 8002a34:	0759      	lsls	r1, r3, #29
 8002a36:	d505      	bpl.n	8002a44 <__sflush_r+0x44>
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	1ad2      	subs	r2, r2, r3
 8002a3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a3e:	b10b      	cbz	r3, 8002a44 <__sflush_r+0x44>
 8002a40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	2300      	movs	r3, #0
 8002a46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a48:	6a21      	ldr	r1, [r4, #32]
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	47b0      	blx	r6
 8002a4e:	1c43      	adds	r3, r0, #1
 8002a50:	89a3      	ldrh	r3, [r4, #12]
 8002a52:	d106      	bne.n	8002a62 <__sflush_r+0x62>
 8002a54:	6829      	ldr	r1, [r5, #0]
 8002a56:	291d      	cmp	r1, #29
 8002a58:	d82b      	bhi.n	8002ab2 <__sflush_r+0xb2>
 8002a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b04 <__sflush_r+0x104>)
 8002a5c:	40ca      	lsrs	r2, r1
 8002a5e:	07d6      	lsls	r6, r2, #31
 8002a60:	d527      	bpl.n	8002ab2 <__sflush_r+0xb2>
 8002a62:	2200      	movs	r2, #0
 8002a64:	6062      	str	r2, [r4, #4]
 8002a66:	04d9      	lsls	r1, r3, #19
 8002a68:	6922      	ldr	r2, [r4, #16]
 8002a6a:	6022      	str	r2, [r4, #0]
 8002a6c:	d504      	bpl.n	8002a78 <__sflush_r+0x78>
 8002a6e:	1c42      	adds	r2, r0, #1
 8002a70:	d101      	bne.n	8002a76 <__sflush_r+0x76>
 8002a72:	682b      	ldr	r3, [r5, #0]
 8002a74:	b903      	cbnz	r3, 8002a78 <__sflush_r+0x78>
 8002a76:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a7a:	602f      	str	r7, [r5, #0]
 8002a7c:	b1b9      	cbz	r1, 8002aae <__sflush_r+0xae>
 8002a7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a82:	4299      	cmp	r1, r3
 8002a84:	d002      	beq.n	8002a8c <__sflush_r+0x8c>
 8002a86:	4628      	mov	r0, r5
 8002a88:	f7ff fec2 	bl	8002810 <_free_r>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a90:	e00d      	b.n	8002aae <__sflush_r+0xae>
 8002a92:	2301      	movs	r3, #1
 8002a94:	4628      	mov	r0, r5
 8002a96:	47b0      	blx	r6
 8002a98:	4602      	mov	r2, r0
 8002a9a:	1c50      	adds	r0, r2, #1
 8002a9c:	d1c9      	bne.n	8002a32 <__sflush_r+0x32>
 8002a9e:	682b      	ldr	r3, [r5, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0c6      	beq.n	8002a32 <__sflush_r+0x32>
 8002aa4:	2b1d      	cmp	r3, #29
 8002aa6:	d001      	beq.n	8002aac <__sflush_r+0xac>
 8002aa8:	2b16      	cmp	r3, #22
 8002aaa:	d11e      	bne.n	8002aea <__sflush_r+0xea>
 8002aac:	602f      	str	r7, [r5, #0]
 8002aae:	2000      	movs	r0, #0
 8002ab0:	e022      	b.n	8002af8 <__sflush_r+0xf8>
 8002ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ab6:	b21b      	sxth	r3, r3
 8002ab8:	e01b      	b.n	8002af2 <__sflush_r+0xf2>
 8002aba:	690f      	ldr	r7, [r1, #16]
 8002abc:	2f00      	cmp	r7, #0
 8002abe:	d0f6      	beq.n	8002aae <__sflush_r+0xae>
 8002ac0:	0793      	lsls	r3, r2, #30
 8002ac2:	680e      	ldr	r6, [r1, #0]
 8002ac4:	bf08      	it	eq
 8002ac6:	694b      	ldreq	r3, [r1, #20]
 8002ac8:	600f      	str	r7, [r1, #0]
 8002aca:	bf18      	it	ne
 8002acc:	2300      	movne	r3, #0
 8002ace:	eba6 0807 	sub.w	r8, r6, r7
 8002ad2:	608b      	str	r3, [r1, #8]
 8002ad4:	f1b8 0f00 	cmp.w	r8, #0
 8002ad8:	dde9      	ble.n	8002aae <__sflush_r+0xae>
 8002ada:	6a21      	ldr	r1, [r4, #32]
 8002adc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002ade:	4643      	mov	r3, r8
 8002ae0:	463a      	mov	r2, r7
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	47b0      	blx	r6
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	dc08      	bgt.n	8002afc <__sflush_r+0xfc>
 8002aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002af2:	81a3      	strh	r3, [r4, #12]
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002afc:	4407      	add	r7, r0
 8002afe:	eba8 0800 	sub.w	r8, r8, r0
 8002b02:	e7e7      	b.n	8002ad4 <__sflush_r+0xd4>
 8002b04:	20400001 	.word	0x20400001

08002b08 <_fflush_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	690b      	ldr	r3, [r1, #16]
 8002b0c:	4605      	mov	r5, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	b913      	cbnz	r3, 8002b18 <_fflush_r+0x10>
 8002b12:	2500      	movs	r5, #0
 8002b14:	4628      	mov	r0, r5
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
 8002b18:	b118      	cbz	r0, 8002b22 <_fflush_r+0x1a>
 8002b1a:	6a03      	ldr	r3, [r0, #32]
 8002b1c:	b90b      	cbnz	r3, 8002b22 <_fflush_r+0x1a>
 8002b1e:	f7ff fc8f 	bl	8002440 <__sinit>
 8002b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f3      	beq.n	8002b12 <_fflush_r+0xa>
 8002b2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b2c:	07d0      	lsls	r0, r2, #31
 8002b2e:	d404      	bmi.n	8002b3a <_fflush_r+0x32>
 8002b30:	0599      	lsls	r1, r3, #22
 8002b32:	d402      	bmi.n	8002b3a <_fflush_r+0x32>
 8002b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b36:	f7ff fe68 	bl	800280a <__retarget_lock_acquire_recursive>
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	f7ff ff5f 	bl	8002a00 <__sflush_r>
 8002b42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b44:	07da      	lsls	r2, r3, #31
 8002b46:	4605      	mov	r5, r0
 8002b48:	d4e4      	bmi.n	8002b14 <_fflush_r+0xc>
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	059b      	lsls	r3, r3, #22
 8002b4e:	d4e1      	bmi.n	8002b14 <_fflush_r+0xc>
 8002b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b52:	f7ff fe5b 	bl	800280c <__retarget_lock_release_recursive>
 8002b56:	e7dd      	b.n	8002b14 <_fflush_r+0xc>

08002b58 <__swhatbuf_r>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b60:	2900      	cmp	r1, #0
 8002b62:	b096      	sub	sp, #88	@ 0x58
 8002b64:	4615      	mov	r5, r2
 8002b66:	461e      	mov	r6, r3
 8002b68:	da0d      	bge.n	8002b86 <__swhatbuf_r+0x2e>
 8002b6a:	89a3      	ldrh	r3, [r4, #12]
 8002b6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2340      	movne	r3, #64	@ 0x40
 8002b78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	6031      	str	r1, [r6, #0]
 8002b80:	602b      	str	r3, [r5, #0]
 8002b82:	b016      	add	sp, #88	@ 0x58
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	466a      	mov	r2, sp
 8002b88:	f000 f848 	bl	8002c1c <_fstat_r>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	dbec      	blt.n	8002b6a <__swhatbuf_r+0x12>
 8002b90:	9901      	ldr	r1, [sp, #4]
 8002b92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002b96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002b9a:	4259      	negs	r1, r3
 8002b9c:	4159      	adcs	r1, r3
 8002b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ba2:	e7eb      	b.n	8002b7c <__swhatbuf_r+0x24>

08002ba4 <__smakebuf_r>:
 8002ba4:	898b      	ldrh	r3, [r1, #12]
 8002ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ba8:	079d      	lsls	r5, r3, #30
 8002baa:	4606      	mov	r6, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	d507      	bpl.n	8002bc0 <__smakebuf_r+0x1c>
 8002bb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002bb4:	6023      	str	r3, [r4, #0]
 8002bb6:	6123      	str	r3, [r4, #16]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	6163      	str	r3, [r4, #20]
 8002bbc:	b003      	add	sp, #12
 8002bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc0:	ab01      	add	r3, sp, #4
 8002bc2:	466a      	mov	r2, sp
 8002bc4:	f7ff ffc8 	bl	8002b58 <__swhatbuf_r>
 8002bc8:	9f00      	ldr	r7, [sp, #0]
 8002bca:	4605      	mov	r5, r0
 8002bcc:	4639      	mov	r1, r7
 8002bce:	4630      	mov	r0, r6
 8002bd0:	f7ff fe8a 	bl	80028e8 <_malloc_r>
 8002bd4:	b948      	cbnz	r0, 8002bea <__smakebuf_r+0x46>
 8002bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bda:	059a      	lsls	r2, r3, #22
 8002bdc:	d4ee      	bmi.n	8002bbc <__smakebuf_r+0x18>
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	81a3      	strh	r3, [r4, #12]
 8002be8:	e7e2      	b.n	8002bb0 <__smakebuf_r+0xc>
 8002bea:	89a3      	ldrh	r3, [r4, #12]
 8002bec:	6020      	str	r0, [r4, #0]
 8002bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf2:	81a3      	strh	r3, [r4, #12]
 8002bf4:	9b01      	ldr	r3, [sp, #4]
 8002bf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002bfa:	b15b      	cbz	r3, 8002c14 <__smakebuf_r+0x70>
 8002bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c00:	4630      	mov	r0, r6
 8002c02:	f000 f81d 	bl	8002c40 <_isatty_r>
 8002c06:	b128      	cbz	r0, 8002c14 <__smakebuf_r+0x70>
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	81a3      	strh	r3, [r4, #12]
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	431d      	orrs	r5, r3
 8002c18:	81a5      	strh	r5, [r4, #12]
 8002c1a:	e7cf      	b.n	8002bbc <__smakebuf_r+0x18>

08002c1c <_fstat_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4d07      	ldr	r5, [pc, #28]	@ (8002c3c <_fstat_r+0x20>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	602b      	str	r3, [r5, #0]
 8002c2a:	f7fd fef3 	bl	8000a14 <_fstat>
 8002c2e:	1c43      	adds	r3, r0, #1
 8002c30:	d102      	bne.n	8002c38 <_fstat_r+0x1c>
 8002c32:	682b      	ldr	r3, [r5, #0]
 8002c34:	b103      	cbz	r3, 8002c38 <_fstat_r+0x1c>
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	bd38      	pop	{r3, r4, r5, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000210 	.word	0x20000210

08002c40 <_isatty_r>:
 8002c40:	b538      	push	{r3, r4, r5, lr}
 8002c42:	4d06      	ldr	r5, [pc, #24]	@ (8002c5c <_isatty_r+0x1c>)
 8002c44:	2300      	movs	r3, #0
 8002c46:	4604      	mov	r4, r0
 8002c48:	4608      	mov	r0, r1
 8002c4a:	602b      	str	r3, [r5, #0]
 8002c4c:	f7fd fef2 	bl	8000a34 <_isatty>
 8002c50:	1c43      	adds	r3, r0, #1
 8002c52:	d102      	bne.n	8002c5a <_isatty_r+0x1a>
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	b103      	cbz	r3, 8002c5a <_isatty_r+0x1a>
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	20000210 	.word	0x20000210

08002c60 <_sbrk_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4d06      	ldr	r5, [pc, #24]	@ (8002c7c <_sbrk_r+0x1c>)
 8002c64:	2300      	movs	r3, #0
 8002c66:	4604      	mov	r4, r0
 8002c68:	4608      	mov	r0, r1
 8002c6a:	602b      	str	r3, [r5, #0]
 8002c6c:	f7fd fefa 	bl	8000a64 <_sbrk>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d102      	bne.n	8002c7a <_sbrk_r+0x1a>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	b103      	cbz	r3, 8002c7a <_sbrk_r+0x1a>
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	20000210 	.word	0x20000210

08002c80 <_init>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	bf00      	nop
 8002c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c86:	bc08      	pop	{r3}
 8002c88:	469e      	mov	lr, r3
 8002c8a:	4770      	bx	lr

08002c8c <_fini>:
 8002c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8e:	bf00      	nop
 8002c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c92:	bc08      	pop	{r3}
 8002c94:	469e      	mov	lr, r3
 8002c96:	4770      	bx	lr
